import unittest;
from ctypes import *;
from ctypes.test import need_symbol;
from test import test_support;

class StringArrayTestCase(unittest.TestCase){
    function test(){
        BUF = c_char * 4;

        buf = BUF("a", "b", "c");
        this.assertEqual(buf.value, "abc");
        this.assertEqual(buf.raw, "abc\000");

        buf.value = "ABCD";
        this.assertEqual(buf.value, "ABCD");
        this.assertEqual(buf.raw, "ABCD");

        buf.value = "x";
        this.assertEqual(buf.value, "x");
        this.assertEqual(buf.raw, "x\000CD");

        buf[1] = "Z";
        this.assertEqual(buf.value, "xZCD");
        this.assertEqual(buf.raw, "xZCD");

        this.assertRaises(ValueError, setattr, buf, "value", "aaaaaaaa");
        this.assertRaises(TypeError, setattr, buf, "value", 42);

    }
    function test_c_buffer_value( memoryview=memoryview){
        buf = c_buffer(32);

        buf.value = "Hello, World";
        this.assertEqual(buf.value, "Hello, World");

        this.assertRaises(TypeError, setattr, buf, "value", memoryview("Hello, World"));
        this.assertRaises(TypeError, setattr, buf, "value", memoryview("abc"));
        this.assertRaises(ValueError, setattr, buf, "raw", memoryview("x" * 100));

    }
    function test_c_buffer_raw( memoryview=memoryview){
        buf = c_buffer(32);

        buf.raw = memoryview("Hello, World");
        this.assertEqual(buf.value, "Hello, World");
        this.assertRaises(TypeError, setattr, buf, "value", memoryview("abc"));
        this.assertRaises(ValueError, setattr, buf, "raw", memoryview("x" * 100));

    }
    function test_c_buffer_deprecated(){
        # Compatibility with 2.x
        with test_support.check_py3k_warnings(){
            this.test_c_buffer_value(buffer);
            this.test_c_buffer_raw(buffer);

    }
    } function test_param_1(){
        BUF = c_char * 4;
        buf = BUF();
##        print c_char_p.from_param(buf)

    }
    function test_param_2(){
        BUF = c_char * 4;
        buf = BUF();
##        print BUF.from_param(c_char_p("python"))
##        print BUF.from_param(BUF(*"pyth"))

    }
    function test_del_segfault(){
        BUF = c_char * 4;
        buf = BUF();
        with this.assertRaises(AttributeError){
            del buf.raw;


}
} } @need_symbol('c_wchar');
class WStringArrayTestCase(unittest.TestCase){
    function test(){
        BUF = c_wchar * 4;

        buf = BUF(u"a", u"b", u"c");
        this.assertEqual(buf.value, u"abc");

        buf.value = u"ABCD";
        this.assertEqual(buf.value, u"ABCD");

        buf.value = u"x";
        this.assertEqual(buf.value, u"x");

        buf[1] = u"Z";
        this.assertEqual(buf.value, u"xZCD");

}
} class StringTestCase(unittest.TestCase){
    @unittest.skip('test disabled');
    function test_basic_strings(){
        cs = c_string("abcdef");

        # Cannot call len on a c_string any longer
        this.assertRaises(TypeError, len, cs);
        this.assertEqual(sizeof(cs), 7);

        # The value property is the string up to the first terminating NUL.
        this.assertEqual(cs.value, "abcdef");
        this.assertEqual(c_string("abc\000def").value, "abc");

        # The raw property is the total buffer contents:
        this.assertEqual(cs.raw, "abcdef\000");
        this.assertEqual(c_string("abc\000def").raw, "abc\000def\000");

        # We can change the value:
        cs.value = "ab";
        this.assertEqual(cs.value, "ab");
        this.assertEqual(cs.raw, "ab\000\000\000\000\000");

        cs.raw = "XY";
        this.assertEqual(cs.value, "XY");
        this.assertEqual(cs.raw, "XY\000\000\000\000\000");

        this.assertRaises(TypeError, c_string, u"123");

    }
    @unittest.skip('test disabled');
    function test_sized_strings(){

        # New in releases later than 0.4.0:
        this.assertRaises(TypeError, c_string, nil);

        # New in releases later than 0.4.0:
        # c_string(number) returns an empty string of size number
        this.assertEqual(len(c_string(32).raw), 32);
        this.assertRaises(ValueError, c_string, -1);
        this.assertRaises(ValueError, c_string, 0);

        # These tests fail, because it is no longer initialized
##        self.assertEqual(c_string(2).value, "")
##        self.assertEqual(c_string(2).raw, "\000\000")
        this.assertEqual(c_string(2).raw[-1], "\000");
        this.assertEqual(len(c_string(2).raw), 2);

    }
    @unittest.skip('test disabled');
    function test_initialized_strings(){

        this.assertEqual(c_string("ab", 4).raw[:2], "ab");
        this.assertEqual(c_string("ab", 4).raw[:2:], "ab");
        this.assertEqual(c_string("ab", 4).raw[:2:-1], "ba");
        this.assertEqual(c_string("ab", 4).raw[:2:2], "a");
        this.assertEqual(c_string("ab", 4).raw[-1], "\000");
        this.assertEqual(c_string("ab", 2).raw, "a\000");

    }
    @unittest.skip('test disabled');
    function test_toolong(){
        cs = c_string("abcdef");
        # Much too long string:
        this.assertRaises(ValueError, setattr, cs, "value", "123456789012345");

        # One char too long values:
        this.assertRaises(ValueError, setattr, cs, "value", "1234567");

    }
    @unittest.skip('test disabled');
    function test_perf(){
        check_perf();

}
} @need_symbol('c_wchar');
class WStringTestCase(unittest.TestCase){
    function test_wchar(){
        c_wchar(u"x");
        repr(byref(c_wchar(u"x")));
        c_wchar("x");


    }
    @unittest.skip('test disabled');
    function test_basic_wstrings(){
        cs = c_wstring(u"abcdef");

        # XXX This behaviour is about to change:
        # len returns the size of the internal buffer in bytes.
        # This includes the terminating NUL character.
        this.assertEqual(sizeof(cs), 14);

        # The value property is the string up to the first terminating NUL.
        this.assertEqual(cs.value, u"abcdef");
        this.assertEqual(c_wstring(u"abc\000def").value, u"abc");

        this.assertEqual(c_wstring(u"abc\000def").value, u"abc");

        # The raw property is the total buffer contents:
        this.assertEqual(cs.raw, u"abcdef\000");
        this.assertEqual(c_wstring(u"abc\000def").raw, u"abc\000def\000");

        # We can change the value:
        cs.value = u"ab";
        this.assertEqual(cs.value, u"ab");
        this.assertEqual(cs.raw, u"ab\000\000\000\000\000");

        this.assertRaises(TypeError, c_wstring, "123");
        this.assertRaises(ValueError, c_wstring, 0);

    }
    @unittest.skip('test disabled');
    function test_toolong(){
        cs = c_wstring(u"abcdef");
        # Much too long string:
        this.assertRaises(ValueError, setattr, cs, "value", u"123456789012345");

        # One char too long values:
        this.assertRaises(ValueError, setattr, cs, "value", u"1234567");


}
} function run_test(rep, msg, func, arg){
    items = range(rep);
    from time import clock;
    start = clock();
    for i in items{
        func(arg); func(arg); func(arg); func(arg); func(arg);
    } stop = clock();
    print "%20s: %.2f us" % (msg, ((stop-start)*1e6/5/rep));

}
function check_perf(){
    # Construct 5 objects

    REP = 200000;

    run_test(REP, "c_string(None)", c_string, nil);
    run_test(REP, "c_string('abc')", c_string, 'abc');

# Python 2.3 -OO, win2k, P4 700 MHz:
#
#      c_string(None): 1.75 us
#     c_string('abc'): 2.74 us

# Python 2.2 -OO, win2k, P4 700 MHz:
#
#      c_string(None): 2.95 us
#     c_string('abc'): 3.67 us


}
if __name__ == '__main__'{
##    check_perf()
    unittest.main();

}