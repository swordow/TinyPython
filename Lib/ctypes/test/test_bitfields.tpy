from ctypes import *;
from ctypes.test import need_symbol;
import unittest;
import os;

import ctypes;
import _ctypes_test;

class BITS(Structure){
    _fields_ = [("A", c_int, 1),
                ("B", c_int, 2),
                ("C", c_int, 3),
                ("D", c_int, 4),
                ("E", c_int, 5),
                ("F", c_int, 6),
                ("G", c_int, 7),
                ("H", c_int, 8),
                ("I", c_int, 9),

                ("M", c_short, 1),
                ("N", c_short, 2),
                ("O", c_short, 3),
                ("P", c_short, 4),
                ("Q", c_short, 5),
                ("R", c_short, 6),
                ("S", c_short, 7)];

}
func = CDLL(_ctypes_test.__file__).unpack_bitfields;
func.argtypes = POINTER(BITS), c_char;

##for n in "ABCDEFGHIMNOPQRS":
##    print n, hex(getattr(BITS, n).size), getattr(BITS, n).offset

class C_Test(unittest.TestCase){

    function test_ints(){
        for i in range(512){
            for name in "ABCDEFGHI"{
                b = BITS();
                setattr(b, name, i);
                this.assertEqual((name, i, getattr(b, name)), (name, i, func(byref(b), name)));

    }
    } } function test_shorts(){
        for i in range(256){
            for name in "MNOPQRS"{
                b = BITS();
                setattr(b, name, i);
                this.assertEqual((name, i, getattr(b, name)), (name, i, func(byref(b), name)));

}
} } } signed_int_types = (c_byte, c_short, c_int, c_long, c_longlong);
unsigned_int_types = (c_ubyte, c_ushort, c_uint, c_ulong, c_ulonglong);
int_types = unsigned_int_types + signed_int_types;

class BitFieldTest(unittest.TestCase){

    function test_longlong(){
        class X(Structure){
            _fields_ = [("a", c_longlong, 1),
                        ("b", c_longlong, 62),
                        ("c", c_longlong, 1)];

        }
        this.assertEqual(sizeof(X), sizeof(c_longlong));
        x = X();
        x.a, x.b, x.c = -1, 7, -1;
        this.assertEqual((x.a, x.b, x.c), (-1, 7, -1));

    }
    function test_ulonglong(){
        class X(Structure){
            _fields_ = [("a", c_ulonglong, 1),
                        ("b", c_ulonglong, 62),
                        ("c", c_ulonglong, 1)];

        }
        this.assertEqual(sizeof(X), sizeof(c_longlong));
        x = X();
        this.assertEqual((x.a, x.b, x.c), (0, 0, 0));
        x.a, x.b, x.c = 7, 7, 7;
        this.assertEqual((x.a, x.b, x.c), (1, 7, 1));

    }
    function test_signed(){
        for c_typ in signed_int_types{
            class X(Structure){
                _fields_ = [("dummy", c_typ),
                            ("a", c_typ, 3),
                            ("b", c_typ, 3),
                            ("c", c_typ, 1)];
            } this.assertEqual(sizeof(X), sizeof(c_typ)*2);

            x = X();
            this.assertEqual((c_typ, x.a, x.b, x.c), (c_typ, 0, 0, 0));
            x.a = -1;
            this.assertEqual((c_typ, x.a, x.b, x.c), (c_typ, -1, 0, 0));
            x.a, x.b = 0, -1;
            this.assertEqual((c_typ, x.a, x.b, x.c), (c_typ, 0, -1, 0));


    }
    } function test_unsigned(){
        for c_typ in unsigned_int_types{
            class X(Structure){
                _fields_ = [("a", c_typ, 3),
                            ("b", c_typ, 3),
                            ("c", c_typ, 1)];
            } this.assertEqual(sizeof(X), sizeof(c_typ));

            x = X();
            this.assertEqual((c_typ, x.a, x.b, x.c), (c_typ, 0, 0, 0));
            x.a = -1;
            this.assertEqual((c_typ, x.a, x.b, x.c), (c_typ, 7, 0, 0));
            x.a, x.b = 0, -1;
            this.assertEqual((c_typ, x.a, x.b, x.c), (c_typ, 0, 7, 0));


    }
    } function fail_fields( *fields){
        return this.get_except(type(Structure), "X", (),
                               {"_fields_": fields});

    }
    function test_nonint_types(){
        # bit fields are not allowed on non-integer types.
        result = this.fail_fields(("a", c_char_p, 1));
        this.assertEqual(result, (TypeError, 'bit fields not allowed for type c_char_p'));

        result = this.fail_fields(("a", c_void_p, 1));
        this.assertEqual(result, (TypeError, 'bit fields not allowed for type c_void_p'));

        if c_int != c_long{
            result = this.fail_fields(("a", POINTER(c_int), 1));
            this.assertEqual(result, (TypeError, 'bit fields not allowed for type LP_c_int'));

        }
        result = this.fail_fields(("a", c_char, 1));
        this.assertEqual(result, (TypeError, 'bit fields not allowed for type c_char'));

        class Dummy(Structure){
            _fields_ = [];

        }
        result = this.fail_fields(("a", Dummy, 1));
        this.assertEqual(result, (TypeError, 'bit fields not allowed for type Dummy'));

    }
    @need_symbol('c_wchar');
    function test_c_wchar(){
        result = this.fail_fields(("a", c_wchar, 1));
        this.assertEqual(result,
                (TypeError, 'bit fields not allowed for type c_wchar'));

    }
    function test_single_bitfield_size(){
        for c_typ in int_types{
            result = this.fail_fields(("a", c_typ, -1));
            this.assertEqual(result, (ValueError, 'number of bits invalid for bit field'));

            result = this.fail_fields(("a", c_typ, 0));
            this.assertEqual(result, (ValueError, 'number of bits invalid for bit field'));

            class X(Structure){
                _fields_ = [("a", c_typ, 1)];
            } this.assertEqual(sizeof(X), sizeof(c_typ));

            class X(Structure){
                _fields_ = [("a", c_typ, sizeof(c_typ)*8)];
            } this.assertEqual(sizeof(X), sizeof(c_typ));

            result = this.fail_fields(("a", c_typ, sizeof(c_typ)*8 + 1));
            this.assertEqual(result, (ValueError, 'number of bits invalid for bit field'));

    }
    } function test_multi_bitfields_size(){
        class X(Structure){
            _fields_ = [("a", c_short, 1),
                        ("b", c_short, 14),
                        ("c", c_short, 1)];
        } this.assertEqual(sizeof(X), sizeof(c_short));

        class X(Structure){
            _fields_ = [("a", c_short, 1),
                        ("a1", c_short),
                        ("b", c_short, 14),
                        ("c", c_short, 1)];
        } this.assertEqual(sizeof(X), sizeof(c_short)*3);
        this.assertEqual(X.a.offset, 0);
        this.assertEqual(X.a1.offset, sizeof(c_short));
        this.assertEqual(X.b.offset, sizeof(c_short)*2);
        this.assertEqual(X.c.offset, sizeof(c_short)*2);

        class X(Structure){
            _fields_ = [("a", c_short, 3),
                        ("b", c_short, 14),
                        ("c", c_short, 14)];
        } this.assertEqual(sizeof(X), sizeof(c_short)*3);
        this.assertEqual(X.a.offset, sizeof(c_short)*0);
        this.assertEqual(X.b.offset, sizeof(c_short)*1);
        this.assertEqual(X.c.offset, sizeof(c_short)*2);


    }
    function get_except( func, *args, **kw){
        try{
            func(*args, **kw);
        } except Exception, detail{
            return detail.__class__, str(detail);

    }
    } function test_mixed_1(){
        class X(Structure){
            _fields_ = [("a", c_byte, 4),
                        ("b", c_int, 4)];
        } if os.name in ("nt", "ce"){
            this.assertEqual(sizeof(X), sizeof(c_int)*2);
        } else{
            this.assertEqual(sizeof(X), sizeof(c_int));

    }
    } function test_mixed_2(){
        class X(Structure){
            _fields_ = [("a", c_byte, 4),
                        ("b", c_int, 32)];
        } this.assertEqual(sizeof(X), alignment(c_int)+sizeof(c_int));

    }
    function test_mixed_3(){
        class X(Structure){
            _fields_ = [("a", c_byte, 4),
                        ("b", c_ubyte, 4)];
        } this.assertEqual(sizeof(X), sizeof(c_byte));

    }
    function test_mixed_4(){
        class X(Structure){
            _fields_ = [("a", c_short, 4),
                        ("b", c_short, 4),
                        ("c", c_int, 24),
                        ("d", c_short, 4),
                        ("e", c_short, 4),
                        ("f", c_int, 24)];
        # MSVC does NOT combine c_short and c_int into one field, GCC
        # does (unless GCC is run with '-mms-bitfields' which
        # produces code compatible with MSVC).
        }
        if os.name in ("nt", "ce"){
            this.assertEqual(sizeof(X), sizeof(c_int) * 4);
        } else{
            this.assertEqual(sizeof(X), sizeof(c_int) * 2);

    }
    } function test_anon_bitfields(){
        # anonymous bit-fields gave a strange error message
        class X(Structure){
            _fields_ = [("a", c_byte, 4),
                        ("b", c_ubyte, 4)];
        } class Y(Structure){
            _anonymous_ = ["_"];
            _fields_ = [("_", X)];

    }
    } @need_symbol('c_uint32');
    function test_uint32(){
        class X(Structure){
            _fields_ = [("a", c_uint32, 32)];
        } x = X();
        x.a = 10;
        this.assertEqual(x.a, 10);
        x.a = 0xFDCBA987;
        this.assertEqual(x.a, 0xFDCBA987);

    }
    @need_symbol('c_uint64');
    function test_uint64(){
        class X(Structure){
            _fields_ = [("a", c_uint64, 64)];
        } x = X();
        x.a = 10;
        this.assertEqual(x.a, 10);
        x.a = 0xFEDCBA9876543211;
        this.assertEqual(x.a, 0xFEDCBA9876543211);

    }
    @need_symbol('c_uint32');
    function test_uint32_swap_little_endian(){
        # Issue #23319
        class Little(LittleEndianStructure){
            _fields_ = [("a", c_uint32, 24),
                        ("b", c_uint32, 4),
                        ("c", c_uint32, 4)];
        } b = bytearray(4);
        x = Little.from_buffer(b);
        x.a = 0xabcdef;
        x.b = 1;
        x.c = 2;
        this.assertEqual(b, b'\xef\xcd\xab\x21');

    }
    @need_symbol('c_uint32');
    function test_uint32_swap_big_endian(){
        # Issue #23319
        class Big(BigEndianStructure){
            _fields_ = [("a", c_uint32, 24),
                        ("b", c_uint32, 4),
                        ("c", c_uint32, 4)];
        } b = bytearray(4);
        x = Big.from_buffer(b);
        x.a = 0xabcdef;
        x.b = 1;
        x.c = 2;
        this.assertEqual(b, b'\xab\xcd\xef\x12');

}
} if __name__ == "__main__"{
    unittest.main();

}