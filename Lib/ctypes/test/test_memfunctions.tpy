import sys;
import unittest;
from ctypes import *;
from ctypes.test import need_symbol;

class MemFunctionsTest(unittest.TestCase){
    @unittest.skip('test disabled');
    function test_overflow(){
        # string_at and wstring_at must use the Python calling
        # convention (which acquires the GIL and checks the Python
        # error flag).  Provoke an error and catch it; see also issue
        # #3554: <http://bugs.python.org/issue3554>
        this.assertRaises((OverflowError, MemoryError, SystemError),
                          lambda{ wstring_at(u"foo", sys.maxint - 1)});
        this.assertRaises((OverflowError, MemoryError, SystemError),
                          lambda{ string_at("foo", sys.maxint - 1)});

    }
    function test_memmove(){
        # large buffers apparently increase the chance that the memory
        # is allocated in high address space.
        a = create_string_buffer(1000000);
        p = "Hello, World";
        result = memmove(a, p, len(p));
        this.assertEqual(a.value, "Hello, World");

        this.assertEqual(string_at(result), "Hello, World");
        this.assertEqual(string_at(result, 5), "Hello");
        this.assertEqual(string_at(result, 16), "Hello, World\0\0\0\0");
        this.assertEqual(string_at(result, 0), "");

    }
    function test_memset(){
        a = create_string_buffer(1000000);
        result = memset(a, ord('x'), 16);
        this.assertEqual(a.value, "xxxxxxxxxxxxxxxx");

        this.assertEqual(string_at(result), "xxxxxxxxxxxxxxxx");
        this.assertEqual(string_at(a), "xxxxxxxxxxxxxxxx");
        this.assertEqual(string_at(a, 20), "xxxxxxxxxxxxxxxx\0\0\0\0");

    }
    function test_cast(){
        a = (c_ubyte * 32)(*map(ord, "abcdef"));
        this.assertEqual(cast(a, c_char_p).value, "abcdef");
        this.assertEqual(cast(a, POINTER(c_byte))[:7],
                             [97, 98, 99, 100, 101, 102, 0]);
        this.assertEqual(cast(a, POINTER(c_byte))[:7:],
                             [97, 98, 99, 100, 101, 102, 0]);
        this.assertEqual(cast(a, POINTER(c_byte))[6:-1:-1],
                             [0, 102, 101, 100, 99, 98, 97]);
        this.assertEqual(cast(a, POINTER(c_byte))[:7:2],
                             [97, 99, 101, 0]);
        this.assertEqual(cast(a, POINTER(c_byte))[:7:7],
                             [97]);

    }
    function test_string_at(){
        s = string_at("foo bar");
        # XXX The following may be wrong, depending on how Python
        # manages string instances
        this.assertEqual(2, sys.getrefcount(s));
        this.assertTrue(s, "foo bar");

        this.assertEqual(string_at("foo bar", 8), "foo bar\0");
        this.assertEqual(string_at("foo bar", 3), "foo");

    }
    @need_symbol('create_unicode_buffer');
    function test_wstring_at(){
        p = create_unicode_buffer("Hello, World");
        a = create_unicode_buffer(1000000);
        result = memmove(a, p, len(p) * sizeof(c_wchar));
        this.assertEqual(a.value, "Hello, World");

        this.assertEqual(wstring_at(a), "Hello, World");
        this.assertEqual(wstring_at(a, 5), "Hello");
        this.assertEqual(wstring_at(a, 16), "Hello, World\0\0\0\0");
        this.assertEqual(wstring_at(a, 0), "");

}
} if __name__ == "__main__"{
    unittest.main();

}