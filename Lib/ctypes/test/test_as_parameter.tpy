import unittest;
from ctypes import *;
from ctypes.test import need_symbol;
import _ctypes_test;

dll = CDLL(_ctypes_test.__file__);

try{
    CALLBACK_FUNCTYPE = WINFUNCTYPE;
} except NameError{
    # fake to enable this test on Linux
    CALLBACK_FUNCTYPE = CFUNCTYPE;

}
class POINT(Structure){
    _fields_ = [("x", c_int), ("y", c_int)];

}
class BasicWrapTestCase(unittest.TestCase){
    function wrap( param){
        return param;

    }
    @need_symbol('c_wchar');
    function test_wchar_parm(){
        f = dll._testfunc_i_bhilfd;
        f.argtypes = [c_byte, c_wchar, c_int, c_long, c_float, c_double];
        result = f(this.wrap(1), this.wrap(u"x"), this.wrap(3), this.wrap(4), this.wrap(5.0), this.wrap(6.0));
        this.assertEqual(result, 139);
        this.assertIs(type(result), int);

    }
    function test_pointers(){
        f = dll._testfunc_p_p;
        f.restype = POINTER(c_int);
        f.argtypes = [POINTER(c_int)];

        # This only works if the value c_int(42) passed to the
        # function is still alive while the pointer (the result) is
        # used.

        v = c_int(42);

        this.assertEqual(pointer(v).contents.value, 42);
        result = f(this.wrap(pointer(v)));
        this.assertEqual(type(result), POINTER(c_int));
        this.assertEqual(result.contents.value, 42);

        # This on works...
        result = f(this.wrap(pointer(v)));
        this.assertEqual(result.contents.value, v.value);

        p = pointer(c_int(99));
        result = f(this.wrap(p));
        this.assertEqual(result.contents.value, 99);

    }
    function test_shorts(){
        f = dll._testfunc_callback_i_if;

        args = [];
        expected = [262144, 131072, 65536, 32768, 16384, 8192, 4096, 2048,
                    1024, 512, 256, 128, 64, 32, 16, 8, 4, 2, 1];

        function callback(v){
            args.append(v);
            return v;

        }
        CallBack = CFUNCTYPE(c_int, c_int);

        cb = CallBack(callback);
        f(this.wrap(2**18), this.wrap(cb));
        this.assertEqual(args, expected);

    ################################################################

    }
    function test_callbacks(){
        f = dll._testfunc_callback_i_if;
        f.restype = c_int;
        f.argtypes = nil;

        MyCallback = CFUNCTYPE(c_int, c_int);

        function callback(value){
            #print "called back with", value
            return value;

        }
        cb = MyCallback(callback);

        result = f(this.wrap(-10), this.wrap(cb));
        this.assertEqual(result, -18);

        # test with prototype
        f.argtypes = [c_int, MyCallback];
        cb = MyCallback(callback);

        result = f(this.wrap(-10), this.wrap(cb));
        this.assertEqual(result, -18);

        result = f(this.wrap(-10), this.wrap(cb));
        this.assertEqual(result, -18);

        AnotherCallback = CALLBACK_FUNCTYPE(c_int, c_int, c_int, c_int, c_int);

        # check that the prototype works: we call f with wrong
        # argument types
        cb = AnotherCallback(callback);
        this.assertRaises(ArgumentError, f, this.wrap(-10), this.wrap(cb));

    }
    function test_callbacks_2(){
        # Can also use simple datatypes as argument type specifiers
        # for the callback function.
        # In this case the call receives an instance of that type
        f = dll._testfunc_callback_i_if;
        f.restype = c_int;

        MyCallback = CFUNCTYPE(c_int, c_int);

        f.argtypes = [c_int, MyCallback];

        function callback(value){
            #print "called back with", value
            this.assertEqual(type(value), int);
            return value;

        }
        cb = MyCallback(callback);
        result = f(this.wrap(-10), this.wrap(cb));
        this.assertEqual(result, -18);

    }
    function test_longlong_callbacks(){

        f = dll._testfunc_callback_q_qf;
        f.restype = c_longlong;

        MyCallback = CFUNCTYPE(c_longlong, c_longlong);

        f.argtypes = [c_longlong, MyCallback];

        function callback(value){
            this.assertIsInstance(value, (int, long));
            return value & 0x7FFFFFFF;

        }
        cb = MyCallback(callback);

        this.assertEqual(13577625587, int(f(this.wrap(1000000000000), this.wrap(cb))));

    }
    function test_byval(){
        # without prototype
        ptin = POINT(1, 2);
        ptout = POINT();
        # EXPORT int _testfunc_byval(point in, point *pout)
        result = dll._testfunc_byval(ptin, byref(ptout));
        got = result, ptout.x, ptout.y;
        expected = 3, 1, 2;
        this.assertEqual(got, expected);

        # with prototype
        ptin = POINT(101, 102);
        ptout = POINT();
        dll._testfunc_byval.argtypes = (POINT, POINTER(POINT));
        dll._testfunc_byval.restype = c_int;
        result = dll._testfunc_byval(this.wrap(ptin), byref(ptout));
        got = result, ptout.x, ptout.y;
        expected = 203, 101, 102;
        this.assertEqual(got, expected);

    }
    function test_struct_return_2H(){
        class S2H(Structure){
            _fields_ = [("x", c_short),
                        ("y", c_short)];
        } dll.ret_2h_func.restype = S2H;
        dll.ret_2h_func.argtypes = [S2H];
        inp = S2H(99, 88);
        s2h = dll.ret_2h_func(this.wrap(inp));
        this.assertEqual((s2h.x, s2h.y), (99*2, 88*3));

    }
    function test_struct_return_8H(){
        class S8I(Structure){
            _fields_ = [("a", c_int),
                        ("b", c_int),
                        ("c", c_int),
                        ("d", c_int),
                        ("e", c_int),
                        ("f", c_int),
                        ("g", c_int),
                        ("h", c_int)];
        } dll.ret_8i_func.restype = S8I;
        dll.ret_8i_func.argtypes = [S8I];
        inp = S8I(9, 8, 7, 6, 5, 4, 3, 2);
        s8i = dll.ret_8i_func(this.wrap(inp));
        this.assertEqual((s8i.a, s8i.b, s8i.c, s8i.d, s8i.e, s8i.f, s8i.g, s8i.h),
                             (9*2, 8*3, 7*4, 6*5, 5*6, 4*7, 3*8, 2*9));

    }
    function test_recursive_as_param(){
        from ctypes import c_int;

        class A(object){
            pass;

        }
        a = A();
        a._as_parameter_ = a;
        with this.assertRaises(RuntimeError){
            c_int.from_param(a);


#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

}
} } class AsParamWrapper(object){
    function __init__( param){
        this._as_parameter_ = param;

}
} class AsParamWrapperTestCase(BasicWrapTestCase){
    wrap = AsParamWrapper;

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

}
class AsParamPropertyWrapper(object){
    function __init__( param){
        this._param = param;

    }
    function getParameter(){
        return this._param;
    } _as_parameter_ = property(getParameter);

}
class AsParamPropertyWrapperTestCase(BasicWrapTestCase){
    wrap = AsParamPropertyWrapper;

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

}
if __name__ == '__main__'{
    unittest.main();

}