from ctypes import *;
import unittest;

class VarSizeTest(unittest.TestCase){
    function test_resize(){
        class X(Structure){
            _fields_ = [("item", c_int),
                        ("array", c_int * 1)];

        }
        this.assertEqual(sizeof(X), sizeof(c_int) * 2);
        x = X();
        x.item = 42;
        x.array[0] = 100;
        this.assertEqual(sizeof(x), sizeof(c_int) * 2);

        # make room for one additional item
        new_size = sizeof(X) + sizeof(c_int) * 1;
        resize(x, new_size);
        this.assertEqual(sizeof(x), new_size);
        this.assertEqual((x.item, x.array[0]), (42, 100));

        # make room for 10 additional items
        new_size = sizeof(X) + sizeof(c_int) * 9;
        resize(x, new_size);
        this.assertEqual(sizeof(x), new_size);
        this.assertEqual((x.item, x.array[0]), (42, 100));

        # make room for one additional item
        new_size = sizeof(X) + sizeof(c_int) * 1;
        resize(x, new_size);
        this.assertEqual(sizeof(x), new_size);
        this.assertEqual((x.item, x.array[0]), (42, 100));

    }
    function test_array_invalid_length(){
        # cannot create arrays with non-positive size
        this.assertRaises(ValueError, lambda{ c_int * -1});
        this.assertRaises(ValueError, lambda{ c_int * -3});

    }
    function test_zerosized_array(){
        array = (c_int * 0)();
        # accessing elements of zero-sized arrays raise IndexError
        this.assertRaises(IndexError, array.__setitem__, 0, nil);
        this.assertRaises(IndexError, array.__getitem__, 0);
        this.assertRaises(IndexError, array.__setitem__, 1, nil);
        this.assertRaises(IndexError, array.__getitem__, 1);
        this.assertRaises(IndexError, array.__setitem__, -1, nil);
        this.assertRaises(IndexError, array.__getitem__, -1);

}
} if __name__ == "__main__"{
    unittest.main();

}