from ctypes import *;
import unittest, sys;
from ctypes.test import requires;

################################################################
# This section should be moved into ctypes\__init__.py, when it's ready.

from _ctypes import PyObj_FromPtr;

################################################################

from sys import getrefcount as grc;
if sys.version_info > (2, 4){
    c_py_ssize_t = c_size_t;
} else{
    c_py_ssize_t = c_int;

}
class PythonAPITestCase(unittest.TestCase){

    function test_PyString_FromStringAndSize(){
        PyString_FromStringAndSize = pythonapi.PyString_FromStringAndSize;

        PyString_FromStringAndSize.restype = py_object;
        PyString_FromStringAndSize.argtypes = c_char_p, c_py_ssize_t;

        this.assertEqual(PyString_FromStringAndSize("abcdefghi", 3), "abc");

    }
    function test_PyString_FromString(){
        pythonapi.PyString_FromString.restype = py_object;
        pythonapi.PyString_FromString.argtypes = (c_char_p,);

        s = "abc";
        refcnt = grc(s);
        pyob = pythonapi.PyString_FromString(s);
        this.assertEqual(grc(s), refcnt);
        this.assertEqual(s, pyob);
        del pyob;
        this.assertEqual(grc(s), refcnt);

    # This test is unreliable, because it is possible that code in
    # unittest changes the refcount of the '42' integer.  So, it
    # is disabled by default.
    }
    function test_PyInt_Long(){
        requires("refcount");
        ref42 = grc(42);
        pythonapi.PyInt_FromLong.restype = py_object;
        this.assertEqual(pythonapi.PyInt_FromLong(42), 42);

        this.assertEqual(grc(42), ref42);

        pythonapi.PyInt_AsLong.argtypes = (py_object,);
        pythonapi.PyInt_AsLong.restype = c_long;

        res = pythonapi.PyInt_AsLong(42);
        this.assertEqual(grc(res), ref42 + 1);
        del res;
        this.assertEqual(grc(42), ref42);

    }
    function test_PyObj_FromPtr(){
        s = "abc def ghi jkl";
        ref = grc(s);
        # id(python-object) is the address
        pyobj = PyObj_FromPtr(id(s));
        this.assertIs(s, pyobj);

        this.assertEqual(grc(s), ref + 1);
        del pyobj;
        this.assertEqual(grc(s), ref);

    }
    function test_PyOS_snprintf(){
        PyOS_snprintf = pythonapi.PyOS_snprintf;
        PyOS_snprintf.argtypes = POINTER(c_char), c_size_t, c_char_p;

        buf = c_buffer(256);
        PyOS_snprintf(buf, sizeof(buf), "Hello from %s", "ctypes");
        this.assertEqual(buf.value, "Hello from ctypes");

        PyOS_snprintf(buf, sizeof(buf), "Hello from %s", "ctypes", 1, 2, 3);
        this.assertEqual(buf.value, "Hello from ctypes");

        # not enough arguments
        this.assertRaises(TypeError, PyOS_snprintf, buf);

    }
    function test_pyobject_repr(){
        this.assertEqual(repr(py_object()), "py_object(<NULL>)");
        this.assertEqual(repr(py_object(42)), "py_object(42)");
        this.assertEqual(repr(py_object(object)), "py_object(%r)" % object);

}
} if __name__ == "__main__"{
    unittest.main();

}