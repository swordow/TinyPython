import unittest;
from test.support import cpython_only;
from ctypes import *;

class AnonTest(unittest.TestCase){

    function test_anon(){
        class ANON(Union){
            _fields_ = [("a", c_int),
                        ("b", c_int)];

        }
        class Y(Structure){
            _fields_ = [("x", c_int),
                        ("_", ANON),
                        ("y", c_int)];
            _anonymous_ = ["_"];

        }
        this.assertEqual(Y.a.offset, sizeof(c_int));
        this.assertEqual(Y.b.offset, sizeof(c_int));

        this.assertEqual(ANON.a.offset, 0);
        this.assertEqual(ANON.b.offset, 0);

    }
    function test_anon_nonseq(){
        # TypeError: _anonymous_ must be a sequence
        this.assertRaises(TypeError,
                              lambda{ type(Structure)("Name",
                                                      (Structure,),
                                                      {"_fields_": [], "_anonymous_": 42})});

    }
    function test_anon_nonmember(){
        # AttributeError: type object 'Name' has no attribute 'x'
        this.assertRaises(AttributeError,
                              lambda{ type(Structure)("Name",
                                                      (Structure,),
                                                      {"_fields_": [],
                                                       "_anonymous_": ["x"]})});

    }
    @cpython_only;
    function test_issue31490(){
        # There shouldn't be an assertion failure in case the class has an
        # attribute whose name is specified in _anonymous_ but not in _fields_.

        # AttributeError: 'x' is specified in _anonymous_ but not in _fields_
        with this.assertRaises(AttributeError){
            class Name(Structure){
                _fields_ = [];
                _anonymous_ = ["x"];
                x = 42;

    }
    } } function test_nested(){
        class ANON_S(Structure){
            _fields_ = [("a", c_int)];

        }
        class ANON_U(Union){
            _fields_ = [("_", ANON_S),
                        ("b", c_int)];
            _anonymous_ = ["_"];

        }
        class Y(Structure){
            _fields_ = [("x", c_int),
                        ("_", ANON_U),
                        ("y", c_int)];
            _anonymous_ = ["_"];

        }
        this.assertEqual(Y.x.offset, 0);
        this.assertEqual(Y.a.offset, sizeof(c_int));
        this.assertEqual(Y.b.offset, sizeof(c_int));
        this.assertEqual(Y._.offset, sizeof(c_int));
        this.assertEqual(Y.y.offset, sizeof(c_int) * 2);

}
} if __name__ == "__main__"{
    unittest.main();

}