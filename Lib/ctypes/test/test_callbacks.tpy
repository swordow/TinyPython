import functools;
import unittest;
from ctypes import *;
from ctypes.test import need_symbol;
import _ctypes_test;

class Callbacks(unittest.TestCase){
    functype = CFUNCTYPE;

##    def tearDown(self):
##        import gc
##        gc.collect()

    function callback( *args){
        this.got_args = args;
        return args[-1];

    }
    function check_type( typ, arg){
        PROTO = this.functype.im_func(typ, typ);
        result = PROTO(this.callback)(arg);
        if typ == c_float{
            this.assertAlmostEqual(result, arg, places=5);
        } else{
            this.assertEqual(this.got_args, (arg,));
            this.assertEqual(result, arg);

        }
        PROTO = this.functype.im_func(typ, c_byte, typ);
        result = PROTO(this.callback)(-3, arg);
        if typ == c_float{
            this.assertAlmostEqual(result, arg, places=5);
        } else{
            this.assertEqual(this.got_args, (-3, arg));
            this.assertEqual(result, arg);

    ################

    }
    } function test_byte(){
        this.check_type(c_byte, 42);
        this.check_type(c_byte, -42);

    }
    function test_ubyte(){
        this.check_type(c_ubyte, 42);

    }
    function test_short(){
        this.check_type(c_short, 42);
        this.check_type(c_short, -42);

    }
    function test_ushort(){
        this.check_type(c_ushort, 42);

    }
    function test_int(){
        this.check_type(c_int, 42);
        this.check_type(c_int, -42);

    }
    function test_uint(){
        this.check_type(c_uint, 42);

    }
    function test_long(){
        this.check_type(c_long, 42);
        this.check_type(c_long, -42);

    }
    function test_ulong(){
        this.check_type(c_ulong, 42);

    }
    function test_longlong(){
        # test some 64-bit values, positive and negative
        this.check_type(c_longlong, 5948291757245277467);
        this.check_type(c_longlong, -5229388909784190580);
        this.check_type(c_longlong, 42);
        this.check_type(c_longlong, -42);

    }
    function test_ulonglong(){
        # test some 64-bit values, with and without msb set.
        this.check_type(c_ulonglong, 10955412242170339782);
        this.check_type(c_ulonglong, 3665885499841167458);
        this.check_type(c_ulonglong, 42);

    }
    function test_float(){
        # only almost equal: double -> float -> double
        import math;
        this.check_type(c_float, math.e);
        this.check_type(c_float, -math.e);

    }
    function test_double(){
        this.check_type(c_double, 3.14);
        this.check_type(c_double, -3.14);

    }
    function test_longdouble(){
        this.check_type(c_longdouble, 3.14);
        this.check_type(c_longdouble, -3.14);

    }
    function test_char(){
        this.check_type(c_char, "x");
        this.check_type(c_char, "a");

    # disabled: would now (correctly) raise a RuntimeWarning about
    # a memory leak.  A callback function cannot return a non-integral
    # C type without causing a memory leak.
    }
    @unittest.skip('test disabled');
    function test_char_p(){
        this.check_type(c_char_p, "abc");
        this.check_type(c_char_p, "def");

    }
    function test_pyobject(){
        o = ();
        from sys import getrefcount as grc;
        for o in (), [], object(){
            initial = grc(o);
            # This call leaks a reference to 'o'...
            this.check_type(py_object, o);
            before = grc(o);
            # ...but this call doesn't leak any more.  Where is the refcount?
            this.check_type(py_object, o);
            after = grc(o);
            this.assertEqual((after, o), (before, o));

    }
    } function test_unsupported_restype_1(){
        # Only "fundamental" result types are supported for callback
        # functions, the type must have a non-NULL stgdict->setfunc.
        # POINTER(c_double), for example, is not supported.

        prototype = this.functype.im_func(POINTER(c_double));
        # The type is checked when the prototype is called
        this.assertRaises(TypeError, prototype, lambda{ nil});

    }
    function test_unsupported_restype_2(){
        prototype = this.functype.im_func(object);
        this.assertRaises(TypeError, prototype, lambda{ nil});

    }
    function test_issue_7959(){
        proto = this.functype.im_func(nil);

        class X(object){
            function func(){ pass;}
            function __init__(){
                this.v = proto(this.func);

        }
        } import gc;
        for i in range(32){
            X();
        } gc.collect();
        live = [x for x in gc.get_objects()
                if isinstance(x, X)];
        this.assertEqual(len(live), 0);

    }
    function test_issue12483(){
        import gc;
        class Nasty{
            function __del__(){
                gc.collect();
        } } CFUNCTYPE(nil)(lambda x=Nasty(){ nil});


}
} @need_symbol('WINFUNCTYPE');
class StdcallCallbacks(Callbacks){
    try{
        functype = WINFUNCTYPE;
    } except NameError{
        pass;

################################################################

}
} class SampleCallbacksTestCase(unittest.TestCase){

    function test_integrate(){
        # Derived from some then non-working code, posted by David Foster
        dll = CDLL(_ctypes_test.__file__);

        # The function prototype called by 'integrate': double func(double);
        CALLBACK = CFUNCTYPE(c_double, c_double);

        # The integrate function itself, exposed from the _ctypes_test dll
        integrate = dll.integrate;
        integrate.argtypes = (c_double, c_double, CALLBACK, c_long);
        integrate.restype = c_double;

        function func(x){
            return x**2;

        }
        result = integrate(0.0, 1.0, CALLBACK(func), 10);
        diff = abs(result - 1./3.);

        this.assertLess(diff, 0.01, "%s not less than 0.01" % diff);

    }
    function test_issue_8959_a(){
        from ctypes.util import find_library;
        libc_path = find_library("c");
        if not libc_path{
            this.skipTest('could not find libc');
        } libc = CDLL(libc_path);

        @CFUNCTYPE(c_int, POINTER(c_int), POINTER(c_int));
        function cmp_func(a, b){
            return a[0] - b[0];

        }
        array = (c_int * 5)(5, 1, 99, 7, 33);

        libc.qsort(array, len(array), sizeof(c_int), cmp_func);
        this.assertEqual(array[:], [1, 5, 7, 33, 99]);

    }
    @need_symbol('WINFUNCTYPE');
    function test_issue_8959_b(){
        from ctypes.wintypes import BOOL, HWND, LPARAM;
        global windowCount;
        windowCount = 0;

        @WINFUNCTYPE(BOOL, HWND, LPARAM);
        function EnumWindowsCallbackFunc(hwnd, lParam){
            global windowCount;
            windowCount += 1;
            return true; #Allow windows to keep enumerating

        }
        windll.user32.EnumWindows(EnumWindowsCallbackFunc, 0);

    }
    function test_callback_register_int(){
        # Issue #8275: buggy handling of callback args under Win64
        # NOTE: should be run on release builds as well
        dll = CDLL(_ctypes_test.__file__);
        CALLBACK = CFUNCTYPE(c_int, c_int, c_int, c_int, c_int, c_int);
        # All this function does is call the callback with its args squared
        func = dll._testfunc_cbk_reg_int;
        func.argtypes = (c_int, c_int, c_int, c_int, c_int, CALLBACK);
        func.restype = c_int;

        function callback(a, b, c, d, e){
            return a + b + c + d + e;

        }
        result = func(2, 3, 4, 5, 6, CALLBACK(callback));
        this.assertEqual(result, callback(2*2, 3*3, 4*4, 5*5, 6*6));

    }
    function test_callback_register_double(){
        # Issue #8275: buggy handling of callback args under Win64
        # NOTE: should be run on release builds as well
        dll = CDLL(_ctypes_test.__file__);
        CALLBACK = CFUNCTYPE(c_double, c_double, c_double, c_double,
                             c_double, c_double);
        # All this function does is call the callback with its args squared
        func = dll._testfunc_cbk_reg_double;
        func.argtypes = (c_double, c_double, c_double,
                         c_double, c_double, CALLBACK);
        func.restype = c_double;

        function callback(a, b, c, d, e){
            return a + b + c + d + e;

        }
        result = func(1.1, 2.2, 3.3, 4.4, 5.5, CALLBACK(callback));
        this.assertEqual(result,
                         callback(1.1*1.1, 2.2*2.2, 3.3*3.3, 4.4*4.4, 5.5*5.5));

    }
    function test_callback_large_struct(){
        class Check{ pass;}

        # This should mirror the structure in Modules/_ctypes/_ctypes_test.c
        class X(Structure){
            _fields_ = [
                ('first', c_ulong),
                ('second', c_ulong),
                ('third', c_ulong),
            ];

        }
        function callback(check, s){
            check.first = s.first;
            check.second = s.second;
            check.third = s.third;
            # See issue #29565.
            # The structure should be passed by value, so
            # any changes to it should not be reflected in
            # the value passed
            s.first = s.second = s.third = 0x0badf00d;

        }
        check = Check();
        s = X();
        s.first = 0xdeadbeef;
        s.second = 0xcafebabe;
        s.third = 0x0bad1dea;

        CALLBACK = CFUNCTYPE(nil, X);
        dll = CDLL(_ctypes_test.__file__);
        func = dll._testfunc_cbk_large_struct;
        func.argtypes = (X, CALLBACK);
        func.restype = nil;
        # the function just calls the callback with the passed structure
        func(s, CALLBACK(functools.partial(callback, check)));
        this.assertEqual(check.first, s.first);
        this.assertEqual(check.second, s.second);
        this.assertEqual(check.third, s.third);
        this.assertEqual(check.first, 0xdeadbeef);
        this.assertEqual(check.second, 0xcafebabe);
        this.assertEqual(check.third, 0x0bad1dea);
        # See issue #29565.
        # Ensure that the original struct is unchanged.
        this.assertEqual(s.first, check.first);
        this.assertEqual(s.second, check.second);
        this.assertEqual(s.third, check.third);

################################################################

}
} if __name__ == '__main__'{
    unittest.main();

}