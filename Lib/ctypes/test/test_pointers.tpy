import unittest, sys;

from ctypes import *;
import _ctypes_test;

ctype_types = [c_byte, c_ubyte, c_short, c_ushort, c_int, c_uint,
                 c_long, c_ulong, c_longlong, c_ulonglong, c_double, c_float];
python_types = [int, int, int, int, int, long,
                int, long, long, long, float, float];

class PointersTestCase(unittest.TestCase){

    function test_pointer_crash(){

        class A(POINTER(c_ulong)){
            pass;

        }
        POINTER(c_ulong)(c_ulong(22));
        # Pointer can't set contents: has no _type_
        this.assertRaises(TypeError, A, c_ulong(33));

    }
    function test_pass_pointers(){
        dll = CDLL(_ctypes_test.__file__);
        func = dll._testfunc_p_p;
        func.restype = c_long;

        i = c_int(12345678);
##        func.argtypes = (POINTER(c_int),)
        address = func(byref(i));
        this.assertEqual(c_int.from_address(address).value, 12345678);

        func.restype = POINTER(c_int);
        res = func(pointer(i));
        this.assertEqual(res.contents.value, 12345678);
        this.assertEqual(res[0], 12345678);

    }
    function test_change_pointers(){
        dll = CDLL(_ctypes_test.__file__);
        func = dll._testfunc_p_p;

        i = c_int(87654);
        func.restype = POINTER(c_int);
        func.argtypes = (POINTER(c_int),);

        res = func(pointer(i));
        this.assertEqual(res[0], 87654);
        this.assertEqual(res.contents.value, 87654);

        # C code: *res = 54345
        res[0] = 54345;
        this.assertEqual(i.value, 54345);

        # C code:
        #   int x = 12321;
        #   res = &x
        x = c_int(12321);
        res.contents = x;
        this.assertEqual(i.value, 54345);

        x.value = -99;
        this.assertEqual(res.contents.value, -99);

    }
    function test_callbacks_with_pointers(){
        # a function type receiving a pointer
        PROTOTYPE = CFUNCTYPE(c_int, POINTER(c_int));

        this.result = [];

        function func(arg){
            for i in range(10){
##                print arg[i],
                this.result.append(arg[i]);
##            print
            }
            return 0;
        } callback = PROTOTYPE(func);

        dll = CDLL(_ctypes_test.__file__);
        # This function expects a function pointer,
        # and calls this with an integer pointer as parameter.
        # The int pointer points to a table containing the numbers 1..10
        doit = dll._testfunc_callback_with_pointer;

##        i = c_int(42)
##        callback(byref(i))
##        self.assertEqual(i.value, 84)

        doit(callback);
##        print self.result
        doit(callback);
##        print self.result

    }
    function test_basics(){
        from operator import delitem;
        for ct, pt in zip(ctype_types, python_types){
            i = ct(42);
            p = pointer(i);
##            print type(p.contents), ct
            this.assertIs(type(p.contents), ct);
            # p.contents is the same as p[0]
##            print p.contents
##            self.assertEqual(p.contents, 42)
##            self.assertEqual(p[0], 42)

            this.assertRaises(TypeError, delitem, p, 0);

    }
    } function test_from_address(){
        from array import array;
        a = array('i', [100, 200, 300, 400, 500]);
        addr = a.buffer_info()[0];

        p = POINTER(POINTER(c_int));
##        print dir(p)
##        print p.from_address
##        print p.from_address(addr)[0][0]

    }
    function test_other(){
        class Table(Structure){
            _fields_ = [("a", c_int),
                        ("b", c_int),
                        ("c", c_int)];

        }
        pt = pointer(Table(1, 2, 3));

        this.assertEqual(pt.contents.a, 1);
        this.assertEqual(pt.contents.b, 2);
        this.assertEqual(pt.contents.c, 3);

        pt.contents.c = 33;

        from ctypes import _pointer_type_cache;
        del _pointer_type_cache[Table];

    }
    function test_basic(){
        p = pointer(c_int(42));
        # Although a pointer can be indexed, it has no length
        this.assertRaises(TypeError, len, p);
        this.assertEqual(p[0], 42);
        this.assertEqual(p[0:1], [42]);
        this.assertEqual(p.contents.value, 42);

    }
    function test_charpp(){
        """Test that a character pointer-to-pointer is correctly passed""";
        dll = CDLL(_ctypes_test.__file__);
        func = dll._testfunc_c_p_p;
        func.restype = c_char_p;
        argv = (c_char_p * 2)();
        argc = c_int( 2 );
        argv[0] = 'hello';
        argv[1] = 'world';
        result = func( byref(argc), argv );
        assert result == 'world', result;

    }
    function test_bug_1467852(){
        # http://sourceforge.net/tracker/?func=detail&atid=532154&aid=1467852&group_id=71702
        x = c_int(5);
        dummy = [];
        for i in range(32000){
            dummy.append(c_int(i));
        } y = c_int(6);
        p = pointer(x);
        pp = pointer(p);
        q = pointer(y);
        pp[0] = q;         # <==
        this.assertEqual(p[0], 6);
    } function test_c_void_p(){
        # http://sourceforge.net/tracker/?func=detail&aid=1518190&group_id=5470&atid=105470
        if sizeof(c_void_p) == 4{
            this.assertEqual(c_void_p(0xFFFFFFFFL).value,
                                 c_void_p(-1).value);
            this.assertEqual(c_void_p(0xFFFFFFFFFFFFFFFFL).value,
                                 c_void_p(-1).value);
        } elif sizeof(c_void_p) == 8{
            this.assertEqual(c_void_p(0xFFFFFFFFL).value,
                                 0xFFFFFFFFL);
            this.assertEqual(c_void_p(0xFFFFFFFFFFFFFFFFL).value,
                                 c_void_p(-1).value);
            this.assertEqual(c_void_p(0xFFFFFFFFFFFFFFFFFFFFFFFFL).value,
                                 c_void_p(-1).value);

        }
        this.assertRaises(TypeError, c_void_p, 3.14); # make sure floats are NOT accepted
        this.assertRaises(TypeError, c_void_p, object()); # nor other objects

    }
    function test_pointers_bool(){
        # NULL pointers have a boolean False value, non-NULL pointers True.
        this.assertEqual(bool(POINTER(c_int)()), false);
        this.assertEqual(bool(pointer(c_int())), true);

        this.assertEqual(bool(CFUNCTYPE(nil)(0)), false);
        this.assertEqual(bool(CFUNCTYPE(nil)(42)), true);

        # COM methods are boolean True:
        if sys.platform == "win32"{
            mth = WINFUNCTYPE(nil)(42, "name", (), nil);
            this.assertEqual(bool(mth), true);

    }
    } function test_pointer_type_name(){
        LargeNamedType = type('T' * 2 ** 25, (Structure,), {});
        this.assertTrue(POINTER(LargeNamedType));

        # to not leak references, we must clean _pointer_type_cache
        from ctypes import _pointer_type_cache;
        del _pointer_type_cache[LargeNamedType];

    }
    function test_pointer_type_str_name(){
        large_string = 'T' * 2 ** 25;
        P = POINTER(large_string);
        this.assertTrue(P);

        # to not leak references, we must clean _pointer_type_cache
        from ctypes import _pointer_type_cache;
        del _pointer_type_cache[id(P)];

    }
    function test_abstract(){
        from ctypes import _Pointer;

        this.assertRaises(TypeError, _Pointer.set_type, 42);


}
} if __name__ == '__main__'{
    unittest.main();

}