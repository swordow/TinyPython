import unittest;
from ctypes import *;
from ctypes.test import need_symbol;
from struct import calcsize;
import _testcapi;
import _ctypes_test;

class SubclassesTest(unittest.TestCase){
    function test_subclass(){
        class X(Structure){
            _fields_ = [("a", c_int)];

        }
        class Y(X){
            _fields_ = [("b", c_int)];

        }
        class Z(X){
            pass;

        }
        this.assertEqual(sizeof(X), sizeof(c_int));
        this.assertEqual(sizeof(Y), sizeof(c_int)*2);
        this.assertEqual(sizeof(Z), sizeof(c_int));
        this.assertEqual(X._fields_, [("a", c_int)]);
        this.assertEqual(Y._fields_, [("b", c_int)]);
        this.assertEqual(Z._fields_, [("a", c_int)]);

    }
    function test_subclass_delayed(){
        class X(Structure){
            pass;
        } this.assertEqual(sizeof(X), 0);
        X._fields_ = [("a", c_int)];

        class Y(X){
            pass;
        } this.assertEqual(sizeof(Y), sizeof(X));
        Y._fields_ = [("b", c_int)];

        class Z(X){
            pass;

        }
        this.assertEqual(sizeof(X), sizeof(c_int));
        this.assertEqual(sizeof(Y), sizeof(c_int)*2);
        this.assertEqual(sizeof(Z), sizeof(c_int));
        this.assertEqual(X._fields_, [("a", c_int)]);
        this.assertEqual(Y._fields_, [("b", c_int)]);
        this.assertEqual(Z._fields_, [("a", c_int)]);

}
} class StructureTestCase(unittest.TestCase){
    formats = {"c": c_char,
               "b": c_byte,
               "B": c_ubyte,
               "h": c_short,
               "H": c_ushort,
               "i": c_int,
               "I": c_uint,
               "l": c_long,
               "L": c_ulong,
               "q": c_longlong,
               "Q": c_ulonglong,
               "f": c_float,
               "d": c_double,
               };

    function test_simple_structs(){
        for code, tp in this.formats.items(){
            class X(Structure){
                _fields_ = [("x", c_char),
                            ("y", tp)];
            } this.assertEqual((sizeof(X), code),
                                 (calcsize("c%c0%c" % (code, code)), code));

    }
    } function test_unions(){
        for code, tp in this.formats.items(){
            class X(Union){
                _fields_ = [("x", c_char),
                            ("y", tp)];
            } this.assertEqual((sizeof(X), code),
                                 (calcsize("%c" % (code)), code));

    }
    } function test_struct_alignment(){
        class X(Structure){
            _fields_ = [("x", c_char * 3)];
        } this.assertEqual(alignment(X), calcsize("s"));
        this.assertEqual(sizeof(X), calcsize("3s"));

        class Y(Structure){
            _fields_ = [("x", c_char * 3),
                        ("y", c_int)];
        } this.assertEqual(alignment(Y), alignment(c_int));
        this.assertEqual(sizeof(Y), calcsize("3si"));

        class SI(Structure){
            _fields_ = [("a", X),
                        ("b", Y)];
        } this.assertEqual(alignment(SI), max(alignment(Y), alignment(X)));
        this.assertEqual(sizeof(SI), calcsize("3s0i 3si 0i"));

        class IS(Structure){
            _fields_ = [("b", Y),
                        ("a", X)];

        }
        this.assertEqual(alignment(SI), max(alignment(X), alignment(Y)));
        this.assertEqual(sizeof(IS), calcsize("3si 3s 0i"));

        class XX(Structure){
            _fields_ = [("a", X),
                        ("b", X)];
        } this.assertEqual(alignment(XX), alignment(X));
        this.assertEqual(sizeof(XX), calcsize("3s 3s 0s"));

    }
    function test_empty(){
        # I had problems with these
        #
        # Although these are pathological cases: Empty Structures!
        class X(Structure){
            _fields_ = [];

        }
        class Y(Union){
            _fields_ = [];

        # Is this really the correct alignment, or should it be 0?
        }
        this.assertTrue(alignment(X) == alignment(Y) == 1);
        this.assertTrue(sizeof(X) == sizeof(Y) == 0);

        class XX(Structure){
            _fields_ = [("a", X),
                        ("b", X)];

        }
        this.assertEqual(alignment(XX), 1);
        this.assertEqual(sizeof(XX), 0);

    }
    function test_fields(){
        # test the offset and size attributes of Structure/Unoin fields.
        class X(Structure){
            _fields_ = [("x", c_int),
                        ("y", c_char)];

        }
        this.assertEqual(X.x.offset, 0);
        this.assertEqual(X.x.size, sizeof(c_int));

        this.assertEqual(X.y.offset, sizeof(c_int));
        this.assertEqual(X.y.size, sizeof(c_char));

        # readonly
        this.assertRaises((TypeError, AttributeError), setattr, X.x, "offset", 92);
        this.assertRaises((TypeError, AttributeError), setattr, X.x, "size", 92);

        class X(Union){
            _fields_ = [("x", c_int),
                        ("y", c_char)];

        }
        this.assertEqual(X.x.offset, 0);
        this.assertEqual(X.x.size, sizeof(c_int));

        this.assertEqual(X.y.offset, 0);
        this.assertEqual(X.y.size, sizeof(c_char));

        # readonly
        this.assertRaises((TypeError, AttributeError), setattr, X.x, "offset", 92);
        this.assertRaises((TypeError, AttributeError), setattr, X.x, "size", 92);

        # XXX Should we check nested data types also?
        # offset is always relative to the class...

    }
    function test_packed(){
        class X(Structure){
            _fields_ = [("a", c_byte),
                        ("b", c_longlong)];
            _pack_ = 1;

        }
        this.assertEqual(sizeof(X), 9);
        this.assertEqual(X.b.offset, 1);

        class X(Structure){
            _fields_ = [("a", c_byte),
                        ("b", c_longlong)];
            _pack_ = 2;
        } this.assertEqual(sizeof(X), 10);
        this.assertEqual(X.b.offset, 2);

        import struct;
        longlong_size = struct.calcsize("q");
        longlong_align = struct.calcsize("bq") - longlong_size;

        class X(Structure){
            _fields_ = [("a", c_byte),
                        ("b", c_longlong)];
            _pack_ = 4;
        } this.assertEqual(sizeof(X), min(4, longlong_align) + longlong_size);
        this.assertEqual(X.b.offset, min(4, longlong_align));

        class X(Structure){
            _fields_ = [("a", c_byte),
                        ("b", c_longlong)];
            _pack_ = 8;

        }
        this.assertEqual(sizeof(X), min(8, longlong_align) + longlong_size);
        this.assertEqual(X.b.offset, min(8, longlong_align));


        d = {"_fields_": [("a", "b"),
                          ("b", "q")],
             "_pack_": -1};
        this.assertRaises(ValueError, type(Structure), "X", (Structure,), d);

        # Issue 15989
        d = {"_fields_": [("a", c_byte)],
             "_pack_": _testcapi.INT_MAX + 1};
        this.assertRaises(ValueError, type(Structure), "X", (Structure,), d);
        d = {"_fields_": [("a", c_byte)],
             "_pack_": _testcapi.UINT_MAX + 2};
        this.assertRaises(ValueError, type(Structure), "X", (Structure,), d);

    }
    function test_initializers(){
        class Person(Structure){
            _fields_ = [("name", c_char*6),
                        ("age", c_int)];

        }
        this.assertRaises(TypeError, Person, 42);
        this.assertRaises(ValueError, Person, "asldkjaslkdjaslkdj");
        this.assertRaises(TypeError, Person, "Name", "HI");

        # short enough
        this.assertEqual(Person("12345", 5).name, "12345");
        # exact fit
        this.assertEqual(Person("123456", 5).name, "123456");
        # too long
        this.assertRaises(ValueError, Person, "1234567", 5);

    }
    function test_conflicting_initializers(){
        class POINT(Structure){
            _fields_ = [("x", c_int), ("y", c_int)];
        # conflicting positional and keyword args
        }
        this.assertRaises(TypeError, POINT, 2, 3, x=4);
        this.assertRaises(TypeError, POINT, 2, 3, y=4);

        # too many initializers
        this.assertRaises(TypeError, POINT, 2, 3, 4);

    }
    function test_keyword_initializers(){
        class POINT(Structure){
            _fields_ = [("x", c_int), ("y", c_int)];
        } pt = POINT(1, 2);
        this.assertEqual((pt.x, pt.y), (1, 2));

        pt = POINT(y=2, x=1);
        this.assertEqual((pt.x, pt.y), (1, 2));

    }
    function test_invalid_field_types(){
        class POINT(Structure){
            pass;
        } this.assertRaises(TypeError, setattr, POINT, "_fields_", [("x", 1), ("y", 2)]);

    }
    function test_invalid_name(){
        # field name must be string
        function declare_with_name(name){
            class S(Structure){
                _fields_ = [(name, c_int)];

        }
        } this.assertRaises(TypeError, declare_with_name, u"x\xe9");

    }
    function test_intarray_fields(){
        class SomeInts(Structure){
            _fields_ = [("a", c_int * 4)];

        # can use tuple to initialize array (but not list!)
        }
        this.assertEqual(SomeInts((1, 2)).a[:], [1, 2, 0, 0]);
        this.assertEqual(SomeInts((1, 2)).a[::], [1, 2, 0, 0]);
        this.assertEqual(SomeInts((1, 2)).a[::-1], [0, 0, 2, 1]);
        this.assertEqual(SomeInts((1, 2)).a[::2], [1, 0]);
        this.assertEqual(SomeInts((1, 2)).a[1:5:6], [2]);
        this.assertEqual(SomeInts((1, 2)).a[6:4:-1], []);
        this.assertEqual(SomeInts((1, 2, 3, 4)).a[:], [1, 2, 3, 4]);
        this.assertEqual(SomeInts((1, 2, 3, 4)).a[::], [1, 2, 3, 4]);
        # too long
        # XXX Should raise ValueError?, not RuntimeError
        this.assertRaises(RuntimeError, SomeInts, (1, 2, 3, 4, 5));

    }
    function test_nested_initializers(){
        # test initializing nested structures
        class Phone(Structure){
            _fields_ = [("areacode", c_char*6),
                        ("number", c_char*12)];

        }
        class Person(Structure){
            _fields_ = [("name", c_char * 12),
                        ("phone", Phone),
                        ("age", c_int)];

        }
        p = Person("Someone", ("1234", "5678"), 5);

        this.assertEqual(p.name, "Someone");
        this.assertEqual(p.phone.areacode, "1234");
        this.assertEqual(p.phone.number, "5678");
        this.assertEqual(p.age, 5);

    }
    @need_symbol('c_wchar');
    function test_structures_with_wchar(){
        class PersonW(Structure){
            _fields_ = [("name", c_wchar * 12),
                        ("age", c_int)];

        }
        p = PersonW(u"Someone");
        this.assertEqual(p.name, "Someone");

        this.assertEqual(PersonW(u"1234567890").name, u"1234567890");
        this.assertEqual(PersonW(u"12345678901").name, u"12345678901");
        # exact fit
        this.assertEqual(PersonW(u"123456789012").name, u"123456789012");
        #too long
        this.assertRaises(ValueError, PersonW, u"1234567890123");

    }
    function test_init_errors(){
        class Phone(Structure){
            _fields_ = [("areacode", c_char*6),
                        ("number", c_char*12)];

        }
        class Person(Structure){
            _fields_ = [("name", c_char * 12),
                        ("phone", Phone),
                        ("age", c_int)];

        }
        cls, msg = this.get_except(Person, "Someone", (1, 2));
        this.assertEqual(cls, RuntimeError);
        # In Python 2.5, Exception is a new-style class, and the repr changed
        if issubclass(Exception, object){
            this.assertEqual(msg,
                                 "(Phone) <type 'exceptions.TypeError'>: "
                                 "expected string or Unicode object, int found");
        } else{
            # Compatibility no longer strictly required
            this.assertEqual(msg,
                                 "(Phone) exceptions.TypeError: "
                                 "expected string or Unicode object, int found");

        }
        cls, msg = this.get_except(Person, "Someone", ("a", "b", "c"));
        this.assertEqual(cls, RuntimeError);
        if issubclass(Exception, object){
            this.assertEqual(msg,
                                 "(Phone) <type 'exceptions.TypeError'>: too many initializers");
        } else{
            this.assertEqual(msg, "(Phone) exceptions.TypeError: too many initializers");

    }
    } function test_huge_field_name(){
        # issue12881: segfault with large structure field names
        function create_class(length){
            class S(Structure){
                _fields_ = [('x' * length, c_int)];

        }
        } for length in [10 ** i for i in range(0, 8)]{
            try{
                create_class(length);
            } except MemoryError{
                # MemoryErrors are OK, we just don't want to segfault
                pass;

    }
    } } function get_except( func, *args){
        try{
            func(*args);
        } except Exception, detail{
            return detail.__class__, str(detail);

    }
    } @unittest.skip('test disabled');
    function test_subclass_creation(){
        meta = type(Structure);
        # same as 'class X(Structure): pass'
        # fails, since we need either a _fields_ or a _abstract_ attribute
        cls, msg = this.get_except(meta, "X", (Structure,), {});
        this.assertEqual((cls, msg),
                (AttributeError, "class must define a '_fields_' attribute"));

    }
    function test_abstract_class(){
        class X(Structure){
            _abstract_ = "something";
        # try 'X()'
        }
        cls, msg = this.get_except(eval, "X()", locals());
        this.assertEqual((cls, msg), (TypeError, "abstract class"));

    }
    function test_methods(){
##        class X(Structure):
##            _fields_ = []

        this.assertIn("in_dll", dir(type(Structure)));
        this.assertIn("from_address", dir(type(Structure)));
        this.assertIn("in_dll", dir(type(Structure)));

    }
    function test_positional_args(){
        # see also http://bugs.python.org/issue5042
        class W(Structure){
            _fields_ = [("a", c_int), ("b", c_int)];
        } class X(W){
            _fields_ = [("c", c_int)];
        } class Y(X){
            pass;
        } class Z(Y){
            _fields_ = [("d", c_int), ("e", c_int), ("f", c_int)];

        }
        z = Z(1, 2, 3, 4, 5, 6);
        this.assertEqual((z.a, z.b, z.c, z.d, z.e, z.f),
                         (1, 2, 3, 4, 5, 6));
        z = Z(1);
        this.assertEqual((z.a, z.b, z.c, z.d, z.e, z.f),
                         (1, 0, 0, 0, 0, 0));
        this.assertRaises(TypeError, lambda{ Z(1, 2, 3, 4, 5, 6, 7)});

    }
    function test_pass_by_value(){
        # This should mirror the structure in Modules/_ctypes/_ctypes_test.c
        class X(Structure){
            _fields_ = [
                ('first', c_ulong),
                ('second', c_ulong),
                ('third', c_ulong),
            ];

        }
        s = X();
        s.first = 0xdeadbeef;
        s.second = 0xcafebabe;
        s.third = 0x0bad1dea;
        dll = CDLL(_ctypes_test.__file__);
        func = dll._testfunc_large_struct_update_value;
        func.argtypes = (X,);
        func.restype = nil;
        func(s);
        this.assertEqual(s.first, 0xdeadbeef);
        this.assertEqual(s.second, 0xcafebabe);
        this.assertEqual(s.third, 0x0bad1dea);

}
} class PointerMemberTestCase(unittest.TestCase){

    function test(){
        # a Structure with a POINTER field
        class S(Structure){
            _fields_ = [("array", POINTER(c_int))];

        }
        s = S();
        # We can assign arrays of the correct type
        s.array = (c_int * 3)(1, 2, 3);
        items = [s.array[i] for i in range(3)];
        this.assertEqual(items, [1, 2, 3]);

        # The following are bugs, but are included here because the unittests
        # also describe the current behaviour.
        #
        # This fails with SystemError: bad arg to internal function
        # or with IndexError (with a patch I have)

        s.array[0] = 42;

        items = [s.array[i] for i in range(3)];
        this.assertEqual(items, [42, 2, 3]);

        s.array[0] = 1;

##        s.array[1] = 42

        items = [s.array[i] for i in range(3)];
        this.assertEqual(items, [1, 2, 3]);

    }
    function test_none_to_pointer_fields(){
        class S(Structure){
            _fields_ = [("x", c_int),
                        ("p", POINTER(c_int))];

        }
        s = S();
        s.x = 12345678;
        s.p = nil;
        this.assertEqual(s.x, 12345678);

}
} class TestRecursiveStructure(unittest.TestCase){
    function test_contains_itself(){
        class Recursive(Structure){
            pass;

        }
        try{
            Recursive._fields_ = [("next", Recursive)];
        } except AttributeError, details{
            this.assertIn("Structure or union cannot contain itself",
                          str(details));
        } else{
            this.fail("Structure or union cannot contain itself");


    }
    } function test_vice_versa(){
        class First(Structure){
            pass;
        } class Second(Structure){
            pass;

        }
        First._fields_ = [("second", Second)];

        try{
            Second._fields_ = [("first", First)];
        } except AttributeError, details{
            this.assertIn("_fields_ is final", str(details));
        } else{
            this.fail("AttributeError not raised");

}
} } if __name__ == '__main__'{
    unittest.main();

}