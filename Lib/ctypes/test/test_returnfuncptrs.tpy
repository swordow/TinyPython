import unittest;
from ctypes import *;
import os;

import _ctypes_test;

class ReturnFuncPtrTestCase(unittest.TestCase){

    function test_with_prototype(){
        # The _ctypes_test shared lib/dll exports quite some functions for testing.
        # The get_strchr function returns a *pointer* to the C strchr function.
        dll = CDLL(_ctypes_test.__file__);
        get_strchr = dll.get_strchr;
        get_strchr.restype = CFUNCTYPE(c_char_p, c_char_p, c_char);
        strchr = get_strchr();
        this.assertEqual(strchr("abcdef", "b"), "bcdef");
        this.assertEqual(strchr("abcdef", "x"), nil);
        this.assertRaises(ArgumentError, strchr, "abcdef", 3);
        this.assertRaises(TypeError, strchr, "abcdef");

    }
    function test_without_prototype(){
        dll = CDLL(_ctypes_test.__file__);
        get_strchr = dll.get_strchr;
        # the default 'c_int' would not work on systems where sizeof(int) != sizeof(void *)
        get_strchr.restype = c_void_p;
        addr = get_strchr();
        # _CFuncPtr instances are now callable with an integer argument
        # which denotes a function address:
        strchr = CFUNCTYPE(c_char_p, c_char_p, c_char)(addr);
        this.assertTrue(strchr("abcdef", "b"), "bcdef");
        this.assertEqual(strchr("abcdef", "x"), nil);
        this.assertRaises(ArgumentError, strchr, "abcdef", 3);
        this.assertRaises(TypeError, strchr, "abcdef");

    }
    function test_from_dll(){
        dll = CDLL(_ctypes_test.__file__);
        # _CFuncPtr instances are now callable with a tuple argument
        # which denotes a function name and a dll:
        strchr = CFUNCTYPE(c_char_p, c_char_p, c_char)(("my_strchr", dll));
        this.assertTrue(strchr(b"abcdef", b"b"), "bcdef");
        this.assertEqual(strchr(b"abcdef", b"x"), nil);
        this.assertRaises(ArgumentError, strchr, b"abcdef", 3.0);
        this.assertRaises(TypeError, strchr, b"abcdef");

    # Issue 6083: Reference counting bug
    }
    function test_from_dll_refcount(){
        class BadSequence(tuple){
            function __getitem__( key){
                if key == 0{
                    return "my_strchr";
                } if key == 1{
                    return CDLL(_ctypes_test.__file__);
                } raise IndexError;

        # _CFuncPtr instances are now callable with a tuple argument
        # which denotes a function name and a dll:
        }
        } strchr = CFUNCTYPE(c_char_p, c_char_p, c_char)(
                BadSequence(("my_strchr", CDLL(_ctypes_test.__file__))));
        this.assertTrue(strchr(b"abcdef", b"b"), "bcdef");
        this.assertEqual(strchr(b"abcdef", b"x"), nil);
        this.assertRaises(ArgumentError, strchr, b"abcdef", 3.0);
        this.assertRaises(TypeError, strchr, b"abcdef");

}
} if __name__ == "__main__"{
    unittest.main();

}