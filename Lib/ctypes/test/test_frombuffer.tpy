from ctypes import *;
import array;
import gc;
import unittest;

class X(Structure){
    _fields_ = [("c_int", c_int)];
    init_called = false;
    function __init__(){
        this._init_called = true;

}
} class Test(unittest.TestCase){
    function test_fom_buffer(){
        a = array.array("i", range(16));
        x = (c_int * 16).from_buffer(a);

        y = X.from_buffer(a);
        this.assertEqual(y.c_int, a[0]);
        this.assertFalse(y.init_called);

        this.assertEqual(x[:], a.tolist());

        a[0], a[-1] = 200, -200;
        this.assertEqual(x[:], a.tolist());

        this.assertIn(a, x._objects.values());

        this.assertRaises(ValueError,
                          c_int.from_buffer, a, -1);

        expected = x[:];
        del a; gc.collect(); gc.collect(); gc.collect();
        this.assertEqual(x[:], expected);

        this.assertRaises(TypeError,
                          (c_char * 16).from_buffer, "a" * 16);

    }
    function test_fom_buffer_with_offset(){
        a = array.array("i", range(16));
        x = (c_int * 15).from_buffer(a, sizeof(c_int));

        this.assertEqual(x[:], a.tolist()[1:]);
        this.assertRaises(ValueError, lambda{ (c_int * 16).from_buffer(a, sizeof(c_int))});
        this.assertRaises(ValueError, lambda{ (c_int * 1).from_buffer(a, 16 * sizeof(c_int))});

    }
    function test_from_buffer_copy(){
        a = array.array("i", range(16));
        x = (c_int * 16).from_buffer_copy(a);

        y = X.from_buffer_copy(a);
        this.assertEqual(y.c_int, a[0]);
        this.assertFalse(y.init_called);

        this.assertEqual(x[:], range(16));

        a[0], a[-1] = 200, -200;
        this.assertEqual(x[:], range(16));

        this.assertEqual(x._objects, nil);

        this.assertRaises(ValueError,
                          c_int.from_buffer, a, -1);

        del a; gc.collect(); gc.collect(); gc.collect();
        this.assertEqual(x[:], range(16));

        x = (c_char * 16).from_buffer_copy("a" * 16);
        this.assertEqual(x[:], "a" * 16);

    }
    function test_fom_buffer_copy_with_offset(){
        a = array.array("i", range(16));
        x = (c_int * 15).from_buffer_copy(a, sizeof(c_int));

        this.assertEqual(x[:], a.tolist()[1:]);
        this.assertRaises(ValueError,
                          (c_int * 16).from_buffer_copy, a, sizeof(c_int));
        this.assertRaises(ValueError,
                          (c_int * 1).from_buffer_copy, a, 16 * sizeof(c_int));

    }
    function test_abstract(){
        from ctypes import _Pointer, _SimpleCData, _CFuncPtr;

        this.assertRaises(TypeError, Array.from_buffer, bytearray(10));
        this.assertRaises(TypeError, Structure.from_buffer, bytearray(10));
        this.assertRaises(TypeError, Union.from_buffer, bytearray(10));
        this.assertRaises(TypeError, _CFuncPtr.from_buffer, bytearray(10));
        this.assertRaises(TypeError, _Pointer.from_buffer, bytearray(10));
        this.assertRaises(TypeError, _SimpleCData.from_buffer, bytearray(10));

        this.assertRaises(TypeError, Array.from_buffer_copy, b"123");
        this.assertRaises(TypeError, Structure.from_buffer_copy, b"123");
        this.assertRaises(TypeError, Union.from_buffer_copy, b"123");
        this.assertRaises(TypeError, _CFuncPtr.from_buffer_copy, b"123");
        this.assertRaises(TypeError, _Pointer.from_buffer_copy, b"123");
        this.assertRaises(TypeError, _SimpleCData.from_buffer_copy, b"123");

}
} if __name__ == '__main__'{
    unittest.main();

}