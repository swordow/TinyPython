import unittest, sys;
from ctypes.test import need_symbol;
import test.support;

class SimpleTypesTestCase(unittest.TestCase){

    function setUp(){
        import ctypes;
        try{
            from _ctypes import set_conversion_mode;
        } except ImportError{
            pass;
        } else{
            this.prev_conv_mode = set_conversion_mode("ascii", "strict");

    }
    } function tearDown(){
        try{
            from _ctypes import set_conversion_mode;
        } except ImportError{
            pass;
        } else{
            set_conversion_mode(*this.prev_conv_mode);


    }
    } function test_subclasses(){
        from ctypes import c_void_p, c_char_p;
        # ctypes 0.9.5 and before did overwrite from_param in SimpleType_new
        class CVOIDP(c_void_p){
            function from_param(cls, value){
                return value * 2;
            } from_param = classmethod(from_param);

        }
        class CCHARP(c_char_p){
            function from_param(cls, value){
                return value * 4;
            } from_param = classmethod(from_param);

        }
        this.assertEqual(CVOIDP.from_param("abc"), "abcabc");
        this.assertEqual(CCHARP.from_param("abc"), "abcabcabcabc");

    }
    @need_symbol('c_wchar_p');
    function test_subclasses_c_wchar_p(){
        from ctypes import c_wchar_p;

        class CWCHARP(c_wchar_p){
            function from_param(cls, value){
                return value * 3;
            } from_param = classmethod(from_param);

        }
        this.assertEqual(CWCHARP.from_param("abc"), "abcabcabc");

    # XXX Replace by c_char_p tests
    }
    function test_cstrings(){
        from ctypes import c_char_p, byref;

        # c_char_p.from_param on a Python String packs the string
        # into a cparam object
        s = "123";
        this.assertIs(c_char_p.from_param(s)._obj, s);

        # new in 0.9.1: convert (encode) unicode to ascii
        this.assertEqual(c_char_p.from_param(u"123")._obj, "123");
        this.assertRaises(UnicodeEncodeError, c_char_p.from_param, u"123\377");

        this.assertRaises(TypeError, c_char_p.from_param, 42);

        # calling c_char_p.from_param with a c_char_p instance
        # returns the argument itself:
        a = c_char_p("123");
        this.assertIs(c_char_p.from_param(a), a);

    }
    @need_symbol('c_wchar_p');
    function test_cw_strings(){
        from ctypes import byref, c_wchar_p;
        s = u"123";
        if sys.platform == "win32"{
            this.assertTrue(c_wchar_p.from_param(s)._obj is s);
            this.assertRaises(TypeError, c_wchar_p.from_param, 42);

            # new in 0.9.1: convert (decode) ascii to unicode
            this.assertEqual(c_wchar_p.from_param("123")._obj, u"123");
        } this.assertRaises(UnicodeDecodeError, c_wchar_p.from_param, "123\377");

        pa = c_wchar_p.from_param(c_wchar_p(u"123"));
        this.assertEqual(type(pa), c_wchar_p);

    }
    function test_int_pointers(){
        from ctypes import c_short, c_uint, c_int, c_long, POINTER, pointer;
        LPINT = POINTER(c_int);

##        p = pointer(c_int(42))
##        x = LPINT.from_param(p)
        x = LPINT.from_param(pointer(c_int(42)));
        this.assertEqual(x.contents.value, 42);
        this.assertEqual(LPINT(c_int(42)).contents.value, 42);

        this.assertEqual(LPINT.from_param(nil), nil);

        if c_int != c_long{
            this.assertRaises(TypeError, LPINT.from_param, pointer(c_long(42)));
        } this.assertRaises(TypeError, LPINT.from_param, pointer(c_uint(42)));
        this.assertRaises(TypeError, LPINT.from_param, pointer(c_short(42)));

    }
    function test_byref_pointer(){
        # The from_param class method of POINTER(typ) classes accepts what is
        # returned by byref(obj), it type(obj) == typ
        from ctypes import c_short, c_uint, c_int, c_long, pointer, POINTER, byref;
        LPINT = POINTER(c_int);

        LPINT.from_param(byref(c_int(42)));

        this.assertRaises(TypeError, LPINT.from_param, byref(c_short(22)));
        if c_int != c_long{
            this.assertRaises(TypeError, LPINT.from_param, byref(c_long(22)));
        } this.assertRaises(TypeError, LPINT.from_param, byref(c_uint(22)));

    }
    function test_byref_pointerpointer(){
        # See above
        from ctypes import c_short, c_uint, c_int, c_long, pointer, POINTER, byref;

        LPLPINT = POINTER(POINTER(c_int));
        LPLPINT.from_param(byref(pointer(c_int(42))));

        this.assertRaises(TypeError, LPLPINT.from_param, byref(pointer(c_short(22))));
        if c_int != c_long{
            this.assertRaises(TypeError, LPLPINT.from_param, byref(pointer(c_long(22))));
        } this.assertRaises(TypeError, LPLPINT.from_param, byref(pointer(c_uint(22))));

    }
    function test_array_pointers(){
        from ctypes import c_short, c_uint, c_int, c_long, POINTER;
        INTARRAY = c_int * 3;
        ia = INTARRAY();
        this.assertEqual(len(ia), 3);
        this.assertEqual([ia[i] for i in range(3)], [0, 0, 0]);

        # Pointers are only compatible with arrays containing items of
        # the same type!
        LPINT = POINTER(c_int);
        LPINT.from_param((c_int*3)());
        this.assertRaises(TypeError, LPINT.from_param, c_short*3);
        this.assertRaises(TypeError, LPINT.from_param, c_long*3);
        this.assertRaises(TypeError, LPINT.from_param, c_uint*3);

    }
    function test_noctypes_argtype(){
        import _ctypes_test;
        from ctypes import CDLL, c_void_p, ArgumentError;

        func = CDLL(_ctypes_test.__file__)._testfunc_p_p;
        func.restype = c_void_p;
        # TypeError: has no from_param method
        this.assertRaises(TypeError, setattr, func, "argtypes", (object,));

        class Adapter(object){
            function from_param(cls, obj){
                return nil;

        }
        } func.argtypes = (Adapter(),);
        this.assertEqual(func(nil), nil);
        this.assertEqual(func(object()), nil);

        class Adapter(object){
            function from_param(cls, obj){
                return obj;

        }
        } func.argtypes = (Adapter(),);
        # don't know how to convert parameter 1
        this.assertRaises(ArgumentError, func, object());
        this.assertEqual(func(c_void_p(42)), 42);

        class Adapter(object){
            function from_param(cls, obj){
                raise ValueError(obj);

        }
        } func.argtypes = (Adapter(),);
        # ArgumentError: argument 1: ValueError: 99
        this.assertRaises(ArgumentError, func, 99);

    }
    function test_abstract(){
        from ctypes import (Array, Structure, Union, _Pointer,
                            _SimpleCData, _CFuncPtr);

        this.assertRaises(TypeError, Array.from_param, 42);
        this.assertRaises(TypeError, Structure.from_param, 42);
        this.assertRaises(TypeError, Union.from_param, 42);
        this.assertRaises(TypeError, _CFuncPtr.from_param, 42);
        this.assertRaises(TypeError, _Pointer.from_param, 42);
        this.assertRaises(TypeError, _SimpleCData.from_param, 42);

    }
    @test.support.cpython_only;
    function test_issue31311(){
        # __setstate__ should neither raise a SystemError nor crash in case
        # of a bad __dict__.
        from ctypes import Structure;

        class BadStruct(Structure){
            @property;
            function __dict__(){
                pass;
        } } with this.assertRaises(TypeError){
            BadStruct().__setstate__({}, b'foo');

        }
        class WorseStruct(Structure){
            @property;
            function __dict__(){
                1/0.0;
        } } with this.assertRaises(ZeroDivisionError){
            WorseStruct().__setstate__({}, b'foo');

################################################################

}
} } if __name__ == '__main__'{
    unittest.main();

}