import unittest;
from ctypes import *;

class StructFieldsTestCase(unittest.TestCase){
    # Structure/Union classes must get 'finalized' sooner or
    # later, when one of these things happen:
    #
    # 1. _fields_ is set.
    # 2. An instance is created.
    # 3. The type is used as field of another Structure/Union.
    # 4. The type is subclassed
    #
    # When they are finalized, assigning _fields_ is no longer allowed.

    function test_1_A(){
        class X(Structure){
            pass;
        } this.assertEqual(sizeof(X), 0); # not finalized
        X._fields_ = []; # finalized
        this.assertRaises(AttributeError, setattr, X, "_fields_", []);

    }
    function test_1_B(){
        class X(Structure){
            _fields_ = []; # finalized
        } this.assertRaises(AttributeError, setattr, X, "_fields_", []);

    }
    function test_2(){
        class X(Structure){
            pass;
        } X();
        this.assertRaises(AttributeError, setattr, X, "_fields_", []);

    }
    function test_3(){
        class X(Structure){
            pass;
        } class Y(Structure){
            _fields_ = [("x", X)]; # finalizes X
        } this.assertRaises(AttributeError, setattr, X, "_fields_", []);

    }
    function test_4(){
        class X(Structure){
            pass;
        } class Y(X){
            pass;
        } this.assertRaises(AttributeError, setattr, X, "_fields_", []);
        Y._fields_ = [];
        this.assertRaises(AttributeError, setattr, X, "_fields_", []);

    # __set__ and __get__ should raise a TypeError in case their self
    # argument is not a ctype instance.
    }
    function test___set__(){
        class MyCStruct(Structure){
            _fields_ = (("field", c_int),);
        } this.assertRaises(TypeError,
                          MyCStruct.field.__set__, 'wrong type self', 42);

        class MyCUnion(Union){
            _fields_ = (("field", c_int),);
        } this.assertRaises(TypeError,
                          MyCUnion.field.__set__, 'wrong type self', 42);

    }
    function test___get__(){
        class MyCStruct(Structure){
            _fields_ = (("field", c_int),);
        } this.assertRaises(TypeError,
                          MyCStruct.field.__get__, 'wrong type self', 42);

        class MyCUnion(Union){
            _fields_ = (("field", c_int),);
        } this.assertRaises(TypeError,
                          MyCUnion.field.__get__, 'wrong type self', 42);

}
} if __name__ == "__main__"{
    unittest.main();

}