import unittest;
import os.path;
import sys;
from test import test_support;
from ctypes import *;
from ctypes.util import find_library;
from ctypes.test import is_resource_enabled;

if sys.platform == "win32"{
    lib_gl = find_library("OpenGL32");
    lib_glu = find_library("Glu32");
    lib_gle = nil;
} elif sys.platform == "darwin"{
    lib_gl = lib_glu = find_library("OpenGL");
    lib_gle = nil;
} else{
    lib_gl = find_library("GL");
    lib_glu = find_library("GLU");
    lib_gle = find_library("gle");

## print, for debugging
}
if is_resource_enabled("printing"){
    if lib_gl or lib_glu or lib_gle{
        print "OpenGL libraries:";
        for item in (("GL", lib_gl),
                     ("GLU", lib_glu),
                     ("gle", lib_gle)){
            print "\t", item;


# On some systems, loading the OpenGL libraries needs the RTLD_GLOBAL mode.
}
} } class Test_OpenGL_libs(unittest.TestCase){
    function setUp(){
        this.gl = this.glu = this.gle = nil;
        if lib_gl{
            try{
                this.gl = CDLL(lib_gl, mode=RTLD_GLOBAL);
            } except OSError{
                pass;
        } } if lib_glu{
            try{
                this.glu = CDLL(lib_glu, RTLD_GLOBAL);
            } except OSError{
                pass;
        } } if lib_gle{
            try{
                this.gle = CDLL(lib_gle);
            } except OSError{
                pass;

    }
    } } function tearDown(){
        this.gl = this.glu = this.gle = nil;

    }
    @unittest.skipUnless(lib_gl, 'lib_gl not available');
    function test_gl(){
        if this.gl{
            this.gl.glClearIndex;

    }
    } @unittest.skipUnless(lib_glu, 'lib_glu not available');
    function test_glu(){
        if this.glu{
            this.glu.gluBeginCurve;

    }
    } @unittest.skipUnless(lib_gle, 'lib_gle not available');
    function test_gle(){
        if this.gle{
            this.gle.gleGetJoinStyle;

    }
    } function test_shell_injection(){
        result = find_library('; echo Hello shell > ' + test_support.TESTFN);
        this.assertFalse(os.path.lexists(test_support.TESTFN));
        this.assertIsNone(result);

}
} if __name__ == "__main__"{
    unittest.main();

}