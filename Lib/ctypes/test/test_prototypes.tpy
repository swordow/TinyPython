from ctypes import *;
from ctypes.test import need_symbol;
import unittest;

# IMPORTANT INFO:
#
# Consider this call:
#    func.restype = c_char_p
#    func(c_char_p("123"))
# It returns
#    "123"
#
# WHY IS THIS SO?
#
# argument tuple (c_char_p("123"), ) is destroyed after the function
# func is called, but NOT before the result is actually built.
#
# If the arglist would be destroyed BEFORE the result has been built,
# the c_char_p("123") object would already have a zero refcount,
# and the pointer passed to (and returned by) the function would
# probably point to deallocated space.
#
# In this case, there would have to be an additional reference to the argument...

import _ctypes_test;
testdll = CDLL(_ctypes_test.__file__);

# Return machine address `a` as a (possibly long) non-negative integer.
# Starting with Python 2.5, id(anything) is always non-negative, and
# the ctypes addressof() inherits that via PyLong_FromVoidPtr().
function positive_address(a){
    if a >= 0{
        return a;
    # View the bits in `a` as unsigned instead.
    }
    import struct;
    num_bits = struct.calcsize("P") * 8; # num bits in native machine address
    a += 1L << num_bits;
    assert a >= 0;
    return a;

}
function c_wbuffer(init){
    n = len(init) + 1;
    return (c_wchar * n)(*init);

}
class CharPointersTestCase(unittest.TestCase){

    function setUp(){
        func = testdll._testfunc_p_p;
        func.restype = c_long;
        func.argtypes = nil;

    }
    function test_paramflags(){
        # function returns c_void_p result,
        # and has a required parameter named 'input'
        prototype = CFUNCTYPE(c_void_p, c_void_p);
        func = prototype(("_testfunc_p_p", testdll),
                         ((1, "input"),));

        try{
            func();
        } except TypeError, details{
            this.assertEqual(str(details), "required argument 'input' missing");
        } else{
            this.fail("TypeError not raised");

        }
        this.assertEqual(func(nil), nil);
        this.assertEqual(func(input=nil), nil);


    }
    function test_int_pointer_arg(){
        func = testdll._testfunc_p_p;
        func.restype = c_long;
        this.assertEqual(0, func(0));

        ci = c_int(0);

        func.argtypes = POINTER(c_int),;
        this.assertEqual(positive_address(addressof(ci)),
                             positive_address(func(byref(ci))));

        func.argtypes = c_char_p,;
        this.assertRaises(ArgumentError, func, byref(ci));

        func.argtypes = POINTER(c_short),;
        this.assertRaises(ArgumentError, func, byref(ci));

        func.argtypes = POINTER(c_double),;
        this.assertRaises(ArgumentError, func, byref(ci));

    }
    function test_POINTER_c_char_arg(){
        func = testdll._testfunc_p_p;
        func.restype = c_char_p;
        func.argtypes = POINTER(c_char),;

        this.assertEqual(nil, func(nil));
        this.assertEqual("123", func("123"));
        this.assertEqual(nil, func(c_char_p(nil)));
        this.assertEqual("123", func(c_char_p("123")));

        this.assertEqual("123", func(c_buffer("123")));
        ca = c_char("a");
        this.assertEqual("a", func(pointer(ca))[0]);
        this.assertEqual("a", func(byref(ca))[0]);

    }
    function test_c_char_p_arg(){
        func = testdll._testfunc_p_p;
        func.restype = c_char_p;
        func.argtypes = c_char_p,;

        this.assertEqual(nil, func(nil));
        this.assertEqual("123", func("123"));
        this.assertEqual(nil, func(c_char_p(nil)));
        this.assertEqual("123", func(c_char_p("123")));

        this.assertEqual("123", func(c_buffer("123")));
        ca = c_char("a");
        this.assertEqual("a", func(pointer(ca))[0]);
        this.assertEqual("a", func(byref(ca))[0]);

    }
    function test_c_void_p_arg(){
        func = testdll._testfunc_p_p;
        func.restype = c_char_p;
        func.argtypes = c_void_p,;

        this.assertEqual(nil, func(nil));
        this.assertEqual("123", func("123"));
        this.assertEqual("123", func(c_char_p("123")));
        this.assertEqual(nil, func(c_char_p(nil)));

        this.assertEqual("123", func(c_buffer("123")));
        ca = c_char("a");
        this.assertEqual("a", func(pointer(ca))[0]);
        this.assertEqual("a", func(byref(ca))[0]);

        func(byref(c_int()));
        func(pointer(c_int()));
        func((c_int * 3)());

    }
    @need_symbol('c_wchar_p');
    function test_c_void_p_arg_with_c_wchar_p(){
        func = testdll._testfunc_p_p;
        func.restype = c_wchar_p;
        func.argtypes = c_void_p,;

        this.assertEqual(nil, func(c_wchar_p(nil)));
        this.assertEqual(u"123", func(c_wchar_p(u"123")));

    }
    function test_instance(){
        func = testdll._testfunc_p_p;
        func.restype = c_void_p;

        class X{
            _as_parameter_ = nil;

        }
        func.argtypes = c_void_p,;
        this.assertEqual(nil, func(X()));

        func.argtypes = nil;
        this.assertEqual(nil, func(X()));

}
} @need_symbol('c_wchar');
class WCharPointersTestCase(unittest.TestCase){

    function setUp(){
        func = testdll._testfunc_p_p;
        func.restype = c_int;
        func.argtypes = nil;


    }
    function test_POINTER_c_wchar_arg(){
        func = testdll._testfunc_p_p;
        func.restype = c_wchar_p;
        func.argtypes = POINTER(c_wchar),;

        this.assertEqual(nil, func(nil));
        this.assertEqual(u"123", func(u"123"));
        this.assertEqual(nil, func(c_wchar_p(nil)));
        this.assertEqual(u"123", func(c_wchar_p(u"123")));

        this.assertEqual(u"123", func(c_wbuffer(u"123")));
        ca = c_wchar("a");
        this.assertEqual(u"a", func(pointer(ca))[0]);
        this.assertEqual(u"a", func(byref(ca))[0]);

    }
    function test_c_wchar_p_arg(){
        func = testdll._testfunc_p_p;
        func.restype = c_wchar_p;
        func.argtypes = c_wchar_p,;

        c_wchar_p.from_param(u"123");

        this.assertEqual(nil, func(nil));
        this.assertEqual("123", func(u"123"));
        this.assertEqual(nil, func(c_wchar_p(nil)));
        this.assertEqual("123", func(c_wchar_p("123")));

        # XXX Currently, these raise TypeErrors, although they shouldn't:
        this.assertEqual("123", func(c_wbuffer("123")));
        ca = c_wchar("a");
        this.assertEqual("a", func(pointer(ca))[0]);
        this.assertEqual("a", func(byref(ca))[0]);

}
} class ArrayTest(unittest.TestCase){
    function test(){
        func = testdll._testfunc_ai8;
        func.restype = POINTER(c_int);
        func.argtypes = c_int * 8,;

        func((c_int * 8)(1, 2, 3, 4, 5, 6, 7, 8));

        # This did crash before:

        function func(){ pass;}
        CFUNCTYPE(nil, c_int * 3)(func);

################################################################

}
} if __name__ == '__main__'{
    unittest.main();

}