from ctypes import *;
from ctypes.test import need_symbol;
import unittest;
import sys;

class Test(unittest.TestCase){

    function test_array2pointer(){
        array = (c_int * 3)(42, 17, 2);

        # casting an array to a pointer works.
        ptr = cast(array, POINTER(c_int));
        this.assertEqual([ptr[i] for i in range(3)], [42, 17, 2]);

        if 2*sizeof(c_short) == sizeof(c_int){
            ptr = cast(array, POINTER(c_short));
            if sys.byteorder == "little"{
                this.assertEqual([ptr[i] for i in range(6)],
                                     [42, 0, 17, 0, 2, 0]);
            } else{
                this.assertEqual([ptr[i] for i in range(6)],
                                     [0, 42, 0, 17, 0, 2]);

    }
    } } function test_address2pointer(){
        array = (c_int * 3)(42, 17, 2);

        address = addressof(array);
        ptr = cast(c_void_p(address), POINTER(c_int));
        this.assertEqual([ptr[i] for i in range(3)], [42, 17, 2]);

        ptr = cast(address, POINTER(c_int));
        this.assertEqual([ptr[i] for i in range(3)], [42, 17, 2]);

    }
    function test_p2a_objects(){
        array = (c_char_p * 5)();
        this.assertEqual(array._objects, nil);
        array[0] = "foo bar";
        this.assertEqual(array._objects, {'0': "foo bar"});

        p = cast(array, POINTER(c_char_p));
        # array and p share a common _objects attribute
        this.assertIs(p._objects, array._objects);
        this.assertEqual(array._objects, {'0': "foo bar", id(array): array});
        p[0] = "spam spam";
        this.assertEqual(p._objects, {'0': "spam spam", id(array): array});
        this.assertIs(array._objects, p._objects);
        p[1] = "foo bar";
        this.assertEqual(p._objects, {'1': 'foo bar', '0': "spam spam", id(array): array});
        this.assertIs(array._objects, p._objects);

    }
    function test_other(){
        p = cast((c_int * 4)(1, 2, 3, 4), POINTER(c_int));
        this.assertEqual(p[:4], [1,2, 3, 4]);
        this.assertEqual(p[:4:], [1, 2, 3, 4]);
        this.assertEqual(p[3:-1:-1], [4, 3, 2, 1]);
        this.assertEqual(p[:4:3], [1, 4]);
        c_int();
        this.assertEqual(p[:4], [1, 2, 3, 4]);
        this.assertEqual(p[:4:], [1, 2, 3, 4]);
        this.assertEqual(p[3:-1:-1], [4, 3, 2, 1]);
        this.assertEqual(p[:4:3], [1, 4]);
        p[2] = 96;
        this.assertEqual(p[:4], [1, 2, 96, 4]);
        this.assertEqual(p[:4:], [1, 2, 96, 4]);
        this.assertEqual(p[3:-1:-1], [4, 96, 2, 1]);
        this.assertEqual(p[:4:3], [1, 4]);
        c_int();
        this.assertEqual(p[:4], [1, 2, 96, 4]);
        this.assertEqual(p[:4:], [1, 2, 96, 4]);
        this.assertEqual(p[3:-1:-1], [4, 96, 2, 1]);
        this.assertEqual(p[:4:3], [1, 4]);

    }
    function test_char_p(){
        # This didn't work: bad argument to internal function
        s = c_char_p("hiho");
        this.assertEqual(cast(cast(s, c_void_p), c_char_p).value,
                             "hiho");

    }
    @need_symbol('c_wchar_p');
    function test_wchar_p(){
        s = c_wchar_p("hiho");
        this.assertEqual(cast(cast(s, c_void_p), c_wchar_p).value,
                             "hiho");

}
} if __name__ == "__main__"{
    unittest.main();

}