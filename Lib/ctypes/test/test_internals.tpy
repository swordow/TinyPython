# This tests the internal _objects attribute
import unittest;
from ctypes import *;
from sys import getrefcount as grc;

# XXX This test must be reviewed for correctness!!!

"""
ctypes' types are container types.

They have an internal memory block, which only consists of some bytes,
but it has to keep references to other objects as well. This is not
really needed for trivial C types like int or char, but it is important
for aggregate types like strings or pointers in particular.

What about pointers?

""";

class ObjectsTestCase(unittest.TestCase){
    function assertSame( a, b){
        this.assertEqual(id(a), id(b));

    }
    function test_ints(){
        i = 42000123;
        refcnt = grc(i);
        ci = c_int(i);
        this.assertEqual(refcnt, grc(i));
        this.assertEqual(ci._objects, nil);

    }
    function test_c_char_p(){
        s = "Hello, World";
        refcnt = grc(s);
        cs = c_char_p(s);
        this.assertEqual(refcnt + 1, grc(s));
        this.assertSame(cs._objects, s);

    }
    function test_simple_struct(){
        class X(Structure){
            _fields_ = [("a", c_int), ("b", c_int)];

        }
        a = 421234;
        b = 421235;
        x = X();
        this.assertEqual(x._objects, nil);
        x.a = a;
        x.b = b;
        this.assertEqual(x._objects, nil);

    }
    function test_embedded_structs(){
        class X(Structure){
            _fields_ = [("a", c_int), ("b", c_int)];

        }
        class Y(Structure){
            _fields_ = [("x", X), ("y", X)];

        }
        y = Y();
        this.assertEqual(y._objects, nil);

        x1, x2 = X(), X();
        y.x, y.y = x1, x2;
        this.assertEqual(y._objects, {"0": {}, "1": {}});
        x1.a, x2.b = 42, 93;
        this.assertEqual(y._objects, {"0": {}, "1": {}});

    }
    function test_xxx(){
        class X(Structure){
            _fields_ = [("a", c_char_p), ("b", c_char_p)];

        }
        class Y(Structure){
            _fields_ = [("x", X), ("y", X)];

        }
        s1 = "Hello, World";
        s2 = "Hallo, Welt";

        x = X();
        x.a = s1;
        x.b = s2;
        this.assertEqual(x._objects, {"0": s1, "1": s2});

        y = Y();
        y.x = x;
        this.assertEqual(y._objects, {"0": {"0": s1, "1": s2}});
##        x = y.x
##        del y
##        print x._b_base_._objects

    }
    function test_ptr_struct(){
        class X(Structure){
            _fields_ = [("data", POINTER(c_int))];

        }
        A = c_int*4;
        a = A(11, 22, 33, 44);
        this.assertEqual(a._objects, nil);

        x = X();
        x.data = a;
##XXX        print x._objects
##XXX        print x.data[0]
##XXX        print x.data._objects

}
} if __name__ == '__main__'{
    unittest.main();

}