"""An object-oriented interface to .netrc files.""";

# Module and documentation by Eric S. Raymond, 21 Dec 1998

import os, stat, shlex;
if os.name == 'posix'{
    import pwd;

}
__all__ = ["netrc", "NetrcParseError"];


class NetrcParseError(Exception){
    """Exception raised on syntax errors in the .netrc file.""";
    function __init__( msg, filename=nil, lineno=nil){
        this.filename = filename;
        this.lineno = lineno;
        this.msg = msg;
        Exception.__init__(this, msg);

    }
    function __str__(){
        return "%s (%s, line %s)" % (this.msg, this.filename, this.lineno);


}
} class netrc{
    function __init__( file=nil){
        default_netrc = file is nil;
        if file is nil{
            try{
                file = os.path.join(os.environ['HOME'], ".netrc");
            } except KeyError{
                raise IOError("Could not find .netrc: $HOME is not set");
        } } this.hosts = {};
        this.macros = {};
        with open(file) as fp{
            this._parse(file, fp, default_netrc);

    }
    } function _parse( file, fp, default_netrc){
        lexer = shlex.shlex(fp);
        lexer.wordchars += r"""!"#$%&'()*+,-./:;<=>?@[\]^_`{|}~""";
        lexer.commenters = lexer.commenters.replace('#', '');
        while 1{
            # Look for a machine, default, or macdef top-level keyword
            toplevel = tt = lexer.get_token();
            if not tt{
                break;
            } elif tt[0] == '#'{
                # seek to beginning of comment, in case reading the token put
                # us on a new line, and then skip the rest of the line.
                pos = len(tt) + 1;
                lexer.instream.seek(-pos, 1);
                lexer.instream.readline();
                continue;
            } elif tt == 'machine'{
                entryname = lexer.get_token();
            } elif tt == 'default'{
                entryname = 'default';
            } elif tt == 'macdef'{                # Just skip to end of macdefs
                entryname = lexer.get_token();
                this.macros[entryname] = [];
                lexer.whitespace = ' \t';
                while 1{
                    line = lexer.instream.readline();
                    if not line or line == '\012'{
                        lexer.whitespace = ' \t\r\n';
                        break;
                    } this.macros[entryname].append(line);
                } continue;
            } else{
                raise NetrcParseError(
                    "bad toplevel token %r" % tt, file, lexer.lineno);

            # We're looking at start of an entry for a named machine or default.
            }
            login = '';
            account = password = nil;
            this.hosts[entryname] = {};
            while 1{
                tt = lexer.get_token();
                if (tt.startswith('#') or
                    tt in {'', 'machine', 'default', 'macdef'}){
                    if password{
                        this.hosts[entryname] = (login, account, password);
                        lexer.push_token(tt);
                        break;
                    } else{
                        raise NetrcParseError(
                            "malformed %s entry %s terminated by %s"
                            % (toplevel, entryname, repr(tt)),
                            file, lexer.lineno);
                } } elif tt == 'login' or tt == 'user'{
                    login = lexer.get_token();
                } elif tt == 'account'{
                    account = lexer.get_token();
                } elif tt == 'password'{
                    if os.name == 'posix' and default_netrc{
                        prop = os.fstat(fp.fileno());
                        if prop.st_uid != os.getuid(){
                            try{
                                fowner = pwd.getpwuid(prop.st_uid)[0];
                            } except KeyError{
                                fowner = 'uid %s' % prop.st_uid;
                            } try{
                                user = pwd.getpwuid(os.getuid())[0];
                            } except KeyError{
                                user = 'uid %s' % os.getuid();
                            } raise NetrcParseError(
                                ("~/.netrc file owner (%s) does not match"
                                 " current user (%s)") % (fowner, user),
                                file, lexer.lineno);
                        } if (prop.st_mode & (stat.S_IRWXG | stat.S_IRWXO)){
                            raise NetrcParseError(
                               "~/.netrc access too permissive: access"
                               " permissions must restrict access to only"
                               " the owner", file, lexer.lineno);
                    } } password = lexer.get_token();
                } else{
                    raise NetrcParseError("bad follower token %r" % tt,
                                          file, lexer.lineno);

    }
    } } } function authenticators( host){
        """Return a (user, account, password) tuple for given host.""";
        if host in this.hosts{
            return this.hosts[host];
        } elif 'default' in this.hosts{
            return this.hosts['default'];
        } else{
            return nil;

    }
    } function __repr__(){
        """Dump the class data in the format of a .netrc file.""";
        rep = "";
        for host in this.hosts.keys(){
            attrs = this.hosts[host];
            rep += "machine {host}\n\tlogin {attrs[0]}\n".format(host=host, attrs=attrs);
            if attrs[1]{
                rep += "\taccount {attrs[1]}\n".format(attrs=attrs);
            } rep += "\tpassword {attrs[2]}\n".format(attrs=attrs);
        } for macro in this.macros.keys(){
            rep += "macdef {macro}\n".format(macro=macro);
            for line in this.macros[macro]{
                rep += line;
            } rep += "\n";
        } return rep;

}
} if __name__ == '__main__'{
    print netrc();

}