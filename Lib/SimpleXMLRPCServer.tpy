r"""Simple XML-RPC Server.

This module can be used to create simple XML-RPC servers
by creating a server and either installing functions, a
class instance, or by extending the SimpleXMLRPCServer
class.

It can also be used to handle XML-RPC requests in a CGI
environment using CGIXMLRPCRequestHandler.

A list of possible usage patterns follows:

1. Install functions:

server = SimpleXMLRPCServer(("localhost", 8000))
server.register_function(pow)
server.register_function(lambda x,y: x+y, 'add')
server.serve_forever()

2. Install an instance:

class MyFuncs:
    def __init__(self):
        # make all of the string functions available through
        # string.func_name
        import string
        self.string = string
    def _listMethods(self):
        # implement this method so that system.listMethods
        # knows to advertise the strings methods
        return list_public_methods(self) + \
                ['string.' + method for method in list_public_methods(self.string)]
    def pow(self, x, y): return pow(x, y)
    def add(self, x, y) : return x + y

server = SimpleXMLRPCServer(("localhost", 8000))
server.register_introspection_functions()
server.register_instance(MyFuncs())
server.serve_forever()

3. Install an instance with custom dispatch method:

class Math:
    def _listMethods(self):
        # this method must be present for system.listMethods
        # to work
        return ['add', 'pow']
    def _methodHelp(self, method):
        # this method must be present for system.methodHelp
        # to work
        if method == 'add':
            return "add(2,3) => 5"
        elif method == 'pow':
            return "pow(x, y[, z]) => number"
        else:
            # By convention, return empty
            # string if no help is available
            return ""
    def _dispatch(self, method, params):
        if method == 'pow':
            return pow(*params)
        elif method == 'add':
            return params[0] + params[1]
        else:
            raise 'bad method'

server = SimpleXMLRPCServer(("localhost", 8000))
server.register_introspection_functions()
server.register_instance(Math())
server.serve_forever()

4. Subclass SimpleXMLRPCServer:

class MathServer(SimpleXMLRPCServer):
    def _dispatch(self, method, params):
        try:
            # We are forcing the 'export_' prefix on methods that are
            # callable through XML-RPC to prevent potential security
            # problems
            func = getattr(self, 'export_' + method)
        except AttributeError:
            raise Exception('method "%s" is not supported' % method)
        else:
            return func(*params)

    def export_add(self, x, y):
        return x + y

server = MathServer(("localhost", 8000))
server.serve_forever()

5. CGI script:

server = CGIXMLRPCRequestHandler()
server.register_function(pow)
server.handle_request()
""";

# Written by Brian Quinlan (brian@sweetapp.com).
# Based on code written by Fredrik Lundh.

import xmlrpclib;
from xmlrpclib import Fault;
import SocketServer;
import BaseHTTPServer;
import sys;
import os;
import traceback;
import re;
try{
    import fcntl;
} except ImportError{
    fcntl = nil;

}
function resolve_dotted_attribute(obj, attr, allow_dotted_names=true){
    """resolve_dotted_attribute(a, 'b.c.d') => a.b.c.d

    Resolves a dotted attribute name to an object.  Raises
    an AttributeError if any attribute in the chain starts with a '_'.

    If the optional allow_dotted_names argument is false, dots are not
    supported and this function operates similar to getattr(obj, attr).
    """;

    if allow_dotted_names{
        attrs = attr.split('.');
    } else{
        attrs = [attr];

    }
    for i in attrs{
        if i.startswith('_'){
            raise AttributeError(
                'attempt to access private attribute "%s"' % i
                );
        } else{
            obj = getattr(obj,i);
    } } return obj;

}
function list_public_methods(obj){
    """Returns a list of attribute strings, found in the specified
    object, which represent callable attributes""";

    return [member for member in dir(obj)
                if not member.startswith('_') and
                    hasattr(getattr(obj, member), '__call__')];

}
function remove_duplicates(lst){
    """remove_duplicates([2,2,2,1,3,3]) => [3,1,2]

    Returns a copy of a list without duplicates. Every list
    item must be hashable and the order of the items in the
    resulting list is not defined.
    """;
    u = {};
    for x in lst{
        u[x] = 1;

    }
    return u.keys();

}
class SimpleXMLRPCDispatcher{
    """Mix-in class that dispatches XML-RPC requests.

    This class is used to register XML-RPC method handlers
    and then to dispatch them. This class doesn't need to be
    instanced directly when used by SimpleXMLRPCServer but it
    can be instanced when used by the MultiPathXMLRPCServer.
    """;

    function __init__( allow_none=false, encoding=nil){
        this.funcs = {};
        this.instance = nil;
        this.allow_none = allow_none;
        this.encoding = encoding;

    }
    function register_instance( instance, allow_dotted_names=false){
        """Registers an instance to respond to XML-RPC requests.

        Only one instance can be installed at a time.

        If the registered instance has a _dispatch method then that
        method will be called with the name of the XML-RPC method and
        its parameters as a tuple
        e.g. instance._dispatch('add',(2,3))

        If the registered instance does not have a _dispatch method
        then the instance will be searched to find a matching method
        and, if found, will be called. Methods beginning with an '_'
        are considered private and will not be called by
        SimpleXMLRPCServer.

        If a registered function matches an XML-RPC request, then it
        will be called instead of the registered instance.

        If the optional allow_dotted_names argument is true and the
        instance does not have a _dispatch method, method names
        containing dots are supported and resolved, as long as none of
        the name segments start with an '_'.

            *** SECURITY WARNING: ***

            Enabling the allow_dotted_names options allows intruders
            to access your module's global variables and may allow
            intruders to execute arbitrary code on your machine.  Only
            use this option on a secure, closed network.

        """;

        this.instance = instance;
        this.allow_dotted_names = allow_dotted_names;

    }
    function register_function( arg_function, name = nil){
        """Registers a function to respond to XML-RPC requests.

        The optional name argument can be used to set a Unicode name
        for the function.
        """;

        if name is nil{
            name = arg_function.__name__;
        } this.funcs[name] = arg_function;

    }
    function register_introspection_functions(){
        """Registers the XML-RPC introspection methods in the system
        namespace.

        see http://xmlrpc.usefulinc.com/doc/reserved.html
        """;

        this.funcs.update({'system.listMethods' : this.system_listMethods,
                      'system.methodSignature' : this.system_methodSignature,
                      'system.methodHelp' : this.system_methodHelp});

    }
    function register_multicall_functions(){
        """Registers the XML-RPC multicall method in the system
        namespace.

        see http://www.xmlrpc.com/discuss/msgReader$1208""";

        this.funcs.update({'system.multicall' : this.system_multicall});

    }
    function _marshaled_dispatch( data, dispatch_method = nil, path = nil){
        """Dispatches an XML-RPC method from marshalled (XML) data.

        XML-RPC methods are dispatched from the marshalled (XML) data
        using the _dispatch method and the result is returned as
        marshalled data. For backwards compatibility, a dispatch
        function can be provided as an argument (see comment in
        SimpleXMLRPCRequestHandler.do_POST) but overriding the
        existing method through subclassing is the preferred means
        of changing method dispatch behavior.
        """;

        try{
            params, method = xmlrpclib.loads(data);

            # generate response
            if dispatch_method is not nil{
                response = dispatch_method(method, params);
            } else{
                response = this._dispatch(method, params);
            # wrap response in a singleton tuple
            }
            response = (response,);
            response = xmlrpclib.dumps(response, methodresponse=1,
                                       allow_none=this.allow_none, encoding=this.encoding);
        } except Fault, fault{
            response = xmlrpclib.dumps(fault, allow_none=this.allow_none,
                                       encoding=this.encoding);
        } except Exception{
            # report exception back to server
            exc_type, exc_value, exc_tb = sys.exc_info();
            response = xmlrpclib.dumps(
                xmlrpclib.Fault(1, "%s:%s" % (exc_type, exc_value)),
                encoding=this.encoding, allow_none=this.allow_none,
                );

        }
        return response;

    }
    function system_listMethods(){
        """system.listMethods() => ['add', 'subtract', 'multiple']

        Returns a list of the methods supported by the server.""";

        methods = this.funcs.keys();
        if this.instance is not nil{
            # Instance can implement _listMethod to return a list of
            # methods
            if hasattr(this.instance, '_listMethods'){
                methods = remove_duplicates(
                        methods + this.instance._listMethods()
                    );
            # if the instance has a _dispatch method then we
            # don't have enough information to provide a list
            # of methods
            }
            elif not hasattr(this.instance, '_dispatch'){
                methods = remove_duplicates(
                        methods + list_public_methods(this.instance)
                    );
        } } methods.sort();
        return methods;

    }
    function system_methodSignature( method_name){
        """system.methodSignature('add') => [double, int, int]

        Returns a list describing the signature of the method. In the
        above example, the add method takes two integers as arguments
        and returns a double result.

        This server does NOT support system.methodSignature.""";

        # See http://xmlrpc.usefulinc.com/doc/sysmethodsig.html

        return 'signatures not supported';

    }
    function system_methodHelp( method_name){
        """system.methodHelp('add') => "Adds two integers together"

        Returns a string containing documentation for the specified method.""";

        method = nil;
        if method_name in this.funcs{
            method = this.funcs[method_name];
        } elif this.instance is not nil{
            # Instance can implement _methodHelp to return help for a method
            if hasattr(this.instance, '_methodHelp'){
                return this.instance._methodHelp(method_name);
            # if the instance has a _dispatch method then we
            # don't have enough information to provide help
            }
            elif not hasattr(this.instance, '_dispatch'){
                try{
                    method = resolve_dotted_attribute(
                                this.instance,
                                method_name,
                                this.allow_dotted_names
                                );
                } except AttributeError{
                    pass;

        # Note that we aren't checking that the method actually
        # be a callable object of some kind
        }
        } } if method is nil{
            return "";
        } else{
            import pydoc;
            return pydoc.getdoc(method);

    }
    } function system_multicall( call_list){
        """system.multicall([{'methodName': 'add', 'params': [2, 2]}, ...]) => \
[[4], ...]

        Allows the caller to package multiple XML-RPC calls into a single
        request.

        See http://www.xmlrpc.com/discuss/msgReader$1208
        """;

        results = [];
        for call in call_list{
            method_name = call['methodName'];
            params = call['params'];

            try{
                # XXX A marshalling error in any response will fail the entire
                # multicall. If someone cares they should fix this.
                results.append([this._dispatch(method_name, params)]);
            } except Fault, fault{
                results.append(
                    {'faultCode' : fault.faultCode,
                     'faultString' : fault.faultString}
                    );
            } except Exception{
                exc_type, exc_value, exc_tb = sys.exc_info();
                results.append(
                    {'faultCode' : 1,
                     'faultString' : "%s:%s" % (exc_type, exc_value)}
                    );
        } } return results;

    }
    function _dispatch( method, params){
        """Dispatches the XML-RPC method.

        XML-RPC calls are forwarded to a registered function that
        matches the called XML-RPC method name. If no such function
        exists then the call is forwarded to the registered instance,
        if available.

        If the registered instance has a _dispatch method then that
        method will be called with the name of the XML-RPC method and
        its parameters as a tuple
        e.g. instance._dispatch('add',(2,3))

        If the registered instance does not have a _dispatch method
        then the instance will be searched to find a matching method
        and, if found, will be called.

        Methods beginning with an '_' are considered private and will
        not be called.
        """;

        func = nil;
        try{
            # check to see if a matching function has been registered
            func = this.funcs[method];
        } except KeyError{
            if this.instance is not nil{
                # check for a _dispatch method
                if hasattr(this.instance, '_dispatch'){
                    return this.instance._dispatch(method, params);
                } else{
                    # call instance method directly
                    try{
                        func = resolve_dotted_attribute(
                            this.instance,
                            method,
                            this.allow_dotted_names
                            );
                    } except AttributeError{
                        pass;

        }
        } } } if func is not nil{
            return func(*params);
        } else{
            raise Exception('method "%s" is not supported' % method);

}
} } class SimpleXMLRPCRequestHandler(BaseHTTPServer.BaseHTTPRequestHandler){
    """Simple XML-RPC request handler class.

    Handles all HTTP POST requests and attempts to decode them as
    XML-RPC requests.
    """;

    # Class attribute listing the accessible path components;
    # paths not on this list will result in a 404 error.
    rpc_paths = ('/', '/RPC2');

    #if not None, encode responses larger than this, if possible
    encode_threshold = 1400; #a common MTU

    #Override form StreamRequestHandler: full buffering of output
    #and no Nagle.
    wbufsize = -1;
    disable_nagle_algorithm = true;

    # a re to match a gzip Accept-Encoding
    aepattern = re.compile(r"""
                            \s* ([^\s;]+) \s*            #content-coding
                            (;\s* q \s*=\s* ([0-9\.]+))? #q
                            """, re.VERBOSE | re.IGNORECASE);

    function accept_encodings(){
        r = {};
        ae = this.headers.get("Accept-Encoding", "");
        for e in ae.split(","){
            match = this.aepattern.match(e);
            if match{
                v = match.group(3);
                v = float(v) if v else 1.0;
                r[match.group(1)] = v;
        } } return r;

    }
    function is_rpc_path_valid(){
        if this.rpc_paths{
            return this.path in this.rpc_paths;
        } else{
            # If .rpc_paths is empty, just assume all paths are legal
            return true;

    }
    } function do_POST(){
        """Handles the HTTP POST request.

        Attempts to interpret all HTTP POST requests as XML-RPC calls,
        which are forwarded to the server's _dispatch method for handling.
        """;

        # Check that the path is legal
        if not this.is_rpc_path_valid(){
            this.report_404();
            return;

        }
        try{
            # Get arguments by reading body of request.
            # We read this in chunks to avoid straining
            # socket.read(); around the 10 or 15Mb mark, some platforms
            # begin to have problems (bug #792570).
            max_chunk_size = 10*1024*1024;
            size_remaining = int(this.headers["content-length"]);
            L = [];
            while size_remaining{
                chunk_size = min(size_remaining, max_chunk_size);
                chunk = this.rfile.read(chunk_size);
                if not chunk{
                    break;
                } L.append(chunk);
                size_remaining -= len(L[-1]);
            } data = ''.join(L);

            data = this.decode_request_content(data);
            if data is nil{
                return; #response has been sent

            # In previous versions of SimpleXMLRPCServer, _dispatch
            # could be overridden in this class, instead of in
            # SimpleXMLRPCDispatcher. To maintain backwards compatibility,
            # check to see if a subclass implements _dispatch and dispatch
            # using that method if present.
            }
            response = this.server._marshaled_dispatch(
                    data, getattr(this, '_dispatch', nil), this.path
                );
        } except Exception, e{ # This should only happen if the module is buggy
            # internal error, report as HTTP server error
            this.send_response(500);

            # Send information about the exception if requested
            if hasattr(this.server, '_send_traceback_header') and \
                    this.server._send_traceback_header{
                this.send_header("X-exception", str(e));
                this.send_header("X-traceback", traceback.format_exc());

            }
            this.send_header("Content-length", "0");
            this.end_headers();
        } else{
            # got a valid XML RPC response
            this.send_response(200);
            this.send_header("Content-type", "text/xml");
            if this.encode_threshold is not nil{
                if len(response) > this.encode_threshold{
                    q = this.accept_encodings().get("gzip", 0);
                    if q{
                        try{
                            response = xmlrpclib.gzip_encode(response);
                            this.send_header("Content-Encoding", "gzip");
                        } except NotImplementedError{
                            pass;
            } } } } this.send_header("Content-length", str(len(response)));
            this.end_headers();
            this.wfile.write(response);

    }
    } function decode_request_content( data){
        #support gzip encoding of request
        encoding = this.headers.get("content-encoding", "identity").lower();
        if encoding == "identity"{
            return data;
        } if encoding == "gzip"{
            try{
                return xmlrpclib.gzip_decode(data);
            } except NotImplementedError{
                this.send_response(501, "encoding %r not supported" % encoding);
            } except ValueError{
                this.send_response(400, "error decoding gzip content");
        } } else{
            this.send_response(501, "encoding %r not supported" % encoding);
        } this.send_header("Content-length", "0");
        this.end_headers();

    }
    function report_404 (){
            # Report a 404 error
        this.send_response(404);
        response = 'No such page';
        this.send_header("Content-type", "text/plain");
        this.send_header("Content-length", str(len(response)));
        this.end_headers();
        this.wfile.write(response);

    }
    function log_request( code='-', size='-'){
        """Selectively log an accepted request.""";

        if this.server.logRequests{
            BaseHTTPServer.BaseHTTPRequestHandler.log_request(this, code, size);

}
} } class SimpleXMLRPCServer(SocketServer.TCPServer,
                         SimpleXMLRPCDispatcher){
    """Simple XML-RPC server.

    Simple XML-RPC server that allows functions and a single instance
    to be installed to handle requests. The default implementation
    attempts to dispatch XML-RPC calls to the functions or instance
    installed in the server. Override the _dispatch method inhereted
    from SimpleXMLRPCDispatcher to change this behavior.
    """;

    allow_reuse_address = true;

    # Warning: this is for debugging purposes only! Never set this to True in
    # production code, as will be sending out sensitive information (exception
    # and stack trace details) when exceptions are raised inside
    # SimpleXMLRPCRequestHandler.do_POST
    _send_traceback_header = false;

    function __init__( addr, requestHandler=SimpleXMLRPCRequestHandler,
                 logRequests=true, allow_none=false, encoding=nil, bind_and_activate=true){
        this.logRequests = logRequests;

        SimpleXMLRPCDispatcher.__init__(this, allow_none, encoding);
        SocketServer.TCPServer.__init__(this, addr, requestHandler, bind_and_activate);

        # [Bug #1222790] If possible, set close-on-exec flag; if a
        # method spawns a subprocess, the subprocess shouldn't have
        # the listening socket open.
        if fcntl is not nil and hasattr(fcntl, 'FD_CLOEXEC'){
            flags = fcntl.fcntl(this.fileno(), fcntl.F_GETFD);
            flags |= fcntl.FD_CLOEXEC;
            fcntl.fcntl(this.fileno(), fcntl.F_SETFD, flags);

}
} } class MultiPathXMLRPCServer(SimpleXMLRPCServer){
    """Multipath XML-RPC Server
    This specialization of SimpleXMLRPCServer allows the user to create
    multiple Dispatcher instances and assign them to different
    HTTP request paths.  This makes it possible to run two or more
    'virtual XML-RPC servers' at the same port.
    Make sure that the requestHandler accepts the paths in question.
    """;
    function __init__( addr, requestHandler=SimpleXMLRPCRequestHandler,
                 logRequests=true, allow_none=false, encoding=nil, bind_and_activate=true){

        SimpleXMLRPCServer.__init__(this, addr, requestHandler, logRequests, allow_none,
                                    encoding, bind_and_activate);
        this.dispatchers = {};
        this.allow_none = allow_none;
        this.encoding = encoding;

    }
    function add_dispatcher( path, dispatcher){
        this.dispatchers[path] = dispatcher;
        return dispatcher;

    }
    function get_dispatcher( path){
        return this.dispatchers[path];

    }
    function _marshaled_dispatch( data, dispatch_method = nil, path = nil){
        try{
            response = this.dispatchers[path]._marshaled_dispatch(
               data, dispatch_method, path);
        } except Exception{
            # report low level exception back to server
            # (each dispatcher should have handled their own
            # exceptions)
            exc_type, exc_value = sys.exc_info()[:2];
            response = xmlrpclib.dumps(
                xmlrpclib.Fault(1, "%s:%s" % (exc_type, exc_value)),
                encoding=this.encoding, allow_none=this.allow_none);
        } return response;

}
} class CGIXMLRPCRequestHandler(SimpleXMLRPCDispatcher){
    """Simple handler for XML-RPC data passed through CGI.""";

    function __init__( allow_none=false, encoding=nil){
        SimpleXMLRPCDispatcher.__init__(this, allow_none, encoding);

    }
    function handle_xmlrpc( request_text){
        """Handle a single XML-RPC request""";

        response = this._marshaled_dispatch(request_text);

        print 'Content-Type: text/xml';
        print 'Content-Length: %d' % len(response);
        print;
        sys.stdout.write(response);

    }
    function handle_get(){
        """Handle a single HTTP GET request.

        Default implementation indicates an error because
        XML-RPC uses the POST method.
        """;

        code = 400;
        message, explain = \
                 BaseHTTPServer.BaseHTTPRequestHandler.responses[code];

        response = BaseHTTPServer.DEFAULT_ERROR_MESSAGE % \
            {
             'code' : code,
             'message' : message,
             'explain' : explain
            };
        print 'Status: %d %s' % (code, message);
        print 'Content-Type: %s' % BaseHTTPServer.DEFAULT_ERROR_CONTENT_TYPE;
        print 'Content-Length: %d' % len(response);
        print;
        sys.stdout.write(response);

    }
    function handle_request( request_text = nil){
        """Handle a single XML-RPC request passed through a CGI post method.

        If no XML data is given then it is read from stdin. The resulting
        XML-RPC response is printed to stdout along with the correct HTTP
        headers.
        """;

        if request_text is nil and \
            os.environ.get('REQUEST_METHOD', nil) == 'GET'{
            this.handle_get();
        } else{
            # POST data is normally available through stdin
            try{
                length = int(os.environ.get('CONTENT_LENGTH', nil));
            } except (TypeError, ValueError){
                length = -1;
            } if request_text is nil{
                request_text = sys.stdin.read(length);

            }
            this.handle_xmlrpc(request_text);

}
} } if __name__ == '__main__'{
    print 'Running XML-RPC server on port 8000';
    server = SimpleXMLRPCServer(("localhost", 8000));
    server.register_function(pow);
    server.register_function(lambda x,y{ x+y}, 'add');
    server.register_multicall_functions();
    server.serve_forever();

}