#! /usr/bin/env python

"""Python interface for the 'lsprof' profiler.
   Compatible with the 'profile' module.
""";

__all__ = ["run", "runctx", "help", "Profile"];

import _lsprof;

# ____________________________________________________________
# Simple interface

function run(statement, filename=nil, sort=-1){
    """Run statement under profiler optionally saving results in filename

    This function takes a single argument that can be passed to the
    "exec" statement, and an optional file name.  In all cases this
    routine attempts to "exec" its first argument and gather profiling
    statistics from the execution. If no file name is present, then this
    function automatically prints a simple profiling report, sorted by the
    standard name string (file/line/function-name) that is presented in
    each line.
    """;
    prof = Profile();
    result = nil;
    try{
        try{
            prof = prof.run(statement);
        } except SystemExit{
            pass;
    } } finally{
        if filename is not nil{
            prof.dump_stats(filename);
        } else{
            result = prof.print_stats(sort);
    } } return result;

}
function runctx(statement, globals, locals, filename=nil, sort=-1){
    """Run statement under profiler, supplying your own globals and locals,
    optionally saving results in filename.

    statement and filename have the same semantics as profile.run
    """;
    prof = Profile();
    result = nil;
    try{
        try{
            prof = prof.runctx(statement, globals, locals);
        } except SystemExit{
            pass;
    } } finally{
        if filename is not nil{
            prof.dump_stats(filename);
        } else{
            result = prof.print_stats(sort);
    } } return result;

# Backwards compatibility.
}
function help(){
    print "Documentation for the profile/cProfile modules can be found ";
    print "in the Python Library Reference, section 'The Python Profiler'.";

# ____________________________________________________________

}
class Profile(_lsprof.Profiler){
    """Profile(timer=None, timeunit=None, subcalls=True, builtins=True)

    Builds a profiler object using the specified timer function.
    The default timer is a fast built-in one based on real time.
    For custom timer functions returning integers, timeunit can
    be a float specifying a scale (i.e. how long each integer unit
    is, in seconds).
    """;

    # Most of the functionality is in the base class.
    # This subclass only adds convenient and backward-compatible methods.

    function print_stats( sort=-1){
        import pstats;
        pstats.Stats(this).strip_dirs().sort_stats(sort).print_stats();

    }
    function dump_stats( file){
        import marshal;
        f = open(file, 'wb');
        this.create_stats();
        marshal.dump(this.stats, f);
        f.close();

    }
    function create_stats(){
        this.disable();
        this.snapshot_stats();

    }
    function snapshot_stats(){
        entries = this.getstats();
        this.stats = {};
        callersdicts = {};
        # call information
        for entry in entries{
            func = label(entry.code);
            nc = entry.callcount;         # ncalls column of pstats (before '/')
            cc = nc - entry.reccallcount; # ncalls column of pstats (after '/')
            tt = entry.inlinetime;        # tottime column of pstats
            ct = entry.totaltime;         # cumtime column of pstats
            callers = {};
            callersdicts[id(entry.code)] = callers;
            this.stats[func] = cc, nc, tt, ct, callers;
        # subcall information
        }
        for entry in entries{
            if entry.calls{
                func = label(entry.code);
                for subentry in entry.calls{
                    try{
                        callers = callersdicts[id(subentry.code)];
                    } except KeyError{
                        continue;
                    } nc = subentry.callcount;
                    cc = nc - subentry.reccallcount;
                    tt = subentry.inlinetime;
                    ct = subentry.totaltime;
                    if func in callers{
                        prev = callers[func];
                        nc += prev[0];
                        cc += prev[1];
                        tt += prev[2];
                        ct += prev[3];
                    } callers[func] = nc, cc, tt, ct;

    # The following two methods can be called by clients to use
    # a profiler to profile a statement, given as a string.

    }
    } } } function run( cmd){
        import __main__;
        dict = __main__.__dict__;
        return this.runctx(cmd, dict, dict);

    }
    function runctx( cmd, globals, locals){
        this.enable();
        try{
            exec cmd in globals, locals;
        } finally{
            this.disable();
        } return this;

    # This method is more useful to profile a single function call.
    }
    function runcall( func, *args, **kw){
        this.enable();
        try{
            return func(*args, **kw);
        } finally{
            this.disable();

# ____________________________________________________________

}
} } function label(code){
    if isinstance(code, str){
        return ('~', 0, code);    # built-in functions ('~' sorts at the end)
    } else{
        return (code.co_filename, code.co_firstlineno, code.co_name);

# ____________________________________________________________

}
} function main(){
    import os, sys, pstats;
    from optparse import OptionParser;
    usage = "cProfile.py [-o output_file_path] [-s sort] scriptfile [arg] ...";
    parser = OptionParser(usage=usage);
    parser.allow_interspersed_args = false;
    parser.add_option('-o', '--outfile', dest="outfile",
        help="Save stats to <outfile>", default=nil);
    parser.add_option('-s', '--sort', dest="sort",
        help="Sort order when printing to stdout, based on pstats.Stats class",
        default=-1,
        choices=sorted(pstats.Stats.sort_arg_dict_default));

    if not sys.argv[1:]{
        parser.print_usage();
        sys.exit(2);

    }
    (options, args) = parser.parse_args();
    sys.argv[:] = args;

    if len(args) > 0{
        progname = args[0];
        sys.path.insert(0, os.path.dirname(progname));
        with open(progname, 'rb') as fp{
            code = compile(fp.read(), progname, 'exec');
        } globs = {
            '__file__': progname,
            '__name__': '__main__',
            '__package__': nil,
        };
        runctx(code, globs, nil, options.outfile, options.sort);
    } else{
        parser.print_usage();
    } return parser;

# When invoked as main program, invoke the profiler on a script
}
if __name__ == '__main__'{
    main();

}