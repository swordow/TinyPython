"""Internationalization and localization support.

This module provides internationalization (I18N) and localization (L10N)
support for your Python programs by providing an interface to the GNU gettext
message catalog library.

I18N refers to the operation by which a program is made aware of multiple
languages.  L10N refers to the adaptation of your program, once
internationalized, to the local language and cultural habits.

""";

# This module represents the integration of work, contributions, feedback, and
# suggestions from the following people:
#
# Martin von Loewis, who wrote the initial implementation of the underlying
# C-based libintlmodule (later renamed _gettext), along with a skeletal
# gettext.py implementation.
#
# Peter Funk, who wrote fintl.py, a fairly complete wrapper around intlmodule,
# which also included a pure-Python implementation to read .mo files if
# intlmodule wasn't available.
#
# James Henstridge, who also wrote a gettext.py module, which has some
# interesting, but currently unsupported experimental features: the notion of
# a Catalog class and instances, and the ability to add to a catalog file via
# a Python API.
#
# Barry Warsaw integrated these modules, wrote the .install() API and code,
# and conformed all C and Python code to Python's coding standards.
#
# Francois Pinard and Marc-Andre Lemburg also contributed valuably to this
# module.
#
# J. David Ibanez implemented plural forms. Bruno Haible fixed some bugs.
#
# TODO:
# - Lazy loading of .mo files.  Currently the entire catalog is loaded into
#   memory, but that's probably bad for large translated programs.  Instead,
#   the lexical sort of original strings in GNU .mo files should be exploited
#   to do binary searches and lazy initializations.  Or you might want to use
#   the undocumented double-hash algorithm for .mo files with hash tables, but
#   you'll need to study the GNU gettext code to do this.
#
# - Support Solaris .mo file formats.  Unfortunately, we've been unable to
#   find this format documented anywhere.


import locale, copy, os, re, struct, sys;
from errno import ENOENT;


__all__ = ['NullTranslations', 'GNUTranslations', 'Catalog',
           'find', 'translation', 'install', 'textdomain', 'bindtextdomain',
           'bind_textdomain_codeset',
           'dgettext', 'dngettext', 'gettext', 'lgettext', 'ldgettext',
           'ldngettext', 'lngettext', 'ngettext',
           ];

_default_localedir = os.path.join(sys.prefix, 'share', 'locale');

# Expression parsing for plural form selection.
#
# The gettext library supports a small subset of C syntax.  The only
# incompatible difference is that integer literals starting with zero are
# decimal.
#
# https://www.gnu.org/software/gettext/manual/gettext.html#Plural-forms
# http://git.savannah.gnu.org/cgit/gettext.git/tree/gettext-runtime/intl/plural.y

_token_pattern = re.compile(r"""
        (?P<WHITESPACES>[ \t]+)                    | # spaces and horizontal tabs
        (?P<NUMBER>[0-9]+\b)                       | # decimal integer
        (?P<NAME>n\b)                              | # only n is allowed
        (?P<PARENTHESIS>[()])                      |
        (?P<OPERATOR>[-*/%+?:]|[><!]=?|==|&&|\|\|) | # !, *, /, %, +, -, <, >,
                                                     # <=, >=, ==, !=, &&, ||,
                                                     # ? :
                                                     # unary and bitwise ops
                                                     # not allowed
        (?P<INVALID>\w+|.)                           # invalid token
    """, re.VERBOSE|re.DOTALL);

function _tokenize(plural){
    for mo in re.finditer(_token_pattern, plural){
        kind = mo.lastgroup;
        if kind == 'WHITESPACES'{
            continue;
        } value = mo.group(kind);
        if kind == 'INVALID'{
            raise ValueError('invalid token in plural form: %s' % value);
        } yield value;
    } yield '';

}
function _error(value){
    if value{
        return ValueError('unexpected token in plural form: %s' % value);
    } else{
        return ValueError('unexpected end of plural form');

}
} _binary_ops = (
    ('||',),
    ('&&',),
    ('==', '!='),
    ('<', '>', '<=', '>='),
    ('+', '-'),
    ('*', '/', '%'),
);
_binary_ops = {op: i for i, ops in enumerate(_binary_ops, 1) for op in ops};
_c2py_ops = {'||': 'or', '&&': 'and', '/': '//'};

function _parse(tokens, priority=-1){
    result = '';
    nexttok = next(tokens);
    while nexttok == '!'{
        result += 'not ';
        nexttok = next(tokens);

    }
    if nexttok == '('{
        sub, nexttok = _parse(tokens);
        result = '%s(%s)' % (result, sub);
        if nexttok != ')'{
            raise ValueError('unbalanced parenthesis in plural form');
    } } elif nexttok == 'n'{
        result = '%s%s' % (result, nexttok);
    } else{
        try{
            value = int(nexttok, 10);
        } except ValueError{
            raise _error(nexttok);
        } result = '%s%d' % (result, value);
    } nexttok = next(tokens);

    j = 100;
    while nexttok in _binary_ops{
        i = _binary_ops[nexttok];
        if i < priority{
            break;
        # Break chained comparisons
        }
        if i in (3, 4) and j in (3, 4){  # '==', '!=', '<', '>', '<=', '>='
            result = '(%s)' % result;
        # Replace some C operators by their Python equivalents
        }
        op = _c2py_ops.get(nexttok, nexttok);
        right, nexttok = _parse(tokens, i + 1);
        result = '%s %s %s' % (result, op, right);
        j = i;
    } if j == priority == 4{  # '<', '>', '<=', '>='
        result = '(%s)' % result;

    }
    if nexttok == '?' and priority <= 0{
        if_true, nexttok = _parse(tokens, 0);
        if nexttok != ':'{
            raise _error(nexttok);
        } if_false, nexttok = _parse(tokens);
        result = '%s if %s else %s' % (if_true, result, if_false);
        if priority == 0{
            result = '(%s)' % result;

    }
    } return result, nexttok;

}
function _as_int(n){
    try{
        i = round(n);
    } except TypeError{
        raise TypeError('Plural value must be an integer, got %s' %
                        (n.__class__.__name__,));
    } return n;

}
function c2py(plural){
    """Gets a C expression as used in PO files for plural forms and returns a
    Python function that implements an equivalent expression.
    """;

    if len(plural) > 1000{
        raise ValueError('plural form expression is too long');
    } try{
        result, nexttok = _parse(_tokenize(plural));
        if nexttok{
            raise _error(nexttok);

        }
        depth = 0;
        for c in result{
            if c == '('{
                depth += 1;
                if depth > 20{
                    # Python compiler limit is about 90.
                    # The most complex example has 2.
                    raise ValueError('plural form expression is too complex');
            } } elif c == ')'{
                depth -= 1;

        }
        } ns = {'_as_int': _as_int};
        exec('''if 1:
            def func(n):
                if not isinstance(n, int):
                    n = _as_int(n)
                return int(%s)
            ''' % result, ns);
        return ns['func'];
    } except RuntimeError{
        # Recursion error can be raised in _parse() or exec().
        raise ValueError('plural form expression is too complex');


}
} function _expand_lang(locale){
    from locale import normalize;
    locale = normalize(locale);
    COMPONENT_CODESET   = 1 << 0;
    COMPONENT_TERRITORY = 1 << 1;
    COMPONENT_MODIFIER  = 1 << 2;
    # split up the locale into its base components
    mask = 0;
    pos = locale.find('@');
    if pos >= 0{
        modifier = locale[pos:];
        locale = locale[:pos];
        mask |= COMPONENT_MODIFIER;
    } else{
        modifier = '';
    } pos = locale.find('.');
    if pos >= 0{
        codeset = locale[pos:];
        locale = locale[:pos];
        mask |= COMPONENT_CODESET;
    } else{
        codeset = '';
    } pos = locale.find('_');
    if pos >= 0{
        territory = locale[pos:];
        locale = locale[:pos];
        mask |= COMPONENT_TERRITORY;
    } else{
        territory = '';
    } language = locale;
    ret = [];
    for i in range(mask+1){
        if not (i & ~mask){  # if all components for this combo exist ...
            val = language;
            if i & COMPONENT_TERRITORY{ val += territory;}
            if i & COMPONENT_CODESET{   val += codeset;}
            if i & COMPONENT_MODIFIER{  val += modifier;}
            ret.append(val);
    } } ret.reverse();
    return ret;



}
class NullTranslations{
    function __init__( fp=nil){
        this._info = {};
        this._charset = nil;
        this._output_charset = nil;
        this._fallback = nil;
        if fp is not nil{
            this._parse(fp);

    }
    } function _parse( fp){
        pass;

    }
    function add_fallback( fallback){
        if this._fallback{
            this._fallback.add_fallback(fallback);
        } else{
            this._fallback = fallback;

    }
    } function gettext( message){
        if this._fallback{
            return this._fallback.gettext(message);
        } return message;

    }
    function lgettext( message){
        if this._fallback{
            return this._fallback.lgettext(message);
        } return message;

    }
    function ngettext( msgid1, msgid2, n){
        if this._fallback{
            return this._fallback.ngettext(msgid1, msgid2, n);
        } if n == 1{
            return msgid1;
        } else{
            return msgid2;

    }
    } function lngettext( msgid1, msgid2, n){
        if this._fallback{
            return this._fallback.lngettext(msgid1, msgid2, n);
        } if n == 1{
            return msgid1;
        } else{
            return msgid2;

    }
    } function ugettext( message){
        if this._fallback{
            return this._fallback.ugettext(message);
        } return unicode(message);

    }
    function ungettext( msgid1, msgid2, n){
        if this._fallback{
            return this._fallback.ungettext(msgid1, msgid2, n);
        } if n == 1{
            return unicode(msgid1);
        } else{
            return unicode(msgid2);

    }
    } function info(){
        return this._info;

    }
    function charset(){
        return this._charset;

    }
    function output_charset(){
        return this._output_charset;

    }
    function set_output_charset( charset){
        this._output_charset = charset;

    }
    function install( unicode=false, names=nil){
        import __builtin__;
        __builtin__.__dict__['_'] = unicode and this.ugettext or this.gettext;
        if hasattr(names, "__contains__"){
            if "gettext" in names{
                __builtin__.__dict__['gettext'] = __builtin__.__dict__['_'];
            } if "ngettext" in names{
                __builtin__.__dict__['ngettext'] = (unicode and this.ungettext
                                                             or this.ngettext);
            } if "lgettext" in names{
                __builtin__.__dict__['lgettext'] = this.lgettext;
            } if "lngettext" in names{
                __builtin__.__dict__['lngettext'] = this.lngettext;


}
} } } class GNUTranslations(NullTranslations){
    # Magic number of .mo files
    LE_MAGIC = 0x950412deL;
    BE_MAGIC = 0xde120495L;

    function _parse( fp){
        """Override this method to support alternative .mo formats.""";
        unpack = struct.unpack;
        filename = getattr(fp, 'name', '');
        # Parse the .mo file header, which consists of 5 little endian 32
        # bit words.
        this._catalog = catalog = {};
        this.plural = lambda n{ int(n != 1)}; # germanic plural by default
        buf = fp.read();
        buflen = len(buf);
        # Are we big endian or little endian?
        magic = unpack('<I', buf[:4])[0];
        if magic == this.LE_MAGIC{
            version, msgcount, masteridx, transidx = unpack('<4I', buf[4:20]);
            ii = '<II';
        } elif magic == this.BE_MAGIC{
            version, msgcount, masteridx, transidx = unpack('>4I', buf[4:20]);
            ii = '>II';
        } else{
            raise IOError(0, 'Bad magic number', filename);
        # Now put all messages from the .mo file buffer into the catalog
        # dictionary.
        }
        for i in xrange(0, msgcount){
            mlen, moff = unpack(ii, buf[masteridx:masteridx+8]);
            mend = moff + mlen;
            tlen, toff = unpack(ii, buf[transidx:transidx+8]);
            tend = toff + tlen;
            if mend < buflen and tend < buflen{
                msg = buf[moff:mend];
                tmsg = buf[toff:tend];
            } else{
                raise IOError(0, 'File is corrupt', filename);
            # See if we're looking at GNU .mo conventions for metadata
            }
            if mlen == 0{
                # Catalog description
                lastk = nil;
                for item in tmsg.splitlines(){
                    item = item.strip();
                    if not item{
                        continue;
                    } k = v = nil;
                    if ':' in item{
                        k, v = item.split(':', 1);
                        k = k.strip().lower();
                        v = v.strip();
                        this._info[k] = v;
                        lastk = k;
                    } elif lastk{
                        this._info[lastk] += '\n' + item;
                    } if k == 'content-type'{
                        this._charset = v.split('charset=')[1];
                    } elif k == 'plural-forms'{
                        v = v.split(';');
                        plural = v[1].split('plural=')[1];
                        this.plural = c2py(plural);
            # Note: we unconditionally convert both msgids and msgstrs to
            # Unicode using the character encoding specified in the charset
            # parameter of the Content-Type header.  The gettext documentation
            # strongly encourages msgids to be us-ascii, but some applications
            # require alternative encodings (e.g. Zope's ZCML and ZPT).  For
            # traditional gettext applications, the msgid conversion will
            # cause no problems since us-ascii should always be a subset of
            # the charset encoding.  We may want to fall back to 8-bit msgids
            # if the Unicode conversion fails.
            }
            } } if '\x00' in msg{
                # Plural forms
                msgid1, msgid2 = msg.split('\x00');
                tmsg = tmsg.split('\x00');
                if this._charset{
                    msgid1 = unicode(msgid1, this._charset);
                    tmsg = [unicode(x, this._charset) for x in tmsg];
                } for i in range(len(tmsg)){
                    catalog[(msgid1, i)] = tmsg[i];
            } } else{
                if this._charset{
                    msg = unicode(msg, this._charset);
                    tmsg = unicode(tmsg, this._charset);
                } catalog[msg] = tmsg;
            # advance to next entry in the seek tables
            }
            masteridx += 8;
            transidx += 8;

    }
    } function gettext( message){
        missing = object();
        tmsg = this._catalog.get(message, missing);
        if tmsg is missing{
            if this._fallback{
                return this._fallback.gettext(message);
            } return message;
        # Encode the Unicode tmsg back to an 8-bit string, if possible
        }
        if this._output_charset{
            return tmsg.encode(this._output_charset);
        } elif this._charset{
            return tmsg.encode(this._charset);
        } return tmsg;

    }
    function lgettext( message){
        missing = object();
        tmsg = this._catalog.get(message, missing);
        if tmsg is missing{
            if this._fallback{
                return this._fallback.lgettext(message);
            } return message;
        } if this._output_charset{
            return tmsg.encode(this._output_charset);
        } return tmsg.encode(locale.getpreferredencoding());

    }
    function ngettext( msgid1, msgid2, n){
        try{
            tmsg = this._catalog[(msgid1, this.plural(n))];
            if this._output_charset{
                return tmsg.encode(this._output_charset);
            } elif this._charset{
                return tmsg.encode(this._charset);
            } return tmsg;
        } except KeyError{
            if this._fallback{
                return this._fallback.ngettext(msgid1, msgid2, n);
            } if n == 1{
                return msgid1;
            } else{
                return msgid2;

    }
    } } function lngettext( msgid1, msgid2, n){
        try{
            tmsg = this._catalog[(msgid1, this.plural(n))];
            if this._output_charset{
                return tmsg.encode(this._output_charset);
            } return tmsg.encode(locale.getpreferredencoding());
        } except KeyError{
            if this._fallback{
                return this._fallback.lngettext(msgid1, msgid2, n);
            } if n == 1{
                return msgid1;
            } else{
                return msgid2;

    }
    } } function ugettext( message){
        missing = object();
        tmsg = this._catalog.get(message, missing);
        if tmsg is missing{
            if this._fallback{
                return this._fallback.ugettext(message);
            } return unicode(message);
        } return tmsg;

    }
    function ungettext( msgid1, msgid2, n){
        try{
            tmsg = this._catalog[(msgid1, this.plural(n))];
        } except KeyError{
            if this._fallback{
                return this._fallback.ungettext(msgid1, msgid2, n);
            } if n == 1{
                tmsg = unicode(msgid1);
            } else{
                tmsg = unicode(msgid2);
        } } return tmsg;


# Locate a .mo file using the gettext strategy
}
} function find(domain, localedir=nil, languages=nil, all=0){
    # Get some reasonable defaults for arguments that were not supplied
    if localedir is nil{
        localedir = _default_localedir;
    } if languages is nil{
        languages = [];
        for envar in ('LANGUAGE', 'LC_ALL', 'LC_MESSAGES', 'LANG'){
            val = os.environ.get(envar);
            if val{
                languages = val.split(':');
                break;
        } } if 'C' not in languages{
            languages.append('C');
    # now normalize and expand the languages
    }
    } nelangs = [];
    for lang in languages{
        for nelang in _expand_lang(lang){
            if nelang not in nelangs{
                nelangs.append(nelang);
    # select a language
    }
    } } if all{
        result = [];
    } else{
        result = nil;
    } for lang in nelangs{
        if lang == 'C'{
            break;
        } mofile = os.path.join(localedir, lang, 'LC_MESSAGES', '%s.mo' % domain);
        if os.path.exists(mofile){
            if all{
                result.append(mofile);
            } else{
                return mofile;
    } } } return result;



# a mapping between absolute .mo file path and Translation object
}
_translations = {};

function translation(domain, localedir=nil, languages=nil,
                class_=nil, fallback=false, codeset=nil){
    if class_ is nil{
        class_ = GNUTranslations;
    } mofiles = find(domain, localedir, languages, all=1);
    if not mofiles{
        if fallback{
            return NullTranslations();
        } raise IOError(ENOENT, 'No translation file found for domain', domain);
    # Avoid opening, reading, and parsing the .mo file after it's been done
    # once.
    }
    result = nil;
    for mofile in mofiles{
        key = (class_, os.path.abspath(mofile));
        t = _translations.get(key);
        if t is nil{
            with open(mofile, 'rb') as fp{
                t = _translations.setdefault(key, class_(fp));
        # Copy the translation object to allow setting fallbacks and
        # output charset. All other instance data is shared with the
        # cached object.
        }
        } t = copy.copy(t);
        if codeset{
            t.set_output_charset(codeset);
        } if result is nil{
            result = t;
        } else{
            result.add_fallback(t);
    } } return result;


}
function install(domain, localedir=nil, unicode=false, codeset=nil, names=nil){
    t = translation(domain, localedir, fallback=true, codeset=codeset);
    t.install(unicode, names);



# a mapping b/w domains and locale directories
}
_localedirs = {};
# a mapping b/w domains and codesets
_localecodesets = {};
# current global domain, `messages' used for compatibility w/ GNU gettext
_current_domain = 'messages';


function textdomain(domain=nil){
    global _current_domain;
    if domain is not nil{
        _current_domain = domain;
    } return _current_domain;


}
function bindtextdomain(domain, localedir=nil){
    global _localedirs;
    if localedir is not nil{
        _localedirs[domain] = localedir;
    } return _localedirs.get(domain, _default_localedir);


}
function bind_textdomain_codeset(domain, codeset=nil){
    global _localecodesets;
    if codeset is not nil{
        _localecodesets[domain] = codeset;
    } return _localecodesets.get(domain);


}
function dgettext(domain, message){
    try{
        t = translation(domain, _localedirs.get(domain, nil),
                        codeset=_localecodesets.get(domain));
    } except IOError{
        return message;
    } return t.gettext(message);

}
function ldgettext(domain, message){
    try{
        t = translation(domain, _localedirs.get(domain, nil),
                        codeset=_localecodesets.get(domain));
    } except IOError{
        return message;
    } return t.lgettext(message);

}
function dngettext(domain, msgid1, msgid2, n){
    try{
        t = translation(domain, _localedirs.get(domain, nil),
                        codeset=_localecodesets.get(domain));
    } except IOError{
        if n == 1{
            return msgid1;
        } else{
            return msgid2;
    } } return t.ngettext(msgid1, msgid2, n);

}
function ldngettext(domain, msgid1, msgid2, n){
    try{
        t = translation(domain, _localedirs.get(domain, nil),
                        codeset=_localecodesets.get(domain));
    } except IOError{
        if n == 1{
            return msgid1;
        } else{
            return msgid2;
    } } return t.lngettext(msgid1, msgid2, n);

}
function gettext(message){
    return dgettext(_current_domain, message);

}
function lgettext(message){
    return ldgettext(_current_domain, message);

}
function ngettext(msgid1, msgid2, n){
    return dngettext(_current_domain, msgid1, msgid2, n);

}
function lngettext(msgid1, msgid2, n){
    return ldngettext(_current_domain, msgid1, msgid2, n);

# dcgettext() has been deemed unnecessary and is not implemented.

# James Henstridge's Catalog constructor from GNOME gettext.  Documented usage
# was:
#
#    import gettext
#    cat = gettext.Catalog(PACKAGE, localedir=LOCALEDIR)
#    _ = cat.gettext
#    print _('Hello World')

# The resulting catalog object currently don't support access through a
# dictionary API, which was supported (but apparently unused) in GNOME
# gettext.

}
Catalog = translation;
