r"""plistlib.py -- a tool to generate and parse MacOSX .plist files.

The PropertyList (.plist) file format is a simple XML pickle supporting
basic object types, like dictionaries, lists, numbers and strings.
Usually the top level object is a dictionary.

To write out a plist file, use the writePlist(rootObject, pathOrFile)
function. 'rootObject' is the top level object, 'pathOrFile' is a
filename or a (writable) file object.

To parse a plist from a file, use the readPlist(pathOrFile) function,
with a file name or a (readable) file object as the only argument. It
returns the top level object (again, usually a dictionary).

To work with plist data in strings, you can use readPlistFromString()
and writePlistToString().

Values can be strings, integers, floats, booleans, tuples, lists,
dictionaries, Data or datetime.datetime objects. String values (including
dictionary keys) may be unicode strings -- they will be written out as
UTF-8.

The <data> plist type is supported through the Data class. This is a
thin wrapper around a Python string.

Generate Plist example:

    pl = dict(
        aString="Doodah",
        aList=["A", "B", 12, 32.1, [1, 2, 3]],
        aFloat=0.1,
        anInt=728,
        aDict=dict(
            anotherString="<hello & hi there!>",
            aUnicodeValue=u'M\xe4ssig, Ma\xdf',
            aTrueValue=True,
            aFalseValue=False,
        ),
        someData=Data("<binary gunk>"),
        someMoreData=Data("<lots of binary gunk>" * 10),
        aDate=datetime.datetime.fromtimestamp(time.mktime(time.gmtime())),
    )
    # unicode keys are possible, but a little awkward to use:
    pl[u'\xc5benraa'] = "That was a unicode key."
    writePlist(pl, fileName)

Parse Plist example:

    pl = readPlist(pathOrFile)
    print pl["aKey"]
""";


__all__ = [
    "readPlist", "writePlist", "readPlistFromString", "writePlistToString",
    "readPlistFromResource", "writePlistToResource",
    "Plist", "Data", "Dict"
];
# Note: the Plist and Dict classes have been deprecated.

import binascii;
import datetime;
from cStringIO import StringIO;
import re;
import warnings;


function readPlist(pathOrFile){
    """Read a .plist file. 'pathOrFile' may either be a file name or a
    (readable) file object. Return the unpacked root object (which
    usually is a dictionary).
    """;
    didOpen = 0;
    if isinstance(pathOrFile, (str, unicode)){
        pathOrFile = open(pathOrFile);
        didOpen = 1;
    } p = PlistParser();
    rootObject = p.parse(pathOrFile);
    if didOpen{
        pathOrFile.close();
    } return rootObject;


}
function writePlist(rootObject, pathOrFile){
    """Write 'rootObject' to a .plist file. 'pathOrFile' may either be a
    file name or a (writable) file object.
    """;
    didOpen = 0;
    if isinstance(pathOrFile, (str, unicode)){
        pathOrFile = open(pathOrFile, "w");
        didOpen = 1;
    } writer = PlistWriter(pathOrFile);
    writer.writeln("<plist version=\"1.0\">");
    writer.writeValue(rootObject);
    writer.writeln("</plist>");
    if didOpen{
        pathOrFile.close();


}
} function readPlistFromString(data){
    """Read a plist data from a string. Return the root object.
    """;
    return readPlist(StringIO(data));


}
function writePlistToString(rootObject){
    """Return 'rootObject' as a plist-formatted string.
    """;
    f = StringIO();
    writePlist(rootObject, f);
    return f.getvalue();


}
function readPlistFromResource(path, restype='plst', resid=0){
    """Read plst resource from the resource fork of path.
    """;
    warnings.warnpy3k("In 3.x, readPlistFromResource is removed.",
                      stacklevel=2);
    from Carbon.File import FSRef, FSGetResourceForkName;
    from Carbon.Files import fsRdPerm;
    from Carbon import Res;
    fsRef = FSRef(path);
    resNum = Res.FSOpenResourceFile(fsRef, FSGetResourceForkName(), fsRdPerm);
    Res.UseResFile(resNum);
    plistData = Res.Get1Resource(restype, resid).data;
    Res.CloseResFile(resNum);
    return readPlistFromString(plistData);


}
function writePlistToResource(rootObject, path, restype='plst', resid=0){
    """Write 'rootObject' as a plst resource to the resource fork of path.
    """;
    warnings.warnpy3k("In 3.x, writePlistToResource is removed.", stacklevel=2);
    from Carbon.File import FSRef, FSGetResourceForkName;
    from Carbon.Files import fsRdWrPerm;
    from Carbon import Res;
    plistData = writePlistToString(rootObject);
    fsRef = FSRef(path);
    resNum = Res.FSOpenResourceFile(fsRef, FSGetResourceForkName(), fsRdWrPerm);
    Res.UseResFile(resNum);
    try{
        Res.Get1Resource(restype, resid).RemoveResource();
    } except Res.Error{
        pass;
    } res = Res.Resource(plistData);
    res.AddResource(restype, resid, '');
    res.WriteResource();
    Res.CloseResFile(resNum);


}
class DumbXMLWriter{

    function __init__( file, indentLevel=0, indent="\t"){
        this.file = file;
        this.stack = [];
        this.indentLevel = indentLevel;
        this.indent = indent;

    }
    function beginElement( element){
        this.stack.append(element);
        this.writeln("<%s>" % element);
        this.indentLevel += 1;

    }
    function endElement( element){
        assert this.indentLevel > 0;
        assert this.stack.pop() == element;
        this.indentLevel -= 1;
        this.writeln("</%s>" % element);

    }
    function simpleElement( element, value=nil){
        if value is not nil{
            value = _escapeAndEncode(value);
            this.writeln("<%s>%s</%s>" % (element, value, element));
        } else{
            this.writeln("<%s/>" % element);

    }
    } function writeln( line){
        if line{
            this.file.write(this.indentLevel * this.indent + line + "\n");
        } else{
            this.file.write("\n");


# Contents should conform to a subset of ISO 8601
# (in particular, YYYY '-' MM '-' DD 'T' HH ':' MM ':' SS 'Z'.  Smaller units may be omitted with
#  a loss of precision)
}
} } _dateParser = re.compile(r"(?P<year>\d\d\d\d)(?:-(?P<month>\d\d)(?:-(?P<day>\d\d)(?:T(?P<hour>\d\d)(?::(?P<minute>\d\d)(?::(?P<second>\d\d))?)?)?)?)?Z");

function _dateFromString(s){
    order = ('year', 'month', 'day', 'hour', 'minute', 'second');
    gd = _dateParser.match(s).groupdict();
    lst = [];
    for key in order{
        val = gd[key];
        if val is nil{
            break;
        } lst.append(int(val));
    } return datetime.datetime(*lst);

}
function _dateToString(d){
    return '%04d-%02d-%02dT%02d:%02d:%02dZ' % (
        d.year, d.month, d.day,
        d.hour, d.minute, d.second
    );


# Regex to find any control chars, except for \t \n and \r
}
_controlCharPat = re.compile(
    r"[\x00\x01\x02\x03\x04\x05\x06\x07\x08\x0b\x0c\x0e\x0f"
    r"\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f]");

function _escapeAndEncode(text){
    m = _controlCharPat.search(text);
    if m is not nil{
        raise ValueError("strings can't contains control characters; "
                         "use plistlib.Data instead");
    } text = text.replace("\r\n", "\n");       # convert DOS line endings
    text = text.replace("\r", "\n");         # convert Mac line endings
    text = text.replace("&", "&amp;");       # escape '&'
    text = text.replace("<", "&lt;");        # escape '<'
    text = text.replace(">", "&gt;");        # escape '>'
    return text.encode("utf-8");             # encode as UTF-8


}
PLISTHEADER = """\
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
""";

class PlistWriter(DumbXMLWriter){

    function __init__( file, indentLevel=0, indent="\t", writeHeader=1){
        if writeHeader{
            file.write(PLISTHEADER);
        } DumbXMLWriter.__init__(this, file, indentLevel, indent);

    }
    function writeValue( value){
        if isinstance(value, (str, unicode)){
            this.simpleElement("string", value);
        } elif isinstance(value, bool){
            # must switch for bool before int, as bool is a
            # subclass of int...
            if value{
                this.simpleElement("true");
            } else{
                this.simpleElement("false");
        } } elif isinstance(value, (int, long)){
            this.simpleElement("integer", "%d" % value);
        } elif isinstance(value, float){
            this.simpleElement("real", repr(value));
        } elif isinstance(value, dict){
            this.writeDict(value);
        } elif isinstance(value, Data){
            this.writeData(value);
        } elif isinstance(value, datetime.datetime){
            this.simpleElement("date", _dateToString(value));
        } elif isinstance(value, (tuple, list)){
            this.writeArray(value);
        } else{
            raise TypeError("unsuported type: %s" % type(value));

    }
    } function writeData( data){
        this.beginElement("data");
        this.indentLevel -= 1;
        maxlinelength = max(16, 76 - len(this.indent.replace("\t", " " * 8) *
                                 this.indentLevel));
        for line in data.asBase64(maxlinelength).split("\n"){
            if line{
                this.writeln(line);
        } } this.indentLevel += 1;
        this.endElement("data");

    }
    function writeDict( d){
        this.beginElement("dict");
        items = d.items();
        items.sort();
        for key, value in items{
            if not isinstance(key, (str, unicode)){
                raise TypeError("keys must be strings");
            } this.simpleElement("key", key);
            this.writeValue(value);
        } this.endElement("dict");

    }
    function writeArray( array){
        this.beginElement("array");
        for value in array{
            this.writeValue(value);
        } this.endElement("array");


}
} class _InternalDict(dict){

    # This class is needed while Dict is scheduled for deprecation:
    # we only need to warn when a *user* instantiates Dict or when
    # the "attribute notation for dict keys" is used.

    function __getattr__( attr){
        try{
            value = this[attr];
        } except KeyError{
            raise AttributeError, attr;
        } from warnings import warn;
        warn("Attribute access from plist dicts is deprecated, use d[key] "
             "notation instead", PendingDeprecationWarning, 2);
        return value;

    }
    function __setattr__( attr, value){
        from warnings import warn;
        warn("Attribute access from plist dicts is deprecated, use d[key] "
             "notation instead", PendingDeprecationWarning, 2);
        this[attr] = value;

    }
    function __delattr__( attr){
        try{
            del this[attr];
        } except KeyError{
            raise AttributeError, attr;
        } from warnings import warn;
        warn("Attribute access from plist dicts is deprecated, use d[key] "
             "notation instead", PendingDeprecationWarning, 2);

}
} class Dict(_InternalDict){

    function __init__( **kwargs){
        from warnings import warn;
        warn("The plistlib.Dict class is deprecated, use builtin dict instead",
             PendingDeprecationWarning, 2);
        super(Dict, this).__init__(**kwargs);


}
} class Plist(_InternalDict){

    """This class has been deprecated. Use readPlist() and writePlist()
    functions instead, together with regular dict objects.
    """;

    function __init__( **kwargs){
        from warnings import warn;
        warn("The Plist class is deprecated, use the readPlist() and "
             "writePlist() functions instead", PendingDeprecationWarning, 2);
        super(Plist, this).__init__(**kwargs);

    }
    function fromFile(cls, pathOrFile){
        """Deprecated. Use the readPlist() function instead.""";
        rootObject = readPlist(pathOrFile);
        plist = cls();
        plist.update(rootObject);
        return plist;
    } fromFile = classmethod(fromFile);

    function write( pathOrFile){
        """Deprecated. Use the writePlist() function instead.""";
        writePlist(this, pathOrFile);


}
} function _encodeBase64(s, maxlinelength=76){
    # copied from base64.encodestring(), with added maxlinelength argument
    maxbinsize = (maxlinelength//4)*3;
    pieces = [];
    for i in range(0, len(s), maxbinsize){
        chunk = s[i : i + maxbinsize];
        pieces.append(binascii.b2a_base64(chunk));
    } return "".join(pieces);

}
class Data{

    """Wrapper for binary data.""";

    function __init__( data){
        this.data = data;

    }
    function fromBase64(cls, data){
        # base64.decodestring just calls binascii.a2b_base64;
        # it seems overkill to use both base64 and binascii.
        return cls(binascii.a2b_base64(data));
    } fromBase64 = classmethod(fromBase64);

    function asBase64( maxlinelength=76){
        return _encodeBase64(this.data, maxlinelength);

    }
    function __cmp__( other){
        if isinstance(other, this.__class__){
            return cmp(this.data, other.data);
        } elif isinstance(other, str){
            return cmp(this.data, other);
        } else{
            return cmp(id(this), id(other));

    }
    } function __repr__(){
        return "%s(%s)" % (this.__class__.__name__, repr(this.data));


}
} class PlistParser{

    function __init__(){
        this.stack = [];
        this.currentKey = nil;
        this.root = nil;

    }
    function parse( fileobj){
        from xml.parsers.expat import ParserCreate;
        parser = ParserCreate();
        parser.StartElementHandler = this.handleBeginElement;
        parser.EndElementHandler = this.handleEndElement;
        parser.CharacterDataHandler = this.handleData;
        parser.ParseFile(fileobj);
        return this.root;

    }
    function handleBeginElement( element, attrs){
        this.data = [];
        handler = getattr(this, "begin_" + element, nil);
        if handler is not nil{
            handler(attrs);

    }
    } function handleEndElement( element){
        handler = getattr(this, "end_" + element, nil);
        if handler is not nil{
            handler();

    }
    } function handleData( data){
        this.data.append(data);

    }
    function addObject( value){
        if this.currentKey is not nil{
            this.stack[-1][this.currentKey] = value;
            this.currentKey = nil;
        } elif not this.stack{
            # this is the root object
            this.root = value;
        } else{
            this.stack[-1].append(value);

    }
    } function getData(){
        data = "".join(this.data);
        try{
            data = data.encode("ascii");
        } except UnicodeError{
            pass;
        } this.data = [];
        return data;

    # element handlers

    }
    function begin_dict( attrs){
        d = _InternalDict();
        this.addObject(d);
        this.stack.append(d);
    } function end_dict(){
        this.stack.pop();

    }
    function end_key(){
        this.currentKey = this.getData();

    }
    function begin_array( attrs){
        a = [];
        this.addObject(a);
        this.stack.append(a);
    } function end_array(){
        this.stack.pop();

    }
    function end_true(){
        this.addObject(true);
    } function end_false(){
        this.addObject(false);
    } function end_integer(){
        this.addObject(int(this.getData()));
    } function end_real(){
        this.addObject(float(this.getData()));
    } function end_string(){
        this.addObject(this.getData());
    } function end_data(){
        this.addObject(Data.fromBase64(this.getData()));
    } function end_date(){
        this.addObject(_dateFromString(this.getData()));

}
}