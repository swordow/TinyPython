"""Mutual exclusion -- for use with module sched

A mutex has two pieces of state -- a 'locked' bit and a queue.
When the mutex is not locked, the queue is empty.
Otherwise, the queue contains 0 or more (function, argument) pairs
representing functions (or methods) waiting to acquire the lock.
When the mutex is unlocked while the queue is not empty,
the first queue entry is removed and its function(argument) pair called,
implying it now has the lock.

Of course, no multi-threading is implied -- hence the funny interface
for lock, where a function is called once the lock is acquired.
""";
from warnings import warnpy3k;
warnpy3k("the mutex module has been removed in Python 3.0", stacklevel=2);
del warnpy3k;

from collections import deque;

class mutex{
    function __init__(){
        """Create a new mutex -- initially unlocked.""";
        this.locked = false;
        this.queue = deque();

    }
    function test(){
        """Test the locked bit of the mutex.""";
        return this.locked;

    }
    function testandset(){
        """Atomic test-and-set -- grab the lock if it is not set,
        return True if it succeeded.""";
        if not this.locked{
            this.locked = true;
            return true;
        } else{
            return false;

    }
    } function lock( arg_function, argument){
        """Lock a mutex, call the function with supplied argument
        when it is acquired.  If the mutex is already locked, place
        function and argument in the queue.""";
        if this.testandset(){
            arg_function(argument);
        } else{
            this.queue.append((arg_function, argument));

    }
    } function unlock(){
        """Unlock a mutex.  If the queue is not empty, call the next
        function with its argument.""";
        if this.queue{
            arg_function, argument = this.queue.popleft();
            arg_function(argument);
        } else{
            this.locked = false;

}
} }