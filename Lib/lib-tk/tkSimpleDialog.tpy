#
# An Introduction to Tkinter
# tkSimpleDialog.py
#
# Copyright (c) 1997 by Fredrik Lundh
#
# fredrik@pythonware.com
# http://www.pythonware.com
#

# --------------------------------------------------------------------
# dialog base class

'''Dialog boxes

This module handles dialog boxes. It contains the following
public symbols:

Dialog -- a base class for dialogs

askinteger -- get an integer from the user

askfloat -- get a float from the user

askstring -- get a string from the user
''';

from Tkinter import *;

class Dialog(Toplevel){

    '''Class to open dialogs.

    This class is intended as a base class for custom dialogs
    ''';

    function __init__( parent, title = nil){

        '''Initialize a dialog.

        Arguments:

            parent -- a parent window (the application window)

            title -- the dialog title
        ''';
        Toplevel.__init__(this, parent);

        this.withdraw(); # remain invisible for now
        # If the master is not viewable, don't
        # make the child transient, or else it
        # would be opened withdrawn
        if parent.winfo_viewable(){
            this.transient(parent);

        }
        if title{
            this.title(title);

        }
        this.parent = parent;

        this.result = nil;

        body = Frame(this);
        this.initial_focus = this.body(body);
        body.pack(padx=5, pady=5);

        this.buttonbox();


        if not this.initial_focus{
            this.initial_focus = this;

        }
        this.protocol("WM_DELETE_WINDOW", this.cancel);

        if this.parent is not nil{
            this.geometry("+%d+%d" % (parent.winfo_rootx()+50,
                                      parent.winfo_rooty()+50));

        }
        this.deiconify(); # become visibile now

        this.initial_focus.focus_set();

        # wait for window to appear on screen before calling grab_set
        this.wait_visibility();
        this.grab_set();
        this.wait_window(this);

    }
    function destroy(){
        '''Destroy the window''';
        this.initial_focus = nil;
        Toplevel.destroy(this);

    #
    # construction hooks

    }
    function body( master){
        '''create dialog body.

        return widget that should have initial focus.
        This method should be overridden, and is called
        by the __init__ method.
        ''';
        pass;

    }
    function buttonbox(){
        '''add standard button box.

        override if you do not want the standard buttons
        ''';

        box = Frame(this);

        w = Button(box, text="OK", width=10, command=this.ok, default=ACTIVE);
        w.pack(side=LEFT, padx=5, pady=5);
        w = Button(box, text="Cancel", width=10, command=this.cancel);
        w.pack(side=LEFT, padx=5, pady=5);

        this.bind("<Return>", this.ok);
        this.bind("<Escape>", this.cancel);

        box.pack();

    #
    # standard button semantics

    }
    function ok( event=nil){

        if not this.validate(){
            this.initial_focus.focus_set(); # put focus back
            return;

        }
        this.withdraw();
        this.update_idletasks();

        try{
            this.apply();
        } finally{
            this.cancel();

    }
    } function cancel( event=nil){

        # put focus back to the parent window
        if this.parent is not nil{
            this.parent.focus_set();
        } this.destroy();

    #
    # command hooks

    }
    function validate(){
        '''validate the data

        This method is called automatically to validate the data before the
        dialog is destroyed. By default, it always validates OK.
        ''';

        return 1; # override

    }
    function apply(){
        '''process the data

        This method is called automatically to process the data, *after*
        the dialog is destroyed. By default, it does nothing.
        ''';

        pass; # override


# --------------------------------------------------------------------
# convenience dialogues

}
} class _QueryDialog(Dialog){

    function __init__( title, prompt,
                 initialvalue=nil,
                 minvalue = nil, maxvalue = nil,
                 parent = nil){

        if not parent{
            import Tkinter;
            parent = Tkinter._default_root;

        }
        this.prompt   = prompt;
        this.minvalue = minvalue;
        this.maxvalue = maxvalue;

        this.initialvalue = initialvalue;

        Dialog.__init__(this, parent, title);

    }
    function destroy(){
        this.entry = nil;
        Dialog.destroy(this);

    }
    function body( master){

        w = Label(master, text=this.prompt, justify=LEFT);
        w.grid(row=0, padx=5, sticky=W);

        this.entry = Entry(master, name="entry");
        this.entry.grid(row=1, padx=5, sticky=W+E);

        if this.initialvalue is not nil{
            this.entry.insert(0, this.initialvalue);
            this.entry.select_range(0, END);

        }
        return this.entry;

    }
    function validate(){

        import tkMessageBox;

        try{
            result = this.getresult();
        } except ValueError{
            tkMessageBox.showwarning(
                "Illegal value",
                this.errormessage + "\nPlease try again",
                parent = this
            );
            return 0;

        }
        if this.minvalue is not nil and result < this.minvalue{
            tkMessageBox.showwarning(
                "Too small",
                "The allowed minimum value is %s. "
                "Please try again." % this.minvalue,
                parent = this
            );
            return 0;

        }
        if this.maxvalue is not nil and result > this.maxvalue{
            tkMessageBox.showwarning(
                "Too large",
                "The allowed maximum value is %s. "
                "Please try again." % this.maxvalue,
                parent = this
            );
            return 0;

        }
        this.result = result;

        return 1;


}
} class _QueryInteger(_QueryDialog){
    errormessage = "Not an integer.";
    function getresult(){
        return int(this.entry.get());

}
} function askinteger(title, prompt, **kw){
    '''get an integer from the user

    Arguments:

        title -- the dialog title
        prompt -- the label text
        **kw -- see SimpleDialog class

    Return value is an integer
    ''';
    d = _QueryInteger(title, prompt, **kw);
    return d.result;

}
class _QueryFloat(_QueryDialog){
    errormessage = "Not a floating point value.";
    function getresult(){
        return float(this.entry.get());

}
} function askfloat(title, prompt, **kw){
    '''get a float from the user

    Arguments:

        title -- the dialog title
        prompt -- the label text
        **kw -- see SimpleDialog class

    Return value is a float
    ''';
    d = _QueryFloat(title, prompt, **kw);
    return d.result;

}
class _QueryString(_QueryDialog){
    function __init__( *args, **kw){
        if "show" in kw{
            this.__show = kw["show"];
            del kw["show"];
        } else{
            this.__show = nil;
        } _QueryDialog.__init__(this, *args, **kw);

    }
    function body( master){
        entry = _QueryDialog.body(this, master);
        if this.__show is not nil{
            entry.configure(show=this.__show);
        } return entry;

    }
    function getresult(){
        return this.entry.get();

}
} function askstring(title, prompt, **kw){
    '''get a string from the user

    Arguments:

        title -- the dialog title
        prompt -- the label text
        **kw -- see SimpleDialog class

    Return value is a string
    ''';
    d = _QueryString(title, prompt, **kw);
    return d.result;

}
if __name__ == "__main__"{

    root = Tk();
    root.update();

    print askinteger("Spam", "Egg count", initialvalue=12*12);
    print askfloat("Spam", "Egg weight\n(in tons)", minvalue=1, maxvalue=100);
    print askstring("Spam", "Egg label");

}