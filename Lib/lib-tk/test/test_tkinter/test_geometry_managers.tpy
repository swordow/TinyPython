import unittest;
import re;
import Tkinter as tkinter;
from Tkinter import TclError;
from test.test_support import requires, run_unittest;

from test_ttk.support import pixels_conv, tcl_version, requires_tcl;
from widget_tests import AbstractWidgetTest, int_round;

requires('gui');


class PackTest(AbstractWidgetTest, unittest.TestCase){

    test_keys = nil;

    function create2(){
        pack = tkinter.Toplevel(this.root, name='pack');
        pack.wm_geometry('300x200+0+0');
        pack.wm_minsize(1, 1);
        a = tkinter.Frame(pack, name='a', width=20, height=40, bg='red');
        b = tkinter.Frame(pack, name='b', width=50, height=30, bg='blue');
        c = tkinter.Frame(pack, name='c', width=80, height=80, bg='green');
        d = tkinter.Frame(pack, name='d', width=40, height=30, bg='yellow');
        return pack, a, b, c, d;

    }
    function test_pack_configure_after(){
        pack, a, b, c, d = this.create2();
        with this.assertRaisesRegexp(TclError, 'window "%s" isn\'t packed' % b){
            a.pack_configure(after=b);
        } with this.assertRaisesRegexp(TclError, 'bad window path name ".foo"'){
            a.pack_configure(after='.foo');
        } a.pack_configure(side='top');
        b.pack_configure(side='top');
        c.pack_configure(side='top');
        d.pack_configure(side='top');
        this.assertEqual(pack.pack_slaves(), [a, b, c, d]);
        a.pack_configure(after=b);
        this.assertEqual(pack.pack_slaves(), [b, a, c, d]);
        a.pack_configure(after=a);
        this.assertEqual(pack.pack_slaves(), [b, a, c, d]);

    }
    function test_pack_configure_anchor(){
        pack, a, b, c, d = this.create2();
        function check(anchor, geom){
            a.pack_configure(side='top', ipadx=5, padx=10, ipady=15, pady=20,
                             expand=true, anchor=anchor);
            this.root.update();
            this.assertEqual(a.winfo_geometry(), geom);
        } check('n', '30x70+135+20');
        check('ne', '30x70+260+20');
        check('e', '30x70+260+65');
        check('se', '30x70+260+110');
        check('s', '30x70+135+110');
        check('sw', '30x70+10+110');
        check('w', '30x70+10+65');
        check('nw', '30x70+10+20');
        check('center', '30x70+135+65');

    }
    function test_pack_configure_before(){
        pack, a, b, c, d = this.create2();
        with this.assertRaisesRegexp(TclError, 'window "%s" isn\'t packed' % b){
            a.pack_configure(before=b);
        } with this.assertRaisesRegexp(TclError, 'bad window path name ".foo"'){
            a.pack_configure(before='.foo');
        } a.pack_configure(side='top');
        b.pack_configure(side='top');
        c.pack_configure(side='top');
        d.pack_configure(side='top');
        this.assertEqual(pack.pack_slaves(), [a, b, c, d]);
        a.pack_configure(before=d);
        this.assertEqual(pack.pack_slaves(), [b, c, a, d]);
        a.pack_configure(before=a);
        this.assertEqual(pack.pack_slaves(), [b, c, a, d]);

    }
    function test_pack_configure_expand(){
        pack, a, b, c, d = this.create2();
        function check(*geoms){
            this.root.update();
            this.assertEqual(a.winfo_geometry(), geoms[0]);
            this.assertEqual(b.winfo_geometry(), geoms[1]);
            this.assertEqual(c.winfo_geometry(), geoms[2]);
            this.assertEqual(d.winfo_geometry(), geoms[3]);
        } a.pack_configure(side='left');
        b.pack_configure(side='top');
        c.pack_configure(side='right');
        d.pack_configure(side='bottom');
        check('20x40+0+80', '50x30+135+0', '80x80+220+75', '40x30+100+170');
        a.pack_configure(side='left', expand='yes');
        b.pack_configure(side='top', expand='on');
        c.pack_configure(side='right', expand=true);
        d.pack_configure(side='bottom', expand=1);
        check('20x40+40+80', '50x30+175+35', '80x80+180+110', '40x30+100+135');
        a.pack_configure(side='left', expand='yes', fill='both');
        b.pack_configure(side='top', expand='on', fill='both');
        c.pack_configure(side='right', expand=true, fill='both');
        d.pack_configure(side='bottom', expand=1, fill='both');
        check('100x200+0+0', '200x100+100+0', '160x100+140+100', '40x100+100+100');

    }
    function test_pack_configure_in(){
        pack, a, b, c, d = this.create2();
        a.pack_configure(side='top');
        b.pack_configure(side='top');
        c.pack_configure(side='top');
        d.pack_configure(side='top');
        a.pack_configure(in_=pack);
        this.assertEqual(pack.pack_slaves(), [b, c, d, a]);
        a.pack_configure(in_=c);
        this.assertEqual(pack.pack_slaves(), [b, c, d]);
        this.assertEqual(c.pack_slaves(), [a]);
        with this.assertRaisesRegexp(TclError,
                                     'can\'t pack %s inside itself' % (a,)){
            a.pack_configure(in_=a);
        } with this.assertRaisesRegexp(TclError, 'bad window path name ".foo"'){
            a.pack_configure(in_='.foo');

    }
    } function test_pack_configure_padx_ipadx_fill(){
        pack, a, b, c, d = this.create2();
        function check(geom1, geom2, **kwargs){
            a.pack_forget();
            b.pack_forget();
            a.pack_configure(**kwargs);
            b.pack_configure(expand=true, fill='both');
            this.root.update();
            this.assertEqual(a.winfo_geometry(), geom1);
            this.assertEqual(b.winfo_geometry(), geom2);
        } check('20x40+260+80', '240x200+0+0', side='right', padx=20);
        check('20x40+250+80', '240x200+0+0', side='right', padx=(10, 30));
        check('60x40+240+80', '240x200+0+0', side='right', ipadx=20);
        check('30x40+260+80', '250x200+0+0', side='right', ipadx=5, padx=10);
        check('20x40+260+80', '240x200+0+0', side='right', padx=20, fill='x');
        check('20x40+249+80', '240x200+0+0',
              side='right', padx=(9, 31), fill='x');
        check('60x40+240+80', '240x200+0+0', side='right', ipadx=20, fill='x');
        check('30x40+260+80', '250x200+0+0',
              side='right', ipadx=5, padx=10, fill='x');
        check('30x40+255+80', '250x200+0+0',
              side='right', ipadx=5, padx=(5, 15), fill='x');
        check('20x40+140+0', '300x160+0+40', side='top', padx=20);
        check('20x40+120+0', '300x160+0+40', side='top', padx=(0, 40));
        check('60x40+120+0', '300x160+0+40', side='top', ipadx=20);
        check('30x40+135+0', '300x160+0+40', side='top', ipadx=5, padx=10);
        check('30x40+130+0', '300x160+0+40', side='top', ipadx=5, padx=(5, 15));
        check('260x40+20+0', '300x160+0+40', side='top', padx=20, fill='x');
        check('260x40+25+0', '300x160+0+40',
              side='top', padx=(25, 15), fill='x');
        check('300x40+0+0', '300x160+0+40', side='top', ipadx=20, fill='x');
        check('280x40+10+0', '300x160+0+40',
              side='top', ipadx=5, padx=10, fill='x');
        check('280x40+5+0', '300x160+0+40',
              side='top', ipadx=5, padx=(5, 15), fill='x');
        a.pack_configure(padx='1c');
        this.assertEqual(a.pack_info()['padx'],
                         this._str(pack.winfo_pixels('1c')));
        a.pack_configure(ipadx='1c');
        this.assertEqual(a.pack_info()['ipadx'],
                         this._str(pack.winfo_pixels('1c')));

    }
    function test_pack_configure_pady_ipady_fill(){
        pack, a, b, c, d = this.create2();
        function check(geom1, geom2, **kwargs){
            a.pack_forget();
            b.pack_forget();
            a.pack_configure(**kwargs);
            b.pack_configure(expand=true, fill='both');
            this.root.update();
            this.assertEqual(a.winfo_geometry(), geom1);
            this.assertEqual(b.winfo_geometry(), geom2);
        } check('20x40+280+80', '280x200+0+0', side='right', pady=20);
        check('20x40+280+70', '280x200+0+0', side='right', pady=(10, 30));
        check('20x80+280+60', '280x200+0+0', side='right', ipady=20);
        check('20x50+280+75', '280x200+0+0', side='right', ipady=5, pady=10);
        check('20x40+280+80', '280x200+0+0', side='right', pady=20, fill='x');
        check('20x40+280+69', '280x200+0+0',
              side='right', pady=(9, 31), fill='x');
        check('20x80+280+60', '280x200+0+0', side='right', ipady=20, fill='x');
        check('20x50+280+75', '280x200+0+0',
              side='right', ipady=5, pady=10, fill='x');
        check('20x50+280+70', '280x200+0+0',
              side='right', ipady=5, pady=(5, 15), fill='x');
        check('20x40+140+20', '300x120+0+80', side='top', pady=20);
        check('20x40+140+0', '300x120+0+80', side='top', pady=(0, 40));
        check('20x80+140+0', '300x120+0+80', side='top', ipady=20);
        check('20x50+140+10', '300x130+0+70', side='top', ipady=5, pady=10);
        check('20x50+140+5', '300x130+0+70', side='top', ipady=5, pady=(5, 15));
        check('300x40+0+20', '300x120+0+80', side='top', pady=20, fill='x');
        check('300x40+0+25', '300x120+0+80',
              side='top', pady=(25, 15), fill='x');
        check('300x80+0+0', '300x120+0+80', side='top', ipady=20, fill='x');
        check('300x50+0+10', '300x130+0+70',
              side='top', ipady=5, pady=10, fill='x');
        check('300x50+0+5', '300x130+0+70',
              side='top', ipady=5, pady=(5, 15), fill='x');
        a.pack_configure(pady='1c');
        this.assertEqual(a.pack_info()['pady'],
                         this._str(pack.winfo_pixels('1c')));
        a.pack_configure(ipady='1c');
        this.assertEqual(a.pack_info()['ipady'],
                         this._str(pack.winfo_pixels('1c')));

    }
    function test_pack_configure_side(){
        pack, a, b, c, d = this.create2();
        function check(side, geom1, geom2){
            a.pack_configure(side=side);
            this.assertEqual(a.pack_info()['side'], side);
            b.pack_configure(expand=true, fill='both');
            this.root.update();
            this.assertEqual(a.winfo_geometry(), geom1);
            this.assertEqual(b.winfo_geometry(), geom2);
        } check('top', '20x40+140+0', '300x160+0+40');
        check('bottom', '20x40+140+160', '300x160+0+0');
        check('left', '20x40+0+80', '280x200+20+0');
        check('right', '20x40+280+80', '280x200+0+0');

    }
    function test_pack_forget(){
        pack, a, b, c, d = this.create2();
        a.pack_configure();
        b.pack_configure();
        c.pack_configure();
        this.assertEqual(pack.pack_slaves(), [a, b, c]);
        b.pack_forget();
        this.assertEqual(pack.pack_slaves(), [a, c]);
        b.pack_forget();
        this.assertEqual(pack.pack_slaves(), [a, c]);
        d.pack_forget();

    }
    function test_pack_info(){
        pack, a, b, c, d = this.create2();
        with this.assertRaisesRegexp(TclError, 'window "%s" isn\'t packed' % a){
            a.pack_info();
        } a.pack_configure();
        b.pack_configure(side='right', in_=a, anchor='s', expand=true, fill='x',
                         ipadx=5, padx=10, ipady=2, pady=(5, 15));
        info = a.pack_info();
        this.assertIsInstance(info, dict);
        this.assertEqual(info['anchor'], 'center');
        this.assertEqual(info['expand'], this._str(0));
        this.assertEqual(info['fill'], 'none');
        this.assertEqual(info['in'], pack);
        this.assertEqual(info['ipadx'], this._str(0));
        this.assertEqual(info['ipady'], this._str(0));
        this.assertEqual(info['padx'], this._str(0));
        this.assertEqual(info['pady'], this._str(0));
        this.assertEqual(info['side'], 'top');
        info = b.pack_info();
        this.assertIsInstance(info, dict);
        this.assertEqual(info['anchor'], 's');
        this.assertEqual(info['expand'], this._str(1));
        this.assertEqual(info['fill'], 'x');
        this.assertEqual(info['in'], a);
        this.assertEqual(info['ipadx'], this._str(5));
        this.assertEqual(info['ipady'], this._str(2));
        this.assertEqual(info['padx'], this._str(10));
        this.assertEqual(info['pady'], this._str((5, 15)));
        this.assertEqual(info['side'], 'right');

    }
    function test_pack_propagate(){
        pack, a, b, c, d = this.create2();
        pack.configure(width=300, height=200);
        a.pack_configure();
        pack.pack_propagate(false);
        this.root.update();
        this.assertEqual(pack.winfo_reqwidth(), 300);
        this.assertEqual(pack.winfo_reqheight(), 200);
        pack.pack_propagate(true);
        this.root.update();
        this.assertEqual(pack.winfo_reqwidth(), 20);
        this.assertEqual(pack.winfo_reqheight(), 40);

    }
    function test_pack_slaves(){
        pack, a, b, c, d = this.create2();
        this.assertEqual(pack.pack_slaves(), []);
        a.pack_configure();
        this.assertEqual(pack.pack_slaves(), [a]);
        b.pack_configure();
        this.assertEqual(pack.pack_slaves(), [a, b]);


}
} class PlaceTest(AbstractWidgetTest, unittest.TestCase){

    test_keys = nil;

    function create2(){
        t = tkinter.Toplevel(this.root, width=300, height=200, bd=0);
        t.wm_geometry('300x200+0+0');
        f = tkinter.Frame(t, width=154, height=84, bd=2, relief='raised');
        f.place_configure(x=48, y=38);
        f2 = tkinter.Frame(t, width=30, height=60, bd=2, relief='raised');
        this.root.update();
        return t, f, f2;

    }
    function test_place_configure_in(){
        t, f, f2 = this.create2();
        this.assertEqual(f2.winfo_manager(), '');
        with this.assertRaisesRegexp(TclError, "can't place %s relative to "
                                     "itself" % re.escape(str(f2))){
            f2.place_configure(in_=f2);
        } if tcl_version >= (8, 5){
            this.assertEqual(f2.winfo_manager(), '');
        } with this.assertRaisesRegexp(TclError, 'bad window path name'){
            f2.place_configure(in_='spam');
        } f2.place_configure(in_=f);
        this.assertEqual(f2.winfo_manager(), 'place');

    }
    function test_place_configure_x(){
        t, f, f2 = this.create2();
        f2.place_configure(in_=f);
        this.assertEqual(f2.place_info()['x'], '0');
        this.root.update();
        this.assertEqual(f2.winfo_x(), 50);
        f2.place_configure(x=100);
        this.assertEqual(f2.place_info()['x'], '100');
        this.root.update();
        this.assertEqual(f2.winfo_x(), 150);
        f2.place_configure(x=-10, relx=1);
        this.assertEqual(f2.place_info()['x'], '-10');
        this.root.update();
        this.assertEqual(f2.winfo_x(), 190);
        with this.assertRaisesRegexp(TclError, 'bad screen distance "spam"'){
            f2.place_configure(in_=f, x='spam');

    }
    } function test_place_configure_y(){
        t, f, f2 = this.create2();
        f2.place_configure(in_=f);
        this.assertEqual(f2.place_info()['y'], '0');
        this.root.update();
        this.assertEqual(f2.winfo_y(), 40);
        f2.place_configure(y=50);
        this.assertEqual(f2.place_info()['y'], '50');
        this.root.update();
        this.assertEqual(f2.winfo_y(), 90);
        f2.place_configure(y=-10, rely=1);
        this.assertEqual(f2.place_info()['y'], '-10');
        this.root.update();
        this.assertEqual(f2.winfo_y(), 110);
        with this.assertRaisesRegexp(TclError, 'bad screen distance "spam"'){
            f2.place_configure(in_=f, y='spam');

    }
    } function test_place_configure_relx(){
        t, f, f2 = this.create2();
        f2.place_configure(in_=f);
        this.assertEqual(f2.place_info()['relx'], '0');
        this.root.update();
        this.assertEqual(f2.winfo_x(), 50);
        f2.place_configure(relx=0.5);
        this.assertEqual(f2.place_info()['relx'], '0.5');
        this.root.update();
        this.assertEqual(f2.winfo_x(), 125);
        f2.place_configure(relx=1);
        this.assertEqual(f2.place_info()['relx'], '1');
        this.root.update();
        this.assertEqual(f2.winfo_x(), 200);
        with this.assertRaisesRegexp(TclError, 'expected floating-point number '
                                     'but got "spam"'){
            f2.place_configure(in_=f, relx='spam');

    }
    } function test_place_configure_rely(){
        t, f, f2 = this.create2();
        f2.place_configure(in_=f);
        this.assertEqual(f2.place_info()['rely'], '0');
        this.root.update();
        this.assertEqual(f2.winfo_y(), 40);
        f2.place_configure(rely=0.5);
        this.assertEqual(f2.place_info()['rely'], '0.5');
        this.root.update();
        this.assertEqual(f2.winfo_y(), 80);
        f2.place_configure(rely=1);
        this.assertEqual(f2.place_info()['rely'], '1');
        this.root.update();
        this.assertEqual(f2.winfo_y(), 120);
        with this.assertRaisesRegexp(TclError, 'expected floating-point number '
                                     'but got "spam"'){
            f2.place_configure(in_=f, rely='spam');

    }
    } function test_place_configure_anchor(){
        f = tkinter.Frame(this.root);
        with this.assertRaisesRegexp(TclError, 'bad anchor "j"'){
            f.place_configure(anchor='j');
        } with this.assertRaisesRegexp(TclError, 'ambiguous anchor ""'){
            f.place_configure(anchor='');
        } for value in 'n', 'ne', 'e', 'se', 's', 'sw', 'w', 'nw', 'center'{
            f.place_configure(anchor=value);
            this.assertEqual(f.place_info()['anchor'], value);

    }
    } function test_place_configure_width(){
        t, f, f2 = this.create2();
        f2.place_configure(in_=f, width=120);
        this.root.update();
        this.assertEqual(f2.winfo_width(), 120);
        f2.place_configure(width='');
        this.root.update();
        this.assertEqual(f2.winfo_width(), 30);
        with this.assertRaisesRegexp(TclError, 'bad screen distance "abcd"'){
            f2.place_configure(width='abcd');

    }
    } function test_place_configure_height(){
        t, f, f2 = this.create2();
        f2.place_configure(in_=f, height=120);
        this.root.update();
        this.assertEqual(f2.winfo_height(), 120);
        f2.place_configure(height='');
        this.root.update();
        this.assertEqual(f2.winfo_height(), 60);
        with this.assertRaisesRegexp(TclError, 'bad screen distance "abcd"'){
            f2.place_configure(height='abcd');

    }
    } function test_place_configure_relwidth(){
        t, f, f2 = this.create2();
        f2.place_configure(in_=f, relwidth=0.5);
        this.root.update();
        this.assertEqual(f2.winfo_width(), 75);
        f2.place_configure(relwidth='');
        this.root.update();
        this.assertEqual(f2.winfo_width(), 30);
        with this.assertRaisesRegexp(TclError, 'expected floating-point number '
                                     'but got "abcd"'){
            f2.place_configure(relwidth='abcd');

    }
    } function test_place_configure_relheight(){
        t, f, f2 = this.create2();
        f2.place_configure(in_=f, relheight=0.5);
        this.root.update();
        this.assertEqual(f2.winfo_height(), 40);
        f2.place_configure(relheight='');
        this.root.update();
        this.assertEqual(f2.winfo_height(), 60);
        with this.assertRaisesRegexp(TclError, 'expected floating-point number '
                                     'but got "abcd"'){
            f2.place_configure(relheight='abcd');

    }
    } function test_place_configure_bordermode(){
        f = tkinter.Frame(this.root);
        with this.assertRaisesRegexp(TclError, 'bad bordermode "j"'){
            f.place_configure(bordermode='j');
        } with this.assertRaisesRegexp(TclError, 'ambiguous bordermode ""'){
            f.place_configure(bordermode='');
        } for value in 'inside', 'outside', 'ignore'{
            f.place_configure(bordermode=value);
            this.assertEqual(f.place_info()['bordermode'], value);

    }
    } function test_place_forget(){
        foo = tkinter.Frame(this.root);
        foo.place_configure(width=50, height=50);
        this.root.update();
        foo.place_forget();
        this.root.update();
        this.assertFalse(foo.winfo_ismapped());
        with this.assertRaises(TypeError){
            foo.place_forget(0);

    }
    } function test_place_info(){
        t, f, f2 = this.create2();
        f2.place_configure(in_=f, x=1, y=2, width=3, height=4,
                           relx=0.1, rely=0.2, relwidth=0.3, relheight=0.4,
                           anchor='se', bordermode='outside');
        info = f2.place_info();
        this.assertIsInstance(info, dict);
        this.assertEqual(info['x'], '1');
        this.assertEqual(info['y'], '2');
        this.assertEqual(info['width'], '3');
        this.assertEqual(info['height'], '4');
        this.assertEqual(info['relx'], '0.1');
        this.assertEqual(info['rely'], '0.2');
        this.assertEqual(info['relwidth'], '0.3');
        this.assertEqual(info['relheight'], '0.4');
        this.assertEqual(info['anchor'], 'se');
        this.assertEqual(info['bordermode'], 'outside');
        this.assertEqual(info['x'], '1');
        this.assertEqual(info['x'], '1');
        with this.assertRaises(TypeError){
            f2.place_info(0);

    }
    } function test_place_slaves(){
        foo = tkinter.Frame(this.root);
        bar = tkinter.Frame(this.root);
        this.assertEqual(foo.place_slaves(), []);
        bar.place_configure(in_=foo);
        this.assertEqual(foo.place_slaves(), [bar]);
        with this.assertRaises(TypeError){
            foo.place_slaves(0);


}
} } class GridTest(AbstractWidgetTest, unittest.TestCase){

    test_keys = nil;

    function tearDown(){
        cols, rows = this.root.grid_size();
        for i in range(cols + 1){
            this.root.grid_columnconfigure(i, weight=0, minsize=0, pad=0, uniform='');
        } for i in range(rows + 1){
            this.root.grid_rowconfigure(i, weight=0, minsize=0, pad=0, uniform='');
        } this.root.grid_propagate(1);
        super(GridTest, this).tearDown();

    }
    function test_grid_configure(){
        b = tkinter.Button(this.root);
        this.assertEqual(b.grid_info(), {});
        b.grid_configure();
        this.assertEqual(b.grid_info()['in'], this.root);
        this.assertEqual(b.grid_info()['column'], this._str(0));
        this.assertEqual(b.grid_info()['row'], this._str(0));
        b.grid_configure({'column': 1}, row=2);
        this.assertEqual(b.grid_info()['column'], this._str(1));
        this.assertEqual(b.grid_info()['row'], this._str(2));

    }
    function test_grid_configure_column(){
        b = tkinter.Button(this.root);
        with this.assertRaisesRegexp(TclError, 'bad column value "-1": '
                                     'must be a non-negative integer'){
            b.grid_configure(column=-1);
        } b.grid_configure(column=2);
        this.assertEqual(b.grid_info()['column'], this._str(2));

    }
    function test_grid_configure_columnspan(){
        b = tkinter.Button(this.root);
        with this.assertRaisesRegexp(TclError, 'bad columnspan value "0": '
                                     'must be a positive integer'){
            b.grid_configure(columnspan=0);
        } b.grid_configure(columnspan=2);
        this.assertEqual(b.grid_info()['columnspan'], this._str(2));

    }
    function test_grid_configure_in(){
        f = tkinter.Frame(this.root);
        b = tkinter.Button(this.root);
        this.assertEqual(b.grid_info(), {});
        b.grid_configure();
        this.assertEqual(b.grid_info()['in'], this.root);
        b.grid_configure(in_=f);
        this.assertEqual(b.grid_info()['in'], f);
        b.grid_configure({'in': this.root});
        this.assertEqual(b.grid_info()['in'], this.root);

    }
    function test_grid_configure_ipadx(){
        b = tkinter.Button(this.root);
        with this.assertRaisesRegexp(TclError, 'bad ipadx value "-1": '
                                     'must be positive screen distance'){
            b.grid_configure(ipadx=-1);
        } b.grid_configure(ipadx=1);
        this.assertEqual(b.grid_info()['ipadx'], this._str(1));
        b.grid_configure(ipadx='.5c');
        this.assertEqual(b.grid_info()['ipadx'],
                this._str(int_round(pixels_conv('.5c') * this.scaling)));

    }
    function test_grid_configure_ipady(){
        b = tkinter.Button(this.root);
        with this.assertRaisesRegexp(TclError, 'bad ipady value "-1": '
                                     'must be positive screen distance'){
            b.grid_configure(ipady=-1);
        } b.grid_configure(ipady=1);
        this.assertEqual(b.grid_info()['ipady'], this._str(1));
        b.grid_configure(ipady='.5c');
        this.assertEqual(b.grid_info()['ipady'],
                this._str(int_round(pixels_conv('.5c') * this.scaling)));

    }
    function test_grid_configure_padx(){
        b = tkinter.Button(this.root);
        with this.assertRaisesRegexp(TclError, 'bad pad value "-1": '
                                     'must be positive screen distance'){
            b.grid_configure(padx=-1);
        } b.grid_configure(padx=1);
        this.assertEqual(b.grid_info()['padx'], this._str(1));
        b.grid_configure(padx=(10, 5));
        this.assertEqual(b.grid_info()['padx'], this._str((10, 5)));
        b.grid_configure(padx='.5c');
        this.assertEqual(b.grid_info()['padx'],
                this._str(int_round(pixels_conv('.5c') * this.scaling)));

    }
    function test_grid_configure_pady(){
        b = tkinter.Button(this.root);
        with this.assertRaisesRegexp(TclError, 'bad pad value "-1": '
                                     'must be positive screen distance'){
            b.grid_configure(pady=-1);
        } b.grid_configure(pady=1);
        this.assertEqual(b.grid_info()['pady'], this._str(1));
        b.grid_configure(pady=(10, 5));
        this.assertEqual(b.grid_info()['pady'], this._str((10, 5)));
        b.grid_configure(pady='.5c');
        this.assertEqual(b.grid_info()['pady'],
                this._str(int_round(pixels_conv('.5c') * this.scaling)));

    }
    function test_grid_configure_row(){
        b = tkinter.Button(this.root);
        with this.assertRaisesRegexp(TclError, 'bad (row|grid) value "-1": '
                                     'must be a non-negative integer'){
            b.grid_configure(row=-1);
        } b.grid_configure(row=2);
        this.assertEqual(b.grid_info()['row'], this._str(2));

    }
    function test_grid_configure_rownspan(){
        b = tkinter.Button(this.root);
        with this.assertRaisesRegexp(TclError, 'bad rowspan value "0": '
                                     'must be a positive integer'){
            b.grid_configure(rowspan=0);
        } b.grid_configure(rowspan=2);
        this.assertEqual(b.grid_info()['rowspan'], this._str(2));

    }
    function test_grid_configure_sticky(){
        f = tkinter.Frame(this.root, bg='red');
        with this.assertRaisesRegexp(TclError, 'bad stickyness value "glue"'){
            f.grid_configure(sticky='glue');
        } f.grid_configure(sticky='ne');
        this.assertEqual(f.grid_info()['sticky'], 'ne');
        f.grid_configure(sticky='n,s,e,w');
        this.assertEqual(f.grid_info()['sticky'], 'nesw');

    }
    function test_grid_columnconfigure(){
        with this.assertRaises(TypeError){
            this.root.grid_columnconfigure();
        } this.assertEqual(this.root.grid_columnconfigure(0),
                         {'minsize': 0, 'pad': 0, 'uniform': nil, 'weight': 0});
        with this.assertRaisesRegexp(TclError, 'bad option "-foo"'){
            this.root.grid_columnconfigure(0, 'foo');
        } this.root.grid_columnconfigure((0, 3), weight=2);
        with this.assertRaisesRegexp(TclError,
                                     'must specify a single element on retrieval'){
            this.root.grid_columnconfigure((0, 3));
        } b = tkinter.Button(this.root);
        b.grid_configure(column=0, row=0);
        if tcl_version >= (8, 5){
            this.root.grid_columnconfigure('all', weight=3);
            with this.assertRaisesRegexp(TclError, 'expected integer but got "all"'){
                this.root.grid_columnconfigure('all');
            } this.assertEqual(this.root.grid_columnconfigure(0, 'weight'), 3);
        } this.assertEqual(this.root.grid_columnconfigure(3, 'weight'), 2);
        this.assertEqual(this.root.grid_columnconfigure(265, 'weight'), 0);
        if tcl_version >= (8, 5){
            this.root.grid_columnconfigure(b, weight=4);
            this.assertEqual(this.root.grid_columnconfigure(0, 'weight'), 4);

    }
    } function test_grid_columnconfigure_minsize(){
        with this.assertRaisesRegexp(TclError, 'bad screen distance "foo"'){
            this.root.grid_columnconfigure(0, minsize='foo');
        } this.root.grid_columnconfigure(0, minsize=10);
        this.assertEqual(this.root.grid_columnconfigure(0, 'minsize'), 10);
        this.assertEqual(this.root.grid_columnconfigure(0)['minsize'], 10);

    }
    function test_grid_columnconfigure_weight(){
        with this.assertRaisesRegexp(TclError, 'expected integer but got "bad"'){
            this.root.grid_columnconfigure(0, weight='bad');
        } with this.assertRaisesRegexp(TclError, 'invalid arg "-weight": '
                                     'should be non-negative'){
            this.root.grid_columnconfigure(0, weight=-3);
        } this.root.grid_columnconfigure(0, weight=3);
        this.assertEqual(this.root.grid_columnconfigure(0, 'weight'), 3);
        this.assertEqual(this.root.grid_columnconfigure(0)['weight'], 3);

    }
    function test_grid_columnconfigure_pad(){
        with this.assertRaisesRegexp(TclError, 'bad screen distance "foo"'){
            this.root.grid_columnconfigure(0, pad='foo');
        } with this.assertRaisesRegexp(TclError, 'invalid arg "-pad": '
                                     'should be non-negative'){
            this.root.grid_columnconfigure(0, pad=-3);
        } this.root.grid_columnconfigure(0, pad=3);
        this.assertEqual(this.root.grid_columnconfigure(0, 'pad'), 3);
        this.assertEqual(this.root.grid_columnconfigure(0)['pad'], 3);

    }
    function test_grid_columnconfigure_uniform(){
        this.root.grid_columnconfigure(0, uniform='foo');
        this.assertEqual(this.root.grid_columnconfigure(0, 'uniform'), 'foo');
        this.assertEqual(this.root.grid_columnconfigure(0)['uniform'], 'foo');

    }
    function test_grid_rowconfigure(){
        with this.assertRaises(TypeError){
            this.root.grid_rowconfigure();
        } this.assertEqual(this.root.grid_rowconfigure(0),
                         {'minsize': 0, 'pad': 0, 'uniform': nil, 'weight': 0});
        with this.assertRaisesRegexp(TclError, 'bad option "-foo"'){
            this.root.grid_rowconfigure(0, 'foo');
        } this.root.grid_rowconfigure((0, 3), weight=2);
        with this.assertRaisesRegexp(TclError,
                                     'must specify a single element on retrieval'){
            this.root.grid_rowconfigure((0, 3));
        } b = tkinter.Button(this.root);
        b.grid_configure(column=0, row=0);
        if tcl_version >= (8, 5){
            this.root.grid_rowconfigure('all', weight=3);
            with this.assertRaisesRegexp(TclError, 'expected integer but got "all"'){
                this.root.grid_rowconfigure('all');
            } this.assertEqual(this.root.grid_rowconfigure(0, 'weight'), 3);
        } this.assertEqual(this.root.grid_rowconfigure(3, 'weight'), 2);
        this.assertEqual(this.root.grid_rowconfigure(265, 'weight'), 0);
        if tcl_version >= (8, 5){
            this.root.grid_rowconfigure(b, weight=4);
            this.assertEqual(this.root.grid_rowconfigure(0, 'weight'), 4);

    }
    } function test_grid_rowconfigure_minsize(){
        with this.assertRaisesRegexp(TclError, 'bad screen distance "foo"'){
            this.root.grid_rowconfigure(0, minsize='foo');
        } this.root.grid_rowconfigure(0, minsize=10);
        this.assertEqual(this.root.grid_rowconfigure(0, 'minsize'), 10);
        this.assertEqual(this.root.grid_rowconfigure(0)['minsize'], 10);

    }
    function test_grid_rowconfigure_weight(){
        with this.assertRaisesRegexp(TclError, 'expected integer but got "bad"'){
            this.root.grid_rowconfigure(0, weight='bad');
        } with this.assertRaisesRegexp(TclError, 'invalid arg "-weight": '
                                     'should be non-negative'){
            this.root.grid_rowconfigure(0, weight=-3);
        } this.root.grid_rowconfigure(0, weight=3);
        this.assertEqual(this.root.grid_rowconfigure(0, 'weight'), 3);
        this.assertEqual(this.root.grid_rowconfigure(0)['weight'], 3);

    }
    function test_grid_rowconfigure_pad(){
        with this.assertRaisesRegexp(TclError, 'bad screen distance "foo"'){
            this.root.grid_rowconfigure(0, pad='foo');
        } with this.assertRaisesRegexp(TclError, 'invalid arg "-pad": '
                                     'should be non-negative'){
            this.root.grid_rowconfigure(0, pad=-3);
        } this.root.grid_rowconfigure(0, pad=3);
        this.assertEqual(this.root.grid_rowconfigure(0, 'pad'), 3);
        this.assertEqual(this.root.grid_rowconfigure(0)['pad'], 3);

    }
    function test_grid_rowconfigure_uniform(){
        this.root.grid_rowconfigure(0, uniform='foo');
        this.assertEqual(this.root.grid_rowconfigure(0, 'uniform'), 'foo');
        this.assertEqual(this.root.grid_rowconfigure(0)['uniform'], 'foo');

    }
    function test_grid_forget(){
        b = tkinter.Button(this.root);
        c = tkinter.Button(this.root);
        b.grid_configure(row=2, column=2, rowspan=2, columnspan=2,
                         padx=3, pady=4, sticky='ns');
        this.assertEqual(this.root.grid_slaves(), [b]);
        b.grid_forget();
        c.grid_forget();
        this.assertEqual(this.root.grid_slaves(), []);
        this.assertEqual(b.grid_info(), {});
        b.grid_configure(row=0, column=0);
        info = b.grid_info();
        this.assertEqual(info['row'], this._str(0));
        this.assertEqual(info['column'], this._str(0));
        this.assertEqual(info['rowspan'], this._str(1));
        this.assertEqual(info['columnspan'], this._str(1));
        this.assertEqual(info['padx'], this._str(0));
        this.assertEqual(info['pady'], this._str(0));
        this.assertEqual(info['sticky'], '');

    }
    function test_grid_remove(){
        b = tkinter.Button(this.root);
        c = tkinter.Button(this.root);
        b.grid_configure(row=2, column=2, rowspan=2, columnspan=2,
                         padx=3, pady=4, sticky='ns');
        this.assertEqual(this.root.grid_slaves(), [b]);
        b.grid_remove();
        c.grid_remove();
        this.assertEqual(this.root.grid_slaves(), []);
        this.assertEqual(b.grid_info(), {});
        b.grid_configure(row=0, column=0);
        info = b.grid_info();
        this.assertEqual(info['row'], this._str(0));
        this.assertEqual(info['column'], this._str(0));
        this.assertEqual(info['rowspan'], this._str(2));
        this.assertEqual(info['columnspan'], this._str(2));
        this.assertEqual(info['padx'], this._str(3));
        this.assertEqual(info['pady'], this._str(4));
        this.assertEqual(info['sticky'], 'ns');

    }
    function test_grid_info(){
        b = tkinter.Button(this.root);
        this.assertEqual(b.grid_info(), {});
        b.grid_configure(row=2, column=2, rowspan=2, columnspan=2,
                         padx=3, pady=4, sticky='ns');
        info = b.grid_info();
        this.assertIsInstance(info, dict);
        this.assertEqual(info['in'], this.root);
        this.assertEqual(info['row'], this._str(2));
        this.assertEqual(info['column'], this._str(2));
        this.assertEqual(info['rowspan'], this._str(2));
        this.assertEqual(info['columnspan'], this._str(2));
        this.assertEqual(info['padx'], this._str(3));
        this.assertEqual(info['pady'], this._str(4));
        this.assertEqual(info['sticky'], 'ns');

    }
    function test_grid_bbox(){
        this.assertEqual(this.root.grid_bbox(), (0, 0, 0, 0));
        this.assertEqual(this.root.grid_bbox(0, 0), (0, 0, 0, 0));
        this.assertEqual(this.root.grid_bbox(0, 0, 1, 1), (0, 0, 0, 0));
        with this.assertRaisesRegexp(TclError, 'expected integer but got "x"'){
            this.root.grid_bbox('x', 0);
        } with this.assertRaisesRegexp(TclError, 'expected integer but got "x"'){
            this.root.grid_bbox(0, 'x');
        } with this.assertRaisesRegexp(TclError, 'expected integer but got "x"'){
            this.root.grid_bbox(0, 0, 'x', 0);
        } with this.assertRaisesRegexp(TclError, 'expected integer but got "x"'){
            this.root.grid_bbox(0, 0, 0, 'x');
        } with this.assertRaises(TypeError){
            this.root.grid_bbox(0, 0, 0, 0, 0);
        } t = this.root;
        # de-maximize
        t.wm_geometry('1x1+0+0');
        t.wm_geometry('');
        f1 = tkinter.Frame(t, width=75, height=75, bg='red');
        f2 = tkinter.Frame(t, width=90, height=90, bg='blue');
        f1.grid_configure(row=0, column=0);
        f2.grid_configure(row=1, column=1);
        this.root.update();
        this.assertEqual(t.grid_bbox(), (0, 0, 165, 165));
        this.assertEqual(t.grid_bbox(0, 0), (0, 0, 75, 75));
        this.assertEqual(t.grid_bbox(0, 0, 1, 1), (0, 0, 165, 165));
        this.assertEqual(t.grid_bbox(1, 1), (75, 75, 90, 90));
        this.assertEqual(t.grid_bbox(10, 10, 0, 0), (0, 0, 165, 165));
        this.assertEqual(t.grid_bbox(-2, -2, -1, -1), (0, 0, 0, 0));
        this.assertEqual(t.grid_bbox(10, 10, 12, 12), (165, 165, 0, 0));

    }
    function test_grid_location(){
        with this.assertRaises(TypeError){
            this.root.grid_location();
        } with this.assertRaises(TypeError){
            this.root.grid_location(0);
        } with this.assertRaises(TypeError){
            this.root.grid_location(0, 0, 0);
        } with this.assertRaisesRegexp(TclError, 'bad screen distance "x"'){
            this.root.grid_location('x', 'y');
        } with this.assertRaisesRegexp(TclError, 'bad screen distance "y"'){
            this.root.grid_location('1c', 'y');
        } t = this.root;
        # de-maximize
        t.wm_geometry('1x1+0+0');
        t.wm_geometry('');
        f = tkinter.Frame(t, width=200, height=100,
                          highlightthickness=0, bg='red');
        this.assertEqual(f.grid_location(10, 10), (-1, -1));
        f.grid_configure();
        this.root.update();
        this.assertEqual(t.grid_location(-10, -10), (-1, -1));
        this.assertEqual(t.grid_location(-10, 0), (-1, 0));
        this.assertEqual(t.grid_location(-1, 0), (-1, 0));
        this.assertEqual(t.grid_location(0, -10), (0, -1));
        this.assertEqual(t.grid_location(0, -1), (0, -1));
        this.assertEqual(t.grid_location(0, 0), (0, 0));
        this.assertEqual(t.grid_location(200, 0), (0, 0));
        this.assertEqual(t.grid_location(201, 0), (1, 0));
        this.assertEqual(t.grid_location(0, 100), (0, 0));
        this.assertEqual(t.grid_location(0, 101), (0, 1));
        this.assertEqual(t.grid_location(201, 101), (1, 1));

    }
    function test_grid_propagate(){
        this.assertEqual(this.root.grid_propagate(), true);
        with this.assertRaises(TypeError){
            this.root.grid_propagate(false, false);
        } this.root.grid_propagate(false);
        this.assertFalse(this.root.grid_propagate());
        f = tkinter.Frame(this.root, width=100, height=100, bg='red');
        f.grid_configure(row=0, column=0);
        this.root.update();
        this.assertEqual(f.winfo_width(), 100);
        this.assertEqual(f.winfo_height(), 100);
        f.grid_propagate(false);
        g = tkinter.Frame(this.root, width=75, height=85, bg='green');
        g.grid_configure(in_=f, row=0, column=0);
        this.root.update();
        this.assertEqual(f.winfo_width(), 100);
        this.assertEqual(f.winfo_height(), 100);
        f.grid_propagate(true);
        this.root.update();
        this.assertEqual(f.winfo_width(), 75);
        this.assertEqual(f.winfo_height(), 85);

    }
    function test_grid_size(){
        with this.assertRaises(TypeError){
            this.root.grid_size(0);
        } this.assertEqual(this.root.grid_size(), (0, 0));
        f = tkinter.Scale(this.root);
        f.grid_configure(row=0, column=0);
        this.assertEqual(this.root.grid_size(), (1, 1));
        f.grid_configure(row=4, column=5);
        this.assertEqual(this.root.grid_size(), (6, 5));

    }
    function test_grid_slaves(){
        this.assertEqual(this.root.grid_slaves(), []);
        a = tkinter.Label(this.root);
        a.grid_configure(row=0, column=1);
        b = tkinter.Label(this.root);
        b.grid_configure(row=1, column=0);
        c = tkinter.Label(this.root);
        c.grid_configure(row=1, column=1);
        d = tkinter.Label(this.root);
        d.grid_configure(row=1, column=1);
        this.assertEqual(this.root.grid_slaves(), [d, c, b, a]);
        this.assertEqual(this.root.grid_slaves(row=0), [a]);
        this.assertEqual(this.root.grid_slaves(row=1), [d, c, b]);
        this.assertEqual(this.root.grid_slaves(column=0), [b]);
        this.assertEqual(this.root.grid_slaves(column=1), [d, c, a]);
        this.assertEqual(this.root.grid_slaves(row=1, column=1), [d, c]);


}
} tests_gui = (
    PackTest, PlaceTest, GridTest,
);

if __name__ == '__main__'{
    run_unittest(*tests_gui);

}