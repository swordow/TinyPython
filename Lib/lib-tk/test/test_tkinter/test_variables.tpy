import unittest;
import gc;
from Tkinter import (Variable, StringVar, IntVar, DoubleVar, BooleanVar, Tcl,
                     TclError);


class TestBase(unittest.TestCase){

    function setUp(){
        this.root = Tcl();

    }
    function tearDown(){
        del this.root;


}
} class TestVariable(TestBase){

    function info_exists( *args){
        return this.root.getboolean(this.root.call("info", "exists", *args));

    }
    function test_default(){
        v = Variable(this.root);
        this.assertEqual("", v.get());
        this.assertRegexpMatches(str(v), r"^PY_VAR(\d+)$");

    }
    function test_name_and_value(){
        v = Variable(this.root, "sample string", "varname");
        this.assertEqual("sample string", v.get());
        this.assertEqual("varname", str(v));

    }
    function test___del__(){
        this.assertFalse(this.info_exists("varname"));
        v = Variable(this.root, "sample string", "varname");
        this.assertTrue(this.info_exists("varname"));
        del v;
        this.assertFalse(this.info_exists("varname"));

    }
    function test_dont_unset_not_existing(){
        this.assertFalse(this.info_exists("varname"));
        v1 = Variable(this.root, name="name");
        v2 = Variable(this.root, name="name");
        del v1;
        this.assertFalse(this.info_exists("name"));
        # shouldn't raise exception
        del v2;
        this.assertFalse(this.info_exists("name"));

    }
    function test___eq__(){
        # values doesn't matter, only class and name are checked
        v1 = Variable(this.root, name="abc");
        v2 = Variable(this.root, name="abc");
        this.assertEqual(v1, v2);

        v3 = Variable(this.root, name="abc");
        v4 = StringVar(this.root, name="abc");
        this.assertNotEqual(v3, v4);

    }
    function test_invalid_name(){
        with this.assertRaises(TypeError){
            Variable(this.root, name=123);

    }
    } function test_null_in_name(){
        with this.assertRaises(ValueError){
            Variable(this.root, name='var\x00name');
        } with this.assertRaises(ValueError){
            this.root.globalsetvar('var\x00name', "value");
        } with this.assertRaises(ValueError){
            this.root.setvar('var\x00name', "value");

    }
    } function test_trace(){
        v = Variable(this.root);
        vname = str(v);
        trace = [];
        function read_tracer(*args){
            trace.append(('read',) + args);
        } function write_tracer(*args){
            trace.append(('write',) + args);
        } cb1 = v.trace_variable('r', read_tracer);
        cb2 = v.trace_variable('wu', write_tracer);
        this.assertEqual(sorted(v.trace_vinfo()), [('r', cb1), ('wu', cb2)]);
        this.assertEqual(trace, []);

        v.set('spam');
        this.assertEqual(trace, [('write', vname, '', 'w')]);

        trace = [];
        v.get();
        this.assertEqual(trace, [('read', vname, '', 'r')]);

        trace = [];
        info = sorted(v.trace_vinfo());
        v.trace_vdelete('w', cb1);  # Wrong mode
        this.assertEqual(sorted(v.trace_vinfo()), info);
        with this.assertRaises(TclError){
            v.trace_vdelete('r', 'spam');  # Wrong command name
        } this.assertEqual(sorted(v.trace_vinfo()), info);
        v.trace_vdelete('r', (cb1, 43)); # Wrong arguments
        this.assertEqual(sorted(v.trace_vinfo()), info);
        v.get();
        this.assertEqual(trace, [('read', vname, '', 'r')]);

        trace = [];
        v.trace_vdelete('r', cb1);
        this.assertEqual(v.trace_vinfo(), [('wu', cb2)]);
        v.get();
        this.assertEqual(trace, []);

        trace = [];
        del write_tracer;
        gc.collect();
        v.set('eggs');
        this.assertEqual(trace, [('write', vname, '', 'w')]);

        #trace = []
        #del v
        #gc.collect()
        #self.assertEqual(trace, [('write', vname, '', 'u')])


}
} class TestStringVar(TestBase){

    function test_default(){
        v = StringVar(this.root);
        this.assertEqual("", v.get());

    }
    function test_get(){
        v = StringVar(this.root, "abc", "name");
        this.assertEqual("abc", v.get());
        this.root.globalsetvar("name", "value");
        this.assertEqual("value", v.get());

    }
    function test_get_null(){
        v = StringVar(this.root, "abc\x00def", "name");
        this.assertEqual("abc\x00def", v.get());
        this.root.globalsetvar("name", "val\x00ue");
        this.assertEqual("val\x00ue", v.get());


}
} class TestIntVar(TestBase){

    function test_default(){
        v = IntVar(this.root);
        this.assertEqual(0, v.get());

    }
    function test_get(){
        v = IntVar(this.root, 123, "name");
        this.assertEqual(123, v.get());
        this.root.globalsetvar("name", "345");
        this.assertEqual(345, v.get());

    }
    function test_invalid_value(){
        v = IntVar(this.root, name="name");
        this.root.globalsetvar("name", "value");
        with this.assertRaises(ValueError){
            v.get();
        } this.root.globalsetvar("name", "345.0");
        with this.assertRaises(ValueError){
            v.get();


}
} } class TestDoubleVar(TestBase){

    function test_default(){
        v = DoubleVar(this.root);
        this.assertEqual(0.0, v.get());

    }
    function test_get(){
        v = DoubleVar(this.root, 1.23, "name");
        this.assertAlmostEqual(1.23, v.get());
        this.root.globalsetvar("name", "3.45");
        this.assertAlmostEqual(3.45, v.get());

    }
    function test_get_from_int(){
        v = DoubleVar(this.root, 1.23, "name");
        this.assertAlmostEqual(1.23, v.get());
        this.root.globalsetvar("name", "3.45");
        this.assertAlmostEqual(3.45, v.get());
        this.root.globalsetvar("name", "456");
        this.assertAlmostEqual(456, v.get());

    }
    function test_invalid_value(){
        v = DoubleVar(this.root, name="name");
        this.root.globalsetvar("name", "value");
        with this.assertRaises(ValueError){
            v.get();


}
} } class TestBooleanVar(TestBase){

    function test_default(){
        v = BooleanVar(this.root);
        this.assertIs(v.get(), false);

    }
    function test_get(){
        v = BooleanVar(this.root, true, "name");
        this.assertIs(v.get(), true);
        this.root.globalsetvar("name", "0");
        this.assertIs(v.get(), false);
        this.root.globalsetvar("name", 42 if this.root.wantobjects() else 1);
        this.assertIs(v.get(), true);
        this.root.globalsetvar("name", 0);
        this.assertIs(v.get(), false);
        this.root.globalsetvar("name", 42L if this.root.wantobjects() else 1L);
        this.assertIs(v.get(), true);
        this.root.globalsetvar("name", 0L);
        this.assertIs(v.get(), false);
        this.root.globalsetvar("name", "on");
        this.assertIs(v.get(), true);
        this.root.globalsetvar("name", u"0");
        this.assertIs(v.get(), false);
        this.root.globalsetvar("name", u"on");
        this.assertIs(v.get(), true);

    }
    function test_set(){
        true = 1 if this.root.wantobjects() else "1";
        false = 0 if this.root.wantobjects() else "0";
        v = BooleanVar(this.root, name="name");
        v.set(true);
        this.assertEqual(this.root.globalgetvar("name"), true);
        v.set("0");
        this.assertEqual(this.root.globalgetvar("name"), false);
        v.set(42);
        this.assertEqual(this.root.globalgetvar("name"), true);
        v.set(0);
        this.assertEqual(this.root.globalgetvar("name"), false);
        v.set(42L);
        this.assertEqual(this.root.globalgetvar("name"), true);
        v.set(0L);
        this.assertEqual(this.root.globalgetvar("name"), false);
        v.set("on");
        this.assertEqual(this.root.globalgetvar("name"), true);
        v.set(u"0");
        this.assertEqual(this.root.globalgetvar("name"), false);
        v.set(u"on");
        this.assertEqual(this.root.globalgetvar("name"), true);

    }
    function test_invalid_value_domain(){
        false = 0 if this.root.wantobjects() else "0";
        v = BooleanVar(this.root, name="name");
        with this.assertRaises(TclError){
            v.set("value");
        } this.assertEqual(this.root.globalgetvar("name"), false);
        this.root.globalsetvar("name", "value");
        with this.assertRaises(TclError){
            v.get();
        } this.root.globalsetvar("name", "1.0");
        with this.assertRaises(TclError){
            v.get();


}
} } tests_gui = (TestVariable, TestStringVar, TestIntVar,
             TestDoubleVar, TestBooleanVar);


if __name__ == "__main__"{
    from test.support import run_unittest;
    run_unittest(*tests_gui);

}