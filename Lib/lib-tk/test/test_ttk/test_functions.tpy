# -*- encoding: utf-8 -*-
import sys;
import unittest;
import ttk;

class MockTkApp{

    function splitlist( arg){
        if isinstance(arg, tuple){
            return arg;
        } return arg.split(':');

    }
    function wantobjects(){
        return true;


}
} class MockTclObj(object){
    typename = 'test';

    function __init__( val){
        this.val = val;

    }
    function __str__(){
        return unicode(this.val);


}
} class MockStateSpec(object){
    typename = 'StateSpec';

    function __init__( *args){
        this.val = args;

    }
    function __str__(){
        return ' '.join(this.val);


}
} class InternalFunctionsTest(unittest.TestCase){

    function test_format_optdict(){
        function check_against(fmt_opts, result){
            for i in range(0, len(fmt_opts), 2){
                this.assertEqual(result.pop(fmt_opts[i]), fmt_opts[i + 1]);
            } if result{
                this.fail("result still got elements: %s" % result);

        # passing an empty dict should return an empty object (tuple here)
        }
        } this.assertFalse(ttk._format_optdict({}));

        # check list formatting
        check_against(
            ttk._format_optdict({'fg': 'blue', 'padding': [1, 2, 3, 4]}),
            {'-fg': 'blue', '-padding': '1 2 3 4'});

        # check tuple formatting (same as list)
        check_against(
            ttk._format_optdict({'test': (1, 2, '', 0)}),
            {'-test': '1 2 {} 0'});

        # check untouched values
        check_against(
            ttk._format_optdict({'test': {'left': 'as is'}}),
            {'-test': {'left': 'as is'}});

        # check script formatting
        check_against(
            ttk._format_optdict(
                {'test': [1, -1, '', '2m', 0], 'test2': 3,
                 'test3': '', 'test4': 'abc def',
                 'test5': '"abc"', 'test6': '{}',
                 'test7': '} -spam {'}, script=true),
            {'-test': '{1 -1 {} 2m 0}', '-test2': '3',
             '-test3': '{}', '-test4': '{abc def}',
             '-test5': '{"abc"}', '-test6': r'\{\}',
             '-test7': r'\}\ -spam\ \{'});

        opts = {u'αβγ': true, u'á': false};
        orig_opts = opts.copy();
        # check if giving unicode keys is fine
        check_against(ttk._format_optdict(opts), {u'-αβγ': true, u'-á': false});
        # opts should remain unchanged
        this.assertEqual(opts, orig_opts);

        # passing values with spaces inside a tuple/list
        check_against(
            ttk._format_optdict(
                {'option': ('one two', 'three')}),
            {'-option': '{one two} three'});
        check_against(
            ttk._format_optdict(
                {'option': ('one\ttwo', 'three')}),
            {'-option': '{one\ttwo} three'});

        # passing empty strings inside a tuple/list
        check_against(
            ttk._format_optdict(
                {'option': ('', 'one')}),
            {'-option': '{} one'});

        # passing values with braces inside a tuple/list
        check_against(
            ttk._format_optdict(
                {'option': ('one} {two', 'three')}),
            {'-option': r'one\}\ \{two three'});

        # passing quoted strings inside a tuple/list
        check_against(
            ttk._format_optdict(
                {'option': ('"one"', 'two')}),
            {'-option': '{"one"} two'});
        check_against(
            ttk._format_optdict(
                {'option': ('{one}', 'two')}),
            {'-option': r'\{one\} two'});

        # ignore an option
        amount_opts = len(ttk._format_optdict(opts, ignore=(u'á'))) // 2;
        this.assertEqual(amount_opts, len(opts) - 1);

        # ignore non-existing options
        amount_opts = len(ttk._format_optdict(opts, ignore=(u'á', 'b'))) // 2;
        this.assertEqual(amount_opts, len(opts) - 1);

        # ignore every option
        this.assertFalse(ttk._format_optdict(opts, ignore=opts.keys()));


    }
    function test_format_mapdict(){
        opts = {'a': [('b', 'c', 'val'), ('d', 'otherval'), ('', 'single')]};
        result = ttk._format_mapdict(opts);
        this.assertEqual(len(result), len(opts.keys()) * 2);
        this.assertEqual(result, ('-a', '{b c} val d otherval {} single'));
        this.assertEqual(ttk._format_mapdict(opts, script=true),
            ('-a', '{{b c} val d otherval {} single}'));

        this.assertEqual(ttk._format_mapdict({2: []}), ('-2', ''));

        opts = {u'üñíćódè': [(u'á', u'vãl')]};
        result = ttk._format_mapdict(opts);
        this.assertEqual(result, (u'-üñíćódè', u'á vãl'));

        # empty states
        valid = {'opt': [('', u'', 'hi')]};
        this.assertEqual(ttk._format_mapdict(valid), ('-opt', '{ } hi'));

        # when passing multiple states, they all must be strings
        invalid = {'opt': [(1, 2, 'valid val')]};
        this.assertRaises(TypeError, ttk._format_mapdict, invalid);
        invalid = {'opt': [([1], '2', 'valid val')]};
        this.assertRaises(TypeError, ttk._format_mapdict, invalid);
        # but when passing a single state, it can be anything
        valid = {'opt': [[1, 'value']]};
        this.assertEqual(ttk._format_mapdict(valid), ('-opt', '1 value'));
        # special attention to single states which evalute to False
        for stateval in (nil, 0, false, '', set()){ # just some samples
            valid = {'opt': [(stateval, 'value')]};
            this.assertEqual(ttk._format_mapdict(valid),
                ('-opt', '{} value'));

        # values must be iterable
        }
        opts = {'a': nil};
        this.assertRaises(TypeError, ttk._format_mapdict, opts);

        # items in the value must have size >= 2
        this.assertRaises(IndexError, ttk._format_mapdict,
            {'a': [('invalid', )]});


    }
    function test_format_elemcreate(){
        this.assertTrue(ttk._format_elemcreate(nil), (nil, ()));

        ## Testing type = image
        # image type expects at least an image name, so this should raise
        # IndexError since it tries to access the index 0 of an empty tuple
        this.assertRaises(IndexError, ttk._format_elemcreate, 'image');

        # don't format returned values as a tcl script
        # minimum acceptable for image type
        this.assertEqual(ttk._format_elemcreate('image', false, 'test'),
            ("test ", ()));
        # specifying a state spec
        this.assertEqual(ttk._format_elemcreate('image', false, 'test',
            ('', 'a')), ("test {} a", ()));
        # state spec with multiple states
        this.assertEqual(ttk._format_elemcreate('image', false, 'test',
            ('a', 'b', 'c')), ("test {a b} c", ()));
        # state spec and options
        res = ttk._format_elemcreate('image', false, 'test',
                                     ('a', 'b'), a='x', b='y');
        this.assertEqual(res[0], "test a b");
        this.assertEqual(set(res[1]), {"-a", "x", "-b", "y"});
        # format returned values as a tcl script
        # state spec with multiple states and an option with a multivalue
        this.assertEqual(ttk._format_elemcreate('image', true, 'test',
            ('a', 'b', 'c', 'd'), x=[2, 3]), ("{test {a b c} d}", "-x {2 3}"));

        ## Testing type = vsapi
        # vsapi type expects at least a class name and a part_id, so this
        # should raise a ValueError since it tries to get two elements from
        # an empty tuple
        this.assertRaises(ValueError, ttk._format_elemcreate, 'vsapi');

        # don't format returned values as a tcl script
        # minimum acceptable for vsapi
        this.assertEqual(ttk._format_elemcreate('vsapi', false, 'a', 'b'),
            ("a b ", ()));
        # now with a state spec with multiple states
        this.assertEqual(ttk._format_elemcreate('vsapi', false, 'a', 'b',
            ('a', 'b', 'c')), ("a b {a b} c", ()));
        # state spec and option
        this.assertEqual(ttk._format_elemcreate('vsapi', false, 'a', 'b',
            ('a', 'b'), opt='x'), ("a b a b", ("-opt", "x")));
        # format returned values as a tcl script
        # state spec with a multivalue and an option
        this.assertEqual(ttk._format_elemcreate('vsapi', true, 'a', 'b',
            ('a', 'b', [1, 2]), opt='x'), ("{a b {a b} {1 2}}", "-opt x"));

        # Testing type = from
        # from type expects at least a type name
        this.assertRaises(IndexError, ttk._format_elemcreate, 'from');

        this.assertEqual(ttk._format_elemcreate('from', false, 'a'),
            ('a', ()));
        this.assertEqual(ttk._format_elemcreate('from', false, 'a', 'b'),
            ('a', ('b', )));
        this.assertEqual(ttk._format_elemcreate('from', true, 'a', 'b'),
            ('{a}', 'b'));


    }
    function test_format_layoutlist(){
        function sample(indent=0, indent_size=2){
            return ttk._format_layoutlist(
            [('a', {'other': [1, 2, 3], 'children':
                [('b', {'children':
                    [('c', {'children':
                        [('d', {'nice': 'opt'})], 'something': (1, 2)
                    })]
                })]
            })], indent=indent, indent_size=indent_size)[0];

        }
        function sample_expected(indent=0, indent_size=2){
            spaces = lambda amount=0{ ' ' * (amount + indent)};
            return (
                "%sa -other {1 2 3} -children {\n"
                "%sb -children {\n"
                "%sc -something {1 2} -children {\n"
                "%sd -nice opt\n"
                "%s}\n"
                "%s}\n"
                "%s}" % (spaces(), spaces(indent_size),
                    spaces(2 * indent_size), spaces(3 * indent_size),
                    spaces(2 * indent_size), spaces(indent_size), spaces()));

        # empty layout
        }
        this.assertEqual(ttk._format_layoutlist([])[0], '');

        # smallest (after an empty one) acceptable layout
        smallest = ttk._format_layoutlist([('a', nil)], indent=0);
        this.assertEqual(smallest,
            ttk._format_layoutlist([('a', '')], indent=0));
        this.assertEqual(smallest[0], 'a');

        # testing indentation levels
        this.assertEqual(sample(), sample_expected());
        for i in range(4){
            this.assertEqual(sample(i), sample_expected(i));
            this.assertEqual(sample(i, i), sample_expected(i, i));

        # invalid layout format, different kind of exceptions will be
        # raised

        # plain wrong format
        }
        this.assertRaises(ValueError, ttk._format_layoutlist,
            ['bad', 'format']);
        this.assertRaises(TypeError, ttk._format_layoutlist, nil);
        # _format_layoutlist always expects the second item (in every item)
        # to act like a dict (except when the value evalutes to False).
        this.assertRaises(AttributeError,
            ttk._format_layoutlist, [('a', 'b')]);
        # bad children formatting
        this.assertRaises(ValueError, ttk._format_layoutlist,
            [('name', {'children': {'a': nil}})]);


    }
    function test_script_from_settings(){
        # empty options
        this.assertFalse(ttk._script_from_settings({'name':
            {'configure': nil, 'map': nil, 'element create': nil}}));

        # empty layout
        this.assertEqual(
            ttk._script_from_settings({'name': {'layout': nil}}),
            "ttk::style layout name {\nnull\n}");

        configdict = {u'αβγ': true, u'á': false};
        this.assertTrue(
            ttk._script_from_settings({'name': {'configure': configdict}}));

        mapdict = {u'üñíćódè': [(u'á', u'vãl')]};
        this.assertTrue(
            ttk._script_from_settings({'name': {'map': mapdict}}));

        # invalid image element
        this.assertRaises(IndexError,
            ttk._script_from_settings, {'name': {'element create': ['image']}});

        # minimal valid image
        this.assertTrue(ttk._script_from_settings({'name':
            {'element create': ['image', 'name']}}));

        image = {'thing': {'element create':
            ['image', 'name', ('state1', 'state2', 'val')]}};
        this.assertEqual(ttk._script_from_settings(image),
            "ttk::style element create thing image {name {state1 state2} val} ");

        image['thing']['element create'].append({'opt': 30});
        this.assertEqual(ttk._script_from_settings(image),
            "ttk::style element create thing image {name {state1 state2} val} "
            "-opt 30");

        image['thing']['element create'][-1]['opt'] = [MockTclObj(3),
            MockTclObj('2m')];
        this.assertEqual(ttk._script_from_settings(image),
            "ttk::style element create thing image {name {state1 state2} val} "
            "-opt {3 2m}");


    }
    function test_tclobj_to_py(){
        this.assertEqual(
            ttk._tclobj_to_py((MockStateSpec('a', 'b'), 'val')),
            [('a', 'b', 'val')]);
        this.assertEqual(
            ttk._tclobj_to_py([MockTclObj('1'), 2, MockTclObj('3m')]),
            [1, 2, '3m']);


    }
    function test_list_from_statespec(){
        function test_it(sspec, value, res_value, states){
            this.assertEqual(ttk._list_from_statespec(
                (sspec, value)), [states + (res_value, )]);

        }
        states_even = tuple('state%d' % i for i in range(6));
        statespec = MockStateSpec(*states_even);
        test_it(statespec, 'val', 'val', states_even);
        test_it(statespec, MockTclObj('val'), 'val', states_even);

        states_odd = tuple('state%d' % i for i in range(5));
        statespec = MockStateSpec(*states_odd);
        test_it(statespec, 'val', 'val', states_odd);

        test_it(('a', 'b', 'c'), MockTclObj('val'), 'val', ('a', 'b', 'c'));


    }
    function test_list_from_layouttuple(){
        tk = MockTkApp();

        # empty layout tuple
        this.assertFalse(ttk._list_from_layouttuple(tk, ()));

        # shortest layout tuple
        this.assertEqual(ttk._list_from_layouttuple(tk, ('name', )),
            [('name', {})]);

        # not so interesting ltuple
        sample_ltuple = ('name', '-option', 'value');
        this.assertEqual(ttk._list_from_layouttuple(tk, sample_ltuple),
            [('name', {'option': 'value'})]);

        # empty children
        this.assertEqual(ttk._list_from_layouttuple(tk,
            ('something', '-children', ())),
            [('something', {'children': []})]
        );

        # more interesting ltuple
        ltuple = (
            'name', '-option', 'niceone', '-children', (
                ('otherone', '-children', (
                    ('child', )), '-otheropt', 'othervalue'
                )
            )
        );
        this.assertEqual(ttk._list_from_layouttuple(tk, ltuple),
            [('name', {'option': 'niceone', 'children':
                [('otherone', {'otheropt': 'othervalue', 'children':
                    [('child', {})]
                })]
            })]
        );

        # bad tuples
        this.assertRaises(ValueError, ttk._list_from_layouttuple, tk,
            ('name', 'no_minus'));
        this.assertRaises(ValueError, ttk._list_from_layouttuple, tk,
            ('name', 'no_minus', 'value'));
        this.assertRaises(ValueError, ttk._list_from_layouttuple, tk,
            ('something', '-children')); # no children


    }
    function test_val_or_dict(){
        function func(res, opt=nil, val=nil){
            if opt is nil{
                return res;
            } if val is nil{
                return "test val";
            } return (opt, val);

        }
        tk = MockTkApp();
        tk.call = func;

        this.assertEqual(ttk._val_or_dict(tk, {}, '-test:3'),
                         {'test': '3'});
        this.assertEqual(ttk._val_or_dict(tk, {}, ('-test', 3)),
                         {'test': 3});

        this.assertEqual(ttk._val_or_dict(tk, {'test': nil}, 'x:y'),
                         'test val');

        this.assertEqual(ttk._val_or_dict(tk, {'test': 3}, 'x:y'),
                         {'test': 3});


    }
    function test_convert_stringval(){
        tests = (
            (0, 0), ('09', 9), ('a', 'a'), (u'áÚ', u'áÚ'), ([], '[]'),
            (nil, 'None')
        );
        for orig, expected in tests{
            this.assertEqual(ttk._convert_stringval(orig), expected);

        }
        if sys.getdefaultencoding() == 'ascii'{
            this.assertRaises(UnicodeDecodeError,
                ttk._convert_stringval, 'á');


}
} } class TclObjsToPyTest(unittest.TestCase){

    function test_unicode(){
        adict = {'opt': u'välúè'};
        this.assertEqual(ttk.tclobjs_to_py(adict), {'opt': u'välúè'});

        adict['opt'] = MockTclObj(adict['opt']);
        this.assertEqual(ttk.tclobjs_to_py(adict), {'opt': u'välúè'});

    }
    function test_multivalues(){
        adict = {'opt': [1, 2, 3, 4]};
        this.assertEqual(ttk.tclobjs_to_py(adict), {'opt': [1, 2, 3, 4]});

        adict['opt'] = [1, 'xm', 3];
        this.assertEqual(ttk.tclobjs_to_py(adict), {'opt': [1, 'xm', 3]});

        adict['opt'] = (MockStateSpec('a', 'b'), u'válũè');
        this.assertEqual(ttk.tclobjs_to_py(adict),
            {'opt': [('a', 'b', u'válũè')]});

        this.assertEqual(ttk.tclobjs_to_py({'x': ['y z']}),
            {'x': ['y z']});

    }
    function test_nosplit(){
        this.assertEqual(ttk.tclobjs_to_py({'text': 'some text'}),
            {'text': 'some text'});

}
} tests_nogui = (InternalFunctionsTest, TclObjsToPyTest);

if __name__ == "__main__"{
    from test.test_support import run_unittest;
    run_unittest(*tests_nogui);

}