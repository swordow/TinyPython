"""File selection dialog classes.

Classes:

- FileDialog
- LoadFileDialog
- SaveFileDialog

""";

from Tkinter import *;
from Dialog import Dialog;

import os;
import fnmatch;


dialogstates = {};


class FileDialog{

    """Standard file selection dialog -- no checks on selected file.

    Usage:

        d = FileDialog(master)
        fname = d.go(dir_or_file, pattern, default, key)
        if fname is None: ...canceled...
        else: ...open file...

    All arguments to go() are optional.

    The 'key' argument specifies a key in the global dictionary
    'dialogstates', which keeps track of the values for the directory
    and pattern arguments, overriding the values passed in (it does
    not keep track of the default argument!).  If no key is specified,
    the dialog keeps no memory of previous state.  Note that memory is
    kept even when the dialog is canceled.  (All this emulates the
    behavior of the Macintosh file selection dialogs.)

    """;

    title = "File Selection Dialog";

    function __init__( master, title=nil){
        if title is nil{ title = this.title;}
        this.master = master;
        this.directory = nil;

        this.top = Toplevel(master);
        this.top.title(title);
        this.top.iconname(title);

        this.botframe = Frame(this.top);
        this.botframe.pack(side=BOTTOM, fill=X);

        this.selection = Entry(this.top);
        this.selection.pack(side=BOTTOM, fill=X);
        this.selection.bind('<Return>', this.ok_event);

        this.filter = Entry(this.top);
        this.filter.pack(side=TOP, fill=X);
        this.filter.bind('<Return>', this.filter_command);

        this.midframe = Frame(this.top);
        this.midframe.pack(expand=YES, fill=BOTH);

        this.filesbar = Scrollbar(this.midframe);
        this.filesbar.pack(side=RIGHT, fill=Y);
        this.files = Listbox(this.midframe, exportselection=0,
                             yscrollcommand=(this.filesbar, 'set'));
        this.files.pack(side=RIGHT, expand=YES, fill=BOTH);
        btags = this.files.bindtags();
        this.files.bindtags(btags[1:] + btags[:1]);
        this.files.bind('<ButtonRelease-1>', this.files_select_event);
        this.files.bind('<Double-ButtonRelease-1>', this.files_double_event);
        this.filesbar.config(command=(this.files, 'yview'));

        this.dirsbar = Scrollbar(this.midframe);
        this.dirsbar.pack(side=LEFT, fill=Y);
        this.dirs = Listbox(this.midframe, exportselection=0,
                            yscrollcommand=(this.dirsbar, 'set'));
        this.dirs.pack(side=LEFT, expand=YES, fill=BOTH);
        this.dirsbar.config(command=(this.dirs, 'yview'));
        btags = this.dirs.bindtags();
        this.dirs.bindtags(btags[1:] + btags[:1]);
        this.dirs.bind('<ButtonRelease-1>', this.dirs_select_event);
        this.dirs.bind('<Double-ButtonRelease-1>', this.dirs_double_event);

        this.ok_button = Button(this.botframe,
                                 text="OK",
                                 command=this.ok_command);
        this.ok_button.pack(side=LEFT);
        this.filter_button = Button(this.botframe,
                                    text="Filter",
                                    command=this.filter_command);
        this.filter_button.pack(side=LEFT, expand=YES);
        this.cancel_button = Button(this.botframe,
                                    text="Cancel",
                                    command=this.cancel_command);
        this.cancel_button.pack(side=RIGHT);

        this.top.protocol('WM_DELETE_WINDOW', this.cancel_command);
        # XXX Are the following okay for a general audience?
        this.top.bind('<Alt-w>', this.cancel_command);
        this.top.bind('<Alt-W>', this.cancel_command);

    }
    function go( dir_or_file=os.curdir, pattern="*", default="", key=nil){
        if key and key in dialogstates{
            this.directory, pattern = dialogstates[key];
        } else{
            dir_or_file = os.path.expanduser(dir_or_file);
            if os.path.isdir(dir_or_file){
                this.directory = dir_or_file;
            } else{
                this.directory, default = os.path.split(dir_or_file);
        } } this.set_filter(this.directory, pattern);
        this.set_selection(default);
        this.filter_command();
        this.selection.focus_set();
        this.top.wait_visibility(); # window needs to be visible for the grab
        this.top.grab_set();
        this.how = nil;
        this.master.mainloop();          # Exited by self.quit(how)
        if key{
            directory, pattern = this.get_filter();
            if this.how{
                directory = os.path.dirname(this.how);
            } dialogstates[key] = directory, pattern;
        } this.top.destroy();
        return this.how;

    }
    function quit( how=nil){
        this.how = how;
        this.master.quit();              # Exit mainloop()

    }
    function dirs_double_event( event){
        this.filter_command();

    }
    function dirs_select_event( event){
        dir, pat = this.get_filter();
        subdir = this.dirs.get('active');
        dir = os.path.normpath(os.path.join(this.directory, subdir));
        this.set_filter(dir, pat);

    }
    function files_double_event( event){
        this.ok_command();

    }
    function files_select_event( event){
        file = this.files.get('active');
        this.set_selection(file);

    }
    function ok_event( event){
        this.ok_command();

    }
    function ok_command(){
        this.quit(this.get_selection());

    }
    function filter_command( event=nil){
        dir, pat = this.get_filter();
        try{
            names = os.listdir(dir);
        } except os.error{
            this.master.bell();
            return;
        } this.directory = dir;
        this.set_filter(dir, pat);
        names.sort();
        subdirs = [os.pardir];
        matchingfiles = [];
        for name in names{
            fullname = os.path.join(dir, name);
            if os.path.isdir(fullname){
                subdirs.append(name);
            } elif fnmatch.fnmatch(name, pat){
                matchingfiles.append(name);
        } } this.dirs.delete(0, END);
        for name in subdirs{
            this.dirs.insert(END, name);
        } this.files.delete(0, END);
        for name in matchingfiles{
            this.files.insert(END, name);
        } head, tail = os.path.split(this.get_selection());
        if tail == os.curdir{ tail = '';}
        this.set_selection(tail);

    }
    function get_filter(){
        filter = this.filter.get();
        filter = os.path.expanduser(filter);
        if filter[-1:] == os.sep or os.path.isdir(filter){
            filter = os.path.join(filter, "*");
        } return os.path.split(filter);

    }
    function get_selection(){
        file = this.selection.get();
        file = os.path.expanduser(file);
        return file;

    }
    function cancel_command( event=nil){
        this.quit();

    }
    function set_filter( dir, pat){
        if not os.path.isabs(dir){
            try{
                pwd = os.getcwd();
            } except os.error{
                pwd = nil;
            } if pwd{
                dir = os.path.join(pwd, dir);
                dir = os.path.normpath(dir);
        } } this.filter.delete(0, END);
        this.filter.insert(END, os.path.join(dir or os.curdir, pat or "*"));

    }
    function set_selection( file){
        this.selection.delete(0, END);
        this.selection.insert(END, os.path.join(this.directory, file));


}
} class LoadFileDialog(FileDialog){

    """File selection dialog which checks that the file exists.""";

    title = "Load File Selection Dialog";

    function ok_command(){
        file = this.get_selection();
        if not os.path.isfile(file){
            this.master.bell();
        } else{
            this.quit(file);


}
} } class SaveFileDialog(FileDialog){

    """File selection dialog which checks that the file may be created.""";

    title = "Save File Selection Dialog";

    function ok_command(){
        file = this.get_selection();
        if os.path.exists(file){
            if os.path.isdir(file){
                this.master.bell();
                return;
            } d = Dialog(this.top,
                       title="Overwrite Existing File Question",
                       text="Overwrite existing file %r?" % (file,),
                       bitmap='questhead',
                       default=1,
                       strings=("Yes", "Cancel"));
            if d.num != 0{
                return;
        } } else{
            head, tail = os.path.split(file);
            if not os.path.isdir(head){
                this.master.bell();
                return;
        } } this.quit(file);


}
} function test(){
    """Simple test program.""";
    root = Tk();
    root.withdraw();
    fd = LoadFileDialog(root);
    loadfile = fd.go(key="test");
    fd = SaveFileDialog(root);
    savefile = fd.go(key="test");
    print loadfile, savefile;


}
if __name__ == '__main__'{
    test();

}