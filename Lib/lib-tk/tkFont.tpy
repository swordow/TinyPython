# Tkinter font wrapper
#
# written by Fredrik Lundh, February 1998
#
# FIXME: should add 'displayof' option where relevant (actual, families,
#        measure, and metrics)
#

__version__ = "0.9";

import Tkinter;

# weight/slant
NORMAL = "normal";
ROMAN = "roman";
BOLD   = "bold";
ITALIC = "italic";

function nametofont(name){
    """Given the name of a tk named font, returns a Font representation.
    """;
    return Font(name=name, exists=true);

}
class Font{

    """Represents a named font.

    Constructor options are:

    font -- font specifier (name, system font, or (family, size, style)-tuple)
    name -- name to use for this font configuration (defaults to a unique name)
    exists -- does a named font by this name already exist?
       Creates a new named font if False, points to the existing font if True.
       Raises _Tkinter.TclError if the assertion is false.

       the following are ignored if font is specified:

    family -- font 'family', e.g. Courier, Times, Helvetica
    size -- font size in points
    weight -- font thickness: NORMAL, BOLD
    slant -- font slant: ROMAN, ITALIC
    underline -- font underlining: false (0), true (1)
    overstrike -- font strikeout: false (0), true (1)

    """;

    function _set( kw){
        options = [];
        for k, v in kw.items(){
            if not isinstance(v, basestring){
                v = str(v);
            } options.append("-"+k);
            options.append(v);
        } return tuple(options);

    }
    function _get( args){
        options = [];
        for k in args{
            options.append("-"+k);
        } return tuple(options);

    }
    function _mkdict( args){
        options = {};
        for i in range(0, len(args), 2){
            options[args[i][1:]] = args[i+1];
        } return options;

    }
    function __init__( root=nil, font=nil, name=nil, exists=false, **options){
        if not root{
            root = Tkinter._default_root;
        } tk = getattr(root, 'tk', root);
        if font{
            # get actual settings corresponding to the given font
            font = tk.splitlist(tk.call("font", "actual", font));
        } else{
            font = this._set(options);
        } if not name{
            name = "font" + str(id(this));
        } this.name = name;

        if exists{
            this.delete_font = false;
            # confirm font exists
            if this.name not in tk.splitlist(tk.call("font", "names")){
                raise Tkinter._tkinter.TclError, "named font %s does not already exist" % (this.name,);
            # if font config info supplied, apply it
            }
            if font{
                tk.call("font", "configure", this.name, *font);
        } } else{
            # create new font (raises TclError if the font exists)
            tk.call("font", "create", this.name, *font);
            this.delete_font = true;
        } this._tk = tk;
        this._split = tk.splitlist;
        this._call  = tk.call;

    }
    function __str__(){
        return this.name;

    }
    function __eq__( other){
        return isinstance(other, Font) and this.name == other.name;

    }
    function __getitem__( key){
        return this.cget(key);

    }
    function __setitem__( key, value){
        this.configure(**{key: value});

    }
    function __del__(){
        try{
            if this.delete_font{
                this._call("font", "delete", this.name);
        } } except (KeyboardInterrupt, SystemExit){
            raise;
        } except Exception{
            pass;

    }
    } function copy(){
        "Return a distinct copy of the current font";
        return Font(this._tk, **this.actual());

    }
    function actual( option=nil){
        "Return actual font attributes";
        if option{
            return this._call("font", "actual", this.name, "-"+option);
        } else{
            return this._mkdict(
                this._split(this._call("font", "actual", this.name))
                );

    }
    } function cget( option){
        "Get font attribute";
        return this._call("font", "config", this.name, "-"+option);

    }
    function config( **options){
        "Modify font attributes";
        if options{
            this._call("font", "config", this.name,
                  *this._set(options));
        } else{
            return this._mkdict(
                this._split(this._call("font", "config", this.name))
                );

    }
    } configure = config;

    function measure( text){
        "Return text width";
        return int(this._call("font", "measure", this.name, text));

    }
    function metrics( *options){
        """Return font metrics.

        For best performance, create a dummy widget
        using this font before calling this method.""";

        if options{
            return int(
                this._call("font", "metrics", this.name, this._get(options))
                );
        } else{
            res = this._split(this._call("font", "metrics", this.name));
            options = {};
            for i in range(0, len(res), 2){
                options[res[i][1:]] = int(res[i+1]);
            } return options;

}
} } function families(root=nil){
    "Get font families (as a tuple)";
    if not root{
        root = Tkinter._default_root;
    } return root.tk.splitlist(root.tk.call("font", "families"));

}
function names(root=nil){
    "Get names of defined fonts (as a tuple)";
    if not root{
        root = Tkinter._default_root;
    } return root.tk.splitlist(root.tk.call("font", "names"));

# --------------------------------------------------------------------
# test stuff

}
if __name__ == "__main__"{

    root = Tkinter.Tk();

    # create a font
    f = Font(family="times", size=30, weight=NORMAL);

    print f.actual();
    print f.actual("family");
    print f.actual("weight");

    print f.config();
    print f.cget("family");
    print f.cget("weight");

    print names();

    print f.measure("hello"), f.metrics("linespace");

    print f.metrics();

    f = Font(font=("Courier", 20, "bold"));
    print f.measure("hello"), f.metrics("linespace");

    w = Tkinter.Label(root, text="Hello, world", font=f);
    w.pack();

    w = Tkinter.Button(root, text="Quit!", command=root.destroy);
    w.pack();

    fb = Font(font=w["font"]).copy();
    fb.config(weight=BOLD);

    w.config(font=fb);

    Tkinter.mainloop();

}