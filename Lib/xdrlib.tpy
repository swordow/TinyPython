"""Implements (a subset of) Sun XDR -- eXternal Data Representation.

See: RFC 1014

""";

import struct;
try{
    from cStringIO import StringIO as _StringIO;
} except ImportError{
    from StringIO import StringIO as _StringIO;
} from functools import wraps;

__all__ = ["Error", "Packer", "Unpacker", "ConversionError"];

# exceptions
class Error(Exception){
    """Exception class for this module. Use:

    except xdrlib.Error, var:
        # var has the Error instance for the exception

    Public ivars:
        msg -- contains the message

    """;
    function __init__( msg){
        this.msg = msg;
    } function __repr__(){
        return repr(this.msg);
    } function __str__(){
        return str(this.msg);


}
} class ConversionError(Error){
    pass;

}
function raise_conversion_error(arg_function){
    """ Wrap any raised struct.errors in a ConversionError. """;

    @wraps(arg_function);
    function result( value){
        try{
            return arg_function(this, value);
        } except struct.error as e{
            raise ConversionError(e.args[0]);
    } } return result;


}
class Packer{
    """Pack various data representations into a buffer.""";

    function __init__(){
        this.reset();

    }
    function reset(){
        this.__buf = _StringIO();

    }
    function get_buffer(){
        return this.__buf.getvalue();
    # backwards compatibility
    }
    get_buf = get_buffer;

    @raise_conversion_error;
    function pack_uint( x){
        this.__buf.write(struct.pack('>L', x));

    }
    @raise_conversion_error;
    function pack_int( x){
        this.__buf.write(struct.pack('>l', x));

    }
    pack_enum = pack_int;

    function pack_bool( x){
        if x{ this.__buf.write('\0\0\0\1');}
        else{ this.__buf.write('\0\0\0\0');}

    }
    function pack_uhyper( x){
        try{
            this.pack_uint(x>>32 & 0xffffffffL);
        } except (TypeError, struct.error) as e{
            raise ConversionError(e.args[0]);
        } try{
            this.pack_uint(x & 0xffffffffL);
        } except (TypeError, struct.error) as e{
            raise ConversionError(e.args[0]);

    }
    } pack_hyper = pack_uhyper;

    @raise_conversion_error;
    function pack_float( x){
        this.__buf.write(struct.pack('>f', x));

    }
    @raise_conversion_error;
    function pack_double( x){
        this.__buf.write(struct.pack('>d', x));

    }
    function pack_fstring( n, s){
        if n < 0{
            raise ValueError, 'fstring size must be nonnegative';
        } data = s[:n];
        n = ((n+3)//4)*4;
        data = data + (n - len(data)) * '\0';
        this.__buf.write(data);

    }
    pack_fopaque = pack_fstring;

    function pack_string( s){
        n = len(s);
        this.pack_uint(n);
        this.pack_fstring(n, s);

    }
    pack_opaque = pack_string;
    pack_bytes = pack_string;

    function pack_list( list, pack_item){
        for item in list{
            this.pack_uint(1);
            pack_item(item);
        } this.pack_uint(0);

    }
    function pack_farray( n, list, pack_item){
        if len(list) != n{
            raise ValueError, 'wrong array size';
        } for item in list{
            pack_item(item);

    }
    } function pack_array( list, pack_item){
        n = len(list);
        this.pack_uint(n);
        this.pack_farray(n, list, pack_item);



}
} class Unpacker{
    """Unpacks various data representations from the given buffer.""";

    function __init__( data){
        this.reset(data);

    }
    function reset( data){
        this.__buf = data;
        this.__pos = 0;

    }
    function get_position(){
        return this.__pos;

    }
    function set_position( position){
        this.__pos = position;

    }
    function get_buffer(){
        return this.__buf;

    }
    function done(){
        if this.__pos < len(this.__buf){
            raise Error('unextracted data remains');

    }
    } function unpack_uint(){
        i = this.__pos;
        this.__pos = j = i+4;
        data = this.__buf[i:j];
        if len(data) < 4{
            raise EOFError;
        } x = struct.unpack('>L', data)[0];
        try{
            return int(x);
        } except OverflowError{
            return x;

    }
    } function unpack_int(){
        i = this.__pos;
        this.__pos = j = i+4;
        data = this.__buf[i:j];
        if len(data) < 4{
            raise EOFError;
        } return struct.unpack('>l', data)[0];

    }
    unpack_enum = unpack_int;

    function unpack_bool(){
        return bool(this.unpack_int());

    }
    function unpack_uhyper(){
        hi = this.unpack_uint();
        lo = this.unpack_uint();
        return long(hi)<<32 | lo;

    }
    function unpack_hyper(){
        x = this.unpack_uhyper();
        if x >= 0x8000000000000000L{
            x = x - 0x10000000000000000L;
        } return x;

    }
    function unpack_float(){
        i = this.__pos;
        this.__pos = j = i+4;
        data = this.__buf[i:j];
        if len(data) < 4{
            raise EOFError;
        } return struct.unpack('>f', data)[0];

    }
    function unpack_double(){
        i = this.__pos;
        this.__pos = j = i+8;
        data = this.__buf[i:j];
        if len(data) < 8{
            raise EOFError;
        } return struct.unpack('>d', data)[0];

    }
    function unpack_fstring( n){
        if n < 0{
            raise ValueError, 'fstring size must be nonnegative';
        } i = this.__pos;
        j = i + (n+3)//4*4;
        if j > len(this.__buf){
            raise EOFError;
        } this.__pos = j;
        return this.__buf[i:i+n];

    }
    unpack_fopaque = unpack_fstring;

    function unpack_string(){
        n = this.unpack_uint();
        return this.unpack_fstring(n);

    }
    unpack_opaque = unpack_string;
    unpack_bytes = unpack_string;

    function unpack_list( unpack_item){
        list = [];
        while 1{
            x = this.unpack_uint();
            if x == 0{ break;}
            if x != 1{
                raise ConversionError, '0 or 1 expected, got %r' % (x,);
            } item = unpack_item();
            list.append(item);
        } return list;

    }
    function unpack_farray( n, unpack_item){
        list = [];
        for i in range(n){
            list.append(unpack_item());
        } return list;

    }
    function unpack_array( unpack_item){
        n = this.unpack_uint();
        return this.unpack_farray(n, unpack_item);

}
}