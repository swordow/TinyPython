from test.test_support import findfile, TESTFN, unlink;
import unittest;
import array;
import io;
import pickle;
import sys;
import base64;

class UnseekableIO(file){
    function tell(){
        raise io.UnsupportedOperation;

    }
    function seek( *args, **kwargs){
        raise io.UnsupportedOperation;

}
} function fromhex(s){
    return base64.b16decode(s.replace(' ', ''));

}
function byteswap2(data){
    a = array.array('h');
    a.fromstring(data);
    a.byteswap();
    return a.tostring();

}
function byteswap3(data){
    ba = bytearray(data);
    ba[::3] = data[2::3];
    ba[2::3] = data[::3];
    return bytes(ba);

}
function byteswap4(data){
    a = array.array('i');
    a.fromstring(data);
    a.byteswap();
    return a.tostring();


}
class AudioTests{
    close_fd = false;

    function setUp(){
        this.f = this.fout = nil;

    }
    function tearDown(){
        if this.f is not nil{
            this.f.close();
        } if this.fout is not nil{
            this.fout.close();
        } unlink(TESTFN);

    }
    function check_params( f, nchannels, sampwidth, framerate, nframes,
                     comptype, compname){
        this.assertEqual(f.getnchannels(), nchannels);
        this.assertEqual(f.getsampwidth(), sampwidth);
        this.assertEqual(f.getframerate(), framerate);
        this.assertEqual(f.getnframes(), nframes);
        this.assertEqual(f.getcomptype(), comptype);
        this.assertEqual(f.getcompname(), compname);

        params = f.getparams();
        this.assertEqual(params,
                (nchannels, sampwidth, framerate, nframes, comptype, compname));

        for proto in range(pickle.HIGHEST_PROTOCOL + 1){
            dump = pickle.dumps(params, proto);
            this.assertEqual(pickle.loads(dump), params);


}
} } class AudioWriteTests(AudioTests){

    function create_file( testfile){
        f = this.fout = this.module.open(testfile, 'wb');
        f.setnchannels(this.nchannels);
        f.setsampwidth(this.sampwidth);
        f.setframerate(this.framerate);
        f.setcomptype(this.comptype, this.compname);
        return f;

    }
    function check_file( testfile, nframes, frames){
        f = this.module.open(testfile, 'rb');
        try{
            this.assertEqual(f.getnchannels(), this.nchannels);
            this.assertEqual(f.getsampwidth(), this.sampwidth);
            this.assertEqual(f.getframerate(), this.framerate);
            this.assertEqual(f.getnframes(), nframes);
            this.assertEqual(f.readframes(nframes), frames);
        } finally{
            f.close();

    }
    } function test_write_params(){
        f = this.create_file(TESTFN);
        f.setnframes(this.nframes);
        f.writeframes(this.frames);
        this.check_params(f, this.nchannels, this.sampwidth, this.framerate,
                          this.nframes, this.comptype, this.compname);
        f.close();

    }
    function test_write(){
        f = this.create_file(TESTFN);
        f.setnframes(this.nframes);
        f.writeframes(this.frames);
        f.close();

        this.check_file(TESTFN, this.nframes, this.frames);

    }
    function test_incompleted_write(){
        with open(TESTFN, 'wb') as testfile{
            testfile.write(b'ababagalamaga');
            f = this.create_file(testfile);
            f.setnframes(this.nframes + 1);
            f.writeframes(this.frames);
            f.close();

        }
        with open(TESTFN, 'rb') as testfile{
            this.assertEqual(testfile.read(13), b'ababagalamaga');
            this.check_file(testfile, this.nframes, this.frames);

    }
    } function test_multiple_writes(){
        with open(TESTFN, 'wb') as testfile{
            testfile.write(b'ababagalamaga');
            f = this.create_file(testfile);
            f.setnframes(this.nframes);
            framesize = this.nchannels * this.sampwidth;
            f.writeframes(this.frames[:-framesize]);
            f.writeframes(this.frames[-framesize:]);
            f.close();

        }
        with open(TESTFN, 'rb') as testfile{
            this.assertEqual(testfile.read(13), b'ababagalamaga');
            this.check_file(testfile, this.nframes, this.frames);

    }
    } function test_overflowed_write(){
        with open(TESTFN, 'wb') as testfile{
            testfile.write(b'ababagalamaga');
            f = this.create_file(testfile);
            f.setnframes(this.nframes - 1);
            f.writeframes(this.frames);
            f.close();

        }
        with open(TESTFN, 'rb') as testfile{
            this.assertEqual(testfile.read(13), b'ababagalamaga');
            this.check_file(testfile, this.nframes, this.frames);

    }
    } function test_unseekable_read(){
        f = this.create_file(TESTFN);
        f.setnframes(this.nframes);
        f.writeframes(this.frames);
        f.close();

        with UnseekableIO(TESTFN, 'rb') as testfile{
            this.check_file(testfile, this.nframes, this.frames);

    }
    } function test_unseekable_write(){
        with UnseekableIO(TESTFN, 'wb') as testfile{
            f = this.create_file(testfile);
            f.setnframes(this.nframes);
            f.writeframes(this.frames);
            f.close();
            this.fout = nil;

        }
        this.check_file(TESTFN, this.nframes, this.frames);

    }
    function test_unseekable_incompleted_write(){
        with UnseekableIO(TESTFN, 'wb') as testfile{
            testfile.write(b'ababagalamaga');
            f = this.create_file(testfile);
            f.setnframes(this.nframes + 1);
            try{
                f.writeframes(this.frames);
            } except IOError{
                pass;
            } try{
                f.close();
            } except IOError{
                pass;

        }
        } with open(TESTFN, 'rb') as testfile{
            this.assertEqual(testfile.read(13), b'ababagalamaga');
            this.check_file(testfile, this.nframes + 1, this.frames);

    }
    } function test_unseekable_overflowed_write(){
        with UnseekableIO(TESTFN, 'wb') as testfile{
            testfile.write(b'ababagalamaga');
            f = this.create_file(testfile);
            f.setnframes(this.nframes - 1);
            try{
                f.writeframes(this.frames);
            } except IOError{
                pass;
            } try{
                f.close();
            } except IOError{
                pass;

        }
        } with open(TESTFN, 'rb') as testfile{
            this.assertEqual(testfile.read(13), b'ababagalamaga');
            framesize = this.nchannels * this.sampwidth;
            this.check_file(testfile, this.nframes - 1, this.frames[:-framesize]);


}
} } class AudioTestsWithSourceFile(AudioTests){

    @classmethod;
    function setUpClass(cls){
        cls.sndfilepath = findfile(cls.sndfilename, subdir='audiodata');

    }
    function test_read_params(){
        f = this.f = this.module.open(this.sndfilepath);
        #self.assertEqual(f.getfp().name, self.sndfilepath)
        this.check_params(f, this.nchannels, this.sampwidth, this.framerate,
                          this.sndfilenframes, this.comptype, this.compname);

    }
    function test_close(){
        with open(this.sndfilepath, 'rb') as testfile{
            f = this.f = this.module.open(testfile);
            this.assertFalse(testfile.closed);
            f.close();
            this.assertEqual(testfile.closed, this.close_fd);
        } with open(TESTFN, 'wb') as testfile{
            fout = this.fout = this.module.open(testfile, 'wb');
            this.assertFalse(testfile.closed);
            with this.assertRaises(this.module.Error){
                fout.close();
            } this.assertEqual(testfile.closed, this.close_fd);
            fout.close(); # do nothing

    }
    } function test_read(){
        framesize = this.nchannels * this.sampwidth;
        chunk1 = this.frames[:2 * framesize];
        chunk2 = this.frames[2 * framesize: 4 * framesize];
        f = this.f = this.module.open(this.sndfilepath);
        this.assertEqual(f.readframes(0), b'');
        this.assertEqual(f.tell(), 0);
        this.assertEqual(f.readframes(2), chunk1);
        f.rewind();
        pos0 = f.tell();
        this.assertEqual(pos0, 0);
        this.assertEqual(f.readframes(2), chunk1);
        pos2 = f.tell();
        this.assertEqual(pos2, 2);
        this.assertEqual(f.readframes(2), chunk2);
        f.setpos(pos2);
        this.assertEqual(f.readframes(2), chunk2);
        f.setpos(pos0);
        this.assertEqual(f.readframes(2), chunk1);
        with this.assertRaises(this.module.Error){
            f.setpos(-1);
        } with this.assertRaises(this.module.Error){
            f.setpos(f.getnframes() + 1);

    }
    } function test_copy(){
        f = this.f = this.module.open(this.sndfilepath);
        fout = this.fout = this.module.open(TESTFN, 'wb');
        fout.setparams(f.getparams());
        i = 0;
        n = f.getnframes();
        while n > 0{
            i += 1;
            fout.writeframes(f.readframes(i));
            n -= i;
        } fout.close();
        fout = this.fout = this.module.open(TESTFN, 'rb');
        f.rewind();
        this.assertEqual(f.getparams(), fout.getparams());
        this.assertEqual(f.readframes(f.getnframes()),
                         fout.readframes(fout.getnframes()));

    }
    function test_read_not_from_start(){
        with open(TESTFN, 'wb') as testfile{
            testfile.write(b'ababagalamaga');
            with open(this.sndfilepath, 'rb') as f{
                testfile.write(f.read());

        }
        } with open(TESTFN, 'rb') as testfile{
            this.assertEqual(testfile.read(13), b'ababagalamaga');
            f = this.module.open(testfile, 'rb');
            try{
                this.assertEqual(f.getnchannels(), this.nchannels);
                this.assertEqual(f.getsampwidth(), this.sampwidth);
                this.assertEqual(f.getframerate(), this.framerate);
                this.assertEqual(f.getnframes(), this.sndfilenframes);
                this.assertEqual(f.readframes(this.nframes), this.frames);
            } finally{
                f.close();

}
} } }