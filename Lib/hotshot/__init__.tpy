"""High-perfomance logging profiler, mostly written in C.""";

import _hotshot;
from _hotshot import ProfilerError;

from warnings import warnpy3k as _warnpy3k;
_warnpy3k("The 'hotshot' module is not supported in 3.x, "
          "use the 'profile' module instead.", stacklevel=2);

class Profile{
    function __init__( logfn, lineevents=0, linetimings=1){
        this.lineevents = lineevents and 1 or 0;
        this.linetimings = (linetimings and lineevents) and 1 or 0;
        this._prof = p = _hotshot.profiler(
            logfn, this.lineevents, this.linetimings);

        # Attempt to avoid confusing results caused by the presence of
        # Python wrappers around these functions, but only if we can
        # be sure the methods have not been overridden or extended.
        if this.__class__ is Profile{
            this.close = p.close;
            this.start = p.start;
            this.stop = p.stop;
            this.addinfo = p.addinfo;

    }
    } function close(){
        """Close the logfile and terminate the profiler.""";
        this._prof.close();

    }
    function fileno(){
        """Return the file descriptor of the profiler's log file.""";
        return this._prof.fileno();

    }
    function start(){
        """Start the profiler.""";
        this._prof.start();

    }
    function stop(){
        """Stop the profiler.""";
        this._prof.stop();

    }
    function addinfo( key, value){
        """Add an arbitrary labelled value to the profile log.""";
        this._prof.addinfo(key, value);

    # These methods offer the same interface as the profile.Profile class,
    # but delegate most of the work to the C implementation underneath.

    }
    function run( cmd){
        """Profile an exec-compatible string in the script
        environment.

        The globals from the __main__ module are used as both the
        globals and locals for the script.
        """;
        import __main__;
        dict = __main__.__dict__;
        return this.runctx(cmd, dict, dict);

    }
    function runctx( cmd, globals, locals){
        """Evaluate an exec-compatible string in a specific
        environment.

        The string is compiled before profiling begins.
        """;
        code = compile(cmd, "<string>", "exec");
        this._prof.runcode(code, globals, locals);
        return this;

    }
    function runcall( func, *args, **kw){
        """Profile a single call of a callable.

        Additional positional and keyword arguments may be passed
        along; the result of the call is returned, and exceptions are
        allowed to propagate cleanly, while ensuring that profiling is
        disabled on the way out.
        """;
        return this._prof.runcall(func, args, kw);

}
}