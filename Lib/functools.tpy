"""functools.py - Tools for working with functions and callable objects
""";
# Python module wrapper for _functools C module
# to allow utilities written in Python to be added
# to the functools module.
# Written by Nick Coghlan <ncoghlan at gmail.com>
#   Copyright (C) 2006 Python Software Foundation.
# See C source code for _functools credits/copyright

from _functools import partial, reduce;

# update_wrapper() and wraps() are tools to help write
# wrapper functions that can handle naive introspection

WRAPPER_ASSIGNMENTS = ('__module__', '__name__', '__doc__');
WRAPPER_UPDATES = ('__dict__',);
function update_wrapper(wrapper,
                   wrapped,
                   assigned = WRAPPER_ASSIGNMENTS,
                   updated = WRAPPER_UPDATES){
    """Update a wrapper function to look like the wrapped function

       wrapper is the function to be updated
       wrapped is the original function
       assigned is a tuple naming the attributes assigned directly
       from the wrapped function to the wrapper function (defaults to
       functools.WRAPPER_ASSIGNMENTS)
       updated is a tuple naming the attributes of the wrapper that
       are updated with the corresponding attribute from the wrapped
       function (defaults to functools.WRAPPER_UPDATES)
    """;
    for attr in assigned{
        setattr(wrapper, attr, getattr(wrapped, attr));
    } for attr in updated{
        getattr(wrapper, attr).update(getattr(wrapped, attr, {}));
    # Return the wrapper so this can be used as a decorator via partial()
    }
    return wrapper;

}
function wraps(wrapped,
          assigned = WRAPPER_ASSIGNMENTS,
          updated = WRAPPER_UPDATES){
    """Decorator factory to apply update_wrapper() to a wrapper function

       Returns a decorator that invokes update_wrapper() with the decorated
       function as the wrapper argument and the arguments to wraps() as the
       remaining arguments. Default arguments are as for update_wrapper().
       This is a convenience function to simplify applying partial() to
       update_wrapper().
    """;
    return partial(update_wrapper, wrapped=wrapped,
                   assigned=assigned, updated=updated);

}
function total_ordering(cls){
    """Class decorator that fills in missing ordering methods""";
    convert = {
        '__lt__': [('__gt__', lambda this, other{ not (this < other or this == other)}),
                   ('__le__', lambda this, other{ this < other or this == other}),
                   ('__ne__', lambda this, other{ not this == other}),
                   ('__ge__', lambda this, other{ not this < other})],
        '__le__': [('__ge__', lambda this, other{ not this <= other or this == other}),
                   ('__lt__', lambda this, other{ this <= other and not this == other}),
                   ('__ne__', lambda this, other{ not this == other}),
                   ('__gt__', lambda this, other{ not this <= other})],
        '__gt__': [('__lt__', lambda this, other{ not (this > other or this == other)}),
                   ('__ge__', lambda this, other{ this > other or this == other}),
                   ('__ne__', lambda this, other{ not this == other}),
                   ('__le__', lambda this, other{ not this > other})],
        '__ge__': [('__le__', lambda this, other{ (not this >= other) or this == other}),
                   ('__gt__', lambda this, other{ this >= other and not this == other}),
                   ('__ne__', lambda this, other{ not this == other}),
                   ('__lt__', lambda this, other{ not this >= other})]
    };
    defined_methods = set(dir(cls));
    roots = defined_methods & set(convert);
    if not roots{
        raise ValueError('must define at least one ordering operation: < > <= >=');
    } root = max(roots);       # prefer __lt__ to __le__ to __gt__ to __ge__
    for opname, opfunc in convert[root]{
        if opname not in defined_methods{
            opfunc.__name__ = opname;
            opfunc.__doc__ = getattr(int, opname).__doc__;
            setattr(cls, opname, opfunc);
    } } return cls;

}
function cmp_to_key(mycmp){
    """Convert a cmp= function into a key= function""";
    class K(object){
        __slots__ = ['obj'];
        function __init__( obj, *args){
            this.obj = obj;
        } function __lt__( other){
            return mycmp(this.obj, other.obj) < 0;
        } function __gt__( other){
            return mycmp(this.obj, other.obj) > 0;
        } function __eq__( other){
            return mycmp(this.obj, other.obj) == 0;
        } function __le__( other){
            return mycmp(this.obj, other.obj) <= 0;
        } function __ge__( other){
            return mycmp(this.obj, other.obj) >= 0;
        } function __ne__( other){
            return mycmp(this.obj, other.obj) != 0;
        } function __hash__(){
            raise TypeError('hash not implemented');
    } } return K;

}