import unittest;
import os, glob;

from test_all import db, test_support, get_new_environment_path, \
        get_new_database_path;

#----------------------------------------------------------------------

class pget_bugTestCase(unittest.TestCase){
    """Verify that cursor.pget works properly""";
    db_name = 'test-cursor_pget.db';

    function setUp(){
        this.homeDir = get_new_environment_path();
        this.env = db.DBEnv();
        this.env.open(this.homeDir, db.DB_CREATE | db.DB_INIT_MPOOL);
        this.primary_db = db.DB(this.env);
        this.primary_db.open(this.db_name, 'primary', db.DB_BTREE, db.DB_CREATE);
        this.secondary_db = db.DB(this.env);
        this.secondary_db.set_flags(db.DB_DUP);
        this.secondary_db.open(this.db_name, 'secondary', db.DB_BTREE, db.DB_CREATE);
        this.primary_db.associate(this.secondary_db, lambda key, data{ data});
        this.primary_db.put('salad', 'eggs');
        this.primary_db.put('spam', 'ham');
        this.primary_db.put('omelet', 'eggs');


    }
    function tearDown(){
        this.secondary_db.close();
        this.primary_db.close();
        this.env.close();
        del this.secondary_db;
        del this.primary_db;
        del this.env;
        test_support.rmtree(this.homeDir);

    }
    function test_pget(){
        cursor = this.secondary_db.cursor();

        this.assertEqual(('eggs', 'salad', 'eggs'), cursor.pget(key='eggs', flags=db.DB_SET));
        this.assertEqual(('eggs', 'omelet', 'eggs'), cursor.pget(db.DB_NEXT_DUP));
        this.assertEqual(nil, cursor.pget(db.DB_NEXT_DUP));

        this.assertEqual(('ham', 'spam', 'ham'), cursor.pget('ham', 'spam', flags=db.DB_SET));
        this.assertEqual(nil, cursor.pget(db.DB_NEXT_DUP));

        cursor.close();


}
} function test_suite(){
    return unittest.makeSuite(pget_bugTestCase);

}
if __name__ == '__main__'{
    unittest.main(defaultTest='test_suite');

}