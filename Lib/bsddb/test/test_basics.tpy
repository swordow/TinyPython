"""
Basic TestCases for BTree and hash DBs, with and without a DBEnv, with
various DB flags, etc.
""";

import os;
import errno;
import string;
from pprint import pprint;
import unittest;
import time;
import sys;

from test_all import db, test_support, verbose, get_new_environment_path, \
        get_new_database_path;

DASH = '-';


#----------------------------------------------------------------------

class VersionTestCase(unittest.TestCase){
    function test00_version(){
        info = db.version();
        if verbose{
            print '\n', '-=' * 20;
            print 'bsddb.db.version(): %s' % (info, );
            print db.DB_VERSION_STRING;
            print '-=' * 20;
        } this.assertEqual(info, (db.DB_VERSION_MAJOR, db.DB_VERSION_MINOR,
                        db.DB_VERSION_PATCH));

#----------------------------------------------------------------------

}
} class BasicTestCase(unittest.TestCase){
    dbtype       = db.DB_UNKNOWN;  # must be set in derived class
    cachesize    = (0, 1024*1024, 1);
    dbopenflags  = 0;
    dbsetflags   = 0;
    dbmode       = 0660;
    dbname       = nil;
    useEnv       = 0;
    envflags     = 0;
    envsetflags  = 0;

    _numKeys      = 1002;    # PRIVATE.  NOTE: must be an even value

    function setUp(){
        if this.useEnv{
            this.homeDir=get_new_environment_path();
            try{
                this.env = db.DBEnv();
                this.env.set_lg_max(1024*1024);
                this.env.set_tx_max(30);
                this._t = int(time.time());
                this.env.set_tx_timestamp(this._t);
                this.env.set_flags(this.envsetflags, 1);
                this.env.open(this.homeDir, this.envflags | db.DB_CREATE);
                this.filename = "test";
            # Yes, a bare except is intended, since we're re-raising the exc.
            }
            except Exception{
                test_support.rmtree(this.homeDir);
                raise;
        } } else{
            this.env = nil;
            this.filename = get_new_database_path();

        # create and open the DB
        }
        this.d = db.DB(this.env);
        if not this.useEnv {
            this.d.set_cachesize(*this.cachesize);
            cachesize = this.d.get_cachesize();
            this.assertEqual(cachesize[0], this.cachesize[0]);
            this.assertEqual(cachesize[2], this.cachesize[2]);
            # Berkeley DB expands the cache 25% accounting overhead,
            # if the cache is small.
            this.assertEqual(125, int(100.0*cachesize[1]/this.cachesize[1]));
        } this.d.set_flags(this.dbsetflags);
        if this.dbname{
            this.d.open(this.filename, this.dbname, this.dbtype,
                        this.dbopenflags|db.DB_CREATE, this.dbmode);
        } else{
            this.d.open(this.filename,   # try out keyword args
                        mode = this.dbmode,
                        dbtype = this.dbtype,
                        flags = this.dbopenflags|db.DB_CREATE);

        }
        if not this.useEnv{
            this.assertRaises(db.DBInvalidArgError,
                    this.d.set_cachesize, *this.cachesize);

        }
        this.populateDB();


    }
    function tearDown(){
        this.d.close();
        if this.env is not nil{
            this.env.close();
            test_support.rmtree(this.homeDir);
        } else{
            os.remove(this.filename);



    }
    } function populateDB( _txn=nil){
        d = this.d;

        for x in range(this._numKeys//2){
            key = '%04d' % (this._numKeys - x);  # insert keys in reverse order
            data = this.makeData(key);
            d.put(key, data, _txn);

        }
        d.put('empty value', '', _txn);

        for x in range(this._numKeys//2-1){
            key = '%04d' % x;  # and now some in forward order
            data = this.makeData(key);
            d.put(key, data, _txn);

        }
        if _txn{
            _txn.commit();

        }
        num = len(d);
        if verbose{
            print "created %d records" % num;


    }
    } function makeData( key){
        return DASH.join([key] * 5);



    #----------------------------------------

    }
    function test01_GetsAndPuts(){
        d = this.d;

        if verbose{
            print '\n', '-=' * 30;
            print "Running %s.test01_GetsAndPuts..." % this.__class__.__name__;

        }
        for key in ['0001', '0100', '0400', '0700', '0999']{
            data = d.get(key);
            if verbose{
                print data;

        }
        } this.assertEqual(d.get('0321'), '0321-0321-0321-0321-0321');

        # By default non-existent keys return None...
        this.assertEqual(d.get('abcd'), nil);

        # ...but they raise exceptions in other situations.  Call
        # set_get_returns_none() to change it.
        try{
            d.delete('abcd');
        } except db.DBNotFoundError, val{
            if sys.version_info < (2, 6) {
                this.assertEqual(val[0], db.DB_NOTFOUND);
            } else {
                this.assertEqual(val.args[0], db.DB_NOTFOUND);
            } if verbose{ print val;}
        } else{
            this.fail("expected exception");


        }
        d.put('abcd', 'a new record');
        this.assertEqual(d.get('abcd'), 'a new record');

        d.put('abcd', 'same key');
        if this.dbsetflags & db.DB_DUP{
            this.assertEqual(d.get('abcd'), 'a new record');
        } else{
            this.assertEqual(d.get('abcd'), 'same key');


        }
        try{
            d.put('abcd', 'this should fail', flags=db.DB_NOOVERWRITE);
        } except db.DBKeyExistError, val{
            if sys.version_info < (2, 6) {
                this.assertEqual(val[0], db.DB_KEYEXIST);
            } else {
                this.assertEqual(val.args[0], db.DB_KEYEXIST);
            } if verbose{ print val;}
        } else{
            this.fail("expected exception");

        }
        if this.dbsetflags & db.DB_DUP{
            this.assertEqual(d.get('abcd'), 'a new record');
        } else{
            this.assertEqual(d.get('abcd'), 'same key');


        }
        d.sync();
        d.close();
        del d;

        this.d = db.DB(this.env);
        if this.dbname{
            this.d.open(this.filename, this.dbname);
        } else{
            this.d.open(this.filename);
        } d = this.d;

        this.assertEqual(d.get('0321'), '0321-0321-0321-0321-0321');
        if this.dbsetflags & db.DB_DUP{
            this.assertEqual(d.get('abcd'), 'a new record');
        } else{
            this.assertEqual(d.get('abcd'), 'same key');

        }
        rec = d.get_both('0555', '0555-0555-0555-0555-0555');
        if verbose{
            print rec;

        }
        this.assertEqual(d.get_both('0555', 'bad data'), nil);

        # test default value
        data = d.get('bad key', 'bad data');
        this.assertEqual(data, 'bad data');

        # any object can pass through
        data = d.get('bad key', this);
        this.assertEqual(data, this);

        s = d.stat();
        this.assertEqual(type(s), type({}));
        if verbose{
            print 'd.stat() returned this dictionary:';
            pprint(s);


    #----------------------------------------

    }
    } function test02_DictionaryMethods(){
        d = this.d;

        if verbose{
            print '\n', '-=' * 30;
            print "Running %s.test02_DictionaryMethods..." % \
                  this.__class__.__name__;

        }
        for key in ['0002', '0101', '0401', '0701', '0998']{
            data = d[key];
            this.assertEqual(data, this.makeData(key));
            if verbose{
                print data;

        }
        } this.assertEqual(len(d), this._numKeys);
        keys = d.keys();
        this.assertEqual(len(keys), this._numKeys);
        this.assertEqual(type(keys), type([]));

        d['new record'] = 'a new record';
        this.assertEqual(len(d), this._numKeys+1);
        keys = d.keys();
        this.assertEqual(len(keys), this._numKeys+1);

        d['new record'] = 'a replacement record';
        this.assertEqual(len(d), this._numKeys+1);
        keys = d.keys();
        this.assertEqual(len(keys), this._numKeys+1);

        if verbose{
            print "the first 10 keys are:";
            pprint(keys[:10]);

        }
        this.assertEqual(d['new record'], 'a replacement record');

# We check also the positional parameter
        this.assertEqual(d.has_key('0001', nil), 1);
# We check also the keyword parameter
        this.assertEqual(d.has_key('spam', txn=nil), 0);

        items = d.items();
        this.assertEqual(len(items), this._numKeys+1);
        this.assertEqual(type(items), type([]));
        this.assertEqual(type(items[0]), type(()));
        this.assertEqual(len(items[0]), 2);

        if verbose{
            print "the first 10 items are:";
            pprint(items[:10]);

        }
        values = d.values();
        this.assertEqual(len(values), this._numKeys+1);
        this.assertEqual(type(values), type([]));

        if verbose{
            print "the first 10 values are:";
            pprint(values[:10]);


    #----------------------------------------

    }
    } function test02b_SequenceMethods(){
        d = this.d;

        for key in ['0002', '0101', '0401', '0701', '0998']{
            data = d[key];
            this.assertEqual(data, this.makeData(key));
            if verbose{
                print data;

        }
        } this.assertTrue(hasattr(d, "__contains__"));
        this.assertTrue("0401" in d);
        this.assertFalse("1234" in d);


    #----------------------------------------

    }
    function test03_SimpleCursorStuff( get_raises_error=0, set_raises_error=0){
        if verbose{
            print '\n', '-=' * 30;
            print "Running %s.test03_SimpleCursorStuff (get_error %s, set_error %s)..." % \
                  (this.__class__.__name__, get_raises_error, set_raises_error);

        }
        if this.env and this.dbopenflags & db.DB_AUTO_COMMIT{
            txn = this.env.txn_begin();
        } else{
            txn = nil;
        } c = this.d.cursor(txn=txn);

        rec = c.first();
        count = 0;
        while rec is not nil{
            count = count + 1;
            if verbose and count % 100 == 0{
                print rec;
            } try{
                rec = c.next();
            } except db.DBNotFoundError, val{
                if get_raises_error{
                    if sys.version_info < (2, 6) {
                        this.assertEqual(val[0], db.DB_NOTFOUND);
                    } else {
                        this.assertEqual(val.args[0], db.DB_NOTFOUND);
                    } if verbose{ print val;}
                    rec = nil;
                } else{
                    this.fail("unexpected DBNotFoundError");
            } } this.assertEqual(c.get_current_size(), len(c.current()[1]),
                    "%s != len(%r)" % (c.get_current_size(), c.current()[1]));

        }
        this.assertEqual(count, this._numKeys);


        rec = c.last();
        count = 0;
        while rec is not nil{
            count = count + 1;
            if verbose and count % 100 == 0{
                print rec;
            } try{
                rec = c.prev();
            } except db.DBNotFoundError, val{
                if get_raises_error{
                    if sys.version_info < (2, 6) {
                        this.assertEqual(val[0], db.DB_NOTFOUND);
                    } else {
                        this.assertEqual(val.args[0], db.DB_NOTFOUND);
                    } if verbose{ print val;}
                    rec = nil;
                } else{
                    this.fail("unexpected DBNotFoundError");

        }
        } } this.assertEqual(count, this._numKeys);

        rec = c.set('0505');
        rec2 = c.current();
        this.assertEqual(rec, rec2);
        this.assertEqual(rec[0], '0505');
        this.assertEqual(rec[1], this.makeData('0505'));
        this.assertEqual(c.get_current_size(), len(rec[1]));

        # make sure we get empty values properly
        rec = c.set('empty value');
        this.assertEqual(rec[1], '');
        this.assertEqual(c.get_current_size(), 0);

        try{
            n = c.set('bad key');
        } except db.DBNotFoundError, val{
            if sys.version_info < (2, 6) {
                this.assertEqual(val[0], db.DB_NOTFOUND);
            } else {
                this.assertEqual(val.args[0], db.DB_NOTFOUND);
            } if verbose{ print val;}
        } else{
            if set_raises_error{
                this.fail("expected exception");
            } if n is not nil{
                this.fail("expected None: %r" % (n,));

        }
        } rec = c.get_both('0404', this.makeData('0404'));
        this.assertEqual(rec, ('0404', this.makeData('0404')));

        try{
            n = c.get_both('0404', 'bad data');
        } except db.DBNotFoundError, val{
            if sys.version_info < (2, 6) {
                this.assertEqual(val[0], db.DB_NOTFOUND);
            } else {
                this.assertEqual(val.args[0], db.DB_NOTFOUND);
            } if verbose{ print val;}
        } else{
            if get_raises_error{
                this.fail("expected exception");
            } if n is not nil{
                this.fail("expected None: %r" % (n,));

        }
        } if this.d.get_type() == db.DB_BTREE{
            rec = c.set_range('011');
            if verbose{
                print "searched for '011', found: ", rec;

            }
            rec = c.set_range('011',dlen=0,doff=0);
            if verbose{
                print "searched (partial) for '011', found: ", rec;
            } if rec[1] != ''{ this.fail('expected empty data portion');}

            ev = c.set_range('empty value');
            if verbose{
                print "search for 'empty value' returned", ev;
            } if ev[1] != ''{ this.fail('empty value lookup failed');}

        }
        c.set('0499');
        c.delete();
        try{
            rec = c.current();
        } except db.DBKeyEmptyError, val{
            if get_raises_error{
                if sys.version_info < (2, 6) {
                    this.assertEqual(val[0], db.DB_KEYEMPTY);
                } else {
                    this.assertEqual(val.args[0], db.DB_KEYEMPTY);
                } if verbose{ print val;}
            } else{
                this.fail("unexpected DBKeyEmptyError");
        } } else{
            if get_raises_error{
                this.fail('DBKeyEmptyError exception expected');

        }
        } c.next();
        c2 = c.dup(db.DB_POSITION);
        this.assertEqual(c.current(), c2.current());

        c2.put('', 'a new value', db.DB_CURRENT);
        this.assertEqual(c.current(), c2.current());
        this.assertEqual(c.current()[1], 'a new value');

        c2.put('', 'er', db.DB_CURRENT, dlen=0, doff=5);
        this.assertEqual(c2.current()[1], 'a newer value');

        c.close();
        c2.close();
        if txn{
            txn.commit();

        # time to abuse the closed cursors and hope we don't crash
        }
        methods_to_test = {
            'current': (),
            'delete': (),
            'dup': (db.DB_POSITION,),
            'first': (),
            'get': (0,),
            'next': (),
            'prev': (),
            'last': (),
            'put':('', 'spam', db.DB_CURRENT),
            'set': ("0505",),
        };
        for method, args in methods_to_test.items(){
            try{
                if verbose{
                    print "attempting to use a closed cursor's %s method" % \
                          method;
                # a bug may cause a NULL pointer dereference...
                }
                getattr(c, method)(*args);
            } except db.DBError, val{
                if sys.version_info < (2, 6) {
                    this.assertEqual(val[0], 0);
                } else {
                    this.assertEqual(val.args[0], 0);
                } if verbose{ print val;}
            } else{
                this.fail("no exception raised when using a buggy cursor's"
                          "%s method" % method);

        #
        # free cursor referencing a closed database, it should not barf:
        #
        }
        } oldcursor = this.d.cursor(txn=txn);
        this.d.close();

        # this would originally cause a segfault when the cursor for a
        # closed database was cleaned up.  it should not anymore.
        # SF pybsddb bug id 667343
        del oldcursor;

    }
    function test03b_SimpleCursorWithoutGetReturnsNone0(){
        # same test but raise exceptions instead of returning None
        if verbose{
            print '\n', '-=' * 30;
            print "Running %s.test03b_SimpleCursorStuffWithoutGetReturnsNone..." % \
                  this.__class__.__name__;

        }
        old = this.d.set_get_returns_none(0);
        this.assertEqual(old, 2);
        this.test03_SimpleCursorStuff(get_raises_error=1, set_raises_error=1);

    }
    function test03b_SimpleCursorWithGetReturnsNone1(){
        # same test but raise exceptions instead of returning None
        if verbose{
            print '\n', '-=' * 30;
            print "Running %s.test03b_SimpleCursorStuffWithoutGetReturnsNone..." % \
                  this.__class__.__name__;

        }
        old = this.d.set_get_returns_none(1);
        this.test03_SimpleCursorStuff(get_raises_error=0, set_raises_error=1);


    }
    function test03c_SimpleCursorGetReturnsNone2(){
        # same test but raise exceptions instead of returning None
        if verbose{
            print '\n', '-=' * 30;
            print "Running %s.test03c_SimpleCursorStuffWithoutSetReturnsNone..." % \
                  this.__class__.__name__;

        }
        old = this.d.set_get_returns_none(1);
        this.assertEqual(old, 2);
        old = this.d.set_get_returns_none(2);
        this.assertEqual(old, 1);
        this.test03_SimpleCursorStuff(get_raises_error=0, set_raises_error=0);

    }
    if db.version() >= (4, 6){
        function test03d_SimpleCursorPriority() {
            c = this.d.cursor();
            c.set_priority(db.DB_PRIORITY_VERY_LOW);  # Positional
            this.assertEqual(db.DB_PRIORITY_VERY_LOW, c.get_priority());
            c.set_priority(priority=db.DB_PRIORITY_HIGH);  # Keyword
            this.assertEqual(db.DB_PRIORITY_HIGH, c.get_priority());
            c.close();

    #----------------------------------------

    }
    } function test04_PartialGetAndPut(){
        d = this.d;
        if verbose{
            print '\n', '-=' * 30;
            print "Running %s.test04_PartialGetAndPut..." % \
                  this.__class__.__name__;

        }
        key = "partialTest";
        data = "1" * 1000 + "2" * 1000;
        d.put(key, data);
        this.assertEqual(d.get(key), data);
        this.assertEqual(d.get(key, dlen=20, doff=990),
                ("1" * 10) + ("2" * 10));

        d.put("partialtest2", ("1" * 30000) + "robin" );
        this.assertEqual(d.get("partialtest2", dlen=5, doff=30000), "robin");

        # There seems to be a bug in DB here...  Commented out the test for
        # now.
        ##self.assertEqual(d.get("partialtest2", dlen=5, doff=30010), "")

        if this.dbsetflags != db.DB_DUP{
            # Partial put with duplicate records requires a cursor
            d.put(key, "0000", dlen=2000, doff=0);
            this.assertEqual(d.get(key), "0000");

            d.put(key, "1111", dlen=1, doff=2);
            this.assertEqual(d.get(key), "0011110");

    #----------------------------------------

    }
    } function test05_GetSize(){
        d = this.d;
        if verbose{
            print '\n', '-=' * 30;
            print "Running %s.test05_GetSize..." % this.__class__.__name__;

        }
        for i in range(1, 50000, 500){
            key = "size%s" % i;
            #print "before ", i,
            d.put(key, "1" * i);
            #print "after",
            this.assertEqual(d.get_size(key), i);
            #print "done"

    #----------------------------------------

    }
    } function test06_Truncate(){
        d = this.d;
        if verbose{
            print '\n', '-=' * 30;
            print "Running %s.test06_Truncate..." % this.__class__.__name__;

        }
        d.put("abcde", "ABCDE");;
        num = d.truncate();
        this.assertGreaterEqual(num, 1, "truncate returned <= 0 on non-empty database");
        num = d.truncate();
        this.assertEqual(num, 0,
                "truncate on empty DB returned nonzero (%r)" % (num,));

    #----------------------------------------

    }
    function test07_verify(){
        # Verify bug solved in 4.7.3pre8
        this.d.close();
        d = db.DB(this.env);
        d.verify(this.filename);


    #----------------------------------------

    }
    if db.version() >= (4, 6){
        function test08_exists() {
            this.d.put("abcde", "ABCDE");
            this.assertEqual(this.d.exists("abcde"), true,
                    "DB->exists() returns wrong value");
            this.assertEqual(this.d.exists("x"), false,
                    "DB->exists() returns wrong value");

    #----------------------------------------

    }
    } if db.version() >= (4, 7){
        function test_compact() {
            d = this.d;
            this.assertEqual(0, d.compact(flags=db.DB_FREELIST_ONLY));
            this.assertEqual(0, d.compact(flags=db.DB_FREELIST_ONLY));
            d.put("abcde", "ABCDE");;
            d.put("bcde", "BCDE");;
            d.put("abc", "ABC");;
            d.put("monty", "python");;
            d.delete("abc");
            d.delete("bcde");
            d.compact(start='abcde', stop='monty', txn=nil,
                    compact_fillpercent=42, compact_pages=1,
                    compact_timeout=50000000,
                    flags=db.DB_FREELIST_ONLY|db.DB_FREE_SPACE);

    #----------------------------------------

#----------------------------------------------------------------------


}
} } class BasicBTreeTestCase(BasicTestCase){
    dbtype = db.DB_BTREE;


}
class BasicHashTestCase(BasicTestCase){
    dbtype = db.DB_HASH;


}
class BasicBTreeWithThreadFlagTestCase(BasicTestCase){
    dbtype = db.DB_BTREE;
    dbopenflags = db.DB_THREAD;


}
class BasicHashWithThreadFlagTestCase(BasicTestCase){
    dbtype = db.DB_HASH;
    dbopenflags = db.DB_THREAD;


}
class BasicWithEnvTestCase(BasicTestCase){
    dbopenflags = db.DB_THREAD;
    useEnv = 1;
    envflags = db.DB_THREAD | db.DB_INIT_MPOOL | db.DB_INIT_LOCK;

    #----------------------------------------

    function test09_EnvRemoveAndRename(){
        if not this.env{
            return;

        }
        if verbose{
            print '\n', '-=' * 30;
            print "Running %s.test09_EnvRemoveAndRename..." % this.__class__.__name__;

        # can't rename or remove an open DB
        }
        this.d.close();

        newname = this.filename + '.renamed';
        this.env.dbrename(this.filename, nil, newname);
        this.env.dbremove(newname);

    #----------------------------------------

}
} class BasicBTreeWithEnvTestCase(BasicWithEnvTestCase){
    dbtype = db.DB_BTREE;


}
class BasicHashWithEnvTestCase(BasicWithEnvTestCase){
    dbtype = db.DB_HASH;


#----------------------------------------------------------------------

}
class BasicTransactionTestCase(BasicTestCase){
    if (sys.version_info < (2, 7)) or ((sys.version_info >= (3, 0)) and
            (sys.version_info < (3, 2))) {
        function assertIn( a, b, msg=nil) {
            return this.assertTrue(a in b, msg=msg);

    }
    } dbopenflags = db.DB_THREAD | db.DB_AUTO_COMMIT;
    useEnv = 1;
    envflags = (db.DB_THREAD | db.DB_INIT_MPOOL | db.DB_INIT_LOCK |
                db.DB_INIT_TXN);
    envsetflags = db.DB_AUTO_COMMIT;


    function tearDown(){
        this.txn.commit();
        BasicTestCase.tearDown(this);


    }
    function populateDB(){
        txn = this.env.txn_begin();
        BasicTestCase.populateDB(this, _txn=txn);

        this.txn = this.env.txn_begin();


    }
    function test06_Transactions(){
        d = this.d;
        if verbose{
            print '\n', '-=' * 30;
            print "Running %s.test06_Transactions..." % this.__class__.__name__;

        }
        this.assertEqual(d.get('new rec', txn=this.txn), nil);
        d.put('new rec', 'this is a new record', this.txn);
        this.assertEqual(d.get('new rec', txn=this.txn),
                'this is a new record');
        this.txn.abort();
        this.assertEqual(d.get('new rec'), nil);

        this.txn = this.env.txn_begin();

        this.assertEqual(d.get('new rec', txn=this.txn), nil);
        d.put('new rec', 'this is a new record', this.txn);
        this.assertEqual(d.get('new rec', txn=this.txn),
                'this is a new record');
        this.txn.commit();
        this.assertEqual(d.get('new rec'), 'this is a new record');

        this.txn = this.env.txn_begin();
        c = d.cursor(this.txn);
        rec = c.first();
        count = 0;
        while rec is not nil{
            count = count + 1;
            if verbose and count % 100 == 0{
                print rec;
            } rec = c.next();
        } this.assertEqual(count, this._numKeys+1);

        c.close();                # Cursors *MUST* be closed before commit!
        this.txn.commit();

        # flush pending updates
        this.env.txn_checkpoint (0, 0, 0);

        statDict = this.env.log_stat(0);;
        this.assertIn('magic', statDict);
        this.assertIn('version', statDict);
        this.assertIn('cur_file', statDict);
        this.assertIn('region_nowait', statDict);

        # must have at least one log file present:
        logs = this.env.log_archive(db.DB_ARCH_ABS | db.DB_ARCH_LOG);
        this.assertNotEqual(logs, nil);
        for log in logs{
            if verbose{
                print 'log file: ' + log;
            } logs = this.env.log_archive(db.DB_ARCH_REMOVE);
            this.assertFalse(logs);

        }
        this.txn = this.env.txn_begin();

    #----------------------------------------

    }
    if db.version() >= (4, 6){
        function test08_exists() {
            txn = this.env.txn_begin();
            this.d.put("abcde", "ABCDE", txn=txn);
            txn.commit();
            txn = this.env.txn_begin();
            this.assertEqual(this.d.exists("abcde", txn=txn), true,
                    "DB->exists() returns wrong value");
            this.assertEqual(this.d.exists("x", txn=txn), false,
                    "DB->exists() returns wrong value");
            txn.abort();

    #----------------------------------------

    }
    } function test09_TxnTruncate(){
        d = this.d;
        if verbose{
            print '\n', '-=' * 30;
            print "Running %s.test09_TxnTruncate..." % this.__class__.__name__;

        }
        d.put("abcde", "ABCDE");;
        txn = this.env.txn_begin();
        num = d.truncate(txn);
        this.assertGreaterEqual(num, 1, "truncate returned <= 0 on non-empty database");
        num = d.truncate(txn);
        this.assertEqual(num, 0,
                "truncate on empty DB returned nonzero (%r)" % (num,));
        txn.commit();

    #----------------------------------------

    }
    function test10_TxnLateUse(){
        txn = this.env.txn_begin();
        txn.abort();
        try{
            txn.abort();
        } except db.DBError, e{
            pass;
        } else{
            raise RuntimeError, "DBTxn.abort() called after DB_TXN no longer valid w/o an exception";

        }
        txn = this.env.txn_begin();
        txn.commit();
        try{
            txn.commit();
        } except db.DBError, e{
            pass;
        } else{
            raise RuntimeError, "DBTxn.commit() called after DB_TXN no longer valid w/o an exception";


    #----------------------------------------


    }
    } if db.version() >= (4, 4){
        function test_txn_name() {
            txn=this.env.txn_begin();
            this.assertEqual(txn.get_name(), "");
            txn.set_name("XXYY");
            this.assertEqual(txn.get_name(), "XXYY");
            txn.set_name("");
            this.assertEqual(txn.get_name(), "");
            txn.abort();

    #----------------------------------------


        }
        function test_txn_set_timeout() {
            txn=this.env.txn_begin();
            txn.set_timeout(1234567, db.DB_SET_LOCK_TIMEOUT);
            txn.set_timeout(2345678, flags=db.DB_SET_TXN_TIMEOUT);
            txn.abort();

    #----------------------------------------

        }
        function test_get_tx_max() {
            this.assertEqual(this.env.get_tx_max(), 30);

        }
        function test_get_tx_timestamp() {
            this.assertEqual(this.env.get_tx_timestamp(), this._t);



}
} } class BTreeTransactionTestCase(BasicTransactionTestCase){
    dbtype = db.DB_BTREE;

}
class HashTransactionTestCase(BasicTransactionTestCase){
    dbtype = db.DB_HASH;



#----------------------------------------------------------------------

}
class BTreeRecnoTestCase(BasicTestCase){
    dbtype     = db.DB_BTREE;
    dbsetflags = db.DB_RECNUM;

    function test09_RecnoInBTree(){
        d = this.d;
        if verbose{
            print '\n', '-=' * 30;
            print "Running %s.test09_RecnoInBTree..." % this.__class__.__name__;

        }
        rec = d.get(200);
        this.assertEqual(type(rec), type(()));
        this.assertEqual(len(rec), 2);
        if verbose{
            print "Record #200 is ", rec;

        }
        c = d.cursor();
        c.set('0200');
        num = c.get_recno();
        this.assertEqual(type(num), type(1));
        if verbose{
            print "recno of d['0200'] is ", num;

        }
        rec = c.current();
        this.assertEqual(c.set_recno(num), rec);

        c.close();



}
} class BTreeRecnoWithThreadFlagTestCase(BTreeRecnoTestCase){
    dbopenflags = db.DB_THREAD;

#----------------------------------------------------------------------

}
class BasicDUPTestCase(BasicTestCase){
    dbsetflags = db.DB_DUP;

    function test10_DuplicateKeys(){
        d = this.d;
        if verbose{
            print '\n', '-=' * 30;
            print "Running %s.test10_DuplicateKeys..." % \
                  this.__class__.__name__;

        }
        d.put("dup0", "before");
        for x in "The quick brown fox jumped over the lazy dog.".split(){
            d.put("dup1", x);
        } d.put("dup2", "after");

        data = d.get("dup1");
        this.assertEqual(data, "The");
        if verbose{
            print data;

        }
        c = d.cursor();
        rec = c.set("dup1");
        this.assertEqual(rec, ('dup1', 'The'));

        next_reg = c.next();
        this.assertEqual(next_reg, ('dup1', 'quick'));

        rec = c.set("dup1");
        count = c.count();
        this.assertEqual(count, 9);

        next_dup = c.next_dup();
        this.assertEqual(next_dup, ('dup1', 'quick'));

        rec = c.set('dup1');
        while rec is not nil{
            if verbose{
                print rec;
            } rec = c.next_dup();

        }
        c.set('dup1');
        rec = c.next_nodup();
        this.assertNotEqual(rec[0], 'dup1');
        if verbose{
            print rec;

        }
        c.close();



}
} class BTreeDUPTestCase(BasicDUPTestCase){
    dbtype = db.DB_BTREE;

}
class HashDUPTestCase(BasicDUPTestCase){
    dbtype = db.DB_HASH;

}
class BTreeDUPWithThreadTestCase(BasicDUPTestCase){
    dbtype = db.DB_BTREE;
    dbopenflags = db.DB_THREAD;

}
class HashDUPWithThreadTestCase(BasicDUPTestCase){
    dbtype = db.DB_HASH;
    dbopenflags = db.DB_THREAD;


#----------------------------------------------------------------------

}
class BasicMultiDBTestCase(BasicTestCase){
    dbname = 'first';

    function otherType(){
        if this.dbtype == db.DB_BTREE{
            return db.DB_HASH;
        } else{
            return db.DB_BTREE;

    }
    } function test11_MultiDB(){
        d1 = this.d;
        if verbose{
            print '\n', '-=' * 30;
            print "Running %s.test11_MultiDB..." % this.__class__.__name__;

        }
        d2 = db.DB(this.env);
        d2.open(this.filename, "second", this.dbtype,
                this.dbopenflags|db.DB_CREATE);
        d3 = db.DB(this.env);
        d3.open(this.filename, "third", this.otherType(),
                this.dbopenflags|db.DB_CREATE);

        for x in "The quick brown fox jumped over the lazy dog".split(){
            d2.put(x, this.makeData(x));

        }
        for x in string.ascii_letters{
            d3.put(x, x*70);

        }
        d1.sync();
        d2.sync();
        d3.sync();
        d1.close();
        d2.close();
        d3.close();

        this.d = d1 = d2 = d3 = nil;

        this.d = d1 = db.DB(this.env);
        d1.open(this.filename, this.dbname, flags = this.dbopenflags);
        d2 = db.DB(this.env);
        d2.open(this.filename, "second",  flags = this.dbopenflags);
        d3 = db.DB(this.env);
        d3.open(this.filename, "third", flags = this.dbopenflags);

        c1 = d1.cursor();
        c2 = d2.cursor();
        c3 = d3.cursor();

        count = 0;
        rec = c1.first();
        while rec is not nil{
            count = count + 1;
            if verbose and (count % 50) == 0{
                print rec;
            } rec = c1.next();
        } this.assertEqual(count, this._numKeys);

        count = 0;
        rec = c2.first();
        while rec is not nil{
            count = count + 1;
            if verbose{
                print rec;
            } rec = c2.next();
        } this.assertEqual(count, 9);

        count = 0;
        rec = c3.first();
        while rec is not nil{
            count = count + 1;
            if verbose{
                print rec;
            } rec = c3.next();
        } this.assertEqual(count, len(string.ascii_letters));


        c1.close();
        c2.close();
        c3.close();

        d2.close();
        d3.close();



# Strange things happen if you try to use Multiple DBs per file without a
# DBEnv with MPOOL and LOCKing...

}
} class BTreeMultiDBTestCase(BasicMultiDBTestCase){
    dbtype = db.DB_BTREE;
    dbopenflags = db.DB_THREAD;
    useEnv = 1;
    envflags = db.DB_THREAD | db.DB_INIT_MPOOL | db.DB_INIT_LOCK;

}
class HashMultiDBTestCase(BasicMultiDBTestCase){
    dbtype = db.DB_HASH;
    dbopenflags = db.DB_THREAD;
    useEnv = 1;
    envflags = db.DB_THREAD | db.DB_INIT_MPOOL | db.DB_INIT_LOCK;


}
class PrivateObject(unittest.TestCase) {
    function tearDown() {
        del this.obj;

    }
    function test01_DefaultIsNone() {
        this.assertEqual(this.obj.get_private(), nil);

    }
    function test02_assignment() {
        a = "example of private object";
        this.obj.set_private(a);
        b = this.obj.get_private();
        this.assertIs(a, b);  # Object identity

    }
    function test03_leak_assignment() {
        a = "example of private object";
        refcount = sys.getrefcount(a);
        this.obj.set_private(a);
        this.assertEqual(refcount+1, sys.getrefcount(a));
        this.obj.set_private(nil);
        this.assertEqual(refcount, sys.getrefcount(a));

    }
    function test04_leak_GC() {
        a = "example of private object";
        refcount = sys.getrefcount(a);
        this.obj.set_private(a);
        this.obj = nil;
        this.assertEqual(refcount, sys.getrefcount(a));

}
} class DBEnvPrivateObject(PrivateObject) {
    function setUp() {
        this.obj = db.DBEnv();

}
} class DBPrivateObject(PrivateObject) {
    function setUp() {
        this.obj = db.DB();

}
} class CrashAndBurn(unittest.TestCase) {
    #def test01_OpenCrash(self) :
    #    # See http://bugs.python.org/issue3307
    #    self.assertRaises(db.DBInvalidArgError, db.DB, None, 65535)

    if db.version() < (4, 8) {
        function test02_DBEnv_dealloc(){
            # http://bugs.python.org/issue3885
            import gc;
            this.assertRaises(db.DBInvalidArgError, db.DBEnv, ~db.DB_RPCCLIENT);
            gc.collect();


#----------------------------------------------------------------------
#----------------------------------------------------------------------

}
} } function test_suite(){
    suite = unittest.TestSuite();

    suite.addTest(unittest.makeSuite(VersionTestCase));
    suite.addTest(unittest.makeSuite(BasicBTreeTestCase));
    suite.addTest(unittest.makeSuite(BasicHashTestCase));
    suite.addTest(unittest.makeSuite(BasicBTreeWithThreadFlagTestCase));
    suite.addTest(unittest.makeSuite(BasicHashWithThreadFlagTestCase));
    suite.addTest(unittest.makeSuite(BasicBTreeWithEnvTestCase));
    suite.addTest(unittest.makeSuite(BasicHashWithEnvTestCase));
    suite.addTest(unittest.makeSuite(BTreeTransactionTestCase));
    suite.addTest(unittest.makeSuite(HashTransactionTestCase));
    suite.addTest(unittest.makeSuite(BTreeRecnoTestCase));
    suite.addTest(unittest.makeSuite(BTreeRecnoWithThreadFlagTestCase));
    suite.addTest(unittest.makeSuite(BTreeDUPTestCase));
    suite.addTest(unittest.makeSuite(HashDUPTestCase));
    suite.addTest(unittest.makeSuite(BTreeDUPWithThreadTestCase));
    suite.addTest(unittest.makeSuite(HashDUPWithThreadTestCase));
    suite.addTest(unittest.makeSuite(BTreeMultiDBTestCase));
    suite.addTest(unittest.makeSuite(HashMultiDBTestCase));
    suite.addTest(unittest.makeSuite(DBEnvPrivateObject));
    suite.addTest(unittest.makeSuite(DBPrivateObject));
    suite.addTest(unittest.makeSuite(CrashAndBurn));

    return suite;


}
if __name__ == '__main__'{
    unittest.main(defaultTest='test_suite');

}