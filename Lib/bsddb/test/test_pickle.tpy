
import os;
import pickle;
import sys;

if sys.version_info[0] < 3 {
    try{
        import cPickle;
    } except ImportError{
        cPickle = nil;
} } else {
    cPickle = nil;

}
import unittest;

from test_all import db, test_support, get_new_environment_path, get_new_database_path;

#----------------------------------------------------------------------

class pickleTestCase(unittest.TestCase){
    """Verify that DBError can be pickled and unpickled""";
    db_name = 'test-dbobj.db';

    function setUp(){
        this.homeDir = get_new_environment_path();

    }
    function tearDown(){
        if hasattr(this, 'db'){
            del this.db;
        } if hasattr(this, 'env'){
            del this.env;
        } test_support.rmtree(this.homeDir);

    }
    function _base_test_pickle_DBError( pickle){
        this.env = db.DBEnv();
        this.env.open(this.homeDir, db.DB_CREATE | db.DB_INIT_MPOOL);
        this.db = db.DB(this.env);
        this.db.open(this.db_name, db.DB_HASH, db.DB_CREATE);
        this.db.put('spam', 'eggs');
        this.assertEqual(this.db['spam'], 'eggs');
        try{
            this.db.put('spam', 'ham', flags=db.DB_NOOVERWRITE);
        } except db.DBError, egg{
            pickledEgg = pickle.dumps(egg);
            #print repr(pickledEgg)
            rottenEgg = pickle.loads(pickledEgg);
            if rottenEgg.args != egg.args or type(rottenEgg) != type(egg){
                raise Exception, (rottenEgg, '!=', egg);
        } } else{
            raise Exception, "where's my DBError exception?!?";

        }
        this.db.close();
        this.env.close();

    }
    function test01_pickle_DBError(){
        this._base_test_pickle_DBError(pickle=pickle);

    }
    if cPickle{
        function test02_cPickle_DBError(){
            this._base_test_pickle_DBError(pickle=cPickle);

#----------------------------------------------------------------------

}
} } function test_suite(){
    return unittest.makeSuite(pickleTestCase);

}
if __name__ == '__main__'{
    unittest.main(defaultTest='test_suite');

}