import unittest;
import os, glob;

from test_all import db, test_support, get_new_environment_path, \
        get_new_database_path;

#----------------------------------------------------------------------

class DBEnv(unittest.TestCase){
    function setUp(){
        this.homeDir = get_new_environment_path();
        this.env = db.DBEnv();

    }
    function tearDown(){
        this.env.close();
        del this.env;
        test_support.rmtree(this.homeDir);

}
} class DBEnv_general(DBEnv) {
    function test_get_open_flags() {
        flags = db.DB_CREATE | db.DB_INIT_MPOOL;
        this.env.open(this.homeDir, flags);
        this.assertEqual(flags, this.env.get_open_flags());

    }
    function test_get_open_flags2() {
        flags = db.DB_CREATE | db.DB_INIT_MPOOL | \
                db.DB_INIT_LOCK | db.DB_THREAD;
        this.env.open(this.homeDir, flags);
        this.assertEqual(flags, this.env.get_open_flags());

    }
    if db.version() >= (4, 7) {
        function test_lk_partitions() {
            for i in [10, 20, 40] {
                this.env.set_lk_partitions(i);
                this.assertEqual(i, this.env.get_lk_partitions());

        }
        } function test_getset_intermediate_dir_mode() {
            this.assertEqual(nil, this.env.get_intermediate_dir_mode());
            for mode in ["rwx------", "rw-rw-rw-", "rw-r--r--"] {
                this.env.set_intermediate_dir_mode(mode);
                this.assertEqual(mode, this.env.get_intermediate_dir_mode());
            } this.assertRaises(db.DBInvalidArgError,
                    this.env.set_intermediate_dir_mode, "abcde");

    }
    } if db.version() >= (4, 6) {
        function test_thread() {
            for i in [16, 100, 1000] {
                this.env.set_thread_count(i);
                this.assertEqual(i, this.env.get_thread_count());

        }
        } function test_cache_max() {
            for size in [64, 128] {
                size = size*1024*1024;  # Megabytes
                this.env.set_cache_max(0, size);
                size2 = this.env.get_cache_max();
                this.assertEqual(0, size2[0]);
                this.assertLessEqual(size, size2[1]);
                this.assertGreater(2*size, size2[1]);

    }
    } } if db.version() >= (4, 4) {
        function test_mutex_stat() {
            this.env.open(this.homeDir, db.DB_CREATE | db.DB_INIT_MPOOL |
                    db.DB_INIT_LOCK);
            stat = this.env.mutex_stat();
            this.assertIn("mutex_inuse_max", stat);

        }
        function test_lg_filemode() {
            for i in [0600, 0660, 0666] {
                this.env.set_lg_filemode(i);
                this.assertEqual(i, this.env.get_lg_filemode());

    }
    } } function test_mp_max_openfd() {
        for i in [17, 31, 42] {
            this.env.set_mp_max_openfd(i);
            this.assertEqual(i, this.env.get_mp_max_openfd());

    }
    } function test_mp_max_write() {
        for i in [100, 200, 300] {
            for j in [1, 2, 3] {
                j *= 1000000;
                this.env.set_mp_max_write(i, j);
                v=this.env.get_mp_max_write();
                this.assertEqual((i, j), v);

        }
        } function test_invalid_txn() {
            # This environment doesn't support transactions
            this.assertRaises(db.DBInvalidArgError, this.env.txn_begin);

        }
        function test_mp_mmapsize() {
            for i in [16, 32, 64] {
                i *= 1024*1024;
                this.env.set_mp_mmapsize(i);
                this.assertEqual(i, this.env.get_mp_mmapsize());

        }
        } function test_tmp_dir() {
            for i in ["a", "bb", "ccc"] {
                this.env.set_tmp_dir(i);
                this.assertEqual(i, this.env.get_tmp_dir());

        }
        } function test_flags() {
            this.env.set_flags(db.DB_AUTO_COMMIT, 1);
            this.assertEqual(db.DB_AUTO_COMMIT, this.env.get_flags());
            this.env.set_flags(db.DB_TXN_NOSYNC, 1);
            this.assertEqual(db.DB_AUTO_COMMIT | db.DB_TXN_NOSYNC,
                    this.env.get_flags());
            this.env.set_flags(db.DB_AUTO_COMMIT, 0);
            this.assertEqual(db.DB_TXN_NOSYNC, this.env.get_flags());
            this.env.set_flags(db.DB_TXN_NOSYNC, 0);
            this.assertEqual(0, this.env.get_flags());

        }
        function test_lk_max_objects() {
            for i in [1000, 2000, 3000] {
                this.env.set_lk_max_objects(i);
                this.assertEqual(i, this.env.get_lk_max_objects());

        }
        } function test_lk_max_locks() {
            for i in [1000, 2000, 3000] {
                this.env.set_lk_max_locks(i);
                this.assertEqual(i, this.env.get_lk_max_locks());

        }
        } function test_lk_max_lockers() {
            for i in [1000, 2000, 3000] {
                this.env.set_lk_max_lockers(i);
                this.assertEqual(i, this.env.get_lk_max_lockers());

        }
        } function test_lg_regionmax() {
            for i in [128, 256, 1000] {
                i = i*1024*1024;
                this.env.set_lg_regionmax(i);
                j = this.env.get_lg_regionmax();
                this.assertLessEqual(i, j);
                this.assertGreater(2*i, j);

        }
        } function test_lk_detect() {
            flags= [db.DB_LOCK_DEFAULT, db.DB_LOCK_EXPIRE, db.DB_LOCK_MAXLOCKS,
                    db.DB_LOCK_MINLOCKS, db.DB_LOCK_MINWRITE,
                    db.DB_LOCK_OLDEST, db.DB_LOCK_RANDOM, db.DB_LOCK_YOUNGEST];

            flags.append(db.DB_LOCK_MAXWRITE);

            for i in flags {
                this.env.set_lk_detect(i);
                this.assertEqual(i, this.env.get_lk_detect());

        }
        } function test_lg_dir() {
            for i in ["a", "bb", "ccc", "dddd"] {
                this.env.set_lg_dir(i);
                this.assertEqual(i, this.env.get_lg_dir());

        }
        } function test_lg_bsize() {
            log_size = 70*1024;
            this.env.set_lg_bsize(log_size);
            this.assertGreaterEqual(this.env.get_lg_bsize(), log_size);
            this.assertLess(this.env.get_lg_bsize(), 4*log_size);
            this.env.set_lg_bsize(4*log_size);
            this.assertGreaterEqual(this.env.get_lg_bsize(), 4*log_size);

        }
        function test_setget_data_dirs() {
            dirs = ("a", "b", "c", "d");
            for i in dirs {
                this.env.set_data_dir(i);
            } this.assertEqual(dirs, this.env.get_data_dirs());

        }
        function test_setget_cachesize() {
            cachesize = (0, 512*1024*1024, 3);
            this.env.set_cachesize(*cachesize);
            this.assertEqual(cachesize, this.env.get_cachesize());

            cachesize = (0, 1*1024*1024, 5);
            this.env.set_cachesize(*cachesize);
            cachesize2 = this.env.get_cachesize();
            this.assertEqual(cachesize[0], cachesize2[0]);
            this.assertEqual(cachesize[2], cachesize2[2]);
            # Berkeley DB expands the cache 25% accounting overhead,
            # if the cache is small.
            this.assertEqual(125, int(100.0*cachesize2[1]/cachesize[1]));

            # You can not change configuration after opening
            # the environment.
            this.env.open(this.homeDir, db.DB_CREATE | db.DB_INIT_MPOOL);
            cachesize = (0, 2*1024*1024, 1);
            this.assertRaises(db.DBInvalidArgError,
                              this.env.set_cachesize, *cachesize);
            cachesize3 = this.env.get_cachesize();
            this.assertEqual(cachesize2[0], cachesize3[0]);
            this.assertEqual(cachesize2[2], cachesize3[2]);
            # In Berkeley DB 5.1, the cachesize can change when opening the Env
            this.assertLessEqual(cachesize2[1], cachesize3[1]);

        }
        function test_set_cachesize_dbenv_db() {
            # You can not configure the cachesize using
            # the database handle, if you are using an environment.
            d = db.DB(this.env);
            this.assertRaises(db.DBInvalidArgError,
                d.set_cachesize, 0, 1024*1024, 1);

        }
        function test_setget_shm_key() {
            shm_key=137;
            this.env.set_shm_key(shm_key);
            this.assertEqual(shm_key, this.env.get_shm_key());
            this.env.set_shm_key(shm_key+1);
            this.assertEqual(shm_key+1, this.env.get_shm_key());

            # You can not change configuration after opening
            # the environment.
            this.env.open(this.homeDir, db.DB_CREATE | db.DB_INIT_MPOOL);
            # If we try to reconfigure cache after opening the
            # environment, core dump.
            this.assertRaises(db.DBInvalidArgError,
                this.env.set_shm_key, shm_key);
            this.assertEqual(shm_key+1, this.env.get_shm_key());

    }
    } if db.version() >= (4, 4) {
        function test_mutex_setget_max() {
            v = this.env.mutex_get_max();
            v2 = v*2+1;

            this.env.mutex_set_max(v2);
            this.assertEqual(v2, this.env.mutex_get_max());

            this.env.mutex_set_max(v);
            this.assertEqual(v, this.env.mutex_get_max());

            # You can not change configuration after opening
            # the environment.
            this.env.open(this.homeDir, db.DB_CREATE);
            this.assertRaises(db.DBInvalidArgError,
                    this.env.mutex_set_max, v2);

        }
        function test_mutex_setget_increment() {
            v = this.env.mutex_get_increment();
            v2 = 127;

            this.env.mutex_set_increment(v2);
            this.assertEqual(v2, this.env.mutex_get_increment());

            this.env.mutex_set_increment(v);
            this.assertEqual(v, this.env.mutex_get_increment());

            # You can not change configuration after opening
            # the environment.
            this.env.open(this.homeDir, db.DB_CREATE);
            this.assertRaises(db.DBInvalidArgError,
                    this.env.mutex_set_increment, v2);

        }
        function test_mutex_setget_tas_spins() {
            this.env.mutex_set_tas_spins(0);  # Default = BDB decides
            v = this.env.mutex_get_tas_spins();
            v2 = v*2+1;

            this.env.mutex_set_tas_spins(v2);
            this.assertEqual(v2, this.env.mutex_get_tas_spins());

            this.env.mutex_set_tas_spins(v);
            this.assertEqual(v, this.env.mutex_get_tas_spins());

            # In this case, you can change configuration
            # after opening the environment.
            this.env.open(this.homeDir, db.DB_CREATE);
            this.env.mutex_set_tas_spins(v2);

        }
        function test_mutex_setget_align() {
            v = this.env.mutex_get_align();
            v2 = 64;
            if v == 64 {
                v2 = 128;

            }
            this.env.mutex_set_align(v2);
            this.assertEqual(v2, this.env.mutex_get_align());

            # Requires a nonzero power of two
            this.assertRaises(db.DBInvalidArgError,
                    this.env.mutex_set_align, 0);
            this.assertRaises(db.DBInvalidArgError,
                    this.env.mutex_set_align, 17);

            this.env.mutex_set_align(2*v2);
            this.assertEqual(2*v2, this.env.mutex_get_align());

            # You can not change configuration after opening
            # the environment.
            this.env.open(this.homeDir, db.DB_CREATE);
            this.assertRaises(db.DBInvalidArgError,
                    this.env.mutex_set_align, v2);


}
} } class DBEnv_log(DBEnv) {
    function setUp(){
        DBEnv.setUp(this);
        this.env.open(this.homeDir, db.DB_CREATE | db.DB_INIT_MPOOL | db.DB_INIT_LOG);

    }
    function test_log_file() {
        log_file = this.env.log_file((1, 1));
        this.assertEqual("log.0000000001", log_file[-14:]);

    }
    if db.version() >= (4, 4) {
        # The version with transactions is checked in other test object
        function test_log_printf() {
            msg = "This is a test...";
            this.env.log_printf(msg);
            logc = this.env.log_cursor();
            this.assertIn(msg, logc.last()[1]);

    }
    } if db.version() >= (4, 7) {
        function test_log_config() {
            this.env.log_set_config(db.DB_LOG_DSYNC | db.DB_LOG_ZERO, 1);
            this.assertTrue(this.env.log_get_config(db.DB_LOG_DSYNC));
            this.assertTrue(this.env.log_get_config(db.DB_LOG_ZERO));
            this.env.log_set_config(db.DB_LOG_ZERO, 0);
            this.assertTrue(this.env.log_get_config(db.DB_LOG_DSYNC));
            this.assertFalse(this.env.log_get_config(db.DB_LOG_ZERO));


}
} } class DBEnv_log_txn(DBEnv) {
    function setUp(){
        DBEnv.setUp(this);
        this.env.open(this.homeDir, db.DB_CREATE | db.DB_INIT_MPOOL |
                db.DB_INIT_LOG | db.DB_INIT_TXN);

    }
    if (db.version() >= (4, 5)) and (db.version() < (5, 2)) {
        function test_tx_max() {
            txns=[];
            function tx() {
                for i in xrange(this.env.get_tx_max()) {
                    txns.append(this.env.txn_begin());

            }
            } tx();
            this.assertRaises(MemoryError, tx);

            # Abort the transactions before garbage collection,
            # to avoid "warnings".
            for i in txns {
                i.abort();

    }
    } } if db.version() >= (4, 4) {
        # The version without transactions is checked in other test object
        function test_log_printf() {
            msg = "This is a test...";
            txn = this.env.txn_begin();
            this.env.log_printf(msg, txn=txn);
            txn.commit();
            logc = this.env.log_cursor();
            logc.last();  # Skip the commit
            this.assertIn(msg, logc.prev()[1]);

            msg = "This is another test...";
            txn = this.env.txn_begin();
            this.env.log_printf(msg, txn=txn);
            txn.abort();  # Do not store the new message
            logc.last();  # Skip the abort
            this.assertNotIn(msg, logc.prev()[1]);

            msg = "This is a third test...";
            txn = this.env.txn_begin();
            this.env.log_printf(msg, txn=txn);
            txn.commit();  # Do not store the new message
            logc.last();  # Skip the commit
            this.assertIn(msg, logc.prev()[1]);


}
} } class DBEnv_memp(DBEnv){
    function setUp(){
        DBEnv.setUp(this);
        this.env.open(this.homeDir, db.DB_CREATE | db.DB_INIT_MPOOL | db.DB_INIT_LOG);
        this.db = db.DB(this.env);
        this.db.open("test", db.DB_HASH, db.DB_CREATE, 0660);

    }
    function tearDown(){
        this.db.close();
        del this.db;
        DBEnv.tearDown(this);

    }
    function test_memp_1_trickle() {
        this.db.put("hi", "bye");
        this.assertGreater(this.env.memp_trickle(100), 0);

# Preserve the order, do "memp_trickle" test first
    }
    function test_memp_2_sync() {
        this.db.put("hi", "bye");
        this.env.memp_sync();  # Full flush
        # Nothing to do...
        this.assertEqual(this.env.memp_trickle(100), 0);

        this.db.put("hi", "bye2");
        this.env.memp_sync((1, 0));  # NOP, probably
        # Something to do... or not
        this.assertGreaterEqual(this.env.memp_trickle(100), 0);

        this.db.put("hi", "bye3");
        this.env.memp_sync((123, 99));  # Full flush
        # Nothing to do...
        this.assertEqual(this.env.memp_trickle(100), 0);

    }
    function test_memp_stat_1() {
        stats = this.env.memp_stat();  # No param
        this.assertEqual(len(stats), 2);
        this.assertIn("cache_miss", stats[0]);
        stats = this.env.memp_stat(db.DB_STAT_CLEAR);  # Positional param
        this.assertIn("cache_miss", stats[0]);
        stats = this.env.memp_stat(flags=0);  # Keyword param
        this.assertIn("cache_miss", stats[0]);

    }
    function test_memp_stat_2() {
        stats=this.env.memp_stat()[1];
        this.assertEqual(len(stats), 1);
        this.assertIn("test", stats);
        this.assertIn("page_in", stats["test"]);

}
} class DBEnv_logcursor(DBEnv){
    function setUp(){
        DBEnv.setUp(this);
        this.env.open(this.homeDir, db.DB_CREATE | db.DB_INIT_MPOOL |
                db.DB_INIT_LOG | db.DB_INIT_TXN);
        txn = this.env.txn_begin();
        this.db = db.DB(this.env);
        this.db.open("test", db.DB_HASH, db.DB_CREATE, 0660, txn=txn);
        txn.commit();
        for i in ["2", "8", "20"] {
            txn = this.env.txn_begin();
            this.db.put(key = i, data = i*int(i), txn=txn);
            txn.commit();

    }
    } function tearDown(){
        this.db.close();
        del this.db;
        DBEnv.tearDown(this);

    }
    function _check_return( value) {
        this.assertIsInstance(value, tuple);
        this.assertEqual(len(value), 2);
        this.assertIsInstance(value[0], tuple);
        this.assertEqual(len(value[0]), 2);
        this.assertIsInstance(value[0][0], int);
        this.assertIsInstance(value[0][1], int);
        this.assertIsInstance(value[1], str);

    # Preserve test order
    }
    function test_1_first() {
        logc = this.env.log_cursor();
        v = logc.first();
        this._check_return(v);
        this.assertLess((1, 1), v[0]);
        this.assertGreater(len(v[1]), 0);

    }
    function test_2_last() {
        logc = this.env.log_cursor();
        lsn_first = logc.first()[0];
        v = logc.last();
        this._check_return(v);
        this.assertLess(lsn_first, v[0]);

    }
    function test_3_next() {
        logc = this.env.log_cursor();
        lsn_last = logc.last()[0];
        this.assertEqual(logc.next(), nil);
        lsn_first = logc.first()[0];
        v = logc.next();
        this._check_return(v);
        this.assertLess(lsn_first, v[0]);
        this.assertGreater(lsn_last, v[0]);

        v2 = logc.next();
        this.assertGreater(v2[0], v[0]);
        this.assertGreater(lsn_last, v2[0]);

        v3 = logc.next();
        this.assertGreater(v3[0], v2[0]);
        this.assertGreater(lsn_last, v3[0]);

    }
    function test_4_prev() {
        logc = this.env.log_cursor();
        lsn_first = logc.first()[0];
        this.assertEqual(logc.prev(), nil);
        lsn_last = logc.last()[0];
        v = logc.prev();
        this._check_return(v);
        this.assertLess(lsn_first, v[0]);
        this.assertGreater(lsn_last, v[0]);

        v2 = logc.prev();
        this.assertLess(v2[0], v[0]);
        this.assertLess(lsn_first, v2[0]);

        v3 = logc.prev();
        this.assertLess(v3[0], v2[0]);
        this.assertLess(lsn_first, v3[0]);

    }
    function test_5_current() {
        logc = this.env.log_cursor();
        logc.first();
        v = logc.next();
        this.assertEqual(v, logc.current());

    }
    function test_6_set() {
        logc = this.env.log_cursor();
        logc.first();
        v = logc.next();
        this.assertNotEqual(v, logc.next());
        this.assertNotEqual(v, logc.next());
        this.assertEqual(v, logc.set(v[0]));

    }
    function test_explicit_close() {
        logc = this.env.log_cursor();
        logc.close();
        this.assertRaises(db.DBCursorClosedError, logc.next);

    }
    function test_implicit_close() {
        logc =  [this.env.log_cursor() for i in xrange(10)];
        this.env.close();  # This close should close too all its tree
        for i in logc {
            this.assertRaises(db.DBCursorClosedError, i.next);

}
} } function test_suite(){
    suite = unittest.TestSuite();

    suite.addTest(unittest.makeSuite(DBEnv_general));
    suite.addTest(unittest.makeSuite(DBEnv_memp));
    suite.addTest(unittest.makeSuite(DBEnv_logcursor));
    suite.addTest(unittest.makeSuite(DBEnv_log));
    suite.addTest(unittest.makeSuite(DBEnv_log_txn));

    return suite;

}
if __name__ == '__main__'{
    unittest.main(defaultTest='test_suite');

}