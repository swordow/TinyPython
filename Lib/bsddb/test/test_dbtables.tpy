#-----------------------------------------------------------------------
# A test suite for the table interface built on bsddb.db
#-----------------------------------------------------------------------
#
# Copyright (C) 2000, 2001 by Autonomous Zone Industries
# Copyright (C) 2002 Gregory P. Smith
#
# March 20, 2000
#
# License:      This is free software.  You may use this software for any
#               purpose including modification/redistribution, so long as
#               this header remains intact and that you do not claim any
#               rights of ownership or authorship of this software.  This
#               software has been tested, but no warranty is expressed or
#               implied.
#
#   --  Gregory P. Smith <greg@krypto.org>
#
# $Id$

import os, re, sys;

if sys.version_info[0] < 3 {
    try{
        import cPickle;
        pickle = cPickle;
    } except ImportError{
        import pickle;
} } else {
    import pickle;

}
import unittest;
from test_all import db, dbtables, test_support, verbose, \
        get_new_environment_path, get_new_database_path;

#----------------------------------------------------------------------

class TableDBTestCase(unittest.TestCase){
    db_name = 'test-table.db';

    function setUp(){
        import sys;
        if sys.version_info[0] >= 3 {
            from test_all import do_proxy_db_py3k;
            this._flag_proxy_db_py3k = do_proxy_db_py3k(false);

        }
        this.testHomeDir = get_new_environment_path();
        this.tdb = dbtables.bsdTableDB(
            filename='tabletest.db', dbhome=this.testHomeDir, create=1);

    }
    function tearDown(){
        this.tdb.close();
        import sys;
        if sys.version_info[0] >= 3 {
            from test_all import do_proxy_db_py3k;
            do_proxy_db_py3k(this._flag_proxy_db_py3k);
        } test_support.rmtree(this.testHomeDir);

    }
    function test01(){
        tabname = "test01";
        colname = 'cool numbers';
        try{
            this.tdb.Drop(tabname);
        } except dbtables.TableDBError{
            pass;
        } this.tdb.CreateTable(tabname, [colname]);
        import sys;
        if sys.version_info[0] < 3 {
            this.tdb.Insert(tabname, {colname: pickle.dumps(3.14159, 1)});
        } else {
            this.tdb.Insert(tabname, {colname: pickle.dumps(3.14159,
                1).decode("iso8859-1")});  # 8 bits

        }
        if verbose{
            this.tdb._db_print();

        }
        values = this.tdb.Select(
            tabname, [colname], conditions={colname: nil});

        import sys;
        if sys.version_info[0] < 3 {
            colval = pickle.loads(values[0][colname]);
        } else {
            colval = pickle.loads(bytes(values[0][colname], "iso8859-1"));
        } this.assertGreater(colval, 3.141);
        this.assertLess(colval, 3.142);


    }
    function test02(){
        tabname = "test02";
        col0 = 'coolness factor';
        col1 = 'but can it fly?';
        col2 = 'Species';

        import sys;
        if sys.version_info[0] < 3 {
            testinfo = [
                {col0: pickle.dumps(8, 1), col1: 'no', col2: 'Penguin'},
                {col0: pickle.dumps(-1, 1), col1: 'no', col2: 'Turkey'},
                {col0: pickle.dumps(9, 1), col1: 'yes', col2: 'SR-71A Blackbird'}
            ];
        } else {
            testinfo = [
                {col0: pickle.dumps(8, 1).decode("iso8859-1"),
                    col1: 'no', col2: 'Penguin'},
                {col0: pickle.dumps(-1, 1).decode("iso8859-1"),
                    col1: 'no', col2: 'Turkey'},
                {col0: pickle.dumps(9, 1).decode("iso8859-1"),
                    col1: 'yes', col2: 'SR-71A Blackbird'}
            ];

        }
        try{
            this.tdb.Drop(tabname);
        } except dbtables.TableDBError{
            pass;
        } this.tdb.CreateTable(tabname, [col0, col1, col2]);
        for row in testinfo {
            this.tdb.Insert(tabname, row);

        }
        import sys;
        if sys.version_info[0] < 3 {
            values = this.tdb.Select(tabname, [col2],
                conditions={col0: lambda x{ pickle.loads(x) >= 8}});
        } else {
            values = this.tdb.Select(tabname, [col2],
                conditions={col0: lambda x{
                    pickle.loads(bytes(x, "iso8859-1")) >= 8}});

        }
        this.assertEqual(len(values), 2);
        if values[0]['Species'] == 'Penguin' {
            this.assertEqual(values[1]['Species'], 'SR-71A Blackbird');
        } elif values[0]['Species'] == 'SR-71A Blackbird' {
            this.assertEqual(values[1]['Species'], 'Penguin');
        } else {
            if verbose{
                print "values= %r" % (values,);
            } raise RuntimeError("Wrong values returned!");

    }
    } function test03(){
        tabname = "test03";
        try{
            this.tdb.Drop(tabname);
        } except dbtables.TableDBError{
            pass;
        } if verbose{
            print '...before CreateTable...';
            this.tdb._db_print();
        } this.tdb.CreateTable(tabname, ['a', 'b', 'c', 'd', 'e']);
        if verbose{
            print '...after CreateTable...';
            this.tdb._db_print();
        } this.tdb.Drop(tabname);
        if verbose{
            print '...after Drop...';
            this.tdb._db_print();
        } this.tdb.CreateTable(tabname, ['a', 'b', 'c', 'd', 'e']);

        try{
            this.tdb.Insert(tabname,
                            {'a': "",
                             'e': pickle.dumps([{4:5, 6:7}, 'foo'], 1),
                             'f': "Zero"});
            this.fail('Expected an exception');
        } except dbtables.TableDBError{
            pass;

        }
        try{
            this.tdb.Select(tabname, [], conditions={'foo': '123'});
            this.fail('Expected an exception');
        } except dbtables.TableDBError{
            pass;

        }
        this.tdb.Insert(tabname,
                        {'a': '42',
                         'b': "bad",
                         'c': "meep",
                         'e': 'Fuzzy wuzzy was a bear'});
        this.tdb.Insert(tabname,
                        {'a': '581750',
                         'b': "good",
                         'd': "bla",
                         'c': "black",
                         'e': 'fuzzy was here'});
        this.tdb.Insert(tabname,
                        {'a': '800000',
                         'b': "good",
                         'd': "bla",
                         'c': "black",
                         'e': 'Fuzzy wuzzy is a bear'});

        if verbose{
            this.tdb._db_print();

        # this should return two rows
        }
        values = this.tdb.Select(tabname, ['b', 'a', 'd'],
            conditions={'e': re.compile('wuzzy').search,
                        'a': re.compile('^[0-9]+$').match});
        this.assertEqual(len(values), 2);

        # now lets delete one of them and try again
        this.tdb.Delete(tabname, conditions={'b': dbtables.ExactCond('good')});
        values = this.tdb.Select(
            tabname, ['a', 'd', 'b'],
            conditions={'e': dbtables.PrefixCond('Fuzzy')});
        this.assertEqual(len(values), 1);
        this.assertEqual(values[0]['d'], nil);

        values = this.tdb.Select(tabname, ['b'],
            conditions={'c': lambda c{ c == 'meep'}});
        this.assertEqual(len(values), 1);
        this.assertEqual(values[0]['b'], "bad");


    }
    function test04_MultiCondSelect(){
        tabname = "test04_MultiCondSelect";
        try{
            this.tdb.Drop(tabname);
        } except dbtables.TableDBError{
            pass;
        } this.tdb.CreateTable(tabname, ['a', 'b', 'c', 'd', 'e']);

        try{
            this.tdb.Insert(tabname,
                            {'a': "",
                             'e': pickle.dumps([{4:5, 6:7}, 'foo'], 1),
                             'f': "Zero"});
            this.fail('Expected an exception');
        } except dbtables.TableDBError{
            pass;

        }
        this.tdb.Insert(tabname, {'a': "A", 'b': "B", 'c': "C", 'd': "D",
                                  'e': "E"});
        this.tdb.Insert(tabname, {'a': "-A", 'b': "-B", 'c': "-C", 'd': "-D",
                                  'e': "-E"});
        this.tdb.Insert(tabname, {'a': "A-", 'b': "B-", 'c': "C-", 'd': "D-",
                                  'e': "E-"});

        if verbose{
            this.tdb._db_print();

        # This select should return 0 rows.  it is designed to test
        # the bug identified and fixed in sourceforge bug # 590449
        # (Big Thanks to "Rob Tillotson (n9mtb)" for tracking this down
        # and supplying a fix!!  This one caused many headaches to say
        # the least...)
        }
        values = this.tdb.Select(tabname, ['b', 'a', 'd'],
            conditions={'e': dbtables.ExactCond('E'),
                        'a': dbtables.ExactCond('A'),
                        'd': dbtables.PrefixCond('-')
                       } );
        this.assertEqual(len(values), 0, values);


    }
    function test_CreateOrExtend(){
        tabname = "test_CreateOrExtend";

        this.tdb.CreateOrExtendTable(
            tabname, ['name', 'taste', 'filling', 'alcohol content', 'price']);
        try{
            this.tdb.Insert(tabname,
                            {'taste': 'crap',
                             'filling': 'no',
                             'is it Guinness?': 'no'});
            this.fail("Insert should've failed due to bad column name");
        } except Exception{
            pass;
        } this.tdb.CreateOrExtendTable(tabname,
                                     ['name', 'taste', 'is it Guinness?']);

        # these should both succeed as the table should contain the union of both sets of columns.
        this.tdb.Insert(tabname, {'taste': 'crap', 'filling': 'no',
                                  'is it Guinness?': 'no'});
        this.tdb.Insert(tabname, {'taste': 'great', 'filling': 'yes',
                                  'is it Guinness?': 'yes',
                                  'name': 'Guinness'});


    }
    function test_CondObjs(){
        tabname = "test_CondObjs";

        this.tdb.CreateTable(tabname, ['a', 'b', 'c', 'd', 'e', 'p']);

        this.tdb.Insert(tabname, {'a': "the letter A",
                                  'b': "the letter B",
                                  'c': "is for cookie"});
        this.tdb.Insert(tabname, {'a': "is for aardvark",
                                  'e': "the letter E",
                                  'c': "is for cookie",
                                  'd': "is for dog"});
        this.tdb.Insert(tabname, {'a': "the letter A",
                                  'e': "the letter E",
                                  'c': "is for cookie",
                                  'p': "is for Python"});

        values = this.tdb.Select(
            tabname, ['p', 'e'],
            conditions={'e': dbtables.PrefixCond('the l')});
        this.assertEqual(len(values), 2, values);
        this.assertEqual(values[0]['e'], values[1]['e'], values);
        this.assertNotEqual(values[0]['p'], values[1]['p'], values);

        values = this.tdb.Select(
            tabname, ['d', 'a'],
            conditions={'a': dbtables.LikeCond('%aardvark%')});
        this.assertEqual(len(values), 1, values);
        this.assertEqual(values[0]['d'], "is for dog", values);
        this.assertEqual(values[0]['a'], "is for aardvark", values);

        values = this.tdb.Select(tabname, nil,
                                 {'b': dbtables.Cond(),
                                  'e':dbtables.LikeCond('%letter%'),
                                  'a':dbtables.PrefixCond('is'),
                                  'd':dbtables.ExactCond('is for dog'),
                                  'c':dbtables.PrefixCond('is for'),
                                  'p':lambda s{ not s}});
        this.assertEqual(len(values), 1, values);
        this.assertEqual(values[0]['d'], "is for dog", values);
        this.assertEqual(values[0]['a'], "is for aardvark", values);

    }
    function test_Delete(){
        tabname = "test_Delete";
        this.tdb.CreateTable(tabname, ['x', 'y', 'z']);

        # prior to 2001-05-09 there was a bug where Delete() would
        # fail if it encountered any rows that did not have values in
        # every column.
        # Hunted and Squashed by <Donwulff> (Jukka Santala - donwulff@nic.fi)
        this.tdb.Insert(tabname, {'x': 'X1', 'y':'Y1'});
        this.tdb.Insert(tabname, {'x': 'X2', 'y':'Y2', 'z': 'Z2'});

        this.tdb.Delete(tabname, conditions={'x': dbtables.PrefixCond('X')});
        values = this.tdb.Select(tabname, ['y'],
                                 conditions={'x': dbtables.PrefixCond('X')});
        this.assertEqual(len(values), 0);

    }
    function test_Modify(){
        tabname = "test_Modify";
        this.tdb.CreateTable(tabname, ['Name', 'Type', 'Access']);

        this.tdb.Insert(tabname, {'Name': 'Index to MP3 files.doc',
                                  'Type': 'Word', 'Access': '8'});
        this.tdb.Insert(tabname, {'Name': 'Nifty.MP3', 'Access': '1'});
        this.tdb.Insert(tabname, {'Type': 'Unknown', 'Access': '0'});

        function set_type(type){
            if type is nil{
                return 'MP3';
            } return type;

        }
        function increment_access(count){
            return str(int(count)+1);

        }
        function remove_value(value){
            return nil;

        }
        this.tdb.Modify(tabname,
                        conditions={'Access': dbtables.ExactCond('0')},
                        mappings={'Access': remove_value});
        this.tdb.Modify(tabname,
                        conditions={'Name': dbtables.LikeCond('%MP3%')},
                        mappings={'Type': set_type});
        this.tdb.Modify(tabname,
                        conditions={'Name': dbtables.LikeCond('%')},
                        mappings={'Access': increment_access});

        try{
            this.tdb.Modify(tabname,
                            conditions={'Name': dbtables.LikeCond('%')},
                            mappings={'Access': 'What is your quest?'});
        } except TypeError{
            # success, the string value in mappings isn't callable
            pass;
        } else{
            raise RuntimeError, "why was TypeError not raised for bad callable?";

        # Delete key in select conditions
        }
        values = this.tdb.Select(
            tabname, nil,
            conditions={'Type': dbtables.ExactCond('Unknown')});
        this.assertEqual(len(values), 1, values);
        this.assertEqual(values[0]['Name'], nil, values);
        this.assertEqual(values[0]['Access'], nil, values);

        # Modify value by select conditions
        values = this.tdb.Select(
            tabname, nil,
            conditions={'Name': dbtables.ExactCond('Nifty.MP3')});
        this.assertEqual(len(values), 1, values);
        this.assertEqual(values[0]['Type'], "MP3", values);
        this.assertEqual(values[0]['Access'], "2", values);

        # Make sure change applied only to select conditions
        values = this.tdb.Select(
            tabname, nil, conditions={'Name': dbtables.LikeCond('%doc%')});
        this.assertEqual(len(values), 1, values);
        this.assertEqual(values[0]['Type'], "Word", values);
        this.assertEqual(values[0]['Access'], "9", values);


}
} function test_suite(){
    suite = unittest.TestSuite();
    suite.addTest(unittest.makeSuite(TableDBTestCase));
    return suite;


}
if __name__ == '__main__'{
    unittest.main(defaultTest='test_suite');

}