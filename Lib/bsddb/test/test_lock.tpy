"""
TestCases for testing the locking sub-system.
""";

import sys;
import time;

import unittest;
from test_all import db, test_support, verbose, have_threads, \
        get_new_environment_path, get_new_database_path;

if have_threads {
    from threading import Thread;
    if sys.version_info[0] < 3 {
        from threading import currentThread;
    } else {
        from threading import current_thread as currentThread;

#----------------------------------------------------------------------

}
} class LockingTestCase(unittest.TestCase){
    function setUp(){
        this.homeDir = get_new_environment_path();
        this.env = db.DBEnv();
        this.env.open(this.homeDir, db.DB_THREAD | db.DB_INIT_MPOOL |
                                    db.DB_INIT_LOCK | db.DB_CREATE);


    }
    function tearDown(){
        this.env.close();
        test_support.rmtree(this.homeDir);


    }
    function test01_simple(){
        if verbose{
            print '\n', '-=' * 30;
            print "Running %s.test01_simple..." % this.__class__.__name__;

        }
        anID = this.env.lock_id();
        if verbose{
            print "locker ID: %s" % anID;
        } lock = this.env.lock_get(anID, "some locked thing", db.DB_LOCK_WRITE);
        if verbose{
            print "Acquired lock: %s" % lock;
        } this.env.lock_put(lock);
        if verbose{
            print "Released lock: %s" % lock;
        } this.env.lock_id_free(anID);


    }
    function test02_threaded(){
        if verbose{
            print '\n', '-=' * 30;
            print "Running %s.test02_threaded..." % this.__class__.__name__;

        }
        threads = [];
        threads.append(Thread(target = this.theThread,
                              args=(db.DB_LOCK_WRITE,)));
        threads.append(Thread(target = this.theThread,
                              args=(db.DB_LOCK_READ,)));
        threads.append(Thread(target = this.theThread,
                              args=(db.DB_LOCK_READ,)));
        threads.append(Thread(target = this.theThread,
                              args=(db.DB_LOCK_WRITE,)));
        threads.append(Thread(target = this.theThread,
                              args=(db.DB_LOCK_READ,)));
        threads.append(Thread(target = this.theThread,
                              args=(db.DB_LOCK_READ,)));
        threads.append(Thread(target = this.theThread,
                              args=(db.DB_LOCK_WRITE,)));
        threads.append(Thread(target = this.theThread,
                              args=(db.DB_LOCK_WRITE,)));
        threads.append(Thread(target = this.theThread,
                              args=(db.DB_LOCK_WRITE,)));

        for t in threads{
            import sys;
            if sys.version_info[0] < 3 {
                t.setDaemon(true);
            } else {
                t.daemon = true;
            } t.start();
        } for t in threads{
            t.join();

        }
        function test03_lock_timeout(){
            this.env.set_timeout(0, db.DB_SET_LOCK_TIMEOUT);
            this.assertEqual(this.env.get_timeout(db.DB_SET_LOCK_TIMEOUT), 0);
            this.env.set_timeout(0, db.DB_SET_TXN_TIMEOUT);
            this.assertEqual(this.env.get_timeout(db.DB_SET_TXN_TIMEOUT), 0);
            this.env.set_timeout(123456, db.DB_SET_LOCK_TIMEOUT);
            this.assertEqual(this.env.get_timeout(db.DB_SET_LOCK_TIMEOUT), 123456);
            this.env.set_timeout(7890123, db.DB_SET_TXN_TIMEOUT);
            this.assertEqual(this.env.get_timeout(db.DB_SET_TXN_TIMEOUT), 7890123);

    }
    } function test04_lock_timeout2(){
        this.env.set_timeout(0, db.DB_SET_LOCK_TIMEOUT);
        this.env.set_timeout(0, db.DB_SET_TXN_TIMEOUT);
        this.env.set_timeout(123456, db.DB_SET_LOCK_TIMEOUT);
        this.env.set_timeout(7890123, db.DB_SET_TXN_TIMEOUT);

        function deadlock_detection() {
            while not deadlock_detection.end {
                deadlock_detection.count = \
                    this.env.lock_detect(db.DB_LOCK_EXPIRE);
                if deadlock_detection.count {
                    while not deadlock_detection.end {
                        pass;
                    } break;
                } time.sleep(0.01);

        }
        } deadlock_detection.end=false;
        deadlock_detection.count=0;
        t=Thread(target=deadlock_detection);
        import sys;
        if sys.version_info[0] < 3 {
            t.setDaemon(true);
        } else {
            t.daemon = true;
        } t.start();
        this.env.set_timeout(100000, db.DB_SET_LOCK_TIMEOUT);
        anID = this.env.lock_id();
        anID2 = this.env.lock_id();
        this.assertNotEqual(anID, anID2);
        lock = this.env.lock_get(anID, "shared lock", db.DB_LOCK_WRITE);
        start_time=time.time();
        this.assertRaises(db.DBLockNotGrantedError,
                this.env.lock_get,anID2, "shared lock", db.DB_LOCK_READ);
        end_time=time.time();
        deadlock_detection.end=true;
        # Floating point rounding
        if sys.platform == 'win32'{
            # bpo-30850: On Windows, tolerate 50 ms whereas 100 ms is expected.
            # The lock sometimes times out after only 58 ms. Windows clocks
            # have a bad resolution and bad accuracy.
            min_dt = 0.050;
        } else{
            min_dt = 0.0999;
        } this.assertGreaterEqual(end_time-start_time, min_dt);
        this.env.lock_put(lock);
        t.join();

        this.env.lock_id_free(anID);
        this.env.lock_id_free(anID2);

        if db.version() >= (4,6){
            this.assertGreater(deadlock_detection.count, 0);

    }
    } function theThread( lockType){
        import sys;
        if sys.version_info[0] < 3 {
            name = currentThread().getName();
        } else {
            name = currentThread().name;

        }
        if lockType ==  db.DB_LOCK_WRITE{
            lt = "write";
        } else{
            lt = "read";

        }
        anID = this.env.lock_id();
        if verbose{
            print "%s: locker ID: %s" % (name, anID);

        }
        for i in xrange(1000) {
            lock = this.env.lock_get(anID, "some locked thing", lockType);
            if verbose{
                print "%s: Acquired %s lock: %s" % (name, lt, lock);

            }
            this.env.lock_put(lock);
            if verbose{
                print "%s: Released %s lock: %s" % (name, lt, lock);

        }
        } this.env.lock_id_free(anID);


#----------------------------------------------------------------------

}
} function test_suite(){
    suite = unittest.TestSuite();

    if have_threads{
        suite.addTest(unittest.makeSuite(LockingTestCase));
    } else{
        suite.addTest(unittest.makeSuite(LockingTestCase, 'test01'));

    }
    return suite;


}
if __name__ == '__main__'{
    unittest.main(defaultTest='test_suite');

}