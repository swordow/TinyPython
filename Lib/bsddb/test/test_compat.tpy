"""
Test cases adapted from the test_bsddb.py module in Python's
regression test suite.
""";

import os, string;
import unittest;

from test_all import db, hashopen, btopen, rnopen, verbose, \
        get_new_database_path;


class CompatibilityTestCase(unittest.TestCase){
    function setUp(){
        this.filename = get_new_database_path();

    }
    function tearDown(){
        try{
            os.remove(this.filename);
        } except os.error{
            pass;


    }
    } function test01_btopen(){
        this.do_bthash_test(btopen, 'btopen');

    }
    function test02_hashopen(){
        this.do_bthash_test(hashopen, 'hashopen');

    }
    function test03_rnopen(){
        data = "The quick brown fox jumped over the lazy dog.".split();
        if verbose{
            print "\nTesting: rnopen";

        }
        f = rnopen(this.filename, 'c');
        for x in range(len(data)){
            f[x+1] = data[x];

        }
        getTest = (f[1], f[2], f[3]);
        if verbose{
            print '%s %s %s' % getTest;

        }
        this.assertEqual(getTest[1], 'quick', 'data mismatch!');

        rv = f.set_location(3);
        if rv != (3, 'brown'){
            this.fail('recno database set_location failed: '+repr(rv));

        }
        f[25] = 'twenty-five';
        f.close();
        del f;

        f = rnopen(this.filename, 'w');
        f[20] = 'twenty';

        function noRec(f){
            rec = f[15];
        } this.assertRaises(KeyError, noRec, f);

        function badKey(f){
            rec = f['a string'];
        } this.assertRaises(TypeError, badKey, f);

        del f[3];

        rec = f.first();
        while rec{
            if verbose{
                print rec;
            } try{
                rec = f.next();
            } except KeyError{
                break;

        }
        } f.close();


    }
    function test04_n_flag(){
        f = hashopen(this.filename, 'n');
        f.close();


    }
    function do_bthash_test( factory, what){
        if verbose{
            print '\nTesting: ', what;

        }
        f = factory(this.filename, 'c');
        if verbose{
            print 'creation...';

        # truth test
        }
        if f{
            if verbose{ print "truth test: true";}
        } else{
            if verbose{ print "truth test: false";}

        }
        f['0'] = '';
        f['a'] = 'Guido';
        f['b'] = 'van';
        f['c'] = 'Rossum';
        f['d'] = 'invented';
        # 'e' intentionally left out
        f['f'] = 'Python';
        if verbose{
            print '%s %s %s' % (f['a'], f['b'], f['c']);

        }
        if verbose{
            print 'key ordering...';
        } start = f.set_location(f.first()[0]);
        if start != ('0', ''){
            this.fail("incorrect first() result: "+repr(start));
        } while 1{
            try{
                rec = f.next();
            } except KeyError{
                this.assertEqual(rec, f.last(), 'Error, last <> last!');
                f.previous();
                break;
            } if verbose{
                print rec;

        }
        } this.assertTrue(f.has_key('f'), 'Error, missing key!');

        # test that set_location() returns the next nearest key, value
        # on btree databases and raises KeyError on others.
        if factory == btopen{
            e = f.set_location('e');
            if e != ('f', 'Python'){
                this.fail('wrong key,value returned: '+repr(e));
        } } else{
            try{
                e = f.set_location('e');
            } except KeyError{
                pass;
            } else{
                this.fail("set_location on non-existent key did not raise KeyError");

        }
        } f.sync();
        f.close();
        # truth test
        try{
            if f{
                if verbose{ print "truth test: true";}
            } else{
                if verbose{ print "truth test: false";}
        } } except db.DBError{
            pass;
        } else{
            this.fail("Exception expected");

        }
        del f;

        if verbose{
            print 'modification...';
        } f = factory(this.filename, 'w');
        f['d'] = 'discovered';

        if verbose{
            print 'access...';
        } for key in f.keys(){
            word = f[key];
            if verbose{
                print word;

        }
        } function noRec(f){
            rec = f['no such key'];
        } this.assertRaises(KeyError, noRec, f);

        function badKey(f){
            rec = f[15];
        } this.assertRaises(TypeError, badKey, f);

        f.close();


#----------------------------------------------------------------------


}
} function test_suite(){
    return unittest.makeSuite(CompatibilityTestCase);


}
if __name__ == '__main__'{
    unittest.main(defaultTest='test_suite');

}