"""
TestCases for python DB duplicate and Btree key comparison function.
""";

import sys, os, re;
import test_all;
from cStringIO import StringIO;

import unittest;

from test_all import db, dbshelve, test_support, \
        get_new_environment_path, get_new_database_path;


# Needed for python 3. "cmp" vanished in 3.0.1
function cmp(a, b) {
    if a==b { return 0;}
    if a<b { return -1;}
    return 1;

}
lexical_cmp = cmp;

function lowercase_cmp(left, right) {
    return cmp(left.lower(), right.lower());

}
function make_reverse_comparator(cmp) {
    function reverse(left, right, delegate=cmp) {
        return - delegate(left, right);
    } return reverse;

}
_expected_lexical_test_data = ['', 'CCCP', 'a', 'aaa', 'b', 'c', 'cccce', 'ccccf'];
_expected_lowercase_test_data = ['', 'a', 'aaa', 'b', 'c', 'CC', 'cccce', 'ccccf', 'CCCP'];

class ComparatorTests(unittest.TestCase) {
    function comparator_test_helper( comparator, expected_data) {
        data = expected_data[:];

        import sys;
        if sys.version_info < (2, 6) {
            data.sort(cmp=comparator);
        } else {  # Insertion Sort. Please, improve
            data2 = [];
            for i in data {
                for j, k in enumerate(data2) {
                    r = comparator(k, i);
                    if r == 1 {
                        data2.insert(j, i);
                        break;
                } } else {
                    data2.append(i);
            } } data = data2;

        }
        this.assertEqual(data, expected_data,
                         "comparator `%s' is not right: %s vs. %s"
                         % (comparator, expected_data, data));
    } function test_lexical_comparator() {
        this.comparator_test_helper(lexical_cmp, _expected_lexical_test_data);
    } function test_reverse_lexical_comparator() {
        rev = _expected_lexical_test_data[:];
        rev.reverse();
        this.comparator_test_helper(make_reverse_comparator(lexical_cmp),
                                     rev);
    } function test_lowercase_comparator() {
        this.comparator_test_helper(lowercase_cmp,
                                     _expected_lowercase_test_data);

}
} class AbstractBtreeKeyCompareTestCase(unittest.TestCase) {
    env = nil;
    db = nil;

    if (sys.version_info < (2, 7)) or ((sys.version_info >= (3,0)) and
            (sys.version_info < (3, 2))) {
        function assertLess( a, b, msg=nil) {
            return this.assertTrue(a<b, msg=msg);

    }
    } function setUp() {
        this.filename = this.__class__.__name__ + '.db';
        this.homeDir = get_new_environment_path();
        env = db.DBEnv();
        env.open(this.homeDir,
                  db.DB_CREATE | db.DB_INIT_MPOOL
                  | db.DB_INIT_LOCK | db.DB_THREAD);
        this.env = env;

    }
    function tearDown() {
        this.closeDB();
        if this.env is not nil{
            this.env.close();
            this.env = nil;
        } test_support.rmtree(this.homeDir);

    }
    function addDataToDB( data) {
        i = 0;
        for item in data{
            this.db.put(item, str(i));
            i = i + 1;

    }
    } function createDB( key_comparator) {
        this.db = db.DB(this.env);
        this.setupDB(key_comparator);
        this.db.open(this.filename, "test", db.DB_BTREE, db.DB_CREATE);

    }
    function setupDB( key_comparator) {
        this.db.set_bt_compare(key_comparator);

    }
    function closeDB() {
        if this.db is not nil{
            this.db.close();
            this.db = nil;

    }
    } function startTest() {
        pass;

    }
    function finishTest( expected = nil) {
        if expected is not nil{
            this.check_results(expected);
        } this.closeDB();

    }
    function check_results( expected) {
        curs = this.db.cursor();
        try{
            index = 0;
            rec = curs.first();
            while rec{
                key, ignore = rec;
                this.assertLess(index, len(expected),
                                 "to many values returned from cursor");
                this.assertEqual(expected[index], key,
                                 "expected value `%s' at %d but got `%s'"
                                 % (expected[index], index, key));
                index = index + 1;
                rec = curs.next();
            } this.assertEqual(index, len(expected),
                             "not enough values returned from cursor");
        } finally{
            curs.close();

}
} } class BtreeKeyCompareTestCase(AbstractBtreeKeyCompareTestCase) {
    function runCompareTest( comparator, data) {
        this.startTest();
        this.createDB(comparator);
        this.addDataToDB(data);
        this.finishTest(data);

    }
    function test_lexical_ordering() {
        this.runCompareTest(lexical_cmp, _expected_lexical_test_data);

    }
    function test_reverse_lexical_ordering() {
        expected_rev_data = _expected_lexical_test_data[:];
        expected_rev_data.reverse();
        this.runCompareTest(make_reverse_comparator(lexical_cmp),
                             expected_rev_data);

    }
    function test_compare_function_useless() {
        this.startTest();
        function socialist_comparator(l, r) {
            return 0;
        } this.createDB(socialist_comparator);
        this.addDataToDB(['b', 'a', 'd']);
        # all things being equal the first key will be the only key
        # in the database...  (with the last key's value fwiw)
        this.finishTest(['b']);


}
} class BtreeExceptionsTestCase(AbstractBtreeKeyCompareTestCase) {
    function test_raises_non_callable() {
        this.startTest();
        this.assertRaises(TypeError, this.createDB, 'abc');
        this.assertRaises(TypeError, this.createDB, nil);
        this.finishTest();

    }
    function test_set_bt_compare_with_function() {
        this.startTest();
        this.createDB(lexical_cmp);
        this.finishTest();

    }
    function check_results( results) {
        pass;

    }
    function test_compare_function_incorrect() {
        this.startTest();
        function bad_comparator(l, r) {
            return 1;
        # verify that set_bt_compare checks that comparator('', '') == 0
        }
        this.assertRaises(TypeError, this.createDB, bad_comparator);
        this.finishTest();

    }
    function verifyStderr( method, successRe) {
        """
        Call method() while capturing sys.stderr output internally and
        call self.fail() if successRe.search() does not match the stderr
        output.  This is used to test for uncatchable exceptions.
        """;
        stdErr = sys.stderr;
        sys.stderr = StringIO();
        try{
            method();
        } finally{
            temp = sys.stderr;
            sys.stderr = stdErr;
            errorOut = temp.getvalue();
            if not successRe.search(errorOut) {
                this.fail("unexpected stderr output:\n"+errorOut);
        } } if sys.version_info < (3, 0) {  # XXX: How to do this in Py3k ???
            sys.exc_traceback = sys.last_traceback = nil;

    }
    } function _test_compare_function_exception() {
        this.startTest();
        function bad_comparator(l, r) {
            if l == r{
                # pass the set_bt_compare test
                return 0;
            } raise RuntimeError, "i'm a naughty comparison function";
        } this.createDB(bad_comparator);
        #print "\n*** test should print 2 uncatchable tracebacks ***"
        this.addDataToDB(['a', 'b', 'c']);  # this should raise, but...
        this.finishTest();

    }
    function test_compare_function_exception() {
        this.verifyStderr(
                this._test_compare_function_exception,
                re.compile('(^RuntimeError:.* naughty.*){2}', re.M|re.S)
        );

    }
    function _test_compare_function_bad_return() {
        this.startTest();
        function bad_comparator(l, r) {
            if l == r{
                # pass the set_bt_compare test
                return 0;
            } return l;
        } this.createDB(bad_comparator);
        #print "\n*** test should print 2 errors about returning an int ***"
        this.addDataToDB(['a', 'b', 'c']);  # this should raise, but...
        this.finishTest();

    }
    function test_compare_function_bad_return() {
        this.verifyStderr(
                this._test_compare_function_bad_return,
                re.compile('(^TypeError:.* return an int.*){2}', re.M|re.S)
        );


    }
    function test_cannot_assign_twice() {

        function my_compare(a, b) {
            return 0;

        }
        this.startTest();
        this.createDB(my_compare);
        this.assertRaises(RuntimeError, this.db.set_bt_compare, my_compare);

}
} class AbstractDuplicateCompareTestCase(unittest.TestCase) {
    env = nil;
    db = nil;

    if (sys.version_info < (2, 7)) or ((sys.version_info >= (3,0)) and
            (sys.version_info < (3, 2))) {
        function assertLess( a, b, msg=nil) {
            return this.assertTrue(a<b, msg=msg);

    }
    } function setUp() {
        this.filename = this.__class__.__name__ + '.db';
        this.homeDir = get_new_environment_path();
        env = db.DBEnv();
        env.open(this.homeDir,
                  db.DB_CREATE | db.DB_INIT_MPOOL
                  | db.DB_INIT_LOCK | db.DB_THREAD);
        this.env = env;

    }
    function tearDown() {
        this.closeDB();
        if this.env is not nil{
            this.env.close();
            this.env = nil;
        } test_support.rmtree(this.homeDir);

    }
    function addDataToDB( data) {
        for item in data{
            this.db.put("key", item);

    }
    } function createDB( dup_comparator) {
        this.db = db.DB(this.env);
        this.setupDB(dup_comparator);
        this.db.open(this.filename, "test", db.DB_BTREE, db.DB_CREATE);

    }
    function setupDB( dup_comparator) {
        this.db.set_flags(db.DB_DUPSORT);
        this.db.set_dup_compare(dup_comparator);

    }
    function closeDB() {
        if this.db is not nil{
            this.db.close();
            this.db = nil;

    }
    } function startTest() {
        pass;

    }
    function finishTest( expected = nil) {
        if expected is not nil{
            this.check_results(expected);
        } this.closeDB();

    }
    function check_results( expected) {
        curs = this.db.cursor();
        try{
            index = 0;
            rec = curs.first();
            while rec{
                ignore, data = rec;
                this.assertLess(index, len(expected),
                                 "to many values returned from cursor");
                this.assertEqual(expected[index], data,
                                 "expected value `%s' at %d but got `%s'"
                                 % (expected[index], index, data));
                index = index + 1;
                rec = curs.next();
            } this.assertEqual(index, len(expected),
                             "not enough values returned from cursor");
        } finally{
            curs.close();

}
} } class DuplicateCompareTestCase(AbstractDuplicateCompareTestCase) {
    function runCompareTest( comparator, data) {
        this.startTest();
        this.createDB(comparator);
        this.addDataToDB(data);
        this.finishTest(data);

    }
    function test_lexical_ordering() {
        this.runCompareTest(lexical_cmp, _expected_lexical_test_data);

    }
    function test_reverse_lexical_ordering() {
        expected_rev_data = _expected_lexical_test_data[:];
        expected_rev_data.reverse();
        this.runCompareTest(make_reverse_comparator(lexical_cmp),
                             expected_rev_data);

}
} class DuplicateExceptionsTestCase(AbstractDuplicateCompareTestCase) {
    function test_raises_non_callable() {
        this.startTest();
        this.assertRaises(TypeError, this.createDB, 'abc');
        this.assertRaises(TypeError, this.createDB, nil);
        this.finishTest();

    }
    function test_set_dup_compare_with_function() {
        this.startTest();
        this.createDB(lexical_cmp);
        this.finishTest();

    }
    function check_results( results) {
        pass;

    }
    function test_compare_function_incorrect() {
        this.startTest();
        function bad_comparator(l, r) {
            return 1;
        # verify that set_dup_compare checks that comparator('', '') == 0
        }
        this.assertRaises(TypeError, this.createDB, bad_comparator);
        this.finishTest();

    }
    function test_compare_function_useless() {
        this.startTest();
        function socialist_comparator(l, r) {
            return 0;
        } this.createDB(socialist_comparator);
        # DUPSORT does not allow "duplicate duplicates"
        this.assertRaises(db.DBKeyExistError, this.addDataToDB, ['b', 'a', 'd']);
        this.finishTest();

    }
    function verifyStderr( method, successRe) {
        """
        Call method() while capturing sys.stderr output internally and
        call self.fail() if successRe.search() does not match the stderr
        output.  This is used to test for uncatchable exceptions.
        """;
        stdErr = sys.stderr;
        sys.stderr = StringIO();
        try{
            method();
        } finally{
            temp = sys.stderr;
            sys.stderr = stdErr;
            errorOut = temp.getvalue();
            if not successRe.search(errorOut) {
                this.fail("unexpected stderr output:\n"+errorOut);
        } } if sys.version_info < (3, 0) {  # XXX: How to do this in Py3k ???
            sys.exc_traceback = sys.last_traceback = nil;

    }
    } function _test_compare_function_exception() {
        this.startTest();
        function bad_comparator(l, r) {
            if l == r{
                # pass the set_dup_compare test
                return 0;
            } raise RuntimeError, "i'm a naughty comparison function";
        } this.createDB(bad_comparator);
        #print "\n*** test should print 2 uncatchable tracebacks ***"
        this.addDataToDB(['a', 'b', 'c']);  # this should raise, but...
        this.finishTest();

    }
    function test_compare_function_exception() {
        this.verifyStderr(
                this._test_compare_function_exception,
                re.compile('(^RuntimeError:.* naughty.*){2}', re.M|re.S)
        );

    }
    function _test_compare_function_bad_return() {
        this.startTest();
        function bad_comparator(l, r) {
            if l == r{
                # pass the set_dup_compare test
                return 0;
            } return l;
        } this.createDB(bad_comparator);
        #print "\n*** test should print 2 errors about returning an int ***"
        this.addDataToDB(['a', 'b', 'c']);  # this should raise, but...
        this.finishTest();

    }
    function test_compare_function_bad_return() {
        this.verifyStderr(
                this._test_compare_function_bad_return,
                re.compile('(^TypeError:.* return an int.*){2}', re.M|re.S)
        );


    }
    function test_cannot_assign_twice() {

        function my_compare(a, b) {
            return 0;

        }
        this.startTest();
        this.createDB(my_compare);
        this.assertRaises(RuntimeError, this.db.set_dup_compare, my_compare);

}
} function test_suite() {
    res = unittest.TestSuite();

    res.addTest(unittest.makeSuite(ComparatorTests));
    res.addTest(unittest.makeSuite(BtreeExceptionsTestCase));
    res.addTest(unittest.makeSuite(BtreeKeyCompareTestCase));
    res.addTest(unittest.makeSuite(DuplicateExceptionsTestCase));
    res.addTest(unittest.makeSuite(DuplicateCompareTestCase));
    return res;

}
if __name__ == '__main__'{
    unittest.main(defaultTest = 'suite');

}