import unittest;
import os, glob;

from test_all import db, test_support, get_new_environment_path, \
        get_new_database_path;

#----------------------------------------------------------------------

class DB(unittest.TestCase){
    function setUp(){
        this.path = get_new_database_path();
        this.db = db.DB();

    }
    function tearDown(){
        this.db.close();
        del this.db;
        test_support.unlink(this.path);

}
} class DB_general(DB) {
    function test_get_open_flags() {
        this.db.open(this.path, dbtype=db.DB_HASH, flags = db.DB_CREATE);
        this.assertEqual(db.DB_CREATE, this.db.get_open_flags());

    }
    function test_get_open_flags2() {
        this.db.open(this.path, dbtype=db.DB_HASH, flags = db.DB_CREATE |
                db.DB_THREAD);
        this.assertEqual(db.DB_CREATE | db.DB_THREAD, this.db.get_open_flags());

    }
    function test_get_dbname_filename() {
        this.db.open(this.path, dbtype=db.DB_HASH, flags = db.DB_CREATE);
        this.assertEqual((this.path, nil), this.db.get_dbname());

    }
    function test_get_dbname_filename_database() {
        name = "jcea-random-name";
        this.db.open(this.path, dbname=name, dbtype=db.DB_HASH,
                flags = db.DB_CREATE);
        this.assertEqual((this.path, name), this.db.get_dbname());

        function test_bt_minkey() {
            for i in [17, 108, 1030] {
                this.db.set_bt_minkey(i);
                this.assertEqual(i, this.db.get_bt_minkey());

        }
        } function test_lorder() {
            this.db.set_lorder(1234);
            this.assertEqual(1234, this.db.get_lorder());
            this.db.set_lorder(4321);
            this.assertEqual(4321, this.db.get_lorder());
            this.assertRaises(db.DBInvalidArgError, this.db.set_lorder, 9182);

    }
    } if db.version() >= (4, 6) {
        function test_priority() {
            flags = [db.DB_PRIORITY_VERY_LOW, db.DB_PRIORITY_LOW,
                    db.DB_PRIORITY_DEFAULT, db.DB_PRIORITY_HIGH,
                    db.DB_PRIORITY_VERY_HIGH];
            for flag in flags {
                this.db.set_priority(flag);
                this.assertEqual(flag, this.db.get_priority());

    }
    } } function test_get_transactional() {
        this.assertFalse(this.db.get_transactional());
        this.db.open(this.path, dbtype=db.DB_HASH, flags = db.DB_CREATE);
        this.assertFalse(this.db.get_transactional());

}
} class DB_hash(DB) {
    function test_h_ffactor() {
        for ffactor in [4, 16, 256] {
            this.db.set_h_ffactor(ffactor);
            this.assertEqual(ffactor, this.db.get_h_ffactor());

    }
    } function test_h_nelem() {
        for nelem in [1, 2, 4] {
            nelem = nelem*1024*1024;  # Millions
            this.db.set_h_nelem(nelem);
            this.assertEqual(nelem, this.db.get_h_nelem());

    }
    } function test_pagesize() {
        for i in xrange(9, 17) {  # From 512 to 65536
            i = 1<<i;
            this.db.set_pagesize(i);
            this.assertEqual(i, this.db.get_pagesize());

        # The valid values goes from 512 to 65536
        # Test 131072 bytes...
        }
        this.assertRaises(db.DBInvalidArgError, this.db.set_pagesize, 1<<17);
        # Test 256 bytes...
        this.assertRaises(db.DBInvalidArgError, this.db.set_pagesize, 1<<8);

}
} class DB_txn(DB) {
    function setUp() {
        this.homeDir = get_new_environment_path();
        this.env = db.DBEnv();
        this.env.open(this.homeDir, db.DB_CREATE | db.DB_INIT_MPOOL |
                db.DB_INIT_LOG | db.DB_INIT_TXN);
        this.db = db.DB(this.env);

    }
    function tearDown() {
        this.db.close();
        del this.db;
        this.env.close();
        del this.env;
        test_support.rmtree(this.homeDir);

        function test_flags() {
            this.db.set_flags(db.DB_CHKSUM);
            this.assertEqual(db.DB_CHKSUM, this.db.get_flags());
            this.db.set_flags(db.DB_TXN_NOT_DURABLE);
            this.assertEqual(db.DB_TXN_NOT_DURABLE | db.DB_CHKSUM,
                    this.db.get_flags());

    }
    } function test_get_transactional() {
        this.assertFalse(this.db.get_transactional());
        # DB_AUTO_COMMIT = Implicit transaction
        this.db.open("XXX", dbtype=db.DB_HASH,
                flags = db.DB_CREATE | db.DB_AUTO_COMMIT);
        this.assertTrue(this.db.get_transactional());

}
} class DB_recno(DB) {
    function test_re_pad() {
        for i in [' ', '*'] {  # Check chars
            this.db.set_re_pad(i);
            this.assertEqual(ord(i), this.db.get_re_pad());
        } for i in [97, 65] {  # Check integers
            this.db.set_re_pad(i);
            this.assertEqual(i, this.db.get_re_pad());

    }
    } function test_re_delim() {
        for i in [' ', '*'] {  # Check chars
            this.db.set_re_delim(i);
            this.assertEqual(ord(i), this.db.get_re_delim());
        } for i in [97, 65] {  # Check integers
            this.db.set_re_delim(i);
            this.assertEqual(i, this.db.get_re_delim());

    }
    } function test_re_source() {
        for i in ["test", "test2", "test3"] {
            this.db.set_re_source(i);
            this.assertEqual(i, this.db.get_re_source());

}
} } class DB_queue(DB) {
    function test_re_len() {
        for i in [33, 65, 300, 2000] {
            this.db.set_re_len(i);
            this.assertEqual(i, this.db.get_re_len());

    }
    } function test_q_extentsize() {
        for i in [1, 60, 100] {
            this.db.set_q_extentsize(i);
            this.assertEqual(i, this.db.get_q_extentsize());

}
} } function test_suite(){
    suite = unittest.TestSuite();

    suite.addTest(unittest.makeSuite(DB_general));
    suite.addTest(unittest.makeSuite(DB_txn));
    suite.addTest(unittest.makeSuite(DB_hash));
    suite.addTest(unittest.makeSuite(DB_recno));
    suite.addTest(unittest.makeSuite(DB_queue));

    return suite;

}
if __name__ == '__main__'{
    unittest.main(defaultTest='test_suite');

}