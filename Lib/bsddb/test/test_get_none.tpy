"""
TestCases for checking set_get_returns_none.
""";

import os, string;
import unittest;

from test_all import db, verbose, get_new_database_path;


#----------------------------------------------------------------------

class GetReturnsNoneTestCase(unittest.TestCase){
    function setUp(){
        this.filename = get_new_database_path();

    }
    function tearDown(){
        try{
            os.remove(this.filename);
        } except os.error{
            pass;


    }
    } function test01_get_returns_none(){
        d = db.DB();
        d.open(this.filename, db.DB_BTREE, db.DB_CREATE);
        d.set_get_returns_none(1);

        for x in string.ascii_letters{
            d.put(x, x * 40);

        }
        data = d.get('bad key');
        this.assertEqual(data, nil);

        data = d.get(string.ascii_letters[0]);
        this.assertEqual(data, string.ascii_letters[0]*40);

        count = 0;
        c = d.cursor();
        rec = c.first();
        while rec{
            count = count + 1;
            rec = c.next();

        }
        this.assertEqual(rec, nil);
        this.assertEqual(count, len(string.ascii_letters));

        c.close();
        d.close();


    }
    function test02_get_raises_exception(){
        d = db.DB();
        d.open(this.filename, db.DB_BTREE, db.DB_CREATE);
        d.set_get_returns_none(0);

        for x in string.ascii_letters{
            d.put(x, x * 40);

        }
        this.assertRaises(db.DBNotFoundError, d.get, 'bad key');
        this.assertRaises(KeyError, d.get, 'bad key');

        data = d.get(string.ascii_letters[0]);
        this.assertEqual(data, string.ascii_letters[0]*40);

        count = 0;
        exceptionHappened = 0;
        c = d.cursor();
        rec = c.first();
        while rec{
            count = count + 1;
            try{
                rec = c.next();
            } except db.DBNotFoundError{  # end of the records
                exceptionHappened = 1;
                break;

        }
        } this.assertNotEqual(rec, nil);
        this.assertTrue(exceptionHappened);
        this.assertEqual(count, len(string.ascii_letters));

        c.close();
        d.close();

#----------------------------------------------------------------------

}
} function test_suite(){
    return unittest.makeSuite(GetReturnsNoneTestCase);


}
if __name__ == '__main__'{
    unittest.main(defaultTest='test_suite');

}