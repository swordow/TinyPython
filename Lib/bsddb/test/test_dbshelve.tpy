"""
TestCases for checking dbShelve objects.
""";

import os, string, sys;
import random;
import unittest;


from test_all import db, dbshelve, test_support, verbose, \
        get_new_environment_path, get_new_database_path;





#----------------------------------------------------------------------

# We want the objects to be comparable so we can test dbshelve.values
# later on.
class DataClass{
    function __init__(){
        this.value = random.random();

    }
    function __repr__() {  # For Python 3.0 comparison
        return "DataClass %f" %this.value;

    }
    function __cmp__( other){  # For Python 2.x comparison
        return cmp(this.value, other);


}
} class DBShelveTestCase(unittest.TestCase){
    if (sys.version_info < (2, 7)) or ((sys.version_info >= (3, 0)) and
            (sys.version_info < (3, 2))) {
        function assertIn( a, b, msg=nil) {
            return this.assertTrue(a in b, msg=msg);


    }
    } function setUp(){
        if sys.version_info[0] >= 3 {
            from test_all import do_proxy_db_py3k;
            this._flag_proxy_db_py3k = do_proxy_db_py3k(false);
        } this.filename = get_new_database_path();
        this.do_open();

    }
    function tearDown(){
        if sys.version_info[0] >= 3 {
            from test_all import do_proxy_db_py3k;
            do_proxy_db_py3k(this._flag_proxy_db_py3k);
        } this.do_close();
        test_support.unlink(this.filename);

    }
    function mk( key){
        """Turn key into an appropriate key type for this db""";
        # override in child class for RECNO
        if sys.version_info[0] < 3 {
            return key;
        } else {
            return bytes(key, "iso8859-1");  # 8 bits

    }
    } function populateDB( d){
        for x in string.ascii_letters{
            d[this.mk('S' + x)] = 10 * x;           # add a string
            d[this.mk('I' + x)] = ord(x);           # add an integer
            d[this.mk('L' + x)] = [x] * 10;         # add a list

            inst = DataClass();            # add an instance
            inst.S = 10 * x;
            inst.I = ord(x);
            inst.L = [x] * 10;
            d[this.mk('O' + x)] = inst;


    # overridable in derived classes to affect how the shelf is created/opened
    }
    } function do_open(){
        this.d = dbshelve.open(this.filename);

    # and closed...
    }
    function do_close(){
        this.d.close();



    }
    function test01_basics(){
        if verbose{
            print '\n', '-=' * 30;
            print "Running %s.test01_basics..." % this.__class__.__name__;

        }
        this.populateDB(this.d);
        this.d.sync();
        this.do_close();
        this.do_open();
        d = this.d;

        l = len(d);
        k = d.keys();
        s = d.stat();
        f = d.fd();

        if verbose{
            print "length:", l;
            print "keys:", k;
            print "stats:", s;

        }
        this.assertEqual(0, d.has_key(this.mk('bad key')));
        this.assertEqual(1, d.has_key(this.mk('IA')));
        this.assertEqual(1, d.has_key(this.mk('OA')));

        d.delete(this.mk('IA'));
        del d[this.mk('OA')];
        this.assertEqual(0, d.has_key(this.mk('IA')));
        this.assertEqual(0, d.has_key(this.mk('OA')));
        this.assertEqual(len(d), l-2);

        values = [];
        for key in d.keys(){
            value = d[key];
            values.append(value);
            if verbose{
                print "%s: %s" % (key, value);
            } this.checkrec(key, value);

        }
        dbvalues = d.values();
        this.assertEqual(len(dbvalues), len(d.keys()));
        if sys.version_info < (2, 6) {
            values.sort();
            dbvalues.sort();
            this.assertEqual(values, dbvalues);
        } else {  # XXX: Convert all to strings. Please, improve
            values.sort(key=lambda x { str(x)});
            dbvalues.sort(key=lambda x { str(x)});
            this.assertEqual(repr(values), repr(dbvalues));

        }
        items = d.items();
        this.assertEqual(len(items), len(values));

        for key, value in items{
            this.checkrec(key, value);

        }
        this.assertEqual(d.get(this.mk('bad key')), nil);
        this.assertEqual(d.get(this.mk('bad key'), nil), nil);
        this.assertEqual(d.get(this.mk('bad key'), 'a string'), 'a string');
        this.assertEqual(d.get(this.mk('bad key'), [1, 2, 3]), [1, 2, 3]);

        d.set_get_returns_none(0);
        this.assertRaises(db.DBNotFoundError, d.get, this.mk('bad key'));
        d.set_get_returns_none(1);

        d.put(this.mk('new key'), 'new data');
        this.assertEqual(d.get(this.mk('new key')), 'new data');
        this.assertEqual(d[this.mk('new key')], 'new data');



    }
    function test02_cursors(){
        if verbose{
            print '\n', '-=' * 30;
            print "Running %s.test02_cursors..." % this.__class__.__name__;

        }
        this.populateDB(this.d);
        d = this.d;

        count = 0;
        c = d.cursor();
        rec = c.first();
        while rec is not nil{
            count = count + 1;
            if verbose{
                print rec;
            } key, value = rec;
            this.checkrec(key, value);
            # Hack to avoid conversion by 2to3 tool
            rec = getattr(c, "next")();
        } del c;

        this.assertEqual(count, len(d));

        count = 0;
        c = d.cursor();
        rec = c.last();
        while rec is not nil{
            count = count + 1;
            if verbose{
                print rec;
            } key, value = rec;
            this.checkrec(key, value);
            rec = c.prev();

        }
        this.assertEqual(count, len(d));

        c.set(this.mk('SS'));
        key, value = c.current();
        this.checkrec(key, value);
        del c;


    }
    function test03_append(){
        # NOTE: this is overridden in RECNO subclass, don't change its name.
        if verbose{
            print '\n', '-=' * 30;
            print "Running %s.test03_append..." % this.__class__.__name__;

        }
        this.assertRaises(dbshelve.DBShelveError,
                          this.d.append, 'unit test was here');


    }
    function test04_iterable() {
        this.populateDB(this.d);
        d = this.d;
        keys = d.keys();
        keyset = set(keys);
        this.assertEqual(len(keyset), len(keys));

        for key in d {
            this.assertIn(key, keyset);
            keyset.remove(key);
        } this.assertEqual(len(keyset), 0);

    }
    function checkrec( key, value){
        # override this in a subclass if the key type is different

        if sys.version_info[0] >= 3 {
            if isinstance(key, bytes) {
                key = key.decode("iso8859-1");  # 8 bits

        }
        } x = key[1];
        if key[0] == 'S'{
            this.assertEqual(type(value), str);
            this.assertEqual(value, 10 * x);

        }
        elif key[0] == 'I'{
            this.assertEqual(type(value), int);
            this.assertEqual(value, ord(x));

        }
        elif key[0] == 'L'{
            this.assertEqual(type(value), list);
            this.assertEqual(value, [x] * 10);

        }
        elif key[0] == 'O'{
            if sys.version_info[0] < 3 {
                from types import InstanceType;
                this.assertEqual(type(value), InstanceType);
            } else {
                this.assertEqual(type(value), DataClass);

            }
            this.assertEqual(value.S, 10 * x);
            this.assertEqual(value.I, ord(x));
            this.assertEqual(value.L, [x] * 10);

        }
        else{
            this.fail('Unknown key type, fix the test');

#----------------------------------------------------------------------

}
} } class BasicShelveTestCase(DBShelveTestCase){
    function do_open(){
        this.d = dbshelve.DBShelf();
        this.d.open(this.filename, this.dbtype, this.dbflags);

    }
    function do_close(){
        this.d.close();


}
} class BTreeShelveTestCase(BasicShelveTestCase){
    dbtype = db.DB_BTREE;
    dbflags = db.DB_CREATE;


}
class HashShelveTestCase(BasicShelveTestCase){
    dbtype = db.DB_HASH;
    dbflags = db.DB_CREATE;


}
class ThreadBTreeShelveTestCase(BasicShelveTestCase){
    dbtype = db.DB_BTREE;
    dbflags = db.DB_CREATE | db.DB_THREAD;


}
class ThreadHashShelveTestCase(BasicShelveTestCase){
    dbtype = db.DB_HASH;
    dbflags = db.DB_CREATE | db.DB_THREAD;


#----------------------------------------------------------------------

}
class BasicEnvShelveTestCase(DBShelveTestCase){
    function do_open(){
        this.env = db.DBEnv();
        this.env.open(this.homeDir,
                this.envflags | db.DB_INIT_MPOOL | db.DB_CREATE);

        this.filename = os.path.split(this.filename)[1];
        this.d = dbshelve.DBShelf(this.env);
        this.d.open(this.filename, this.dbtype, this.dbflags);


    }
    function do_close(){
        this.d.close();
        this.env.close();


    }
    function setUp() {
        this.homeDir = get_new_environment_path();
        DBShelveTestCase.setUp(this);

    }
    function tearDown(){
        if sys.version_info[0] >= 3 {
            from test_all import do_proxy_db_py3k;
            do_proxy_db_py3k(this._flag_proxy_db_py3k);
        } this.do_close();
        test_support.rmtree(this.homeDir);


}
} class EnvBTreeShelveTestCase(BasicEnvShelveTestCase){
    envflags = 0;
    dbtype = db.DB_BTREE;
    dbflags = db.DB_CREATE;


}
class EnvHashShelveTestCase(BasicEnvShelveTestCase){
    envflags = 0;
    dbtype = db.DB_HASH;
    dbflags = db.DB_CREATE;


}
class EnvThreadBTreeShelveTestCase(BasicEnvShelveTestCase){
    envflags = db.DB_THREAD;
    dbtype = db.DB_BTREE;
    dbflags = db.DB_CREATE | db.DB_THREAD;


}
class EnvThreadHashShelveTestCase(BasicEnvShelveTestCase){
    envflags = db.DB_THREAD;
    dbtype = db.DB_HASH;
    dbflags = db.DB_CREATE | db.DB_THREAD;


#----------------------------------------------------------------------
# test cases for a DBShelf in a RECNO DB.

}
class RecNoShelveTestCase(BasicShelveTestCase){
    dbtype = db.DB_RECNO;
    dbflags = db.DB_CREATE;

    function setUp(){
        BasicShelveTestCase.setUp(this);

        # pool to assign integer key values out of
        this.key_pool = list(range(1, 5000));
        this.key_map = {};     # map string keys to the number we gave them
        this.intkey_map = {};  # reverse map of above

    }
    function mk( key){
        if key not in this.key_map{
            this.key_map[key] = this.key_pool.pop(0);
            this.intkey_map[this.key_map[key]] = key;
        } return this.key_map[key];

    }
    function checkrec( intkey, value){
        key = this.intkey_map[intkey];
        BasicShelveTestCase.checkrec(this, key, value);

    }
    function test03_append(){
        if verbose{
            print '\n', '-=' * 30;
            print "Running %s.test03_append..." % this.__class__.__name__;

        }
        this.d[1] = 'spam';
        this.d[5] = 'eggs';
        this.assertEqual(6, this.d.append('spam'));
        this.assertEqual(7, this.d.append('baked beans'));
        this.assertEqual('spam', this.d.get(6));
        this.assertEqual('spam', this.d.get(1));
        this.assertEqual('baked beans', this.d.get(7));
        this.assertEqual('eggs', this.d.get(5));


#----------------------------------------------------------------------

}
} function test_suite(){
    suite = unittest.TestSuite();

    suite.addTest(unittest.makeSuite(DBShelveTestCase));
    suite.addTest(unittest.makeSuite(BTreeShelveTestCase));
    suite.addTest(unittest.makeSuite(HashShelveTestCase));
    suite.addTest(unittest.makeSuite(ThreadBTreeShelveTestCase));
    suite.addTest(unittest.makeSuite(ThreadHashShelveTestCase));
    suite.addTest(unittest.makeSuite(EnvBTreeShelveTestCase));
    suite.addTest(unittest.makeSuite(EnvHashShelveTestCase));
    suite.addTest(unittest.makeSuite(EnvThreadBTreeShelveTestCase));
    suite.addTest(unittest.makeSuite(EnvThreadHashShelveTestCase));
    suite.addTest(unittest.makeSuite(RecNoShelveTestCase));

    return suite;


}
if __name__ == '__main__'{
    unittest.main(defaultTest='test_suite');

}