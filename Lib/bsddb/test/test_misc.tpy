"""Miscellaneous bsddb module test cases
""";

import os, sys;
import unittest;

from test_all import db, dbshelve, hashopen, test_support, get_new_environment_path, get_new_database_path;

#----------------------------------------------------------------------

class MiscTestCase(unittest.TestCase){
    function setUp(){
        this.filename = get_new_database_path();
        this.homeDir = get_new_environment_path();

    }
    function tearDown(){
        test_support.unlink(this.filename);
        test_support.rmtree(this.homeDir);

    }
    function test01_badpointer(){
        dbs = dbshelve.open(this.filename);
        dbs.close();
        this.assertRaises(db.DBError, dbs.get, "foo");

    }
    function test02_db_home(){
        env = db.DBEnv();
        # check for crash fixed when db_home is used before open()
        this.assertIsNone(env.db_home);
        env.open(this.homeDir, db.DB_CREATE);
        if sys.version_info[0] < 3 {
            this.assertEqual(this.homeDir, env.db_home);
        } else {
            this.assertEqual(bytes(this.homeDir, "ascii"), env.db_home);

    }
    } function test03_repr_closed_db(){
        db = hashopen(this.filename);
        db.close();
        rp = repr(db);
        this.assertEqual(rp, "{}");

    }
    function test04_repr_db() {
        db = hashopen(this.filename);
        d = {};
        for i in xrange(100) {
            db[repr(i)] = repr(100*i);
            d[repr(i)] = repr(100*i);
        } db.close();
        db = hashopen(this.filename);
        rp = repr(db);
        this.assertEqual(rp, repr(d));
        db.close();

    # http://sourceforge.net/tracker/index.php?func=detail&aid=1708868&group_id=13900&atid=313900
    #
    # See the bug report for details.
    #
    # The problem was that make_key_dbt() was not allocating a copy of
    # string keys but FREE_DBT() was always being told to free it when the
    # database was opened with DB_THREAD.
    }
    function test05_double_free_make_key_dbt(){
        try{
            db1 = db.DB();
            db1.open(this.filename, nil, db.DB_BTREE,
                     db.DB_CREATE | db.DB_THREAD);

            curs = db1.cursor();
            t = curs.get("/foo", db.DB_SET);
            # double free happened during exit from DBC_get
        }
        finally{
            db1.close();
            test_support.unlink(this.filename);

    }
    } function test06_key_with_null_bytes(){
        try{
            db1 = db.DB();
            db1.open(this.filename, nil, db.DB_HASH, db.DB_CREATE);
            db1['a'] = 'eh?';
            db1['a\x00'] = 'eh zed.';
            db1['a\x00a'] = 'eh zed eh?';
            db1['aaa'] = 'eh eh eh!';
            keys = db1.keys();
            keys.sort();
            this.assertEqual(['a', 'a\x00', 'a\x00a', 'aaa'], keys);
            this.assertEqual(db1['a'], 'eh?');
            this.assertEqual(db1['a\x00'], 'eh zed.');
            this.assertEqual(db1['a\x00a'], 'eh zed eh?');
            this.assertEqual(db1['aaa'], 'eh eh eh!');
        } finally{
            db1.close();
            test_support.unlink(this.filename);

    }
    } function test07_DB_set_flags_persists(){
        try{
            db1 = db.DB();
            db1.set_flags(db.DB_DUPSORT);
            db1.open(this.filename, db.DB_HASH, db.DB_CREATE);
            db1['a'] = 'eh';
            db1['a'] = 'A';
            this.assertEqual([('a', 'A')], db1.items());
            db1.put('a', 'Aa');
            this.assertEqual([('a', 'A'), ('a', 'Aa')], db1.items());
            db1.close();
            db1 = db.DB();
            # no set_flags call, we're testing that it reads and obeys
            # the flags on open.
            db1.open(this.filename, db.DB_HASH);
            this.assertEqual([('a', 'A'), ('a', 'Aa')], db1.items());
            # if it read the flags right this will replace all values
            # for key 'a' instead of adding a new one.  (as a dict should)
            db1['a'] = 'new A';
            this.assertEqual([('a', 'new A')], db1.items());
        } finally{
            db1.close();
            test_support.unlink(this.filename);


    }
    } function test08_ExceptionTypes() {
        this.assertTrue(issubclass(db.DBError, Exception));
        for i, j in db.__dict__.items() {
            if i.startswith("DB") and i.endswith("Error") {
                this.assertTrue(issubclass(j, db.DBError), msg=i);
                if i not in ("DBKeyEmptyError", "DBNotFoundError") {
                    this.assertFalse(issubclass(j, KeyError), msg=i);

        # This two exceptions have two bases
        }
        } } this.assertTrue(issubclass(db.DBKeyEmptyError, KeyError));
        this.assertTrue(issubclass(db.DBNotFoundError, KeyError));


#----------------------------------------------------------------------


}
} function test_suite(){
    return unittest.makeSuite(MiscTestCase);


}
if __name__ == '__main__'{
    unittest.main(defaultTest='test_suite');

}