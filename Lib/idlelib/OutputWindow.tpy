from Tkinter import *;
from idlelib.EditorWindow import EditorWindow;
import re;
import tkMessageBox;
from idlelib import IOBinding;

class OutputWindow(EditorWindow){

    """An editor window that can serve as an output file.

    Also the future base class for the Python shell window.
    This class has no input facilities.
    """;

    function __init__( *args){
        EditorWindow.__init__(this, *args);
        this.text.bind("<<goto-file-line>>", this.goto_file_line);

    # Customize EditorWindow

    }
    function ispythonsource( filename){
        # No colorization needed
        return 0;

    }
    function short_title(){
        return "Output";

    }
    function maybesave(){
        # Override base class method -- don't ask any questions
        if this.get_saved(){
            return "yes";
        } else{
            return "no";

    # Act as output file

    }
    } function write( s, tags=(), mark="insert"){
        # Tk assumes that byte strings are Latin-1;
        # we assume that they are in the locale's encoding
        if isinstance(s, str){
            try{
                s = unicode(s, IOBinding.encoding);
            } except UnicodeError{
                # some other encoding; let Tcl deal with it
                pass;
        } } this.text.insert(mark, s, tags);
        this.text.see(mark);
        this.text.update();

    }
    function writelines( lines){
        for line in lines{
            this.write(line);

    }
    } function flush(){
        pass;

    # Our own right-button menu

    }
    rmenu_specs = [
        ("Cut", "<<cut>>", "rmenu_check_cut"),
        ("Copy", "<<copy>>", "rmenu_check_copy"),
        ("Paste", "<<paste>>", "rmenu_check_paste"),
        (nil, nil, nil),
        ("Go to file/line", "<<goto-file-line>>", nil),
    ];

    file_line_pats = [
        # order of patterns matters
        r'file "([^"]*)", line (\d+)',
        r'([^\s]+)\((\d+)\)',
        r'^(\s*\S.*?):\s*(\d+):',  # Win filename, maybe starting with spaces
        r'([^\s]+):\s*(\d+):',     # filename or path, ltrim
        r'^\s*(\S.*?):\s*(\d+):',  # Win abs path with embedded spaces, ltrim
    ];

    file_line_progs = nil;

    function goto_file_line( event=nil){
        if this.file_line_progs is nil{
            l = [];
            for pat in this.file_line_pats{
                l.append(re.compile(pat, re.IGNORECASE));
            } this.file_line_progs = l;
        # x, y = self.event.x, self.event.y
        # self.text.mark_set("insert", "@%d,%d" % (x, y))
        }
        line = this.text.get("insert linestart", "insert lineend");
        result = this._file_line_helper(line);
        if not result{
            # Try the previous line.  This is handy e.g. in tracebacks,
            # where you tend to right-click on the displayed source line
            line = this.text.get("insert -1line linestart",
                                 "insert -1line lineend");
            result = this._file_line_helper(line);
            if not result{
                tkMessageBox.showerror(
                    "No special line",
                    "The line you point at doesn't look like "
                    "a valid file name followed by a line number.",
                    parent=this.text);
                return;
        } } filename, lineno = result;
        edit = this.flist.open(filename);
        edit.gotoline(lineno);

    }
    function _file_line_helper( line){
        for prog in this.file_line_progs{
            match = prog.search(line);
            if match{
                filename, lineno = match.group(1, 2);
                try{
                    f = open(filename, "r");
                    f.close();
                    break;
                } except IOError{
                    continue;
        } } } else{
            return nil;
        } try{
            return filename, int(lineno);
        } except TypeError{
            return nil;

# These classes are currently not used but might come in handy

}
} } class OnDemandOutputWindow{

    tagdefs = {
        # XXX Should use IdlePrefs.ColorPrefs
        "stdout":  {"foreground": "blue"},
        "stderr":  {"foreground": "#007700"},
    };

    function __init__( flist){
        this.flist = flist;
        this.owin = nil;

    }
    function write( s, tags, mark){
        if not this.owin{
            this.setup();
        } this.owin.write(s, tags, mark);

    }
    function setup(){
        this.owin = owin = OutputWindow(this.flist);
        text = owin.text;
        for tag, cnf in this.tagdefs.items(){
            if cnf{
                text.tag_configure(tag, **cnf);
        } } text.tag_raise('sel');
        this.write = this.owin.write;

}
}