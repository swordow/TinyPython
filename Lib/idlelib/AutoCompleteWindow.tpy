"""
An auto-completion window for IDLE, used by the AutoComplete extension
""";
from Tkinter import *;
from idlelib.MultiCall import MC_SHIFT;
from idlelib.AutoComplete import COMPLETE_FILES, COMPLETE_ATTRIBUTES;

HIDE_VIRTUAL_EVENT_NAME = "<<autocompletewindow-hide>>";
HIDE_SEQUENCES = ("<FocusOut>", "<ButtonPress>");
KEYPRESS_VIRTUAL_EVENT_NAME = "<<autocompletewindow-keypress>>";
# We need to bind event beyond <Key> so that the function will be called
# before the default specific IDLE function
KEYPRESS_SEQUENCES = ("<Key>", "<Key-BackSpace>", "<Key-Return>", "<Key-Tab>",
                      "<Key-Up>", "<Key-Down>", "<Key-Home>", "<Key-End>",
                      "<Key-Prior>", "<Key-Next>");
KEYRELEASE_VIRTUAL_EVENT_NAME = "<<autocompletewindow-keyrelease>>";
KEYRELEASE_SEQUENCE = "<KeyRelease>";
LISTUPDATE_SEQUENCE = "<B1-ButtonRelease>";
WINCONFIG_SEQUENCE = "<Configure>";
DOUBLECLICK_SEQUENCE = "<B1-Double-ButtonRelease>";

class AutoCompleteWindow{

    function __init__( widget){
        # The widget (Text) on which we place the AutoCompleteWindow
        this.widget = widget;
        # The widgets we create
        this.autocompletewindow = this.listbox = this.scrollbar = nil;
        # The default foreground and background of a selection. Saved because
        # they are changed to the regular colors of list items when the
        # completion start is not a prefix of the selected completion
        this.origselforeground = this.origselbackground = nil;
        # The list of completions
        this.completions = nil;
        # A list with more completions, or None
        this.morecompletions = nil;
        # The completion mode. Either AutoComplete.COMPLETE_ATTRIBUTES or
        # AutoComplete.COMPLETE_FILES
        this.mode = nil;
        # The current completion start, on the text box (a string)
        this.start = nil;
        # The index of the start of the completion
        this.startindex = nil;
        # The last typed start, used so that when the selection changes,
        # the new start will be as close as possible to the last typed one.
        this.lasttypedstart = nil;
        # Do we have an indication that the user wants the completion window
        # (for example, he clicked the list)
        this.userwantswindow = nil;
        # event ids
        this.hideid = this.keypressid = this.listupdateid = this.winconfigid \
        = this.keyreleaseid = this.doubleclickid                         = nil;
        # Flag set if last keypress was a tab
        this.lastkey_was_tab = false;

    }
    function _change_start( newstart){
        min_len = min(len(this.start), len(newstart));
        i = 0;
        while i < min_len and this.start[i] == newstart[i]{
            i += 1;
        } if i < len(this.start){
            this.widget.delete("%s+%dc" % (this.startindex, i),
                               "%s+%dc" % (this.startindex, len(this.start)));
        } if i < len(newstart){
            this.widget.insert("%s+%dc" % (this.startindex, i),
                               newstart[i:]);
        } this.start = newstart;

    }
    function _binary_search( s){
        """Find the first index in self.completions where completions[i] is
        greater or equal to s, or the last index if there is no such
        one.""";
        i = 0; j = len(this.completions);
        while j > i{
            m = (i + j) // 2;
            if this.completions[m] >= s{
                j = m;
            } else{
                i = m + 1;
        } } return min(i, len(this.completions)-1);

    }
    function _complete_string( s){
        """Assuming that s is the prefix of a string in self.completions,
        return the longest string which is a prefix of all the strings which
        s is a prefix of them. If s is not a prefix of a string, return s.""";
        first = this._binary_search(s);
        if this.completions[first][:len(s)] != s{
            # There is not even one completion which s is a prefix of.
            return s;
        # Find the end of the range of completions where s is a prefix of.
        }
        i = first + 1;
        j = len(this.completions);
        while j > i{
            m = (i + j) // 2;
            if this.completions[m][:len(s)] != s{
                j = m;
            } else{
                i = m + 1;
        } } last = i-1;

        if first == last{ # only one possible completion
            return this.completions[first];

        # We should return the maximum prefix of first and last
        }
        first_comp = this.completions[first];
        last_comp = this.completions[last];
        min_len = min(len(first_comp), len(last_comp));
        i = len(s);
        while i < min_len and first_comp[i] == last_comp[i]{
            i += 1;
        } return first_comp[:i];

    }
    function _selection_changed(){
        """Should be called when the selection of the Listbox has changed.
        Updates the Listbox display and calls _change_start.""";
        cursel = int(this.listbox.curselection()[0]);

        this.listbox.see(cursel);

        lts = this.lasttypedstart;
        selstart = this.completions[cursel];
        if this._binary_search(lts) == cursel{
            newstart = lts;
        } else{
            min_len = min(len(lts), len(selstart));
            i = 0;
            while i < min_len and lts[i] == selstart[i]{
                i += 1;
            } newstart = selstart[:i];
        } this._change_start(newstart);

        if this.completions[cursel][:len(this.start)] == this.start{
            # start is a prefix of the selected completion
            this.listbox.configure(selectbackground=this.origselbackground,
                                   selectforeground=this.origselforeground);
        } else{
            this.listbox.configure(selectbackground=this.listbox.cget("bg"),
                                   selectforeground=this.listbox.cget("fg"));
            # If there are more completions, show them, and call me again.
            if this.morecompletions{
                this.completions = this.morecompletions;
                this.morecompletions = nil;
                this.listbox.delete(0, END);
                for item in this.completions{
                    this.listbox.insert(END, item);
                } this.listbox.select_set(this._binary_search(this.start));
                this._selection_changed();

    }
    } } function show_window( comp_lists, index, complete, mode, userWantsWin){
        """Show the autocomplete list, bind events.
        If complete is True, complete the text, and if there is exactly one
        matching completion, don't open a list.""";
        # Handle the start we already have
        this.completions, this.morecompletions = comp_lists;
        this.mode = mode;
        this.startindex = this.widget.index(index);
        this.start = this.widget.get(this.startindex, "insert");
        if complete{
            completed = this._complete_string(this.start);
            start = this.start;
            this._change_start(completed);
            i = this._binary_search(completed);
            if this.completions[i] == completed and \
               (i == len(this.completions)-1 or
                this.completions[i+1][:len(completed)] != completed){
                # There is exactly one matching completion
                return completed == start;
        } } this.userwantswindow = userWantsWin;
        this.lasttypedstart = this.start;

        # Put widgets in place
        this.autocompletewindow = acw = Toplevel(this.widget);
        # Put it in a position so that it is not seen.
        acw.wm_geometry("+10000+10000");
        # Make it float
        acw.wm_overrideredirect(1);
        try{
            # This command is only needed and available on Tk >= 8.4.0 for OSX
            # Without it, call tips intrude on the typing process by grabbing
            # the focus.
            acw.tk.call("::tk::unsupported::MacWindowStyle", "style", acw._w,
                        "help", "noActivates");
        } except TclError{
            pass;
        } this.scrollbar = scrollbar = Scrollbar(acw, orient=VERTICAL);
        this.listbox = listbox = Listbox(acw, yscrollcommand=scrollbar.set,
                                         exportselection=false, bg="white");
        for item in this.completions{
            listbox.insert(END, item);
        } this.origselforeground = listbox.cget("selectforeground");
        this.origselbackground = listbox.cget("selectbackground");
        scrollbar.config(command=listbox.yview);
        scrollbar.pack(side=RIGHT, fill=Y);
        listbox.pack(side=LEFT, fill=BOTH, expand=true);
        acw.lift();  # work around bug in Tk 8.5.18+ (issue #24570)

        # Initialize the listbox selection
        this.listbox.select_set(this._binary_search(this.start));
        this._selection_changed();

        # bind events
        this.hideid = this.widget.bind(HIDE_VIRTUAL_EVENT_NAME,
                                       this.hide_event);
        for seq in HIDE_SEQUENCES{
            this.widget.event_add(HIDE_VIRTUAL_EVENT_NAME, seq);
        } this.keypressid = this.widget.bind(KEYPRESS_VIRTUAL_EVENT_NAME,
                                           this.keypress_event);
        for seq in KEYPRESS_SEQUENCES{
            this.widget.event_add(KEYPRESS_VIRTUAL_EVENT_NAME, seq);
        } this.keyreleaseid = this.widget.bind(KEYRELEASE_VIRTUAL_EVENT_NAME,
                                             this.keyrelease_event);
        this.widget.event_add(KEYRELEASE_VIRTUAL_EVENT_NAME,KEYRELEASE_SEQUENCE);
        this.listupdateid = listbox.bind(LISTUPDATE_SEQUENCE,
                                         this.listselect_event);
        this.winconfigid = acw.bind(WINCONFIG_SEQUENCE, this.winconfig_event);
        this.doubleclickid = listbox.bind(DOUBLECLICK_SEQUENCE,
                                          this.doubleclick_event);

    }
    function winconfig_event( event){
        if not this.is_active(){
            return;
        # Position the completion list window
        }
        text = this.widget;
        text.see(this.startindex);
        x, y, cx, cy = text.bbox(this.startindex);
        acw = this.autocompletewindow;
        acw_width, acw_height = acw.winfo_width(), acw.winfo_height();
        text_width, text_height = text.winfo_width(), text.winfo_height();
        new_x = text.winfo_rootx() + min(x, max(0, text_width - acw_width));
        new_y = text.winfo_rooty() + y;
        if (text_height - (y + cy) >= acw_height # enough height below
            or y < acw_height){ # not enough height above
            # place acw below current line
            new_y += cy;
        } else{
            # place acw above current line
            new_y -= acw_height;
        } acw.wm_geometry("+%d+%d" % (new_x, new_y));

    }
    function hide_event( event){
        if not this.is_active(){
            return;
        } this.hide_window();

    }
    function listselect_event( event){
        if not this.is_active(){
            return;
        } this.userwantswindow = true;
        cursel = int(this.listbox.curselection()[0]);
        this._change_start(this.completions[cursel]);

    }
    function doubleclick_event( event){
        # Put the selected completion in the text, and close the list
        cursel = int(this.listbox.curselection()[0]);
        this._change_start(this.completions[cursel]);
        this.hide_window();

    }
    function keypress_event( event){
        if not this.is_active(){
            return;
        } keysym = event.keysym;
        if hasattr(event, "mc_state"){
            state = event.mc_state;
        } else{
            state = 0;
        } if keysym != "Tab"{
            this.lastkey_was_tab = false;
        } if (len(keysym) == 1 or keysym in ("underscore", "BackSpace")
            or (this.mode == COMPLETE_FILES and keysym in
                ("period", "minus"))) \
           and not (state & ~MC_SHIFT){
            # Normal editing of text
            if len(keysym) == 1{
                this._change_start(this.start + keysym);
            } elif keysym == "underscore"{
                this._change_start(this.start + '_');
            } elif keysym == "period"{
                this._change_start(this.start + '.');
            } elif keysym == "minus"{
                this._change_start(this.start + '-');
            } else{
                # keysym == "BackSpace"
                if len(this.start) == 0{
                    this.hide_window();
                    return;
                } this._change_start(this.start[:-1]);
            } this.lasttypedstart = this.start;
            this.listbox.select_clear(0, int(this.listbox.curselection()[0]));
            this.listbox.select_set(this._binary_search(this.start));
            this._selection_changed();
            return "break";

        }
        elif keysym == "Return"{
            this.hide_window();
            return;

        }
        elif (this.mode == COMPLETE_ATTRIBUTES and keysym in
              ("period", "space", "parenleft", "parenright", "bracketleft",
               "bracketright")) or \
             (this.mode == COMPLETE_FILES and keysym in
              ("slash", "backslash", "quotedbl", "apostrophe")) \
             and not (state & ~MC_SHIFT){
            # If start is a prefix of the selection, but is not '' when
            # completing file names, put the whole
            # selected completion. Anyway, close the list.
            cursel = int(this.listbox.curselection()[0]);
            if this.completions[cursel][:len(this.start)] == this.start \
               and (this.mode == COMPLETE_ATTRIBUTES or this.start){
                this._change_start(this.completions[cursel]);
            } this.hide_window();
            return;

        }
        elif keysym in ("Home", "End", "Prior", "Next", "Up", "Down") and \
             not state{
            # Move the selection in the listbox
            this.userwantswindow = true;
            cursel = int(this.listbox.curselection()[0]);
            if keysym == "Home"{
                newsel = 0;
            } elif keysym == "End"{
                newsel = len(this.completions)-1;
            } elif keysym in ("Prior", "Next"){
                jump = this.listbox.nearest(this.listbox.winfo_height()) - \
                       this.listbox.nearest(0);
                if keysym == "Prior"{
                    newsel = max(0, cursel-jump);
                } else{
                    assert keysym == "Next";
                    newsel = min(len(this.completions)-1, cursel+jump);
            } } elif keysym == "Up"{
                newsel = max(0, cursel-1);
            } else{
                assert keysym == "Down";
                newsel = min(len(this.completions)-1, cursel+1);
            } this.listbox.select_clear(cursel);
            this.listbox.select_set(newsel);
            this._selection_changed();
            this._change_start(this.completions[newsel]);
            return "break";

        }
        elif (keysym == "Tab" and not state){
            if this.lastkey_was_tab{
                # two tabs in a row; insert current selection and close acw
                cursel = int(this.listbox.curselection()[0]);
                this._change_start(this.completions[cursel]);
                this.hide_window();
                return "break";
            } else{
                # first tab; let AutoComplete handle the completion
                this.userwantswindow = true;
                this.lastkey_was_tab = true;
                return;

        }
        } elif any(s in keysym for s in ("Shift", "Control", "Alt",
                                       "Meta", "Command", "Option")){
            # A modifier key, so ignore
            return;

        }
        else{
            # Unknown event, close the window and let it through.
            this.hide_window();
            return;

    }
    } function keyrelease_event( event){
        if not this.is_active(){
            return;
        } if this.widget.index("insert") != \
           this.widget.index("%s+%dc" % (this.startindex, len(this.start))){
            # If we didn't catch an event which moved the insert, close window
            this.hide_window();

    }
    } function is_active(){
        return this.autocompletewindow is not nil;

    }
    function complete(){
        this._change_start(this._complete_string(this.start));
        # The selection doesn't change.

    }
    function hide_window(){
        if not this.is_active(){
            return;

        # unbind events
        }
        for seq in HIDE_SEQUENCES{
            this.widget.event_delete(HIDE_VIRTUAL_EVENT_NAME, seq);
        } this.widget.unbind(HIDE_VIRTUAL_EVENT_NAME, this.hideid);
        this.hideid = nil;
        for seq in KEYPRESS_SEQUENCES{
            this.widget.event_delete(KEYPRESS_VIRTUAL_EVENT_NAME, seq);
        } this.widget.unbind(KEYPRESS_VIRTUAL_EVENT_NAME, this.keypressid);
        this.keypressid = nil;
        this.widget.event_delete(KEYRELEASE_VIRTUAL_EVENT_NAME,
                                 KEYRELEASE_SEQUENCE);
        this.widget.unbind(KEYRELEASE_VIRTUAL_EVENT_NAME, this.keyreleaseid);
        this.keyreleaseid = nil;
        this.listbox.unbind(LISTUPDATE_SEQUENCE, this.listupdateid);
        this.listupdateid = nil;
        this.autocompletewindow.unbind(WINCONFIG_SEQUENCE, this.winconfigid);
        this.winconfigid = nil;

        # destroy widgets
        this.scrollbar.destroy();
        this.scrollbar = nil;
        this.listbox.destroy();
        this.listbox = nil;
        this.autocompletewindow.destroy();
        this.autocompletewindow = nil;

}
}