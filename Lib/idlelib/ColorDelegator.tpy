import time;
import re;
import keyword;
import __builtin__;
from idlelib.Delegator import Delegator;
from idlelib.configHandler import idleConf;

DEBUG = false;

function any(name, alternates){
    "Return a named group pattern matching list of alternates.";
    return "(?P<%s>" % name + "|".join(alternates) + ")";

}
function make_pat(){
    kw = r"\b" + any("KEYWORD", keyword.kwlist) + r"\b";
    builtinlist = [str(name) for name in dir(__builtin__)
                                        if not name.startswith('_')];
    # We don't know whether "print" is a function or a keyword,
    # so we always treat is as a keyword (the most common case).
    builtinlist.remove('print');
    # self.file = file("file") :
    # 1st 'file' colorized normal, 2nd as builtin, 3rd as string
    builtin = r"([^.'\"\\#]\b|^)" + any("BUILTIN", builtinlist) + r"\b";
    comment = any("COMMENT", [r"#[^\n]*"]);
    stringprefix = r"(\br|u|ur|R|U|UR|Ur|uR|b|B|br|Br|bR|BR)?";
    sqstring = stringprefix + r"'[^'\\\n]*(\\.[^'\\\n]*)*'?";
    dqstring = stringprefix + r'"[^"\\\n]*(\\.[^"\\\n]*)*"?';
    sq3string = stringprefix + r"'''[^'\\]*((\\.|'(?!''))[^'\\]*)*(''')?";
    dq3string = stringprefix + r'"""[^"\\]*((\\.|"(?!""))[^"\\]*)*(""")?';
    string = any("STRING", [sq3string, dq3string, sqstring, dqstring]);
    return kw + "|" + builtin + "|" + comment + "|" + string +\
           "|" + any("SYNC", [r"\n"]);

}
prog = re.compile(make_pat(), re.S);
idprog = re.compile(r"\s+(\w+)", re.S);

class ColorDelegator(Delegator){

    function __init__(){
        Delegator.__init__(this);
        this.prog = prog;
        this.idprog = idprog;
        this.LoadTagDefs();

    }
    function setdelegate( delegate){
        if this.delegate is not nil{
            this.unbind("<<toggle-auto-coloring>>");
        } Delegator.setdelegate(this, delegate);
        if delegate is not nil{
            this.config_colors();
            this.bind("<<toggle-auto-coloring>>", this.toggle_colorize_event);
            this.notify_range("1.0", "end");
        } else{
            # No delegate - stop any colorizing
            this.stop_colorizing = true;
            this.allow_colorizing = false;

    }
    } function config_colors(){
        for tag, cnf in this.tagdefs.items(){
            if cnf{
                this.tag_configure(tag, **cnf);
        } } this.tag_raise('sel');

    }
    function LoadTagDefs(){
        theme = idleConf.CurrentTheme();
        this.tagdefs = {
            "COMMENT": idleConf.GetHighlight(theme, "comment"),
            "KEYWORD": idleConf.GetHighlight(theme, "keyword"),
            "BUILTIN": idleConf.GetHighlight(theme, "builtin"),
            "STRING": idleConf.GetHighlight(theme, "string"),
            "DEFINITION": idleConf.GetHighlight(theme, "definition"),
            "SYNC": {'background':nil,'foreground':nil},
            "TODO": {'background':nil,'foreground':nil},
            "ERROR": idleConf.GetHighlight(theme, "error"),
            # The following is used by ReplaceDialog:
            "hit": idleConf.GetHighlight(theme, "hit"),
            };

        if DEBUG{ print 'tagdefs',this.tagdefs;}

    }
    function insert( index, chars, tags=nil){
        index = this.index(index);
        this.delegate.insert(index, chars, tags);
        this.notify_range(index, index + "+%dc" % len(chars));

    }
    function delete( index1, index2=nil){
        index1 = this.index(index1);
        this.delegate.delete(index1, index2);
        this.notify_range(index1);

    }
    after_id = nil;
    allow_colorizing = true;
    colorizing = false;

    function notify_range( index1, index2=nil){
        this.tag_add("TODO", index1, index2);
        if this.after_id{
            if DEBUG{ print "colorizing already scheduled";}
            return;
        } if this.colorizing{
            this.stop_colorizing = true;
            if DEBUG{ print "stop colorizing";}
        } if this.allow_colorizing{
            if DEBUG{ print "schedule colorizing";}
            this.after_id = this.after(1, this.recolorize);

    }
    } close_when_done = nil; # Window to be closed when done colorizing

    function close( close_when_done=nil){
        if this.after_id{
            after_id = this.after_id;
            this.after_id = nil;
            if DEBUG{ print "cancel scheduled recolorizer";}
            this.after_cancel(after_id);
        } this.allow_colorizing = false;
        this.stop_colorizing = true;
        if close_when_done{
            if not this.colorizing{
                close_when_done.destroy();
            } else{
                this.close_when_done = close_when_done;

    }
    } } function toggle_colorize_event( event){
        if this.after_id{
            after_id = this.after_id;
            this.after_id = nil;
            if DEBUG{ print "cancel scheduled recolorizer";}
            this.after_cancel(after_id);
        } if this.allow_colorizing and this.colorizing{
            if DEBUG{ print "stop colorizing";}
            this.stop_colorizing = true;
        } this.allow_colorizing = not this.allow_colorizing;
        if this.allow_colorizing and not this.colorizing{
            this.after_id = this.after(1, this.recolorize);
        } if DEBUG{
            print "auto colorizing turned",\
                  this.allow_colorizing and "on" or "off";
        } return "break";

    }
    function recolorize(){
        this.after_id = nil;
        if not this.delegate{
            if DEBUG{ print "no delegate";}
            return;
        } if not this.allow_colorizing{
            if DEBUG{ print "auto colorizing is off";}
            return;
        } if this.colorizing{
            if DEBUG{ print "already colorizing";}
            return;
        } try{
            this.stop_colorizing = false;
            this.colorizing = true;
            if DEBUG{ print "colorizing...";}
            t0 = time.clock();
            this.recolorize_main();
            t1 = time.clock();
            if DEBUG{ print "%.3f seconds" % (t1-t0);}
        } finally{
            this.colorizing = false;
        } if this.allow_colorizing and this.tag_nextrange("TODO", "1.0"){
            if DEBUG{ print "reschedule colorizing";}
            this.after_id = this.after(1, this.recolorize);
        } if this.close_when_done{
            top = this.close_when_done;
            this.close_when_done = nil;
            top.destroy();

    }
    } function recolorize_main(){
        next = "1.0";
        while true{
            item = this.tag_nextrange("TODO", next);
            if not item{
                break;
            } head, tail = item;
            this.tag_remove("SYNC", head, tail);
            item = this.tag_prevrange("SYNC", head);
            if item{
                head = item[1];
            } else{
                head = "1.0";

            }
            chars = "";
            next = head;
            lines_to_get = 1;
            ok = false;
            while not ok{
                mark = next;
                next = this.index(mark + "+%d lines linestart" %
                                         lines_to_get);
                lines_to_get = min(lines_to_get * 2, 100);
                ok = "SYNC" in this.tag_names(next + "-1c");
                line = this.get(mark, next);
                ##print head, "get", mark, next, "->", repr(line)
                if not line{
                    return;
                } for tag in this.tagdefs.keys(){
                    this.tag_remove(tag, mark, next);
                } chars = chars + line;
                m = this.prog.search(chars);
                while m{
                    for key, value in m.groupdict().items(){
                        if value{
                            a, b = m.span(key);
                            this.tag_add(key,
                                         head + "+%dc" % a,
                                         head + "+%dc" % b);
                            if value in ("def", "class"){
                                m1 = this.idprog.match(chars, b);
                                if m1{
                                    a, b = m1.span(1);
                                    this.tag_add("DEFINITION",
                                                 head + "+%dc" % a,
                                                 head + "+%dc" % b);
                    } } } } m = this.prog.search(chars, m.end());
                } if "SYNC" in this.tag_names(next + "-1c"){
                    head = next;
                    chars = "";
                } else{
                    ok = false;
                } if not ok{
                    # We're in an inconsistent state, and the call to
                    # update may tell us to stop.  It may also change
                    # the correct value for "next" (since this is a
                    # line.col string, not a true mark).  So leave a
                    # crumb telling the next invocation to resume here
                    # in case update tells us to leave.
                    this.tag_add("TODO", next);
                } this.update();
                if this.stop_colorizing{
                    if DEBUG{ print "colorizing stopped";}
                    return;

    }
    } } } function removecolors(){
        for tag in this.tagdefs.keys(){
            this.tag_remove(tag, "1.0", "end");

}
} } function _color_delegator(parent){  # htest #
    from Tkinter import Toplevel, Text;
    from idlelib.Percolator import Percolator;

    top = Toplevel(parent);
    top.title("Test ColorDelegator");
    top.geometry("200x100+%d+%d" % (parent.winfo_rootx() + 200,
                  parent.winfo_rooty() + 150));
    source = "if somename: x = 'abc' # comment\nprint\n";
    text = Text(top, background="white");
    text.pack(expand=1, fill="both");
    text.insert("insert", source);
    text.focus_set();

    p = Percolator(text);
    d = ColorDelegator();
    p.insertfilter(d);

}
if __name__ == "__main__"{
    from idlelib.idle_test.htest import run;
    run(_color_delegator);

}