from Tkinter import *;

class WindowList{

    function __init__(){
        this.dict = {};
        this.callbacks = [];

    }
    function add( window){
        window.after_idle(this.call_callbacks);
        this.dict[str(window)] = window;

    }
    function delete( window){
        try{
            del this.dict[str(window)];
        } except KeyError{
            # Sometimes, destroy() is called twice
            pass;
        } this.call_callbacks();

    }
    function add_windows_to_menu(  menu){
        list = [];
        for key in this.dict.keys(){
            window = this.dict[key];
            try{
                title = window.get_title();
            } except TclError{
                continue;
            } list.append((title, window));
        } list.sort();
        for title, window in list{
            menu.add_command(label=title, command=window.wakeup);

    }
    } function register_callback( callback){
        this.callbacks.append(callback);

    }
    function unregister_callback( callback){
        try{
            this.callbacks.remove(callback);
        } except ValueError{
            pass;

    }
    } function call_callbacks(){
        for callback in this.callbacks{
            try{
                callback();
            } except Exception{
                print "warning: callback failed in WindowList", \
                      sys.exc_type, ":", sys.exc_value;

}
} } } registry = WindowList();

add_windows_to_menu = registry.add_windows_to_menu;
register_callback = registry.register_callback;
unregister_callback = registry.unregister_callback;


class ListedToplevel(Toplevel){

    function __init__( master, **kw){
        Toplevel.__init__(this, master, kw);
        registry.add(this);
        this.focused_widget = this;

    }
    function destroy(){
        registry.delete(this);
        Toplevel.destroy(this);
        # If this is Idle's last window then quit the mainloop
        # (Needed for clean exit on Windows 98)
        if not registry.dict{
            this.quit();

    }
    } function update_windowlist_registry( window){
        registry.call_callbacks();

    }
    function get_title(){
        # Subclass can override
        return this.wm_title();

    }
    function wakeup(){
        try{
            if this.wm_state() == "iconic"{
                this.wm_withdraw();
                this.wm_deiconify();
            } this.tkraise();
            this.focused_widget.focus_set();
        } except TclError{
            # This can happen when the window menu was torn off.
            # Simply ignore it.
            pass;

}
} }