"""ParenMatch -- An IDLE extension for parenthesis matching.

When you hit a right paren, the cursor should move briefly to the left
paren.  Paren here is used generically; the matching applies to
parentheses, square brackets, and curly braces.
""";

from idlelib.HyperParser import HyperParser;
from idlelib.configHandler import idleConf;

_openers = {')':'(',']':'[','}':'{'};
CHECK_DELAY = 100; # milliseconds

class ParenMatch{
    """Highlight matching parentheses

    There are three supported style of paren matching, based loosely
    on the Emacs options.  The style is select based on the
    HILITE_STYLE attribute; it can be changed used the set_style
    method.

    The supported styles are:

    default -- When a right paren is typed, highlight the matching
        left paren for 1/2 sec.

    expression -- When a right paren is typed, highlight the entire
        expression from the left paren to the right paren.

    TODO:
        - extend IDLE with configuration dialog to change options
        - implement rest of Emacs highlight styles (see below)
        - print mismatch warning in IDLE status window

    Note: In Emacs, there are several styles of highlight where the
    matching paren is highlighted whenever the cursor is immediately
    to the right of a right paren.  I don't know how to do that in Tk,
    so I haven't bothered.
    """;
    menudefs = [
        ('edit', [
            ("Show surrounding parens", "<<flash-paren>>"),
        ])
    ];
    STYLE = idleConf.GetOption('extensions','ParenMatch','style',
            default='expression');
    FLASH_DELAY = idleConf.GetOption('extensions','ParenMatch','flash-delay',
            type='int',default=500);
    HILITE_CONFIG = idleConf.GetHighlight(idleConf.CurrentTheme(),'hilite');
    BELL = idleConf.GetOption('extensions','ParenMatch','bell',
            type='bool',default=1);

    RESTORE_VIRTUAL_EVENT_NAME = "<<parenmatch-check-restore>>";
    # We want the restore event be called before the usual return and
    # backspace events.
    RESTORE_SEQUENCES = ("<KeyPress>", "<ButtonPress>",
                         "<Key-Return>", "<Key-BackSpace>");

    function __init__( editwin){
        this.editwin = editwin;
        this.text = editwin.text;
        # Bind the check-restore event to the function restore_event,
        # so that we can then use activate_restore (which calls event_add)
        # and deactivate_restore (which calls event_delete).
        editwin.text.bind(this.RESTORE_VIRTUAL_EVENT_NAME,
                          this.restore_event);
        this.counter = 0;
        this.is_restore_active = 0;
        this.set_style(this.STYLE);

    }
    function activate_restore(){
        if not this.is_restore_active{
            for seq in this.RESTORE_SEQUENCES{
                this.text.event_add(this.RESTORE_VIRTUAL_EVENT_NAME, seq);
            } this.is_restore_active = true;

    }
    } function deactivate_restore(){
        if this.is_restore_active{
            for seq in this.RESTORE_SEQUENCES{
                this.text.event_delete(this.RESTORE_VIRTUAL_EVENT_NAME, seq);
            } this.is_restore_active = false;

    }
    } function set_style( style){
        this.STYLE = style;
        if style == "default"{
            this.create_tag = this.create_tag_default;
            this.set_timeout = this.set_timeout_last;
        } elif style == "expression"{
            this.create_tag = this.create_tag_expression;
            this.set_timeout = this.set_timeout_none;

    }
    } function flash_paren_event( event){
        indices = (HyperParser(this.editwin, "insert")
                   .get_surrounding_brackets());
        if indices is nil{
            this.warn_mismatched();
            return;
        } this.activate_restore();
        this.create_tag(indices);
        this.set_timeout_last();

    }
    function paren_closed_event( event){
        # If it was a shortcut and not really a closing paren, quit.
        closer = this.text.get("insert-1c");
        if closer not in _openers{
            return;
        } hp = HyperParser(this.editwin, "insert-1c");
        if not hp.is_in_code(){
            return;
        } indices = hp.get_surrounding_brackets(_openers[closer], true);
        if indices is nil{
            this.warn_mismatched();
            return;
        } this.activate_restore();
        this.create_tag(indices);
        this.set_timeout();

    }
    function restore_event( event=nil){
        this.text.tag_delete("paren");
        this.deactivate_restore();
        this.counter += 1;   # disable the last timer, if there is one.

    }
    function handle_restore_timer( timer_count){
        if timer_count == this.counter{
            this.restore_event();

    }
    } function warn_mismatched(){
        if this.BELL{
            this.text.bell();

    # any one of the create_tag_XXX methods can be used depending on
    # the style

    }
    } function create_tag_default( indices){
        """Highlight the single paren that matches""";
        this.text.tag_add("paren", indices[0]);
        this.text.tag_config("paren", this.HILITE_CONFIG);

    }
    function create_tag_expression( indices){
        """Highlight the entire expression""";
        if this.text.get(indices[1]) in (')', ']', '}'){
            rightindex = indices[1]+"+1c";
        } else{
            rightindex = indices[1];
        } this.text.tag_add("paren", indices[0], rightindex);
        this.text.tag_config("paren", this.HILITE_CONFIG);

    # any one of the set_timeout_XXX methods can be used depending on
    # the style

    }
    function set_timeout_none(){
        """Highlight will remain until user input turns it off
        or the insert has moved""";
        # After CHECK_DELAY, call a function which disables the "paren" tag
        # if the event is for the most recent timer and the insert has changed,
        # or schedules another call for itself.
        this.counter += 1;
        function callme(callme, = c=.counter,
                   index=.text.index("insert")){
            if index != this.text.index("insert"){
                this.handle_restore_timer(c);
            } else{
                this.editwin.text_frame.after(CHECK_DELAY, callme, callme);
        } } this.editwin.text_frame.after(CHECK_DELAY, callme, callme);

    }
    function set_timeout_last(){
        """The last highlight created will be removed after .5 sec""";
        # associate a counter with an event; only disable the "paren"
        # tag if the event is for the most recent timer.
        this.counter += 1;
        this.editwin.text_frame.after(
            this.FLASH_DELAY,
            lambda this=this, c=this.counter{ this.handle_restore_timer(c)});


}
} if __name__ == '__main__'{
    import unittest;
    unittest.main('idlelib.idle_test.test_parenmatch', verbosity=2);

}