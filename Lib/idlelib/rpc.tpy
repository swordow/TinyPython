"""RPC Implementation, originally written for the Python Idle IDE

For security reasons, GvR requested that Idle's Python execution server process
connect to the Idle process, which listens for the connection.  Since Idle has
only one client per server, this was not a limitation.

   +---------------------------------+ +-------------+
   | SocketServer.BaseRequestHandler | | SocketIO    |
   +---------------------------------+ +-------------+
                   ^                   | register()  |
                   |                   | unregister()|
                   |                   +-------------+
                   |                      ^  ^
                   |                      |  |
                   | + -------------------+  |
                   | |                       |
   +-------------------------+        +-----------------+
   | RPCHandler              |        | RPCClient       |
   | [attribute of RPCServer]|        |                 |
   +-------------------------+        +-----------------+

The RPCServer handler class is expected to provide register/unregister methods.
RPCHandler inherits the mix-in class SocketIO, which provides these methods.

See the Idle run.main() docstring for further information on how this was
accomplished in Idle.

""";

import sys;
import os;
import socket;
import select;
import SocketServer;
import struct;
import cPickle as pickle;
import threading;
import Queue;
import traceback;
import copy_reg;
import types;
import marshal;


function unpickle_code(ms){
    co = marshal.loads(ms);
    assert isinstance(co, types.CodeType);
    return co;

}
function pickle_code(co){
    assert isinstance(co, types.CodeType);
    ms = marshal.dumps(co);
    return unpickle_code, (ms,);

# XXX KBK 24Aug02 function pickling capability not used in Idle
#  def unpickle_function(ms):
#      return ms

#  def pickle_function(fn):
#      assert isinstance(fn, type.FunctionType)
#      return repr(fn)

}
copy_reg.pickle(types.CodeType, pickle_code, unpickle_code);
# copy_reg.pickle(types.FunctionType, pickle_function, unpickle_function)

BUFSIZE = 8*1024;
LOCALHOST = '127.0.0.1';

class RPCServer(SocketServer.TCPServer){

    function __init__( addr, handlerclass=nil){
        if handlerclass is nil{
            handlerclass = RPCHandler;
        } SocketServer.TCPServer.__init__(this, addr, handlerclass);

    }
    function server_bind(){
        "Override TCPServer method, no bind() phase for connecting entity";
        pass;

    }
    function server_activate(){
        """Override TCPServer method, connect() instead of listen()

        Due to the reversed connection, self.server_address is actually the
        address of the Idle Client to which we are connecting.

        """;
        this.socket.connect(this.server_address);

    }
    function get_request(){
        "Override TCPServer method, return already connected socket";
        return this.socket, this.server_address;

    }
    function handle_error( request, client_address){
        """Override TCPServer method

        Error message goes to __stderr__.  No error message if exiting
        normally or socket raised EOF.  Other exceptions not handled in
        server code will cause os._exit.

        """;
        try{
            raise;
        } except SystemExit{
            raise;
        } except Exception{
            erf = sys.__stderr__;
            print>>erf, '\n' + '-'*40;
            print>>erf, 'Unhandled server exception!';
            print>>erf, 'Thread: %s' % threading.currentThread().getName();
            print>>erf, 'Client Address: ', client_address;
            print>>erf, 'Request: ', repr(request);
            traceback.print_exc(file=erf);
            print>>erf, '\n*** Unrecoverable, server exiting!';
            print>>erf, '-'*40;
            os._exit(0);

#----------------- end class RPCServer --------------------

}
} } objecttable = {};
request_queue = Queue.Queue(0);
response_queue = Queue.Queue(0);


class SocketIO(object){

    nextseq = 0;

    function __init__( sock, objtable=nil, debugging=nil){
        this.sockthread = threading.currentThread();
        if debugging is not nil{
            this.debugging = debugging;
        } this.sock = sock;
        if objtable is nil{
            objtable = objecttable;
        } this.objtable = objtable;
        this.responses = {};
        this.cvars = {};

    }
    function close(){
        sock = this.sock;
        this.sock = nil;
        if sock is not nil{
            sock.close();

    }
    } function exithook(){
        "override for specific exit action";
        os._exit(0);

    }
    function debug( *args){
        if not this.debugging{
            return;
        } s = this.location + " " + str(threading.currentThread().getName());
        for a in args{
            s = s + " " + str(a);
        } print>>sys.__stderr__, s;

    }
    function register( oid, object){
        this.objtable[oid] = object;

    }
    function unregister( oid){
        try{
            del this.objtable[oid];
        } except KeyError{
            pass;

    }
    } function localcall( seq, request){
        this.debug("localcall:", request);
        try{
            how, (oid, methodname, args, kwargs) = request;
        } except TypeError{
            return ("ERROR", "Bad request format");
        } if oid not in this.objtable{
            return ("ERROR", "Unknown object id: %r" % (oid,));
        } obj = this.objtable[oid];
        if methodname == "__methods__"{
            methods = {};
            _getmethods(obj, methods);
            return ("OK", methods);
        } if methodname == "__attributes__"{
            attributes = {};
            _getattributes(obj, attributes);
            return ("OK", attributes);
        } if not hasattr(obj, methodname){
            return ("ERROR", "Unsupported method name: %r" % (methodname,));
        } method = getattr(obj, methodname);
        try{
            if how == 'CALL'{
                ret = method(*args, **kwargs);
                if isinstance(ret, RemoteObject){
                    ret = remoteref(ret);
                } return ("OK", ret);
            } elif how == 'QUEUE'{
                request_queue.put((seq, (method, args, kwargs)));
                return("QUEUED", nil);
            } else{
                return ("ERROR", "Unsupported message type: %s" % how);
        } } except SystemExit{
            raise;
        } except socket.error{
            raise;
        } except Exception{
            msg = "*** Internal Error: rpc.py:SocketIO.localcall()\n\n"\
                  " Object: %s \n Method: %s \n Args: %s\n";
            print>>sys.__stderr__, msg % (oid, method, args);
            traceback.print_exc(file=sys.__stderr__);
            return ("EXCEPTION", nil);

    }
    } function remotecall( oid, methodname, args, kwargs){
        this.debug("remotecall:asynccall: ", oid, methodname);
        seq = this.asynccall(oid, methodname, args, kwargs);
        return this.asyncreturn(seq);

    }
    function remotequeue( oid, methodname, args, kwargs){
        this.debug("remotequeue:asyncqueue: ", oid, methodname);
        seq = this.asyncqueue(oid, methodname, args, kwargs);
        return this.asyncreturn(seq);

    }
    function asynccall( oid, methodname, args, kwargs){
        request = ("CALL", (oid, methodname, args, kwargs));
        seq = this.newseq();
        if threading.currentThread() != this.sockthread{
            cvar = threading.Condition();
            this.cvars[seq] = cvar;
        } this.debug(("asynccall:%d:" % seq), oid, methodname, args, kwargs);
        this.putmessage((seq, request));
        return seq;

    }
    function asyncqueue( oid, methodname, args, kwargs){
        request = ("QUEUE", (oid, methodname, args, kwargs));
        seq = this.newseq();
        if threading.currentThread() != this.sockthread{
            cvar = threading.Condition();
            this.cvars[seq] = cvar;
        } this.debug(("asyncqueue:%d:" % seq), oid, methodname, args, kwargs);
        this.putmessage((seq, request));
        return seq;

    }
    function asyncreturn( seq){
        this.debug("asyncreturn:%d:call getresponse(): " % seq);
        response = this.getresponse(seq, wait=0.05);
        this.debug(("asyncreturn:%d:response: " % seq), response);
        return this.decoderesponse(response);

    }
    function decoderesponse( response){
        how, what = response;
        if how == "OK"{
            return what;
        } if how == "QUEUED"{
            return nil;
        } if how == "EXCEPTION"{
            this.debug("decoderesponse: EXCEPTION");
            return nil;
        } if how == "EOF"{
            this.debug("decoderesponse: EOF");
            this.decode_interrupthook();
            return nil;
        } if how == "ERROR"{
            this.debug("decoderesponse: Internal ERROR:", what);
            raise RuntimeError, what;
        } raise SystemError, (how, what);

    }
    function decode_interrupthook(){
        "";
        raise EOFError;

    }
    function mainloop(){
        """Listen on socket until I/O not ready or EOF

        pollresponse() will loop looking for seq number None, which
        never comes, and exit on EOFError.

        """;
        try{
            this.getresponse(myseq=nil, wait=0.05);
        } except EOFError{
            this.debug("mainloop:return");
            return;

    }
    } function getresponse( myseq, wait){
        response = this._getresponse(myseq, wait);
        if response is not nil{
            how, what = response;
            if how == "OK"{
                response = how, this._proxify(what);
        } } return response;

    }
    function _proxify( obj){
        if isinstance(obj, RemoteProxy){
            return RPCProxy(this, obj.oid);
        } if isinstance(obj, types.ListType){
            return map(this._proxify, obj);
        # XXX Check for other types -- not currently needed
        }
        return obj;

    }
    function _getresponse( myseq, wait){
        this.debug("_getresponse:myseq:", myseq);
        if threading.currentThread() is this.sockthread{
            # this thread does all reading of requests or responses
            while 1{
                response = this.pollresponse(myseq, wait);
                if response is not nil{
                    return response;
        } } } else{
            # wait for notification from socket handling thread
            cvar = this.cvars[myseq];
            cvar.acquire();
            while myseq not in this.responses{
                cvar.wait();
            } response = this.responses[myseq];
            this.debug("_getresponse:%s: thread woke up: response: %s" %
                       (myseq, response));
            del this.responses[myseq];
            del this.cvars[myseq];
            cvar.release();
            return response;

    }
    } function newseq(){
        this.nextseq = seq = this.nextseq + 2;
        return seq;

    }
    function putmessage( message){
        this.debug("putmessage:%d:" % message[0]);
        try{
            s = pickle.dumps(message);
        } except pickle.PicklingError{
            print >>sys.__stderr__, "Cannot pickle:", repr(message);
            raise;
        } s = struct.pack("<i", len(s)) + s;
        while len(s) > 0{
            try{
                r, w, x = select.select([], [this.sock], []);
                n = this.sock.send(s[:BUFSIZE]);
            } except (AttributeError, TypeError){
                raise IOError, "socket no longer exists";
            } s = s[n:];

    }
    } buffer = "";
    bufneed = 4;
    bufstate = 0; # meaning: 0 => reading count; 1 => reading data

    function pollpacket( wait){
        this._stage0();
        if len(this.buffer) < this.bufneed{
            r, w, x = select.select([this.sock.fileno()], [], [], wait);
            if len(r) == 0{
                return nil;
            } try{
                s = this.sock.recv(BUFSIZE);
            } except socket.error{
                raise EOFError;
            } if len(s) == 0{
                raise EOFError;
            } this.buffer += s;
            this._stage0();
        } return this._stage1();

    }
    function _stage0(){
        if this.bufstate == 0 and len(this.buffer) >= 4{
            s = this.buffer[:4];
            this.buffer = this.buffer[4:];
            this.bufneed = struct.unpack("<i", s)[0];
            this.bufstate = 1;

    }
    } function _stage1(){
        if this.bufstate == 1 and len(this.buffer) >= this.bufneed{
            packet = this.buffer[:this.bufneed];
            this.buffer = this.buffer[this.bufneed:];
            this.bufneed = 4;
            this.bufstate = 0;
            return packet;

    }
    } function pollmessage( wait){
        packet = this.pollpacket(wait);
        if packet is nil{
            return nil;
        } try{
            message = pickle.loads(packet);
        } except pickle.UnpicklingError{
            print >>sys.__stderr__, "-----------------------";
            print >>sys.__stderr__, "cannot unpickle packet:", repr(packet);
            traceback.print_stack(file=sys.__stderr__);
            print >>sys.__stderr__, "-----------------------";
            raise;
        } return message;

    }
    function pollresponse( myseq, wait){
        """Handle messages received on the socket.

        Some messages received may be asynchronous 'call' or 'queue' requests,
        and some may be responses for other threads.

        'call' requests are passed to self.localcall() with the expectation of
        immediate execution, during which time the socket is not serviced.

        'queue' requests are used for tasks (which may block or hang) to be
        processed in a different thread.  These requests are fed into
        request_queue by self.localcall().  Responses to queued requests are
        taken from response_queue and sent across the link with the associated
        sequence numbers.  Messages in the queues are (sequence_number,
        request/response) tuples and code using this module removing messages
        from the request_queue is responsible for returning the correct
        sequence number in the response_queue.

        pollresponse() will loop until a response message with the myseq
        sequence number is received, and will save other responses in
        self.responses and notify the owning thread.

        """;
        while 1{
            # send queued response if there is one available
            try{
                qmsg = response_queue.get(0);
            } except Queue.Empty{
                pass;
            } else{
                seq, response = qmsg;
                message = (seq, ('OK', response));
                this.putmessage(message);
            # poll for message on link
            }
            try{
                message = this.pollmessage(wait);
                if message is nil{  # socket not ready
                    return nil;
            } } except EOFError{
                this.handle_EOF();
                return nil;
            } except AttributeError{
                return nil;
            } seq, resq = message;
            how = resq[0];
            this.debug("pollresponse:%d:myseq:%s" % (seq, myseq));
            # process or queue a request
            if how in ("CALL", "QUEUE"){
                this.debug("pollresponse:%d:localcall:call:" % seq);
                response = this.localcall(seq, resq);
                this.debug("pollresponse:%d:localcall:response:%s"
                           % (seq, response));
                if how == "CALL"{
                    this.putmessage((seq, response));
                } elif how == "QUEUE"{
                    # don't acknowledge the 'queue' request!
                    pass;
                } continue;
            # return if completed message transaction
            }
            elif seq == myseq{
                return resq;
            # must be a response for a different thread:
            }
            else{
                cv = this.cvars.get(seq, nil);
                # response involving unknown sequence number is discarded,
                # probably intended for prior incarnation of server
                if cv is not nil{
                    cv.acquire();
                    this.responses[seq] = resq;
                    cv.notify();
                    cv.release();
                } continue;

    }
    } } function handle_EOF(){
        "action taken upon link being closed by peer";
        this.EOFhook();
        this.debug("handle_EOF");
        for key in this.cvars{
            cv = this.cvars[key];
            cv.acquire();
            this.responses[key] = ('EOF', nil);
            cv.notify();
            cv.release();
        # call our (possibly overridden) exit function
        }
        this.exithook();

    }
    function EOFhook(){
        "Classes using rpc client/server can override to augment EOF action";
        pass;

#----------------- end class SocketIO --------------------

}
} class RemoteObject(object){
    # Token mix-in class
    pass;

}
function remoteref(obj){
    oid = id(obj);
    objecttable[oid] = obj;
    return RemoteProxy(oid);

}
class RemoteProxy(object){

    function __init__( oid){
        this.oid = oid;

}
} class RPCHandler(SocketServer.BaseRequestHandler, SocketIO){

    debugging = false;
    location = "#S";  # Server

    function __init__( sock, addr, svr){
        svr.current_handler = this; ## cgt xxx
        SocketIO.__init__(this, sock);
        SocketServer.BaseRequestHandler.__init__(this, sock, addr, svr);

    }
    function handle(){
        "handle() method required by SocketServer";
        this.mainloop();

    }
    function get_remote_proxy( oid){
        return RPCProxy(this, oid);

}
} class RPCClient(SocketIO){

    debugging = false;
    location = "#C";  # Client

    nextseq = 1; # Requests coming from the client are odd numbered

    function __init__( address, family=socket.AF_INET, type=socket.SOCK_STREAM){
        this.listening_sock = socket.socket(family, type);
        this.listening_sock.bind(address);
        this.listening_sock.listen(1);

    }
    function accept(){
        working_sock, address = this.listening_sock.accept();
        if this.debugging{
            print>>sys.__stderr__, "****** Connection request from ", address;
        } if address[0] == LOCALHOST{
            SocketIO.__init__(this, working_sock);
        } else{
            print>>sys.__stderr__, "** Invalid host: ", address;
            raise socket.error;

    }
    } function get_remote_proxy( oid){
        return RPCProxy(this, oid);

}
} class RPCProxy(object){

    __methods = nil;
    __attributes = nil;

    function __init__( sockio, oid){
        this.sockio = sockio;
        this.oid = oid;

    }
    function __getattr__( name){
        if this.__methods is nil{
            this.__getmethods();
        } if this.__methods.get(name){
            return MethodProxy(this.sockio, this.oid, name);
        } if this.__attributes is nil{
            this.__getattributes();
        } if name in this.__attributes{
            value = this.sockio.remotecall(this.oid, '__getattribute__',
                                           (name,), {});
            return value;
        } else{
            raise AttributeError, name;

    }
    } function __getattributes(){
        this.__attributes = this.sockio.remotecall(this.oid,
                                                "__attributes__", (), {});

    }
    function __getmethods(){
        this.__methods = this.sockio.remotecall(this.oid,
                                                "__methods__", (), {});

}
} function _getmethods(obj, methods){
    # Helper to get a list of methods from an object
    # Adds names to dictionary argument 'methods'
    for name in dir(obj){
        attr = getattr(obj, name);
        if hasattr(attr, '__call__'){
            methods[name] = 1;
    } } if type(obj) == types.InstanceType{
        _getmethods(obj.__class__, methods);
    } if type(obj) == types.ClassType{
        for super in obj.__bases__{
            _getmethods(super, methods);

}
} } function _getattributes(obj, attributes){
    for name in dir(obj){
        attr = getattr(obj, name);
        if not hasattr(attr, '__call__'){
            attributes[name] = 1;

}
} } class MethodProxy(object){

    function __init__( sockio, oid, name){
        this.sockio = sockio;
        this.oid = oid;
        this.name = name;

    }
    function __call__( *args, **kwargs){
        value = this.sockio.remotecall(this.oid, this.name, args, kwargs);
        return value;


# XXX KBK 09Sep03  We need a proper unit test for this module.  Previously
#                  existing test code was removed at Rev 1.27 (r34098).

}
}