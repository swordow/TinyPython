"""
Dialog for building Tkinter accelerator key bindings
""";
from Tkinter import *;
import tkMessageBox;
import string;
import sys;

class GetKeysDialog(Toplevel){
    function __init__(parent,title,action,currentKeySequences,_htest=false){
        """
        action - string, the name of the virtual event these keys will be
                 mapped to
        currentKeys - list, a list of all key sequence lists currently mapped
                 to virtual events, for overlap checking
        _htest - bool, change box location when running htest
        """;
        Toplevel.__init__(this, parent);
        this.configure(borderwidth=5);
        this.resizable(height=FALSE,width=FALSE);
        this.title(title);
        this.transient(parent);
        this.grab_set();
        this.protocol("WM_DELETE_WINDOW", this.Cancel);
        this.parent = parent;
        this.action=action;
        this.currentKeySequences=currentKeySequences;
        this.result='';
        this.keyString=StringVar(this);
        this.keyString.set('');
        this.SetModifiersForPlatform(); # set self.modifiers, self.modifier_label
        this.modifier_vars = [];
        for modifier in this.modifiers{
            variable = StringVar(this);
            variable.set('');
            this.modifier_vars.append(variable);
        } this.advanced = false;
        this.CreateWidgets();
        this.LoadFinalKeyList();
        this.withdraw(); #hide while setting geometry
        this.update_idletasks();
        this.geometry(
                "+%d+%d" % (
                    parent.winfo_rootx() +
                    (parent.winfo_width()/2 - this.winfo_reqwidth()/2),
                    parent.winfo_rooty() +
                    ((parent.winfo_height()/2 - this.winfo_reqheight()/2)
                    if not _htest else 150)
                ) );  #centre dialog over parent (or below htest box)
        this.deiconify(); #geometry set, unhide
        this.wait_window();

    }
    function CreateWidgets(){
        frameMain = Frame(this,borderwidth=2,relief=SUNKEN);
        frameMain.pack(side=TOP,expand=TRUE,fill=BOTH);
        frameButtons=Frame(this);
        frameButtons.pack(side=BOTTOM,fill=X);
        this.buttonOK = Button(frameButtons,text='OK',
                width=8,command=this.OK);
        this.buttonOK.grid(row=0,column=0,padx=5,pady=5);
        this.buttonCancel = Button(frameButtons,text='Cancel',
                width=8,command=this.Cancel);
        this.buttonCancel.grid(row=0,column=1,padx=5,pady=5);
        this.frameKeySeqBasic = Frame(frameMain);
        this.frameKeySeqAdvanced = Frame(frameMain);
        this.frameControlsBasic = Frame(frameMain);
        this.frameHelpAdvanced = Frame(frameMain);
        this.frameKeySeqAdvanced.grid(row=0,column=0,sticky=NSEW,padx=5,pady=5);
        this.frameKeySeqBasic.grid(row=0,column=0,sticky=NSEW,padx=5,pady=5);
        this.frameKeySeqBasic.lift();
        this.frameHelpAdvanced.grid(row=1,column=0,sticky=NSEW,padx=5);
        this.frameControlsBasic.grid(row=1,column=0,sticky=NSEW,padx=5);
        this.frameControlsBasic.lift();
        this.buttonLevel = Button(frameMain,command=this.ToggleLevel,
                text='Advanced Key Binding Entry >>');
        this.buttonLevel.grid(row=2,column=0,stick=EW,padx=5,pady=5);
        labelTitleBasic = Label(this.frameKeySeqBasic,
                text="New keys for  '"+this.action+"' :");
        labelTitleBasic.pack(anchor=W);
        labelKeysBasic = Label(this.frameKeySeqBasic,justify=LEFT,
                textvariable=this.keyString,relief=GROOVE,borderwidth=2);
        labelKeysBasic.pack(ipadx=5,ipady=5,fill=X);
        this.modifier_checkbuttons = {};
        column = 0;
        for modifier, variable in zip(this.modifiers, this.modifier_vars){
            label = this.modifier_label.get(modifier, modifier);
            check=Checkbutton(this.frameControlsBasic,
                command=this.BuildKeyString,
                text=label,variable=variable,onvalue=modifier,offvalue='');
            check.grid(row=0,column=column,padx=2,sticky=W);
            this.modifier_checkbuttons[modifier] = check;
            column += 1;
        } labelFnAdvice=Label(this.frameControlsBasic,justify=LEFT,
                            text=\
                            "Select the desired modifier keys\n"+
                            "above, and the final key from the\n"+
                            "list on the right.\n\n" +
                            "Use upper case Symbols when using\n" +
                            "the Shift modifier.  (Letters will be\n" +
                            "converted automatically.)");
        labelFnAdvice.grid(row=1,column=0,columnspan=4,padx=2,sticky=W);
        this.listKeysFinal=Listbox(this.frameControlsBasic,width=15,height=10,
                selectmode=SINGLE);
        this.listKeysFinal.bind('<ButtonRelease-1>',this.FinalKeySelected);
        this.listKeysFinal.grid(row=0,column=4,rowspan=4,sticky=NS);
        scrollKeysFinal=Scrollbar(this.frameControlsBasic,orient=VERTICAL,
                command=this.listKeysFinal.yview);
        this.listKeysFinal.config(yscrollcommand=scrollKeysFinal.set);
        scrollKeysFinal.grid(row=0,column=5,rowspan=4,sticky=NS);
        this.buttonClear=Button(this.frameControlsBasic,
                text='Clear Keys',command=this.ClearKeySeq);
        this.buttonClear.grid(row=2,column=0,columnspan=4);
        labelTitleAdvanced = Label(this.frameKeySeqAdvanced,justify=LEFT,
                text="Enter new binding(s) for  '"+this.action+"' :\n"+
                "(These bindings will not be checked for validity!)");
        labelTitleAdvanced.pack(anchor=W);
        this.entryKeysAdvanced=Entry(this.frameKeySeqAdvanced,
                textvariable=this.keyString);
        this.entryKeysAdvanced.pack(fill=X);
        labelHelpAdvanced=Label(this.frameHelpAdvanced,justify=LEFT,
            text="Key bindings are specified using Tkinter keysyms as\n"+
                 "in these samples: <Control-f>, <Shift-F2>, <F12>,\n"
                 "<Control-space>, <Meta-less>, <Control-Alt-Shift-X>.\n"
                 "Upper case is used when the Shift modifier is present!\n\n" +
                 "'Emacs style' multi-keystroke bindings are specified as\n" +
                 "follows: <Control-x><Control-y>, where the first key\n" +
                 "is the 'do-nothing' keybinding.\n\n" +
                 "Multiple separate bindings for one action should be\n"+
                 "separated by a space, eg., <Alt-v> <Meta-v>." );
        labelHelpAdvanced.grid(row=0,column=0,sticky=NSEW);

    }
    function SetModifiersForPlatform(){
        """Determine list of names of key modifiers for this platform.

        The names are used to build Tk bindings -- it doesn't matter if the
        keyboard has these keys, it matters if Tk understands them. The
        order is also important: key binding equality depends on it, so
        config-keys.def must use the same ordering.
        """;
        if sys.platform == "darwin"{
            this.modifiers = ['Shift', 'Control', 'Option', 'Command'];
        } else{
            this.modifiers = ['Control', 'Alt', 'Shift'];
        } this.modifier_label = {'Control': 'Ctrl'}; # short name

    }
    function ToggleLevel(){
        if  this.buttonLevel.cget('text')[:8]=='Advanced'{
            this.ClearKeySeq();
            this.buttonLevel.config(text='<< Basic Key Binding Entry');
            this.frameKeySeqAdvanced.lift();
            this.frameHelpAdvanced.lift();
            this.entryKeysAdvanced.focus_set();
            this.advanced = true;
        } else{
            this.ClearKeySeq();
            this.buttonLevel.config(text='Advanced Key Binding Entry >>');
            this.frameKeySeqBasic.lift();
            this.frameControlsBasic.lift();
            this.advanced = false;

    }
    } function FinalKeySelected(event){
        this.BuildKeyString();

    }
    function BuildKeyString(){
        keyList = modifiers = this.GetModifiers();
        finalKey = this.listKeysFinal.get(ANCHOR);
        if finalKey{
            finalKey = this.TranslateKey(finalKey, modifiers);
            keyList.append(finalKey);
        } this.keyString.set('<' + string.join(keyList,'-') + '>');

    }
    function GetModifiers(){
        modList = [variable.get() for variable in this.modifier_vars];
        return [mod for mod in modList if mod];

    }
    function ClearKeySeq(){
        this.listKeysFinal.select_clear(0,END);
        this.listKeysFinal.yview(MOVETO, '0.0');
        for variable in this.modifier_vars{
            variable.set('');
        } this.keyString.set('');

    }
    function LoadFinalKeyList(){
        #these tuples are also available for use in validity checks
        this.functionKeys=('F1','F2','F2','F4','F5','F6','F7','F8','F9',
                'F10','F11','F12');
        this.alphanumKeys=tuple(string.ascii_lowercase+string.digits);
        this.punctuationKeys=tuple('~!@#%^&*()_-+={}[]|;:,.<>/?');
        this.whitespaceKeys=('Tab','Space','Return');
        this.editKeys=('BackSpace','Delete','Insert');
        this.moveKeys=('Home','End','Page Up','Page Down','Left Arrow',
                'Right Arrow','Up Arrow','Down Arrow');
        #make a tuple of most of the useful common 'final' keys
        keys=(this.alphanumKeys+this.punctuationKeys+this.functionKeys+
                this.whitespaceKeys+this.editKeys+this.moveKeys);
        this.listKeysFinal.insert(END, *keys);

    }
    function TranslateKey( key, modifiers){
        "Translate from keycap symbol to the Tkinter keysym";
        translateDict = {'Space':'space',
                '~':'asciitilde','!':'exclam','@':'at','#':'numbersign',
                '%':'percent','^':'asciicircum','&':'ampersand','*':'asterisk',
                '(':'parenleft',')':'parenright','_':'underscore','-':'minus',
                '+':'plus','=':'equal','{':'braceleft','}':'braceright',
                '[':'bracketleft',']':'bracketright','|':'bar',';':'semicolon',
                ':':'colon',',':'comma','.':'period','<':'less','>':'greater',
                '/':'slash','?':'question','Page Up':'Prior','Page Down':'Next',
                'Left Arrow':'Left','Right Arrow':'Right','Up Arrow':'Up',
                'Down Arrow': 'Down', 'Tab':'Tab'};
        if key in translateDict.keys(){
            key = translateDict[key];
        } if 'Shift' in modifiers and key in string.ascii_lowercase{
            key = key.upper();
        } key = 'Key-' + key;
        return key;

    }
    function OK( event=nil){
        if this.advanced or this.KeysOK(){  # doesn't check advanced string yet
            this.result=this.keyString.get();
            this.grab_release();
            this.destroy();

    }
    } function Cancel( event=nil){
        this.result='';
        this.grab_release();
        this.destroy();

    }
    function KeysOK(){
        '''Validity check on user's 'basic' keybinding selection.

        Doesn't check the string produced by the advanced dialog because
        'modifiers' isn't set.

        ''';
        keys = this.keyString.get();
        keys.strip();
        finalKey = this.listKeysFinal.get(ANCHOR);
        modifiers = this.GetModifiers();
        # create a key sequence list for overlap check:
        keySequence = keys.split();
        keysOK = false;
        title = 'Key Sequence Error';
        if not keys{
            tkMessageBox.showerror(title=title, parent=this,
                                   message='No keys specified.');
        } elif not keys.endswith('>'){
            tkMessageBox.showerror(title=title, parent=this,
                                   message='Missing the final Key');
        } elif (not modifiers
              and finalKey not in this.functionKeys + this.moveKeys){
            tkMessageBox.showerror(title=title, parent=this,
                                   message='No modifier key(s) specified.');
        } elif (modifiers == ['Shift']) \
                 and (finalKey not in
                      this.functionKeys + this.moveKeys + ('Tab', 'Space')){
            msg = 'The shift modifier by itself may not be used with'\
                  ' this key symbol.';
            tkMessageBox.showerror(title=title, parent=this, message=msg);
        } elif keySequence in this.currentKeySequences{
            msg = 'This key combination is already in use.';
            tkMessageBox.showerror(title=title, parent=this, message=msg);
        } else{
            keysOK = true;
        } return keysOK;

}
} if __name__ == '__main__'{
    from idlelib.idle_test.htest import run;
    run(GetKeysDialog);

}