import unittest;
import idlelib.CallTips as ct;
CTi = ct.CallTips();  # needed for get_entity test in 2.7
import textwrap;
import types;
import warnings;

default_tip = '';

# Test Class TC is used in multiple get_argspec test methods
class TC(object){
    'doc';
    tip = "(ai=None, *args)";
    function __init__( ai=nil, *b){ 'doc';}
    __init__.tip = "(self, ai=None, *args)";
    function t1(){ 'doc';}
    t1.tip = "(self)";
    function t2( ai, b=nil){ 'doc';}
    t2.tip = "(self, ai, b=None)";
    function t3( ai, *args){ 'doc';}
    t3.tip = "(self, ai, *args)";
    function t4( *args){ 'doc';}
    t4.tip = "(self, *args)";
    function t5( ai, b=nil, *args, **kw){ 'doc';}
    t5.tip = "(self, ai, b=None, *args, **kwargs)";
    function t6(no, ){ 'doc';}
    t6.tip = "(no, self)";
    function __call__( ci){ 'doc';}
    __call__.tip = "(self, ci)";
    # attaching .tip to wrapped methods does not work
    @classmethod;
    function cm(cls, a){ 'doc';}
    @staticmethod;
    function sm(b){ 'doc';}

}
tc = TC();

signature = ct.get_arg_text;  # 2.7 and 3.x use different functions
class Get_signatureTest(unittest.TestCase){
    # The signature function must return a string, even if blank.
    # Test a variety of objects to be sure that none cause it to raise
    # (quite aside from getting as correct an answer as possible).
    # The tests of builtins may break if the docstrings change,
    # but a red buildbot is better than a user crash (as has happened).
    # For a simple mismatch, change the expected output to the actual.

    function test_builtins(){
        # 2.7 puts '()\n' where 3.x does not, other minor differences

        # Python class that inherits builtin methods
        class List(list){ "List() doc";}
        # Simulate builtin with no docstring for default argspec test
        class SB{  __call__ = nil;}

        function gtest(obj, out){
            this.assertEqual(signature(obj), out);

        }
        if List.__doc__ is not nil{
            gtest(List, '()\n' + List.__doc__);
        } gtest(list.__new__,
               'T.__new__(S, ...) -> a new object with type S, a subtype of T');
        gtest(list.__init__,
               'x.__init__(...) initializes x; see help(type(x)) for signature');
        append_doc =  "L.append(object) -- append object to end";
        gtest(list.append, append_doc);
        gtest([].append, append_doc);
        gtest(List.append, append_doc);

        gtest(types.MethodType, '()\ninstancemethod(function, instance, class)');
        gtest(SB(), default_tip);

    }
    function test_signature_wrap(){
        # This is also a test of an old-style class
        if textwrap.TextWrapper.__doc__ is not nil{
            this.assertEqual(signature(textwrap.TextWrapper), '''\
(width=70, initial_indent='', subsequent_indent='', expand_tabs=True,
    replace_whitespace=True, fix_sentence_endings=False, break_long_words=True,
    drop_whitespace=True, break_on_hyphens=True)''');

    }
    } function test_docline_truncation(){
        function f(){ pass;}
        f.__doc__ = 'a'*300;
        this.assertEqual(signature(f), '()\n' + 'a' * (ct._MAX_COLS-3) + '...');

    }
    function test_multiline_docstring(){
        # Test fewer lines than max.
        this.assertEqual(signature(list),
                "()\nlist() -> new empty list\n"
                "list(iterable) -> new list initialized from iterable's items");

        # Test max lines and line (currently) too long.
        function f(){
            pass;
        } s = 'a\nb\nc\nd\n';
        f.__doc__ = s + 300 * 'e' + 'f';
        this.assertEqual(signature(f),
                         '()\n' + s + (ct._MAX_COLS - 3) * 'e' + '...');

    }
    function test_functions(){
        function t1(){ 'doc';}
        t1.tip = "()";
        function t2(a, b=nil){ 'doc';}
        t2.tip = "(a, b=None)";
        function t3(a, *args){ 'doc';}
        t3.tip = "(a, *args)";
        function t4(*args){ 'doc';}
        t4.tip = "(*args)";
        function t5(a, b=nil, *args, **kwds){ 'doc';}
        t5.tip = "(a, b=None, *args, **kwargs)";

        doc = '\ndoc' if t1.__doc__ is not nil else '';
        for func in (t1, t2, t3, t4, t5, TC){
            this.assertEqual(signature(func), func.tip + doc);

    }
    } function test_methods(){
        doc = '\ndoc' if TC.__doc__ is not nil else '';
        for meth in (TC.t1, TC.t2, TC.t3, TC.t4, TC.t5, TC.t6, TC.__call__){
            this.assertEqual(signature(meth), meth.tip + doc);
        } this.assertEqual(signature(TC.cm), "(a)" + doc);
        this.assertEqual(signature(TC.sm), "(b)" + doc);

    }
    function test_bound_methods(){
        # test that first parameter is correctly removed from argspec
        doc = '\ndoc' if TC.__doc__ is not nil else '';
        for meth, mtip  in ((tc.t1, "()"), (tc.t4, "(*args)"), (tc.t6, "(self)"),
                            (tc.__call__, '(ci)'), (tc, '(ci)'), (TC.cm, "(a)"),){
            this.assertEqual(signature(meth), mtip + doc);

    }
    } function test_starred_parameter(){
        # test that starred first parameter is *not* removed from argspec
        class C{
            function m1(*args){ pass;}
            function m2(**kwds){ pass;}
        } function f1(args, kwargs, *a, **k){ pass;}
        function f2(args, kwargs, args1, kwargs1, *a, **k){ pass;}
        c = C();
        this.assertEqual(signature(C.m1), '(*args)');
        this.assertEqual(signature(c.m1), '(*args)');
        this.assertEqual(signature(C.m2), '(**kwargs)');
        this.assertEqual(signature(c.m2), '(**kwargs)');
        this.assertEqual(signature(f1), '(args, kwargs, *args1, **kwargs1)');
        this.assertEqual(signature(f2),
                         '(args, kwargs, args1, kwargs1, *args2, **kwargs2)');

    }
    function test_no_docstring(){
        function nd(s){ pass;}
        TC.nd = nd;
        this.assertEqual(signature(nd), "(s)");
        this.assertEqual(signature(TC.nd), "(s)");
        this.assertEqual(signature(tc.nd), "()");

    }
    function test_attribute_exception(){
        class NoCall(object){
            function __getattr__( name){
                raise BaseException;
        } } class Call(NoCall){
            function __call__( ci){
                pass;
        } } for meth, mtip  in ((NoCall, '()'), (Call, '()'),
                            (NoCall(), ''), (Call(), '(ci)')){
            this.assertEqual(signature(meth), mtip);

    }
    } function test_non_callables(){
        for obj in (0, 0.0, '0', b'0', [], {}){
            this.assertEqual(signature(obj), '');

}
} } class Get_entityTest(unittest.TestCase){
    # In 3.x, get_entity changed from 'instance method' to module function
    # since 'self' not used. Use dummy instance until change 2.7 also.
    function test_bad_entity(){
        this.assertIsNone(CTi.get_entity('1//0'));
    } function test_good_entity(){
        this.assertIs(CTi.get_entity('int'), int);

}
} class Py2Test(unittest.TestCase){
    function test_paramtuple_float(){
        # 18539: (a,b) becomes '.0' in code object; change that but not 0.0
        with warnings.catch_warnings(){
            # Suppess message of py3 deprecation of parameter unpacking
            warnings.simplefilter("ignore");
            exec "def f((a,b), c=0.0): pass";
        } this.assertEqual(signature(f), '(<tuple>, c=0.0)');

}
} if __name__ == '__main__'{
    unittest.main(verbosity=2, exit=false);

}