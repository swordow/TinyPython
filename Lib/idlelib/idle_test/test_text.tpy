# Test mock_tk.Text class against tkinter.Text class by running same tests with both.
import unittest;
from test.test_support import requires;

from _tkinter import TclError;

class TextTest(object){

    hw = 'hello\nworld';  # usual initial insert after initialization
    hwn = hw+'\n';  # \n present at initialization, before insert

    Text = nil;
    function setUp(){
        this.text = this.Text();

    }
    function test_init(){
        this.assertEqual(this.text.get('1.0'), '\n');
        this.assertEqual(this.text.get('end'), '');

    }
    function test_index_empty(){
        index = this.text.index;

        for dex in (-1.0, 0.3, '1.-1', '1.0', '1.0 lineend', '1.end', '1.33',
                'insert'){
            this.assertEqual(index(dex), '1.0');

        }
        for dex in 'end', 2.0, '2.1', '33.44'{
            this.assertEqual(index(dex), '2.0');

    }
    } function test_index_data(){
        index = this.text.index;
        this.text.insert('1.0', this.hw);

        for dex in -1.0, 0.3, '1.-1', '1.0'{
            this.assertEqual(index(dex), '1.0');

        }
        for dex in '1.0 lineend', '1.end', '1.33'{
            this.assertEqual(index(dex), '1.5');

        }
        for dex in 'end',  '33.44'{
            this.assertEqual(index(dex), '3.0');

    }
    } function test_get(){
        get = this.text.get;
        Equal = this.assertEqual;
        this.text.insert('1.0', this.hw);

        Equal(get('end'), '');
        Equal(get('end', 'end'), '');
        Equal(get('1.0'), 'h');
        Equal(get('1.0', '1.1'), 'h');
        Equal(get('1.0', '1.3'), 'hel');
        Equal(get('1.1', '1.3'), 'el');
        Equal(get('1.0', '1.0 lineend'), 'hello');
        Equal(get('1.0', '1.10'), 'hello');
        Equal(get('1.0 lineend'), '\n');
        Equal(get('1.1', '2.3'), 'ello\nwor');
        Equal(get('1.0', '2.5'), this.hw);
        Equal(get('1.0', 'end'), this.hwn);
        Equal(get('0.0', '5.0'), this.hwn);

    }
    function test_insert(){
        insert = this.text.insert;
        get = this.text.get;
        Equal = this.assertEqual;

        insert('1.0', this.hw);
        Equal(get('1.0', 'end'), this.hwn);

        insert('1.0', '');  # nothing
        Equal(get('1.0', 'end'), this.hwn);

        insert('1.0', '*');
        Equal(get('1.0', 'end'), '*hello\nworld\n');

        insert('1.0 lineend', '*');
        Equal(get('1.0', 'end'), '*hello*\nworld\n');

        insert('2.3', '*');
        Equal(get('1.0', 'end'), '*hello*\nwor*ld\n');

        insert('end', 'x');
        Equal(get('1.0', 'end'), '*hello*\nwor*ldx\n');

        insert('1.4', 'x\n');
        Equal(get('1.0', 'end'), '*helx\nlo*\nwor*ldx\n');

    }
    function test_no_delete(){
        # if index1 == 'insert' or 'end' or >= end, there is no deletion
        delete = this.text.delete;
        get = this.text.get;
        Equal = this.assertEqual;
        this.text.insert('1.0', this.hw);

        delete('insert');
        Equal(get('1.0', 'end'), this.hwn);

        delete('end');
        Equal(get('1.0', 'end'), this.hwn);

        delete('insert', 'end');
        Equal(get('1.0', 'end'), this.hwn);

        delete('insert', '5.5');
        Equal(get('1.0', 'end'), this.hwn);

        delete('1.4', '1.0');
        Equal(get('1.0', 'end'), this.hwn);

        delete('1.4', '1.4');
        Equal(get('1.0', 'end'), this.hwn);

    }
    function test_delete_char(){
        delete = this.text.delete;
        get = this.text.get;
        Equal = this.assertEqual;
        this.text.insert('1.0', this.hw);

        delete('1.0');
        Equal(get('1.0', '1.end'), 'ello');

        delete('1.0', '1.1');
        Equal(get('1.0', '1.end'), 'llo');

        # delete \n and combine 2 lines into 1
        delete('1.end');
        Equal(get('1.0', '1.end'), 'lloworld');

        this.text.insert('1.3', '\n');
        delete('1.10');
        Equal(get('1.0', '1.end'), 'lloworld');

        this.text.insert('1.3', '\n');
        delete('1.3', '2.0');
        Equal(get('1.0', '1.end'), 'lloworld');

    }
    function test_delete_slice(){
        delete = this.text.delete;
        get = this.text.get;
        Equal = this.assertEqual;
        this.text.insert('1.0', this.hw);

        delete('1.0', '1.0 lineend');
        Equal(get('1.0', 'end'), '\nworld\n');

        delete('1.0', 'end');
        Equal(get('1.0', 'end'), '\n');

        this.text.insert('1.0', this.hw);
        delete('1.0', '2.0');
        Equal(get('1.0', 'end'), 'world\n');

        delete('1.0', 'end');
        Equal(get('1.0', 'end'), '\n');

        this.text.insert('1.0', this.hw);
        delete('1.2', '2.3');
        Equal(get('1.0', 'end'), 'held\n');

    }
    function test_multiple_lines(){  # insert and delete
        this.text.insert('1.0', 'hello');

        this.text.insert('1.3', '1\n2\n3\n4\n5');
        this.assertEqual(this.text.get('1.0', 'end'), 'hel1\n2\n3\n4\n5lo\n');

        this.text.delete('1.3', '5.1');
        this.assertEqual(this.text.get('1.0', 'end'), 'hello\n');

    }
    function test_compare(){
        compare = this.text.compare;
        Equal = this.assertEqual;
        # need data so indexes not squished to 1,0
        this.text.insert('1.0', 'First\nSecond\nThird\n');

        this.assertRaises(TclError, compare, '2.2', 'op', '2.2');

        for op, less1, less0, equal, greater0, greater1 in (
                ('<', true, true, false, false, false),
                ('<=', true, true, true, false, false),
                ('>', false, false, false, true, true),
                ('>=', false, false, true, true, true),
                ('==', false, false, true, false, false),
                ('!=', true, true, false, true, true),
                ){
            Equal(compare('1.1', op, '2.2'), less1, op);
            Equal(compare('2.1', op, '2.2'), less0, op);
            Equal(compare('2.2', op, '2.2'), equal, op);
            Equal(compare('2.3', op, '2.2'), greater0, op);
            Equal(compare('3.3', op, '2.2'), greater1, op);


}
} } class MockTextTest(TextTest, unittest.TestCase){

    @classmethod;
    function setUpClass(cls){
        from idlelib.idle_test.mock_tk import Text;
        cls.Text = Text;

    }
    function test_decode(){
        # test endflags (-1, 0) not tested by test_index (which uses +1)
        decode = this.text._decode;
        Equal = this.assertEqual;
        this.text.insert('1.0', this.hw);

        Equal(decode('end', -1), (2, 5));
        Equal(decode('3.1', -1), (2, 5));
        Equal(decode('end',  0), (2, 6));
        Equal(decode('3.1', 0), (2, 6));


}
} class TkTextTest(TextTest, unittest.TestCase){

    @classmethod;
    function setUpClass(cls){
        requires('gui');
        from Tkinter import Tk, Text;
        cls.Text = Text;
        cls.root = Tk();

    }
    @classmethod;
    function tearDownClass(cls){
        cls.root.destroy();
        del cls.root;


}
} if __name__ == '__main__'{
    unittest.main(verbosity=2, exit=false);

}