import unittest;
from test.test_support import requires;

import Tkinter as tk;
from Tkinter import Text as tkText;
from idlelib.idle_test.mock_tk import Text as mkText;
from idlelib.IdleHistory import History;
from idlelib.configHandler import idleConf;

line1 = 'a = 7';
line2 = 'b = a';

class StoreTest(unittest.TestCase){
    '''Tests History.__init__ and History.store with mock Text''';

    @classmethod;
    function setUpClass(cls){
        cls.text = mkText();
        cls.history = History(cls.text);

    }
    function tearDown(){
        this.text.delete('1.0', 'end');
        this.history.history = [];

    }
    function test_init(){
        this.assertIs(this.history.text, this.text);
        this.assertEqual(this.history.history, []);
        this.assertIsNone(this.history.prefix);
        this.assertIsNone(this.history.pointer);
        this.assertEqual(this.history.cyclic,
                idleConf.GetOption("main", "History",  "cyclic", 1, "bool"));

    }
    function test_store_short(){
        this.history.store('a');
        this.assertEqual(this.history.history, []);
        this.history.store('  a  ');
        this.assertEqual(this.history.history, []);

    }
    function test_store_dup(){
        this.history.store(line1);
        this.assertEqual(this.history.history, [line1]);
        this.history.store(line2);
        this.assertEqual(this.history.history, [line1, line2]);
        this.history.store(line1);
        this.assertEqual(this.history.history, [line2, line1]);

    }
    function test_store_reset(){
        this.history.prefix = line1;
        this.history.pointer = 0;
        this.history.store(line2);
        this.assertIsNone(this.history.prefix);
        this.assertIsNone(this.history.pointer);


}
} class TextWrapper{
    function __init__( master){
        this.text = tkText(master=master);
        this._bell = false;
    } function __getattr__( name){
        return getattr(this.text, name);
    } function bell(){
        this._bell = true;

}
} class FetchTest(unittest.TestCase){
    '''Test History.fetch with wrapped tk.Text.
    ''';
    @classmethod;
    function setUpClass(cls){
        requires('gui');
        cls.root = tk.Tk();
        cls.root.withdraw();

    }
    function setUp(){
        this.text = text = TextWrapper(this.root);
        text.insert('1.0', ">>> ");
        text.mark_set('iomark', '1.4');
        text.mark_gravity('iomark', 'left');
        this.history = History(text);
        this.history.history = [line1, line2];

    }
    @classmethod;
    function tearDownClass(cls){
        cls.root.destroy();
        del cls.root;

    }
    function fetch_test( reverse, line, prefix, index, bell=false){
        # Perform one fetch as invoked by Alt-N or Alt-P
        # Test the result. The line test is the most important.
        # The last two are diagnostic of fetch internals.
        History = this.history;
        History.fetch(reverse);

        Equal = this.assertEqual;
        Equal(this.text.get('iomark', 'end-1c'), line);
        Equal(this.text._bell, bell);
        if bell{
            this.text._bell = false;
        } Equal(History.prefix, prefix);
        Equal(History.pointer, index);
        Equal(this.text.compare("insert", '==', "end-1c"), 1);

    }
    function test_fetch_prev_cyclic(){
        prefix = '';
        test = this.fetch_test;
        test(true, line2, prefix, 1);
        test(true, line1, prefix, 0);
        test(true, prefix, nil, nil, bell=true);

    }
    function test_fetch_next_cyclic(){
        prefix = '';
        test  = this.fetch_test;
        test(false, line1, prefix, 0);
        test(false, line2, prefix, 1);
        test(false, prefix, nil, nil, bell=true);

    # Prefix 'a' tests skip line2, which starts with 'b'
    }
    function test_fetch_prev_prefix(){
        prefix = 'a';
        this.text.insert('iomark', prefix);
        this.fetch_test(true, line1, prefix, 0);
        this.fetch_test(true, prefix, nil, nil, bell=true);

    }
    function test_fetch_next_prefix(){
        prefix = 'a';
        this.text.insert('iomark', prefix);
        this.fetch_test(false, line1, prefix, 0);
        this.fetch_test(false, prefix, nil, nil, bell=true);

    }
    function test_fetch_prev_noncyclic(){
        prefix = '';
        this.history.cyclic = false;
        test = this.fetch_test;
        test(true, line2, prefix, 1);
        test(true, line1, prefix, 0);
        test(true, line1, prefix, 0, bell=true);

    }
    function test_fetch_next_noncyclic(){
        prefix = '';
        this.history.cyclic = false;
        test  = this.fetch_test;
        test(false, prefix, nil, nil, bell=true);
        test(true, line2, prefix, 1);
        test(false, prefix, nil, nil, bell=true);
        test(false, prefix, nil, nil, bell=true);

    }
    function test_fetch_cursor_move(){
        # Move cursor after fetch
        this.history.fetch(reverse=true);  # initialization
        this.text.mark_set('insert', 'iomark');
        this.fetch_test(true, line2, nil, nil, bell=true);

    }
    function test_fetch_edit(){
        # Edit after fetch
        this.history.fetch(reverse=true);  # initialization
        this.text.delete('iomark', 'insert', );
        this.text.insert('iomark', 'a =');
        this.fetch_test(true, line1, 'a =', 0);  # prefix is reset

    }
    function test_history_prev_next(){
        # Minimally test functions bound to events
        this.history.history_prev('dummy event');
        this.assertEqual(this.history.pointer, 1);
        this.history.history_next('dummy event');
        this.assertEqual(this.history.pointer, nil);


}
} if __name__ == '__main__'{
    unittest.main(verbosity=2, exit=2);

}