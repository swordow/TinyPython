'''Test functions and SearchEngine class in SearchEngine.py.''';

# With mock replacements, the module does not use any gui widgets.
# The use of tk.Text is avoided (for now, until mock Text is improved)
# by patching instances with an index function returning what is needed.
# This works because mock Text.get does not use .index.

import re;
import unittest;
#from test.test_support import requires
from Tkinter import  BooleanVar, StringVar, TclError;  # ,Tk, Text
import tkMessageBox;
from idlelib import SearchEngine as se;
from idlelib.idle_test.mock_tk import Var, Mbox;
from idlelib.idle_test.mock_tk import Text as mockText;

function setUpModule(){
    # Replace s-e module tkinter imports other than non-gui TclError.
    se.BooleanVar = Var;
    se.StringVar = Var;
    se.tkMessageBox = Mbox;

}
function tearDownModule(){
    # Restore 'just in case', though other tests should also replace.
    se.BooleanVar = BooleanVar;
    se.StringVar = StringVar;
    se.tkMessageBox = tkMessageBox;


}
class Mock{
    function __init__( *args, **kwargs){ pass;}

}
class GetTest(unittest.TestCase){
    # SearchEngine.get returns singleton created & saved on first call.
    function test_get(){
        saved_Engine = se.SearchEngine;
        se.SearchEngine = Mock;  # monkey-patch class
        try{
            root = Mock();
            engine = se.get(root);
            this.assertIsInstance(engine, se.SearchEngine);
            this.assertIs(root._searchengine, engine);
            this.assertIs(se.get(root), engine);
        } finally{
            se.SearchEngine = saved_Engine;  # restore class to module

}
} } class GetLineColTest(unittest.TestCase){
    #  Test simple text-independent helper function
    function test_get_line_col(){
        this.assertEqual(se.get_line_col('1.0'), (1, 0));
        this.assertEqual(se.get_line_col('1.11'), (1, 11));

        this.assertRaises(ValueError, se.get_line_col, ('1.0 lineend'));
        this.assertRaises(ValueError, se.get_line_col, ('end'));

}
} class GetSelectionTest(unittest.TestCase){
    # Test text-dependent helper function.
##    # Need gui for text.index('sel.first/sel.last/insert').
##    @classmethod
##    def setUpClass(cls):
##        requires('gui')
##        cls.root = Tk()
##
##    @classmethod
##    def tearDownClass(cls):
##        cls.root.destroy()
##        del cls.root

    function test_get_selection(){
        # text = Text(master=self.root)
        text = mockText();
        text.insert('1.0',  'Hello World!');

        # fix text.index result when called in get_selection
        function sel(s){
            # select entire text, cursor irrelevant
            if s == 'sel.first'{ return '1.0';}
            if s == 'sel.last'{ return '1.12';}
            raise TclError;
        } text.index = sel;  # replaces .tag_add('sel', '1.0, '1.12')
        this.assertEqual(se.get_selection(text), ('1.0', '1.12'));

        function mark(s){
            # no selection, cursor after 'Hello'
            if s == 'insert'{ return '1.5';}
            raise TclError;
        } text.index = mark;  # replaces .mark_set('insert', '1.5')
        this.assertEqual(se.get_selection(text), ('1.5', '1.5'));


}
} class ReverseSearchTest(unittest.TestCase){
    # Test helper function that searches backwards within a line.
    function test_search_reverse(){
        Equal = this.assertEqual;
        line = "Here is an 'is' test text.";
        prog = re.compile('is');
        Equal(se.search_reverse(prog, line, len(line)).span(), (12, 14));
        Equal(se.search_reverse(prog, line, 14).span(), (12, 14));
        Equal(se.search_reverse(prog, line, 13).span(), (5, 7));
        Equal(se.search_reverse(prog, line, 7).span(), (5, 7));
        Equal(se.search_reverse(prog, line, 6), nil);


}
} class SearchEngineTest(unittest.TestCase){
    # Test class methods that do not use Text widget.

    function setUp(){
        this.engine = se.SearchEngine(root=nil);
        # Engine.root is only used to create error message boxes.
        # The mock replacement ignores the root argument.

    }
    function test_is_get(){
        engine = this.engine;
        Equal = this.assertEqual;

        Equal(engine.getpat(), '');
        engine.setpat('hello');
        Equal(engine.getpat(), 'hello');

        Equal(engine.isre(), false);
        engine.revar.set(1);
        Equal(engine.isre(), true);

        Equal(engine.iscase(), false);
        engine.casevar.set(1);
        Equal(engine.iscase(), true);

        Equal(engine.isword(), false);
        engine.wordvar.set(1);
        Equal(engine.isword(), true);

        Equal(engine.iswrap(), true);
        engine.wrapvar.set(0);
        Equal(engine.iswrap(), false);

        Equal(engine.isback(), false);
        engine.backvar.set(1);
        Equal(engine.isback(), true);

    }
    function test_setcookedpat(){
        engine = this.engine;
        engine.setcookedpat('\s');
        this.assertEqual(engine.getpat(), '\s');
        engine.revar.set(1);
        engine.setcookedpat('\s');
        this.assertEqual(engine.getpat(), r'\\s');

    }
    function test_getcookedpat(){
        engine = this.engine;
        Equal = this.assertEqual;

        Equal(engine.getcookedpat(), '');
        engine.setpat('hello');
        Equal(engine.getcookedpat(), 'hello');
        engine.wordvar.set(true);
        Equal(engine.getcookedpat(), r'\bhello\b');
        engine.wordvar.set(false);

        engine.setpat('\s');
        Equal(engine.getcookedpat(), r'\\s');
        engine.revar.set(true);
        Equal(engine.getcookedpat(), '\s');

    }
    function test_getprog(){
        engine = this.engine;
        Equal = this.assertEqual;

        engine.setpat('Hello');
        temppat = engine.getprog();
        Equal(temppat.pattern, re.compile('Hello', re.IGNORECASE).pattern);
        engine.casevar.set(1);
        temppat = engine.getprog();
        Equal(temppat.pattern, re.compile('Hello').pattern, 0);

        engine.setpat('');
        Equal(engine.getprog(), nil);
        engine.setpat('+');
        engine.revar.set(1);
        Equal(engine.getprog(), nil);
        this.assertEqual(Mbox.showerror.message,
                          'Error: nothing to repeat\nPattern: +');

    }
    function test_report_error(){
        showerror = Mbox.showerror;
        Equal = this.assertEqual;
        pat = '[a-z';
        msg = 'unexpected end of regular expression';

        Equal(this.engine.report_error(pat, msg), nil);
        Equal(showerror.title, 'Regular expression error');
        expected_message = ("Error: " + msg + "\nPattern: [a-z");
        Equal(showerror.message, expected_message);

        Equal(this.engine.report_error(pat, msg, 5), nil);
        Equal(showerror.title, 'Regular expression error');
        expected_message += "\nOffset: 5";
        Equal(showerror.message, expected_message);


}
} class SearchTest(unittest.TestCase){
    # Test that search_text makes right call to right method.

    @classmethod;
    function setUpClass(cls){
##        requires('gui')
##        cls.root = Tk()
##        cls.text = Text(master=cls.root)
        cls.text = mockText();
        test_text = (
            'First line\n'
            'Line with target\n'
            'Last line\n');
        cls.text.insert('1.0', test_text);
        cls.pat = re.compile('target');

        cls.engine = se.SearchEngine(nil);
        cls.engine.search_forward = lambda *args{ ('f', args)};
        cls.engine.search_backward = lambda *args{ ('b', args)};

##    @classmethod
##    def tearDownClass(cls):
##        cls.root.destroy()
##        del cls.root

    }
    function test_search(){
        Equal = this.assertEqual;
        engine = this.engine;
        search = engine.search_text;
        text = this.text;
        pat = this.pat;

        engine.patvar.set(nil);
        #engine.revar.set(pat)
        Equal(search(text), nil);

        function mark(s){
            # no selection, cursor after 'Hello'
            if s == 'insert'{ return '1.5';}
            raise TclError;
        } text.index = mark;
        Equal(search(text, pat), ('f', (text, pat, 1, 5, true, false)));
        engine.wrapvar.set(false);
        Equal(search(text, pat), ('f', (text, pat, 1, 5, false, false)));
        engine.wrapvar.set(true);
        engine.backvar.set(true);
        Equal(search(text, pat), ('b', (text, pat, 1, 5, true, false)));
        engine.backvar.set(false);

        function sel(s){
            if s == 'sel.first'{ return '2.10';}
            if s == 'sel.last'{ return '2.16';}
            raise TclError;
        } text.index = sel;
        Equal(search(text, pat), ('f', (text, pat, 2, 16, true, false)));
        Equal(search(text, pat, true), ('f', (text, pat, 2, 10, true, true)));
        engine.backvar.set(true);
        Equal(search(text, pat), ('b', (text, pat, 2, 10, true, false)));
        Equal(search(text, pat, true), ('b', (text, pat, 2, 16, true, true)));


}
} class ForwardBackwardTest(unittest.TestCase){
    # Test that search_forward method finds the target.
##    @classmethod
##    def tearDownClass(cls):
##        cls.root.destroy()
##        del cls.root

    @classmethod;
    function setUpClass(cls){
        cls.engine = se.SearchEngine(nil);
##        requires('gui')
##        cls.root = Tk()
##        cls.text = Text(master=cls.root)
        cls.text = mockText();
        # search_backward calls index('end-1c')
        cls.text.index = lambda index{ '4.0'};
        test_text = (
            'First line\n'
            'Line with target\n'
            'Last line\n');
        cls.text.insert('1.0', test_text);
        cls.pat = re.compile('target');
        cls.res = (2, (10, 16));  # line, slice indexes of 'target'
        cls.failpat = re.compile('xyz');  # not in text
        cls.emptypat = re.compile('\w*');  # empty match possible

    }
    function make_search( func){
        function search(pat, line, col, wrap, ok=0){
            res = func(this.text, pat, line, col, wrap, ok);
            # res is (line, matchobject) or None
            return (res[0], res[1].span()) if res else res;
        } return search;

    }
    function test_search_forward(){
        # search for non-empty match
        Equal = this.assertEqual;
        forward = this.make_search(this.engine.search_forward);
        pat = this.pat;
        Equal(forward(pat, 1, 0, true), this.res);
        Equal(forward(pat, 3, 0, true), this.res);  # wrap
        Equal(forward(pat, 3, 0, false), nil);  # no wrap
        Equal(forward(pat, 2, 10, false), this.res);

        Equal(forward(this.failpat, 1, 0, true), nil);
        Equal(forward(this.emptypat, 2,  9, true, ok=true), (2, (9, 9)));
        #Equal(forward(self.emptypat, 2, 9, True), self.res)
        # While the initial empty match is correctly ignored, skipping
        # the rest of the line and returning (3, (0,4)) seems buggy - tjr.
        Equal(forward(this.emptypat, 2, 10, true), this.res);

    }
    function test_search_backward(){
        # search for non-empty match
        Equal = this.assertEqual;
        backward = this.make_search(this.engine.search_backward);
        pat = this.pat;
        Equal(backward(pat, 3, 5, true), this.res);
        Equal(backward(pat, 2, 0, true), this.res);  # wrap
        Equal(backward(pat, 2, 0, false), nil);  # no wrap
        Equal(backward(pat, 2, 16, false), this.res);

        Equal(backward(this.failpat, 3, 9, true), nil);
        Equal(backward(this.emptypat, 2,  10, true, ok=true), (2, (9,9)));
        # Accepted because 9 < 10, not because ok=True.
        # It is not clear that ok=True is useful going back - tjr
        Equal(backward(this.emptypat, 2, 9, true), (2, (5, 9)));


}
} if __name__ == '__main__'{
    unittest.main(verbosity=2, exit=2);

}