"""Simple text browser for IDLE

""";

from Tkinter import *;
import tkMessageBox;

class TextViewer(Toplevel){
    """A simple text viewer dialog for IDLE

    """;
    function __init__( parent, title, text, modal=true, _htest=false){
        """Show the given text in a scrollable window with a 'close' button

        If modal option set to False, user can interact with other windows,
        otherwise they will be unable to interact with other windows until
        the textview window is closed.

        _htest - bool; change box location when running htest.
        """;
        Toplevel.__init__(this, parent);
        this.configure(borderwidth=5);
        # place dialog below parent if running htest
        this.geometry("=%dx%d+%d+%d" % (750, 500,
                           parent.winfo_rootx() + 10,
                           parent.winfo_rooty() + (10 if not _htest else 100)));
        #elguavas - config placeholders til config stuff completed
        this.bg = '#ffffff';
        this.fg = '#000000';

        this.CreateWidgets();
        this.title(title);
        this.protocol("WM_DELETE_WINDOW", this.Ok);
        this.parent = parent;
        this.textView.focus_set();
        #key bindings for this dialog
        this.bind('<Return>',this.Ok); #dismiss dialog
        this.bind('<Escape>',this.Ok); #dismiss dialog
        this.textView.insert(0.0, text);
        this.textView.config(state=DISABLED);

        this.is_modal = modal;
        if this.is_modal{
            this.transient(parent);
            this.grab_set();
            this.wait_window();

    }
    } function CreateWidgets(){
        frameText = Frame(this, relief=SUNKEN, height=700);
        frameButtons = Frame(this);
        this.buttonOk = Button(frameButtons, text='Close',
                               command=this.Ok, takefocus=FALSE);
        this.scrollbarView = Scrollbar(frameText, orient=VERTICAL,
                                       takefocus=FALSE, highlightthickness=0);
        this.textView = Text(frameText, wrap=WORD, highlightthickness=0,
                             fg=this.fg, bg=this.bg);
        this.scrollbarView.config(command=this.textView.yview);
        this.textView.config(yscrollcommand=this.scrollbarView.set);
        this.buttonOk.pack();
        this.scrollbarView.pack(side=RIGHT,fill=Y);
        this.textView.pack(side=LEFT,expand=TRUE,fill=BOTH);
        frameButtons.pack(side=BOTTOM,fill=X);
        frameText.pack(side=TOP,expand=TRUE,fill=BOTH);

    }
    function Ok( event=nil){
        if this.is_modal{
            this.grab_release();
        } this.destroy();


}
} function view_text(parent, title, text, modal=true){
    return TextViewer(parent, title, text, modal);

}
function view_file(parent, title, filename, encoding=nil, modal=true){
    try{
        if encoding{
            import codecs;
            textFile = codecs.open(filename, 'r');
        } else{
            textFile = open(filename, 'r');
    } } except IOError{
        tkMessageBox.showerror(title='File Load Error',
                               message='Unable to load file %r .' % filename,
                               parent=parent);
    } except UnicodeDecodeError as err{
        showerror(title='Unicode Decode Error',
                  message=str(err),
                  parent=parent);
    } else{
        return view_text(parent, title, textFile.read(), modal);


}
} if __name__ == '__main__'{
    import unittest;
    unittest.main('idlelib.idle_test.test_textview', verbosity=2, exit=false);
    from idlelib.idle_test.htest import run;
    run(TextViewer);

}