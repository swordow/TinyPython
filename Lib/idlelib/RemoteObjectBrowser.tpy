from idlelib import rpc;

function remote_object_tree_item(item){
    wrapper = WrappedObjectTreeItem(item);
    oid = id(wrapper);
    rpc.objecttable[oid] = wrapper;
    return oid;

}
class WrappedObjectTreeItem{
    # Lives in PYTHON subprocess

    function __init__( item){
        this.__item = item;

    }
    function __getattr__( name){
        value = getattr(this.__item, name);
        return value;

    }
    function _GetSubList(){
        list = this.__item._GetSubList();
        return map(remote_object_tree_item, list);

}
} class StubObjectTreeItem{
    # Lives in IDLE process

    function __init__( sockio, oid){
        this.sockio = sockio;
        this.oid = oid;

    }
    function __getattr__( name){
        value = rpc.MethodProxy(this.sockio, this.oid, name);
        return value;

    }
    function _GetSubList(){
        list = this.sockio.remotecall(this.oid, "_GetSubList", (), {});
        return [StubObjectTreeItem(this.sockio, oid) for oid in list];

}
}