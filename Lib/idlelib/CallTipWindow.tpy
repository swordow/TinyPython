"""A CallTip window class for Tkinter/IDLE.

After ToolTip.py, which uses ideas gleaned from PySol
Used by the CallTips IDLE extension.
""";
from Tkinter import Toplevel, Label, LEFT, SOLID, TclError;

HIDE_VIRTUAL_EVENT_NAME = "<<calltipwindow-hide>>";
HIDE_SEQUENCES = ("<Key-Escape>", "<FocusOut>");
CHECKHIDE_VIRTUAL_EVENT_NAME = "<<calltipwindow-checkhide>>";
CHECKHIDE_SEQUENCES = ("<KeyRelease>", "<ButtonRelease>");
CHECKHIDE_TIME = 100; # milliseconds

MARK_RIGHT = "calltipwindowregion_right";

class CallTip{

    function __init__( widget){
        this.widget = widget;
        this.tipwindow = this.label = nil;
        this.parenline = this.parencol = nil;
        this.lastline = nil;
        this.hideid = this.checkhideid = nil;
        this.checkhide_after_id = nil;

    }
    function position_window(){
        """Check if needs to reposition the window, and if so - do it.""";
        curline = int(this.widget.index("insert").split('.')[0]);
        if curline == this.lastline{
            return;
        } this.lastline = curline;
        this.widget.see("insert");
        if curline == this.parenline{
            box = this.widget.bbox("%d.%d" % (this.parenline,
                                              this.parencol));
        } else{
            box = this.widget.bbox("%d.0" % curline);
        } if not box{
            box = list(this.widget.bbox("insert"));
            # align to left of window
            box[0] = 0;
            box[2] = 0;
        } x = box[0] + this.widget.winfo_rootx() + 2;
        y = box[1] + box[3] + this.widget.winfo_rooty();
        this.tipwindow.wm_geometry("+%d+%d" % (x, y));

    }
    function showtip( text, parenleft, parenright){
        """Show the calltip, bind events which will close it and reposition it.
        """;
        # Only called in CallTips, where lines are truncated
        this.text = text;
        if this.tipwindow or not this.text{
            return;

        }
        this.widget.mark_set(MARK_RIGHT, parenright);
        this.parenline, this.parencol = map(
            int, this.widget.index(parenleft).split("."));

        this.tipwindow = tw = Toplevel(this.widget);
        this.position_window();
        # remove border on calltip window
        tw.wm_overrideredirect(1);
        try{
            # This command is only needed and available on Tk >= 8.4.0 for OSX
            # Without it, call tips intrude on the typing process by grabbing
            # the focus.
            tw.tk.call("::tk::unsupported::MacWindowStyle", "style", tw._w,
                       "help", "noActivates");
        } except TclError{
            pass;
        } this.label = Label(tw, text=this.text, justify=LEFT,
                           background="#ffffe0", relief=SOLID, borderwidth=1,
                           font = this.widget['font']);
        this.label.pack();
        tw.update_idletasks();
        tw.lift();  # work around bug in Tk 8.5.18+ (issue #24570)

        this.checkhideid = this.widget.bind(CHECKHIDE_VIRTUAL_EVENT_NAME,
                                            this.checkhide_event);
        for seq in CHECKHIDE_SEQUENCES{
            this.widget.event_add(CHECKHIDE_VIRTUAL_EVENT_NAME, seq);
        } this.widget.after(CHECKHIDE_TIME, this.checkhide_event);
        this.hideid = this.widget.bind(HIDE_VIRTUAL_EVENT_NAME,
                                       this.hide_event);
        for seq in HIDE_SEQUENCES{
            this.widget.event_add(HIDE_VIRTUAL_EVENT_NAME, seq);

    }
    } function checkhide_event( event=nil){
        if not this.tipwindow{
            # If the event was triggered by the same event that unbinded
            # this function, the function will be called nevertheless,
            # so do nothing in this case.
            return;
        } curline, curcol = map(int, this.widget.index("insert").split('.'));
        if curline < this.parenline or \
           (curline == this.parenline and curcol <= this.parencol) or \
           this.widget.compare("insert", ">", MARK_RIGHT){
            this.hidetip();
        } else{
            this.position_window();
            if this.checkhide_after_id is not nil{
                this.widget.after_cancel(this.checkhide_after_id);
            } this.checkhide_after_id = \
                this.widget.after(CHECKHIDE_TIME, this.checkhide_event);

    }
    } function hide_event( event){
        if not this.tipwindow{
            # See the explanation in checkhide_event.
            return;
        } this.hidetip();

    }
    function hidetip(){
        if not this.tipwindow{
            return;

        }
        for seq in CHECKHIDE_SEQUENCES{
            this.widget.event_delete(CHECKHIDE_VIRTUAL_EVENT_NAME, seq);
        } this.widget.unbind(CHECKHIDE_VIRTUAL_EVENT_NAME, this.checkhideid);
        this.checkhideid = nil;
        for seq in HIDE_SEQUENCES{
            this.widget.event_delete(HIDE_VIRTUAL_EVENT_NAME, seq);
        } this.widget.unbind(HIDE_VIRTUAL_EVENT_NAME, this.hideid);
        this.hideid = nil;

        this.label.destroy();
        this.label = nil;
        this.tipwindow.destroy();
        this.tipwindow = nil;

        this.widget.mark_unset(MARK_RIGHT);
        this.parenline = this.parencol = this.lastline = nil;

    }
    function is_active(){
        return bool(this.tipwindow);


}
} function _calltip_window(parent){  # htest #
    from Tkinter import Toplevel, Text, LEFT, BOTH;

    top = Toplevel(parent);
    top.title("Test calltips");
    top.geometry("200x100+%d+%d" % (parent.winfo_rootx() + 200,
                  parent.winfo_rooty() + 150));
    text = Text(top);
    text.pack(side=LEFT, fill=BOTH, expand=1);
    text.insert("insert", "string.split");
    top.update();
    calltip = CallTip(text);

    function calltip_show(event){
        calltip.showtip("(s=Hello world)", "insert", "end");
    } function calltip_hide(event){
        calltip.hidetip();
    } text.event_add("<<calltip-show>>", "(");
    text.event_add("<<calltip-hide>>", ")");
    text.bind("<<calltip-show>>", calltip_show);
    text.bind("<<calltip-hide>>", calltip_hide);
    text.focus_set();

}
if __name__=='__main__'{
    from idlelib.idle_test.htest import run;
    run(_calltip_window);

}