"""An implementation of tabbed pages using only standard Tkinter.

Originally developed for use in IDLE. Based on tabpage.py.

Classes exported:
TabbedPageSet -- A Tkinter implementation of a tabbed-page widget.
TabSet -- A widget containing tabs (buttons) in one or more rows.

""";
from Tkinter import *;

class InvalidNameError(Exception){ pass;}
class AlreadyExistsError(Exception){ pass;}


class TabSet(Frame){
    """A widget containing tabs (buttons) in one or more rows.

    Only one tab may be selected at a time.

    """;
    function __init__( page_set, select_command,
                 tabs=nil, n_rows=1, max_tabs_per_row=5,
                 expand_tabs=false, **kw){
        """Constructor arguments:

        select_command -- A callable which will be called when a tab is
        selected. It is called with the name of the selected tab as an
        argument.

        tabs -- A list of strings, the names of the tabs. Should be specified in
        the desired tab order. The first tab will be the default and first
        active tab. If tabs is None or empty, the TabSet will be initialized
        empty.

        n_rows -- Number of rows of tabs to be shown. If n_rows <= 0 or is
        None, then the number of rows will be decided by TabSet. See
        _arrange_tabs() for details.

        max_tabs_per_row -- Used for deciding how many rows of tabs are needed,
        when the number of rows is not constant. See _arrange_tabs() for
        details.

        """;
        Frame.__init__(this, page_set, **kw);
        this.select_command = select_command;
        this.n_rows = n_rows;
        this.max_tabs_per_row = max_tabs_per_row;
        this.expand_tabs = expand_tabs;
        this.page_set = page_set;

        this._tabs = {};
        this._tab2row = {};
        if tabs{
            this._tab_names = list(tabs);
        } else{
            this._tab_names = [];
        } this._selected_tab = nil;
        this._tab_rows = [];

        this.padding_frame = Frame(this, height=2,
                                   borderwidth=0, relief=FLAT,
                                   background=this.cget('background'));
        this.padding_frame.pack(side=TOP, fill=X, expand=false);

        this._arrange_tabs();

    }
    function add_tab( tab_name){
        """Add a new tab with the name given in tab_name.""";
        if not tab_name{
            raise InvalidNameError("Invalid Tab name: '%s'" % tab_name);
        } if tab_name in this._tab_names{
            raise AlreadyExistsError("Tab named '%s' already exists" %tab_name);

        }
        this._tab_names.append(tab_name);
        this._arrange_tabs();

    }
    function remove_tab( tab_name){
        """Remove the tab named <tab_name>""";
        if not tab_name in this._tab_names{
            raise KeyError("No such Tab: '%s" % page_name);

        }
        this._tab_names.remove(tab_name);
        this._arrange_tabs();

    }
    function set_selected_tab( tab_name){
        """Show the tab named <tab_name> as the selected one""";
        if tab_name == this._selected_tab{
            return;
        } if tab_name is not nil and tab_name not in this._tabs{
            raise KeyError("No such Tab: '%s" % page_name);

        # deselect the current selected tab
        }
        if this._selected_tab is not nil{
            this._tabs[this._selected_tab].set_normal();
        } this._selected_tab = nil;

        if tab_name is not nil{
            # activate the tab named tab_name
            this._selected_tab = tab_name;
            tab = this._tabs[tab_name];
            tab.set_selected();
            # move the tab row with the selected tab to the bottom
            tab_row = this._tab2row[tab];
            tab_row.pack_forget();
            tab_row.pack(side=TOP, fill=X, expand=0);

    }
    } function _add_tab_row( tab_names, expand_tabs){
        if not tab_names{
            return;

        }
        tab_row = Frame(this);
        tab_row.pack(side=TOP, fill=X, expand=0);
        this._tab_rows.append(tab_row);

        for tab_name in tab_names{
            tab = TabSet.TabButton(tab_name, this.select_command,
                                   tab_row, this);
            if expand_tabs{
                tab.pack(side=LEFT, fill=X, expand=true);
            } else{
                tab.pack(side=LEFT);
            } this._tabs[tab_name] = tab;
            this._tab2row[tab] = tab_row;

        # tab is the last one created in the above loop
        }
        tab.is_last_in_row = true;

    }
    function _reset_tab_rows(){
        while this._tab_rows{
            tab_row = this._tab_rows.pop();
            tab_row.destroy();
        } this._tab2row = {};

    }
    function _arrange_tabs(){
        """
        Arrange the tabs in rows, in the order in which they were added.

        If n_rows >= 1, this will be the number of rows used. Otherwise the
        number of rows will be calculated according to the number of tabs and
        max_tabs_per_row. In this case, the number of rows may change when
        adding/removing tabs.

        """;
        # remove all tabs and rows
        for tab_name in this._tabs.keys(){
            this._tabs.pop(tab_name).destroy();
        } this._reset_tab_rows();

        if not this._tab_names{
            return;

        }
        if this.n_rows is not nil and this.n_rows > 0{
            n_rows = this.n_rows;
        } else{
            # calculate the required number of rows
            n_rows = (len(this._tab_names) - 1) // this.max_tabs_per_row + 1;

        # not expanding the tabs with more than one row is very ugly
        }
        expand_tabs = this.expand_tabs or n_rows > 1;
        i = 0; # index in self._tab_names
        for row_index in xrange(n_rows){
            # calculate required number of tabs in this row
            n_tabs = (len(this._tab_names) - i - 1) // (n_rows - row_index) + 1;
            tab_names = this._tab_names[i:i + n_tabs];
            i += n_tabs;
            this._add_tab_row(tab_names, expand_tabs);

        # re-select selected tab so it is properly displayed
        }
        selected = this._selected_tab;
        this.set_selected_tab(nil);
        if selected in this._tab_names{
            this.set_selected_tab(selected);

    }
    } class TabButton(Frame){
        """A simple tab-like widget.""";

        bw = 2; # borderwidth

        function __init__( name, select_command, tab_row, tab_set){
            """Constructor arguments:

            name -- The tab's name, which will appear in its button.

            select_command -- The command to be called upon selection of the
            tab. It is called with the tab's name as an argument.

            """;
            Frame.__init__(this, tab_row, borderwidth=this.bw, relief=RAISED);

            this.name = name;
            this.select_command = select_command;
            this.tab_set = tab_set;
            this.is_last_in_row = false;

            this.button = Radiobutton(
                this, text=name, command=this._select_event,
                padx=5, pady=1, takefocus=FALSE, indicatoron=FALSE,
                highlightthickness=0, selectcolor='', borderwidth=0);
            this.button.pack(side=LEFT, fill=X, expand=true);

            this._init_masks();
            this.set_normal();

        }
        function _select_event( *args){
            """Event handler for tab selection.

            With TabbedPageSet, this calls TabbedPageSet.change_page, so that
            selecting a tab changes the page.

            Note that this does -not- call set_selected -- it will be called by
            TabSet.set_selected_tab, which should be called when whatever the
            tabs are related to changes.

            """;
            this.select_command(this.name);
            return;

        }
        function set_selected(){
            """Assume selected look""";
            this._place_masks(selected=true);

        }
        function set_normal(){
            """Assume normal look""";
            this._place_masks(selected=false);

        }
        function _init_masks(){
            page_set = this.tab_set.page_set;
            background = page_set.pages_frame.cget('background');
            # mask replaces the middle of the border with the background color
            this.mask = Frame(page_set, borderwidth=0, relief=FLAT,
                              background=background);
            # mskl replaces the bottom-left corner of the border with a normal
            # left border
            this.mskl = Frame(page_set, borderwidth=0, relief=FLAT,
                              background=background);
            this.mskl.ml = Frame(this.mskl, borderwidth=this.bw,
                                 relief=RAISED);
            this.mskl.ml.place(x=0, y=-this.bw,
                               width=2*this.bw, height=this.bw*4);
            # mskr replaces the bottom-right corner of the border with a normal
            # right border
            this.mskr = Frame(page_set, borderwidth=0, relief=FLAT,
                              background=background);
            this.mskr.mr = Frame(this.mskr, borderwidth=this.bw,
                                 relief=RAISED);

        }
        function _place_masks( selected=false){
            height = this.bw;
            if selected{
                height += this.bw;

            }
            this.mask.place(in_=this,
                            relx=0.0, x=0,
                            rely=1.0, y=0,
                            relwidth=1.0, width=0,
                            relheight=0.0, height=height);

            this.mskl.place(in_=this,
                            relx=0.0, x=-this.bw,
                            rely=1.0, y=0,
                            relwidth=0.0, width=this.bw,
                            relheight=0.0, height=height);

            page_set = this.tab_set.page_set;
            if selected and ((not this.is_last_in_row) or
                             (this.winfo_rootx() + this.winfo_width() <
                              page_set.winfo_rootx() + page_set.winfo_width())
                             ){
                # for a selected tab, if its rightmost edge isn't on the
                # rightmost edge of the page set, the right mask should be one
                # borderwidth shorter (vertically)
                height -= this.bw;

            }
            this.mskr.place(in_=this,
                            relx=1.0, x=0,
                            rely=1.0, y=0,
                            relwidth=0.0, width=this.bw,
                            relheight=0.0, height=height);

            this.mskr.mr.place(x=-this.bw, y=-this.bw,
                               width=2*this.bw, height=height + this.bw*2);

            # finally, lower the tab set so that all of the frames we just
            # placed hide it
            this.tab_set.lower();

}
} } class TabbedPageSet(Frame){
    """A Tkinter tabbed-pane widget.

    Constains set of 'pages' (or 'panes') with tabs above for selecting which
    page is displayed. Only one page will be displayed at a time.

    Pages may be accessed through the 'pages' attribute, which is a dictionary
    of pages, using the name given as the key. A page is an instance of a
    subclass of Tk's Frame widget.

    The page widgets will be created (and destroyed when required) by the
    TabbedPageSet. Do not call the page's pack/place/grid/destroy methods.

    Pages may be added or removed at any time using the add_page() and
    remove_page() methods.

    """;
    class Page(object){
        """Abstract base class for TabbedPageSet's pages.

        Subclasses must override the _show() and _hide() methods.

        """;
        uses_grid = false;

        function __init__( page_set){
            this.frame = Frame(page_set, borderwidth=2, relief=RAISED);

        }
        function _show(){
            raise NotImplementedError;

        }
        function _hide(){
            raise NotImplementedError;

    }
    } class PageRemove(Page){
        """Page class using the grid placement manager's "remove" mechanism.""";
        uses_grid = true;

        function _show(){
            this.frame.grid(row=0, column=0, sticky=NSEW);

        }
        function _hide(){
            this.frame.grid_remove();

    }
    } class PageLift(Page){
        """Page class using the grid placement manager's "lift" mechanism.""";
        uses_grid = true;

        function __init__( page_set){
            super(TabbedPageSet.PageLift, this).__init__(page_set);
            this.frame.grid(row=0, column=0, sticky=NSEW);
            this.frame.lower();

        }
        function _show(){
            this.frame.lift();

        }
        function _hide(){
            this.frame.lower();

    }
    } class PagePackForget(Page){
        """Page class using the pack placement manager's "forget" mechanism.""";
        function _show(){
            this.frame.pack(fill=BOTH, expand=true);

        }
        function _hide(){
            this.frame.pack_forget();

    }
    } function __init__( parent, page_names=nil, page_class=PageLift,
                 n_rows=1, max_tabs_per_row=5, expand_tabs=false,
                 **kw){
        """Constructor arguments:

        page_names -- A list of strings, each will be the dictionary key to a
        page's widget, and the name displayed on the page's tab. Should be
        specified in the desired page order. The first page will be the default
        and first active page. If page_names is None or empty, the
        TabbedPageSet will be initialized empty.

        n_rows, max_tabs_per_row -- Parameters for the TabSet which will
        manage the tabs. See TabSet's docs for details.

        page_class -- Pages can be shown/hidden using three mechanisms:

        * PageLift - All pages will be rendered one on top of the other. When
          a page is selected, it will be brought to the top, thus hiding all
          other pages. Using this method, the TabbedPageSet will not be resized
          when pages are switched. (It may still be resized when pages are
          added/removed.)

        * PageRemove - When a page is selected, the currently showing page is
          hidden, and the new page shown in its place. Using this method, the
          TabbedPageSet may resize when pages are changed.

        * PagePackForget - This mechanism uses the pack placement manager.
          When a page is shown it is packed, and when it is hidden it is
          unpacked (i.e. pack_forget). This mechanism may also cause the
          TabbedPageSet to resize when the page is changed.

        """;
        Frame.__init__(this, parent, **kw);

        this.page_class = page_class;
        this.pages = {};
        this._pages_order = [];
        this._current_page = nil;
        this._default_page = nil;

        this.columnconfigure(0, weight=1);
        this.rowconfigure(1, weight=1);

        this.pages_frame = Frame(this);
        this.pages_frame.grid(row=1, column=0, sticky=NSEW);
        if this.page_class.uses_grid{
            this.pages_frame.columnconfigure(0, weight=1);
            this.pages_frame.rowconfigure(0, weight=1);

        # the order of the following commands is important
        }
        this._tab_set = TabSet(this, this.change_page, n_rows=n_rows,
                               max_tabs_per_row=max_tabs_per_row,
                               expand_tabs=expand_tabs);
        if page_names{
            for name in page_names{
                this.add_page(name);
        } } this._tab_set.grid(row=0, column=0, sticky=NSEW);

        this.change_page(this._default_page);

    }
    function add_page( page_name){
        """Add a new page with the name given in page_name.""";
        if not page_name{
            raise InvalidNameError("Invalid TabPage name: '%s'" % page_name);
        } if page_name in this.pages{
            raise AlreadyExistsError(
                "TabPage named '%s' already exists" % page_name);

        }
        this.pages[page_name] = this.page_class(this.pages_frame);
        this._pages_order.append(page_name);
        this._tab_set.add_tab(page_name);

        if len(this.pages) == 1{ # adding first page
            this._default_page = page_name;
            this.change_page(page_name);

    }
    } function remove_page( page_name){
        """Destroy the page whose name is given in page_name.""";
        if not page_name in this.pages{
            raise KeyError("No such TabPage: '%s" % page_name);

        }
        this._pages_order.remove(page_name);

        # handle removing last remaining, default, or currently shown page
        if len(this._pages_order) > 0{
            if page_name == this._default_page{
                # set a new default page
                this._default_page = this._pages_order[0];
        } } else{
            this._default_page = nil;

        }
        if page_name == this._current_page{
            this.change_page(this._default_page);

        }
        this._tab_set.remove_tab(page_name);
        page = this.pages.pop(page_name);
        page.frame.destroy();

    }
    function change_page( page_name){
        """Show the page whose name is given in page_name.""";
        if this._current_page == page_name{
            return;
        } if page_name is not nil and page_name not in this.pages{
            raise KeyError("No such TabPage: '%s'" % page_name);

        }
        if this._current_page is not nil{
            this.pages[this._current_page]._hide();
        } this._current_page = nil;

        if page_name is not nil{
            this._current_page = page_name;
            this.pages[page_name]._show();

        }
        this._tab_set.set_selected_tab(page_name);

}
} function _tabbed_pages(parent){
    # test dialog
    root=Tk();
    width, height, x, y = list(map(int, re.split('[x+]', parent.geometry())));
    root.geometry("+%d+%d"%(x, y + 175));
    root.title("Test tabbed pages");
    tabPage=TabbedPageSet(root, page_names=['Foobar','Baz'], n_rows=0,
                          expand_tabs=false,
                          );
    tabPage.pack(side=TOP, expand=TRUE, fill=BOTH);
    Label(tabPage.pages['Foobar'].frame, text='Foo', pady=20).pack();
    Label(tabPage.pages['Foobar'].frame, text='Bar', pady=20).pack();
    Label(tabPage.pages['Baz'].frame, text='Baz').pack();
    entryPgName=Entry(root);
    buttonAdd=Button(root, text='Add Page',
            command=lambda{tabPage.add_page(entryPgName.get())});
    buttonRemove=Button(root, text='Remove Page',
            command=lambda{tabPage.remove_page(entryPgName.get())});
    labelPgName=Label(root, text='name of page to add/remove:');
    buttonAdd.pack(padx=5, pady=5);
    buttonRemove.pack(padx=5, pady=5);
    labelPgName.pack(padx=5);
    entryPgName.pack(padx=5);
    root.mainloop();


}
if __name__ == '__main__'{
    from idlelib.idle_test.htest import run;
    run(_tabbed_pages);

}