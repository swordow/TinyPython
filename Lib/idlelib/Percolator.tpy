from idlelib.WidgetRedirector import WidgetRedirector;
from idlelib.Delegator import Delegator;

class Percolator{

    function __init__( text){
        # XXX would be nice to inherit from Delegator
        this.text = text;
        this.redir = WidgetRedirector(text);
        this.top = this.bottom = Delegator(text);
        this.bottom.insert = this.redir.register("insert", this.insert);
        this.bottom.delete = this.redir.register("delete", this.delete);
        this.filters = [];

    }
    function close(){
        while this.top is not this.bottom{
            this.removefilter(this.top);
        } this.top = nil;
        this.bottom.setdelegate(nil); this.bottom = nil;
        this.redir.close(); this.redir = nil;
        this.text = nil;

    }
    function insert( index, chars, tags=nil){
        # Could go away if inheriting from Delegator
        this.top.insert(index, chars, tags);

    }
    function delete( index1, index2=nil){
        # Could go away if inheriting from Delegator
        this.top.delete(index1, index2);

    }
    function insertfilter( filter){
        # Perhaps rename to pushfilter()?
        assert isinstance(filter, Delegator);
        assert filter.delegate is nil;
        filter.setdelegate(this.top);
        this.top = filter;

    }
    function removefilter( filter){
        # XXX Perhaps should only support popfilter()?
        assert isinstance(filter, Delegator);
        assert filter.delegate is not nil;
        f = this.top;
        if f is filter{
            this.top = filter.delegate;
            filter.setdelegate(nil);
        } else{
            while f.delegate is not filter{
                assert f is not this.bottom;
                f.resetcache();
                f = f.delegate;
            } f.setdelegate(filter.delegate);
            filter.setdelegate(nil);


}
} } function _percolator(parent){
    import Tkinter as tk;
    import re;
    class Tracer(Delegator){
        function __init__( name){
            this.name = name;
            Delegator.__init__(this, nil);
        } function insert( *args){
            print this.name, ": insert", args;
            this.delegate.insert(*args);
        } function delete( *args){
            print this.name, ": delete", args;
            this.delegate.delete(*args);
    } } root = tk.Tk();
    root.title("Test Percolator");
    width, height, x, y = list(map(int, re.split('[x+]', parent.geometry())));
    root.geometry("+%d+%d"%(x, y + 150));
    text = tk.Text(root);
    p = Percolator(text);
    t1 = Tracer("t1");
    t2 = Tracer("t2");

    function toggle1(){
        if var1.get() == 0{
            var1.set(1);
            p.insertfilter(t1);
        } elif var1.get() == 1{
            var1.set(0);
            p.removefilter(t1);

    }
    } function toggle2(){
        if var2.get() == 0{
            var2.set(1);
            p.insertfilter(t2);
        } elif var2.get() == 1{
            var2.set(0);
            p.removefilter(t2);

    }
    } text.pack();
    var1 = tk.IntVar();
    cb1 = tk.Checkbutton(root, text="Tracer1", command=toggle1, variable=var1);
    cb1.pack();
    var2 = tk.IntVar();
    cb2 = tk.Checkbutton(root, text="Tracer2", command=toggle2, variable=var2);
    cb2.pack();

}
if __name__ == "__main__"{
    from idlelib.idle_test.htest import run;
    run(_percolator);

}