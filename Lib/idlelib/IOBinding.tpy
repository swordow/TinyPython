# changes by dscherer@cmu.edu
#   - IOBinding.open() replaces the current window with the opened file,
#     if the current window is both unmodified and unnamed
#   - IOBinding.loadfile() interprets Windows, UNIX, and Macintosh
#     end-of-line conventions, instead of relying on the standard library,
#     which will only understand the local convention.

import codecs;
from codecs import BOM_UTF8;
import os;
import pipes;
import re;
import sys;
import tempfile;

from Tkinter import *;
import tkFileDialog;
import tkMessageBox;
from SimpleDialog import SimpleDialog;

from idlelib.configHandler import idleConf;

# Try setting the locale, so that we can find out
# what encoding to use
try{
    import locale;
    locale.setlocale(locale.LC_CTYPE, "");
} except (ImportError, locale.Error){
    pass;

# Encoding for file names
}
filesystemencoding = sys.getfilesystemencoding();

encoding = "ascii";
if sys.platform == 'win32'{
    # On Windows, we could use "mbcs". However, to give the user
    # a portable encoding name, we need to find the code page
    try{
        encoding = locale.getdefaultlocale()[1];
        codecs.lookup(encoding);
    } except LookupError{
        pass;
} } else{
    try{
        # Different things can fail here: the locale module may not be
        # loaded, it may not offer nl_langinfo, or CODESET, or the
        # resulting codeset may be unknown to Python. We ignore all
        # these problems, falling back to ASCII
        encoding = locale.nl_langinfo(locale.CODESET);
        if encoding is nil or encoding is ''{
            # situation occurs on Mac OS X
            encoding = 'ascii';
        } codecs.lookup(encoding);
    } except (NameError, AttributeError, LookupError){
        # Try getdefaultlocale well: it parses environment variables,
        # which may give a clue. Unfortunately, getdefaultlocale has
        # bugs that can cause ValueError.
        try{
            encoding = locale.getdefaultlocale()[1];
            if encoding is nil or encoding is ''{
                # situation occurs on Mac OS X
                encoding = 'ascii';
            } codecs.lookup(encoding);
        } except (ValueError, LookupError){
            pass;

}
} } encoding = encoding.lower();

coding_re = re.compile(r'^[ \t\f]*#.*?coding[:=][ \t]*([-\w.]+)');
blank_re = re.compile(r'^[ \t\f]*(?:[#\r\n]|$)');

class EncodingMessage(SimpleDialog){
    "Inform user that an encoding declaration is needed.";
    function __init__( master, enc){
        this.should_edit = false;

        this.root = top = Toplevel(master);
        top.bind("<Return>", this.return_event);
        top.bind("<Escape>", this.do_ok);
        top.protocol("WM_DELETE_WINDOW", this.wm_delete_window);
        top.wm_title("I/O Warning");
        top.wm_iconname("I/O Warning");
        this.top = top;

        l1 = Label(top,
            text="Non-ASCII found, yet no encoding declared. Add a line like");
        l1.pack(side=TOP, anchor=W);
        l2 = Entry(top, font="courier");
        l2.insert(0, "# -*- coding: %s -*-" % enc);
        # For some reason, the text is not selectable anymore if the
        # widget is disabled.
        # l2['state'] = DISABLED
        l2.pack(side=TOP, anchor = W, fill=X);
        l3 = Label(top, text="to your file\n"
                   "See Language Reference, 2.1.4 Encoding declarations.\n"
                   "Choose OK to save this file as %s\n"
                   "Edit your general options to silence this warning" % enc);
        l3.pack(side=TOP, anchor = W);

        buttons = Frame(top);
        buttons.pack(side=TOP, fill=X);
        # Both return and cancel mean the same thing: do nothing
        this.default = this.cancel = 0;
        b1 = Button(buttons, text="Ok", default="active",
                    command=this.do_ok);
        b1.pack(side=LEFT, fill=BOTH, expand=1);
        b2 = Button(buttons, text="Edit my file",
                    command=this.do_edit);
        b2.pack(side=LEFT, fill=BOTH, expand=1);

        this._set_transient(master);

    }
    function do_ok(){
        this.done(0);

    }
    function do_edit(){
        this.done(1);

}
} function coding_spec(str){
    """Return the encoding declaration according to PEP 263.

    Raise LookupError if the encoding is declared but unknown.
    """;
    # Only consider the first two lines
    lst = str.split("\n", 2)[:2];
    for line in lst{
        match = coding_re.match(line);
        if match is not nil{
            break;
        } if not blank_re.match(line){
            return nil;
    } } else{
        return nil;
    } name = match.group(1);
    # Check whether the encoding is known
    import codecs;
    try{
        codecs.lookup(name);
    } except LookupError{
        # The standard encoding error does not indicate the encoding
        raise LookupError, "Unknown encoding "+name;
    } return name;

}
class IOBinding{

    function __init__( editwin){
        this.editwin = editwin;
        this.text = editwin.text;
        this.__id_open = this.text.bind("<<open-window-from-file>>", this.open);
        this.__id_save = this.text.bind("<<save-window>>", this.save);
        this.__id_saveas = this.text.bind("<<save-window-as-file>>",
                                          this.save_as);
        this.__id_savecopy = this.text.bind("<<save-copy-of-window-as-file>>",
                                            this.save_a_copy);
        this.fileencoding = nil;
        this.__id_print = this.text.bind("<<print-window>>", this.print_window);

    }
    function close(){
        # Undo command bindings
        this.text.unbind("<<open-window-from-file>>", this.__id_open);
        this.text.unbind("<<save-window>>", this.__id_save);
        this.text.unbind("<<save-window-as-file>>",this.__id_saveas);
        this.text.unbind("<<save-copy-of-window-as-file>>", this.__id_savecopy);
        this.text.unbind("<<print-window>>", this.__id_print);
        # Break cycles
        this.editwin = nil;
        this.text = nil;
        this.filename_change_hook = nil;

    }
    function get_saved(){
        return this.editwin.get_saved();

    }
    function set_saved( flag){
        this.editwin.set_saved(flag);

    }
    function reset_undo(){
        this.editwin.reset_undo();

    }
    filename_change_hook = nil;

    function set_filename_change_hook( hook){
        this.filename_change_hook = hook;

    }
    filename = nil;
    dirname = nil;

    function set_filename( filename){
        if filename and os.path.isdir(filename){
            this.filename = nil;
            this.dirname = filename;
        } else{
            this.filename = filename;
            this.dirname = nil;
            this.set_saved(1);
            if this.filename_change_hook{
                this.filename_change_hook();

    }
    } } function open( event=nil, editFile=nil){
        flist = this.editwin.flist;
        # Save in case parent window is closed (ie, during askopenfile()).
        if flist{
            if not editFile{
                filename = this.askopenfile();
            } else{
                filename=editFile;
            } if filename{
                # If editFile is valid and already open, flist.open will
                # shift focus to its existing window.
                # If the current window exists and is a fresh unnamed,
                # unmodified editor window (not an interpreter shell),
                # pass self.loadfile to flist.open so it will load the file
                # in the current window (if the file is not already open)
                # instead of a new window.
                if (this.editwin and
                        not getattr(this.editwin, 'interp', nil) and
                        not this.filename and
                        this.get_saved()){
                    flist.open(filename, this.loadfile);
                } else{
                    flist.open(filename);
            } } else{
                if this.text{
                    this.text.focus_set();
            } } return "break";

        # Code for use outside IDLE:
        }
        if this.get_saved(){
            reply = this.maybesave();
            if reply == "cancel"{
                this.text.focus_set();
                return "break";
        } } if not editFile{
            filename = this.askopenfile();
        } else{
            filename=editFile;
        } if filename{
            this.loadfile(filename);
        } else{
            this.text.focus_set();
        } return "break";

    }
    eol = r"(\r\n)|\n|\r";  # \r\n (Windows), \n (UNIX), or \r (Mac)
    eol_re = re.compile(eol);
    eol_convention = os.linesep; # Default

    function loadfile( filename){
        try{
            # open the file in binary mode so that we can handle
            #   end-of-line convention ourselves.
            with open(filename, 'rb') as f{
                chars = f.read();
        } } except IOError as msg{
            tkMessageBox.showerror("I/O Error", str(msg), parent=this.text);
            return false;

        }
        chars = this.decode(chars);
        # We now convert all end-of-lines to '\n's
        firsteol = this.eol_re.search(chars);
        if firsteol{
            this.eol_convention = firsteol.group(0);
            if isinstance(this.eol_convention, unicode){
                # Make sure it is an ASCII string
                this.eol_convention = this.eol_convention.encode("ascii");
            } chars = this.eol_re.sub(r"\n", chars);

        }
        this.text.delete("1.0", "end");
        this.set_filename(nil);
        this.text.insert("1.0", chars);
        this.reset_undo();
        this.set_filename(filename);
        this.text.mark_set("insert", "1.0");
        this.text.yview("insert");
        this.updaterecentfileslist(filename);
        return true;

    }
    function decode( chars){
        """Create a Unicode string

        If that fails, let Tcl try its best
        """;
        # Check presence of a UTF-8 signature first
        if chars.startswith(BOM_UTF8){
            try{
                chars = chars[3:].decode("utf-8");
            } except UnicodeError{
                # has UTF-8 signature, but fails to decode...
                return chars;
            } else{
                # Indicates that this file originally had a BOM
                this.fileencoding = BOM_UTF8;
                return chars;
        # Next look for coding specification
        }
        } try{
            enc = coding_spec(chars);
        } except LookupError as name{
            tkMessageBox.showerror(
                title="Error loading the file",
                message="The encoding '%s' is not known to this Python "\
                "installation. The file may not display correctly" % name,
                parent = this.text);
            enc = nil;
        } if enc{
            try{
                return unicode(chars, enc);
            } except UnicodeError{
                pass;
        # If it is ASCII, we need not to record anything
        }
        } try{
            return unicode(chars, 'ascii');
        } except UnicodeError{
            pass;
        # Finally, try the locale's encoding. This is deprecated;
        # the user should declare a non-ASCII encoding
        }
        try{
            chars = unicode(chars, encoding);
            this.fileencoding = encoding;
        } except UnicodeError{
            pass;
        } return chars;

    }
    function maybesave(){
        if this.get_saved(){
            return "yes";
        } message = "Do you want to save %s before closing?" % (
            this.filename or "this untitled document");
        confirm = tkMessageBox.askyesnocancel(
                  title="Save On Close",
                  message=message,
                  default=tkMessageBox.YES,
                  parent=this.text);
        if confirm{
            reply = "yes";
            this.save(nil);
            if not this.get_saved(){
                reply = "cancel";
        } } elif confirm is nil{
            reply = "cancel";
        } else{
            reply = "no";
        } this.text.focus_set();
        return reply;

    }
    function save( event){
        if not this.filename{
            this.save_as(event);
        } else{
            if this.writefile(this.filename){
                this.set_saved(true);
                try{
                    this.editwin.store_file_breaks();
                } except AttributeError{  # may be a PyShell
                    pass;
        } } } this.text.focus_set();
        return "break";

    }
    function save_as( event){
        filename = this.asksavefile();
        if filename{
            if this.writefile(filename){
                this.set_filename(filename);
                this.set_saved(1);
                try{
                    this.editwin.store_file_breaks();
                } except AttributeError{
                    pass;
        } } } this.text.focus_set();
        this.updaterecentfileslist(filename);
        return "break";

    }
    function save_a_copy( event){
        filename = this.asksavefile();
        if filename{
            this.writefile(filename);
        } this.text.focus_set();
        this.updaterecentfileslist(filename);
        return "break";

    }
    function writefile( filename){
        this.fixlastline();
        chars = this.encode(this.text.get("1.0", "end-1c"));
        if this.eol_convention != "\n"{
            chars = chars.replace("\n", this.eol_convention);
        } try{
            with open(filename, "wb") as f{
                f.write(chars);
            } return true;
        } except IOError as msg{
            tkMessageBox.showerror("I/O Error", str(msg),
                                   parent=this.text);
            return false;

    }
    } function encode( chars){
        if isinstance(chars, str){
            # This is either plain ASCII, or Tk was returning mixed-encoding
            # text to us. Don't try to guess further.
            return chars;
        # See whether there is anything non-ASCII in it.
        # If not, no need to figure out the encoding.
        }
        try{
            return chars.encode('ascii');
        } except UnicodeError{
            pass;
        # If there is an encoding declared, try this first.
        }
        try{
            enc = coding_spec(chars);
            failed = nil;
        } except LookupError as msg{
            failed = msg;
            enc = nil;
        } if enc{
            try{
                return chars.encode(enc);
            } except UnicodeError{
                failed = "Invalid encoding '%s'" % enc;
        } } if failed{
            tkMessageBox.showerror(
                "I/O Error",
                "%s. Saving as UTF-8" % failed,
                parent = this.text);
        # If there was a UTF-8 signature, use that. This should not fail
        }
        if this.fileencoding == BOM_UTF8 or failed{
            return BOM_UTF8 + chars.encode("utf-8");
        # Try the original file encoding next, if any
        }
        if this.fileencoding{
            try{
                return chars.encode(this.fileencoding);
            } except UnicodeError{
                tkMessageBox.showerror(
                    "I/O Error",
                    "Cannot save this as '%s' anymore. Saving as UTF-8" \
                    % this.fileencoding,
                    parent = this.text);
                return BOM_UTF8 + chars.encode("utf-8");
        # Nothing was declared, and we had not determined an encoding
        # on loading. Recommend an encoding line.
        }
        } config_encoding = idleConf.GetOption("main","EditorWindow",
                                             "encoding");
        if config_encoding == 'utf-8'{
            # User has requested that we save files as UTF-8
            return BOM_UTF8 + chars.encode("utf-8");
        } ask_user = true;
        try{
            chars = chars.encode(encoding);
            enc = encoding;
            if config_encoding == 'locale'{
                ask_user = false;
        } } except UnicodeError{
            chars = BOM_UTF8 + chars.encode("utf-8");
            enc = "utf-8";
        } if not ask_user{
            return chars;
        } dialog = EncodingMessage(this.editwin.top, enc);
        dialog.go();
        if dialog.num == 1{
            # User asked us to edit the file
            encline = "# -*- coding: %s -*-\n" % enc;
            firstline = this.text.get("1.0", "2.0");
            if firstline.startswith("#!"){
                # Insert encoding after #! line
                this.text.insert("2.0", encline);
            } else{
                this.text.insert("1.0", encline);
            } return this.encode(this.text.get("1.0", "end-1c"));
        } return chars;

    }
    function fixlastline(){
        c = this.text.get("end-2c");
        if c != '\n'{
            this.text.insert("end-1c", "\n");

    }
    } function print_window( event){
        confirm = tkMessageBox.askokcancel(
                  title="Print",
                  message="Print to Default Printer",
                  default=tkMessageBox.OK,
                  parent=this.text);
        if not confirm{
            this.text.focus_set();
            return "break";
        } tempfilename = nil;
        saved = this.get_saved();
        if saved{
            filename = this.filename;
        # shell undo is reset after every prompt, looks saved, probably isn't
        }
        if not saved or filename is nil{
            (tfd, tempfilename) = tempfile.mkstemp(prefix='IDLE_tmp_');
            filename = tempfilename;
            os.close(tfd);
            if not this.writefile(tempfilename){
                os.unlink(tempfilename);
                return "break";
        } } platform = os.name;
        printPlatform = true;
        if platform == 'posix'{ #posix platform
            command = idleConf.GetOption('main','General',
                                         'print-command-posix');
            command = command + " 2>&1";
        } elif platform == 'nt'{ #win32 platform
            command = idleConf.GetOption('main','General','print-command-win');
        } else{ #no printing for this platform
            printPlatform = false;
        } if printPlatform{  #we can try to print for this platform
            command = command % pipes.quote(filename);
            pipe = os.popen(command, "r");
            # things can get ugly on NT if there is no printer available.
            output = pipe.read().strip();
            status = pipe.close();
            if status{
                output = "Printing failed (exit status 0x%x)\n" % \
                         status + output;
            } if output{
                output = "Printing command: %s\n" % repr(command) + output;
                tkMessageBox.showerror("Print status", output, parent=this.text);
        } } else{  #no printing for this platform
            message = "Printing is not enabled for this platform: %s" % platform;
            tkMessageBox.showinfo("Print status", message, parent=this.text);
        } if tempfilename{
            os.unlink(tempfilename);
        } return "break";

    }
    opendialog = nil;
    savedialog = nil;

    filetypes = [
        ("Python files", "*.py *.pyw", "TEXT"),
        ("Text files", "*.txt", "TEXT"),
        ("All files", "*"),
        ];

    defaultextension = '.py' if sys.platform == 'darwin' else '';

    function askopenfile(){
        dir, base = this.defaultfilename("open");
        if not this.opendialog{
            this.opendialog = tkFileDialog.Open(parent=this.text,
                                                filetypes=this.filetypes);
        } filename = this.opendialog.show(initialdir=dir, initialfile=base);
        if isinstance(filename, unicode){
            filename = filename.encode(filesystemencoding);
        } return filename;

    }
    function defaultfilename( mode="open"){
        if this.filename{
            return os.path.split(this.filename);
        } elif this.dirname{
            return this.dirname, "";
        } else{
            try{
                pwd = os.getcwd();
            } except os.error{
                pwd = "";
            } return pwd, "";

    }
    } function asksavefile(){
        dir, base = this.defaultfilename("save");
        if not this.savedialog{
            this.savedialog = tkFileDialog.SaveAs(
                    parent=this.text,
                    filetypes=this.filetypes,
                    defaultextension=this.defaultextension);
        } filename = this.savedialog.show(initialdir=dir, initialfile=base);
        if isinstance(filename, unicode){
            filename = filename.encode(filesystemencoding);
        } return filename;

    }
    function updaterecentfileslist(filename){
        "Update recent file list on all editor windows";
        this.editwin.update_recent_files_list(filename);


}
} function _io_binding(parent){  # htest #
    from Tkinter import Toplevel, Text;

    root = Toplevel(parent);
    root.title("Test IOBinding");
    width, height, x, y = list(map(int, re.split('[x+]', parent.geometry())));
    root.geometry("+%d+%d"%(x, y + 150));
    class MyEditWin{
        function __init__( text){
            this.text = text;
            this.flist = nil;
            this.text.bind("<Control-o>", this.open);
            this.text.bind('<Control-p>', this.printer);
            this.text.bind("<Control-s>", this.save);
            this.text.bind("<Alt-s>", this.saveas);
            this.text.bind('<Control-c>', this.savecopy);
        } function get_saved(){ return 0;}
        function set_saved( flag){ pass;}
        function reset_undo(){ pass;}
        function update_recent_files_list( filename){ pass;}
        function open( event){
            this.text.event_generate("<<open-window-from-file>>");
        } function printer( event){
            this.text.event_generate("<<print-window>>");
        } function save( event){
            this.text.event_generate("<<save-window>>");
        } function saveas( event){
            this.text.event_generate("<<save-window-as-file>>");
        } function savecopy( event){
            this.text.event_generate("<<save-copy-of-window-as-file>>");

    }
    } text = Text(root);
    text.pack();
    text.focus_set();
    editwin = MyEditWin(text);
    IOBinding(editwin);

}
if __name__ == "__main__"{
    from idlelib.idle_test.htest import run;
    run(_io_binding);

}