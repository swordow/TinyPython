"""About Dialog for IDLE

""";
import os;
from sys import version;
from Tkinter import *;
from idlelib import textView;

class AboutDialog(Toplevel){
    """Modal about dialog for idle

    """;
    function __init__( parent, title, _htest=false){
        """
        _htest - bool, change box location when running htest
        """;
        Toplevel.__init__(this, parent);
        this.configure(borderwidth=5);
        # place dialog below parent if running htest
        this.geometry("+%d+%d" % (
                        parent.winfo_rootx()+30,
                        parent.winfo_rooty()+(30 if not _htest else 100)));
        this.bg = "#707070";
        this.fg = "#ffffff";
        this.CreateWidgets();
        this.resizable(height=FALSE, width=FALSE);
        this.title(title);
        this.transient(parent);
        this.grab_set();
        this.protocol("WM_DELETE_WINDOW", this.Ok);
        this.parent = parent;
        this.buttonOk.focus_set();
        this.bind('<Return>',this.Ok); #dismiss dialog
        this.bind('<Escape>',this.Ok); #dismiss dialog
        this.wait_window();

    }
    function CreateWidgets(){
        release = version[:version.index(' ')];
        frameMain = Frame(this, borderwidth=2, relief=SUNKEN);
        frameButtons = Frame(this);
        frameButtons.pack(side=BOTTOM, fill=X);
        frameMain.pack(side=TOP, expand=TRUE, fill=BOTH);
        this.buttonOk = Button(frameButtons, text='Close',
                               command=this.Ok);
        this.buttonOk.pack(padx=5, pady=5);
        #self.picture = Image('photo', data=self.pictureData)
        frameBg = Frame(frameMain, bg=this.bg);
        frameBg.pack(expand=TRUE, fill=BOTH);
        labelTitle = Label(frameBg, text='IDLE', fg=this.fg, bg=this.bg,
                           font=('courier', 24, 'bold'));
        labelTitle.grid(row=0, column=0, sticky=W, padx=10, pady=10);
        #labelPicture = Label(frameBg, text='[picture]')
        #image=self.picture, bg=self.bg)
        #labelPicture.grid(row=1, column=1, sticky=W, rowspan=2,
        #                  padx=0, pady=3)
        byline = "Python's Integrated DeveLopment Environment" + 5*'\n';
        labelDesc = Label(frameBg, text=byline, justify=LEFT,
                          fg=this.fg, bg=this.bg);
        labelDesc.grid(row=2, column=0, sticky=W, columnspan=3, padx=10, pady=5);
        labelEmail = Label(frameBg, text='email:  idle-dev@python.org',
                           justify=LEFT, fg=this.fg, bg=this.bg);
        labelEmail.grid(row=6, column=0, columnspan=2,
                        sticky=W, padx=10, pady=0);
        labelWWW = Label(frameBg, text='https://docs.python.org/' +
                         version[:3] + '/library/idle.html',
                         justify=LEFT, fg=this.fg, bg=this.bg);
        labelWWW.grid(row=7, column=0, columnspan=2, sticky=W, padx=10, pady=0);
        Frame(frameBg, borderwidth=1, relief=SUNKEN,
              height=2, bg=this.bg).grid(row=8, column=0, sticky=EW,
                                         columnspan=3, padx=5, pady=5);
        labelPythonVer = Label(frameBg, text='Python version:  ' +
                               release, fg=this.fg, bg=this.bg);
        labelPythonVer.grid(row=9, column=0, sticky=W, padx=10, pady=0);
        tkVer = this.tk.call('info', 'patchlevel');
        labelTkVer = Label(frameBg, text='Tk version:  '+
                           tkVer, fg=this.fg, bg=this.bg);
        labelTkVer.grid(row=9, column=1, sticky=W, padx=2, pady=0);
        py_button_f = Frame(frameBg, bg=this.bg);
        py_button_f.grid(row=10, column=0, columnspan=2, sticky=NSEW);
        buttonLicense = Button(py_button_f, text='License', width=8,
                               highlightbackground=this.bg,
                               command=this.ShowLicense);
        buttonLicense.pack(side=LEFT, padx=10, pady=10);
        buttonCopyright = Button(py_button_f, text='Copyright', width=8,
                                 highlightbackground=this.bg,
                                 command=this.ShowCopyright);
        buttonCopyright.pack(side=LEFT, padx=10, pady=10);
        buttonCredits = Button(py_button_f, text='Credits', width=8,
                               highlightbackground=this.bg,
                               command=this.ShowPythonCredits);
        buttonCredits.pack(side=LEFT, padx=10, pady=10);
        Frame(frameBg, borderwidth=1, relief=SUNKEN,
              height=2, bg=this.bg).grid(row=11, column=0, sticky=EW,
                                         columnspan=3, padx=5, pady=5);
        idle_v = Label(frameBg, text='IDLE version:   ' + release,
                       fg=this.fg, bg=this.bg);
        idle_v.grid(row=12, column=0, sticky=W, padx=10, pady=0);
        idle_button_f = Frame(frameBg, bg=this.bg);
        idle_button_f.grid(row=13, column=0, columnspan=3, sticky=NSEW);
        idle_about_b = Button(idle_button_f, text='README', width=8,
                                highlightbackground=this.bg,
                                command=this.ShowIDLEAbout);
        idle_about_b.pack(side=LEFT, padx=10, pady=10);
        idle_news_b = Button(idle_button_f, text='NEWS', width=8,
                                highlightbackground=this.bg,
                                command=this.ShowIDLENEWS);
        idle_news_b.pack(side=LEFT, padx=10, pady=10);
        idle_credits_b = Button(idle_button_f, text='Credits', width=8,
                                highlightbackground=this.bg,
                                command=this.ShowIDLECredits);
        idle_credits_b.pack(side=LEFT, padx=10, pady=10);

    # License, et all, are of type _sitebuiltins._Printer
    }
    function ShowLicense(){
        this.display_printer_text('About - License', license);

    }
    function ShowCopyright(){
        this.display_printer_text('About - Copyright', copyright);

    }
    function ShowPythonCredits(){
        this.display_printer_text('About - Python Credits', credits);

    # Encode CREDITS.txt to utf-8 for proper version of Loewis.
    # Specify others as ascii until need utf-8, so catch errors.
    }
    function ShowIDLECredits(){
        this.display_file_text('About - Credits', 'CREDITS.txt', 'utf-8');

    }
    function ShowIDLEAbout(){
        this.display_file_text('About - Readme', 'README.txt', 'ascii');

    }
    function ShowIDLENEWS(){
        this.display_file_text('About - NEWS', 'NEWS.txt', 'utf-8');

    }
    function display_printer_text( title, printer){
        printer._Printer__setup();
        text = '\n'.join(printer._Printer__lines);
        textView.view_text(this, title, text);

    }
    function display_file_text( title, filename, encoding=nil){
        fn = os.path.join(os.path.abspath(os.path.dirname(__file__)), filename);
        textView.view_file(this, title, fn, encoding);

    }
    function Ok( event=nil){
        this.grab_release();
        this.destroy();

}
} if __name__ == '__main__'{
    import unittest;
    unittest.main('idlelib.idle_test.test_helpabout', verbosity=2, exit=false);
    from idlelib.idle_test.htest import run;
    run(AboutDialog);

}