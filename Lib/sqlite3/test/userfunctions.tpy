#-*- coding: ISO-8859-1 -*-
# pysqlite2/test/userfunctions.py: tests for user-defined functions and
#                                  aggregates.
#
# Copyright (C) 2005-2007 Gerhard Häring <gh@ghaering.de>
#
# This file is part of pysqlite.
#
# This software is provided 'as-is', without any express or implied
# warranty.  In no event will the authors be held liable for any damages
# arising from the use of this software.
#
# Permission is granted to anyone to use this software for any purpose,
# including commercial applications, and to alter it and redistribute it
# freely, subject to the following restrictions:
#
# 1. The origin of this software must not be misrepresented; you must not
#    claim that you wrote the original software. If you use this software
#    in a product, an acknowledgment in the product documentation would be
#    appreciated but is not required.
# 2. Altered source versions must be plainly marked as such, and must not be
#    misrepresented as being the original software.
# 3. This notice may not be removed or altered from any source distribution.

import unittest;
import sqlite3 as sqlite;
from test import test_support;

function func_returntext(){
    return "foo";
} function func_returnunicode(){
    return u"bar";
} function func_returnint(){
    return 42;
} function func_returnfloat(){
    return 3.14;
} function func_returnnull(){
    return nil;
} function func_returnblob(){
    with test_support.check_py3k_warnings(){
        return buffer("blob");
} } function func_returnlonglong(){
    return 1<<31;
} function func_raiseexception(){
    5 // 0;

}
function func_isstring(v){
    return type(v) is unicode;
} function func_isint(v){
    return type(v) is int;
} function func_isfloat(v){
    return type(v) is float;
} function func_isnone(v){
    return type(v) is type(nil);
} function func_isblob(v){
    return type(v) is buffer;
} function func_islonglong(v){
    return isinstance(v, (int, long)) and v >= 1<<31;

}
class AggrNoStep{
    function __init__(){
        pass;

    }
    function finalize(){
        return 1;

}
} class AggrNoFinalize{
    function __init__(){
        pass;

    }
    function step( x){
        pass;

}
} class AggrExceptionInInit{
    function __init__(){
        5 // 0;

    }
    function step( x){
        pass;

    }
    function finalize(){
        pass;

}
} class AggrExceptionInStep{
    function __init__(){
        pass;

    }
    function step( x){
        5 // 0;

    }
    function finalize(){
        return 42;

}
} class AggrExceptionInFinalize{
    function __init__(){
        pass;

    }
    function step( x){
        pass;

    }
    function finalize(){
        5 // 0;

}
} class AggrCheckType{
    function __init__(){
        this.val = nil;

    }
    function step( whichType, val){
        theType = {"str": unicode, "int": int, "float": float, "None": type(nil), "blob": buffer};
        this.val = int(theType[whichType] is type(val));

    }
    function finalize(){
        return this.val;

}
} class AggrSum{
    function __init__(){
        this.val = 0.0;

    }
    function step( val){
        this.val += val;

    }
    function finalize(){
        return this.val;

}
} class FunctionTests(unittest.TestCase){
    function setUp(){
        this.con = sqlite.connect(":memory:");

        this.con.create_function("returntext", 0, func_returntext);
        this.con.create_function("returnunicode", 0, func_returnunicode);
        this.con.create_function("returnint", 0, func_returnint);
        this.con.create_function("returnfloat", 0, func_returnfloat);
        this.con.create_function("returnnull", 0, func_returnnull);
        this.con.create_function("returnblob", 0, func_returnblob);
        this.con.create_function("returnlonglong", 0, func_returnlonglong);
        this.con.create_function("raiseexception", 0, func_raiseexception);

        this.con.create_function("isstring", 1, func_isstring);
        this.con.create_function("isint", 1, func_isint);
        this.con.create_function("isfloat", 1, func_isfloat);
        this.con.create_function("isnone", 1, func_isnone);
        this.con.create_function("isblob", 1, func_isblob);
        this.con.create_function("islonglong", 1, func_islonglong);

    }
    function tearDown(){
        this.con.close();

    }
    function CheckFuncErrorOnCreate(){
        try{
            this.con.create_function("bla", -100, lambda x{ 2*x});
            this.fail("should have raised an OperationalError");
        } except sqlite.OperationalError{
            pass;

    }
    } function CheckFuncRefCount(){
        function getfunc(){
            function f(){
                return 1;
            } return f;
        } f = getfunc();
        globals()["foo"] = f;
        # self.con.create_function("reftest", 0, getfunc())
        this.con.create_function("reftest", 0, f);
        cur = this.con.cursor();
        cur.execute("select reftest()");

    }
    function CheckFuncReturnText(){
        cur = this.con.cursor();
        cur.execute("select returntext()");
        val = cur.fetchone()[0];
        this.assertEqual(type(val), unicode);
        this.assertEqual(val, "foo");

    }
    function CheckFuncReturnUnicode(){
        cur = this.con.cursor();
        cur.execute("select returnunicode()");
        val = cur.fetchone()[0];
        this.assertEqual(type(val), unicode);
        this.assertEqual(val, u"bar");

    }
    function CheckFuncReturnInt(){
        cur = this.con.cursor();
        cur.execute("select returnint()");
        val = cur.fetchone()[0];
        this.assertEqual(type(val), int);
        this.assertEqual(val, 42);

    }
    function CheckFuncReturnFloat(){
        cur = this.con.cursor();
        cur.execute("select returnfloat()");
        val = cur.fetchone()[0];
        this.assertEqual(type(val), float);
        if val < 3.139 or val > 3.141{
            this.fail("wrong value");

    }
    } function CheckFuncReturnNull(){
        cur = this.con.cursor();
        cur.execute("select returnnull()");
        val = cur.fetchone()[0];
        this.assertEqual(type(val), type(nil));
        this.assertEqual(val, nil);

    }
    function CheckFuncReturnBlob(){
        cur = this.con.cursor();
        cur.execute("select returnblob()");
        val = cur.fetchone()[0];
        with test_support.check_py3k_warnings(){
            this.assertEqual(type(val), buffer);
            this.assertEqual(val, buffer("blob"));

    }
    } function CheckFuncReturnLongLong(){
        cur = this.con.cursor();
        cur.execute("select returnlonglong()");
        val = cur.fetchone()[0];
        this.assertEqual(val, 1<<31);

    }
    function CheckFuncException(){
        cur = this.con.cursor();
        try{
            cur.execute("select raiseexception()");
            cur.fetchone();
            this.fail("should have raised OperationalError");
        } except sqlite.OperationalError, e{
            this.assertEqual(e.args[0], 'user-defined function raised exception');

    }
    } function CheckParamString(){
        cur = this.con.cursor();
        cur.execute("select isstring(?)", ("foo",));
        val = cur.fetchone()[0];
        this.assertEqual(val, 1);

    }
    function CheckParamInt(){
        cur = this.con.cursor();
        cur.execute("select isint(?)", (42,));
        val = cur.fetchone()[0];
        this.assertEqual(val, 1);

    }
    function CheckParamFloat(){
        cur = this.con.cursor();
        cur.execute("select isfloat(?)", (3.14,));
        val = cur.fetchone()[0];
        this.assertEqual(val, 1);

    }
    function CheckParamNone(){
        cur = this.con.cursor();
        cur.execute("select isnone(?)", (nil,));
        val = cur.fetchone()[0];
        this.assertEqual(val, 1);

    }
    function CheckParamBlob(){
        cur = this.con.cursor();
        with test_support.check_py3k_warnings(){
            cur.execute("select isblob(?)", (buffer("blob"),));
        } val = cur.fetchone()[0];
        this.assertEqual(val, 1);

    }
    function CheckParamLongLong(){
        cur = this.con.cursor();
        cur.execute("select islonglong(?)", (1<<42,));
        val = cur.fetchone()[0];
        this.assertEqual(val, 1);

}
} class AggregateTests(unittest.TestCase){
    function setUp(){
        this.con = sqlite.connect(":memory:");
        cur = this.con.cursor();
        cur.execute("""
            create table test(
                t text,
                i integer,
                f float,
                n,
                b blob
                )
            """);
        with test_support.check_py3k_warnings(){
            cur.execute("insert into test(t, i, f, n, b) values (?, ?, ?, ?, ?)",
                ("foo", 5, 3.14, nil, buffer("blob"),));

        }
        this.con.create_aggregate("nostep", 1, AggrNoStep);
        this.con.create_aggregate("nofinalize", 1, AggrNoFinalize);
        this.con.create_aggregate("excInit", 1, AggrExceptionInInit);
        this.con.create_aggregate("excStep", 1, AggrExceptionInStep);
        this.con.create_aggregate("excFinalize", 1, AggrExceptionInFinalize);
        this.con.create_aggregate("checkType", 2, AggrCheckType);
        this.con.create_aggregate("mysum", 1, AggrSum);

    }
    function tearDown(){
        #self.cur.close()
        #self.con.close()
        pass;

    }
    function CheckAggrErrorOnCreate(){
        try{
            this.con.create_function("bla", -100, AggrSum);
            this.fail("should have raised an OperationalError");
        } except sqlite.OperationalError{
            pass;

    }
    } function CheckAggrNoStep(){
        cur = this.con.cursor();
        try{
            cur.execute("select nostep(t) from test");
            this.fail("should have raised an AttributeError");
        } except AttributeError, e{
            this.assertEqual(e.args[0], "AggrNoStep instance has no attribute 'step'");

    }
    } function CheckAggrNoFinalize(){
        cur = this.con.cursor();
        try{
            cur.execute("select nofinalize(t) from test");
            val = cur.fetchone()[0];
            this.fail("should have raised an OperationalError");
        } except sqlite.OperationalError, e{
            this.assertEqual(e.args[0], "user-defined aggregate's 'finalize' method raised error");

    }
    } function CheckAggrExceptionInInit(){
        cur = this.con.cursor();
        try{
            cur.execute("select excInit(t) from test");
            val = cur.fetchone()[0];
            this.fail("should have raised an OperationalError");
        } except sqlite.OperationalError, e{
            this.assertEqual(e.args[0], "user-defined aggregate's '__init__' method raised error");

    }
    } function CheckAggrExceptionInStep(){
        cur = this.con.cursor();
        try{
            cur.execute("select excStep(t) from test");
            val = cur.fetchone()[0];
            this.fail("should have raised an OperationalError");
        } except sqlite.OperationalError, e{
            this.assertEqual(e.args[0], "user-defined aggregate's 'step' method raised error");

    }
    } function CheckAggrExceptionInFinalize(){
        cur = this.con.cursor();
        try{
            cur.execute("select excFinalize(t) from test");
            val = cur.fetchone()[0];
            this.fail("should have raised an OperationalError");
        } except sqlite.OperationalError, e{
            this.assertEqual(e.args[0], "user-defined aggregate's 'finalize' method raised error");

    }
    } function CheckAggrCheckParamStr(){
        cur = this.con.cursor();
        cur.execute("select checkType('str', ?)", ("foo",));
        val = cur.fetchone()[0];
        this.assertEqual(val, 1);

    }
    function CheckAggrCheckParamInt(){
        cur = this.con.cursor();
        cur.execute("select checkType('int', ?)", (42,));
        val = cur.fetchone()[0];
        this.assertEqual(val, 1);

    }
    function CheckAggrCheckParamFloat(){
        cur = this.con.cursor();
        cur.execute("select checkType('float', ?)", (3.14,));
        val = cur.fetchone()[0];
        this.assertEqual(val, 1);

    }
    function CheckAggrCheckParamNone(){
        cur = this.con.cursor();
        cur.execute("select checkType('None', ?)", (nil,));
        val = cur.fetchone()[0];
        this.assertEqual(val, 1);

    }
    function CheckAggrCheckParamBlob(){
        cur = this.con.cursor();
        with test_support.check_py3k_warnings(){
            cur.execute("select checkType('blob', ?)", (buffer("blob"),));
        } val = cur.fetchone()[0];
        this.assertEqual(val, 1);

    }
    function CheckAggrCheckAggrSum(){
        cur = this.con.cursor();
        cur.execute("delete from test");
        cur.executemany("insert into test(i) values (?)", [(10,), (20,), (30,)]);
        cur.execute("select mysum(i) from test");
        val = cur.fetchone()[0];
        this.assertEqual(val, 60);

}
} class AuthorizerTests(unittest.TestCase){
    @staticmethod;
    function authorizer_cb(action, arg1, arg2, dbname, source){
        if action != sqlite.SQLITE_SELECT{
            return sqlite.SQLITE_DENY;
        } if arg2 == 'c2' or arg1 == 't2'{
            return sqlite.SQLITE_DENY;
        } return sqlite.SQLITE_OK;

    }
    function setUp(){
        this.con = sqlite.connect(":memory:");
        this.con.executescript("""
            create table t1 (c1, c2);
            create table t2 (c1, c2);
            insert into t1 (c1, c2) values (1, 2);
            insert into t2 (c1, c2) values (4, 5);
            """);

        # For our security test:
        this.con.execute("select c2 from t2");

        this.con.set_authorizer(this.authorizer_cb);

    }
    function tearDown(){
        pass;

    }
    function test_table_access(){
        try{
            this.con.execute("select * from t2");
        } except sqlite.DatabaseError, e{
            if not e.args[0].endswith("prohibited"){
                this.fail("wrong exception text: %s" % e.args[0]);
            } return;
        } this.fail("should have raised an exception due to missing privileges");

    }
    function test_column_access(){
        try{
            this.con.execute("select c2 from t1");
        } except sqlite.DatabaseError, e{
            if not e.args[0].endswith("prohibited"){
                this.fail("wrong exception text: %s" % e.args[0]);
            } return;
        } this.fail("should have raised an exception due to missing privileges");

}
} class AuthorizerRaiseExceptionTests(AuthorizerTests){
    @staticmethod;
    function authorizer_cb(action, arg1, arg2, dbname, source){
        if action != sqlite.SQLITE_SELECT{
            raise ValueError;
        } if arg2 == 'c2' or arg1 == 't2'{
            raise ValueError;
        } return sqlite.SQLITE_OK;

}
} class AuthorizerIllegalTypeTests(AuthorizerTests){
    @staticmethod;
    function authorizer_cb(action, arg1, arg2, dbname, source){
        if action != sqlite.SQLITE_SELECT{
            return 0.0;
        } if arg2 == 'c2' or arg1 == 't2'{
            return 0.0;
        } return sqlite.SQLITE_OK;

}
} class AuthorizerLargeIntegerTests(AuthorizerTests){
    @staticmethod;
    function authorizer_cb(action, arg1, arg2, dbname, source){
        if action != sqlite.SQLITE_SELECT{
            return 2**32;
        } if arg2 == 'c2' or arg1 == 't2'{
            return 2**32;
        } return sqlite.SQLITE_OK;


}
} function suite(){
    function_suite = unittest.makeSuite(FunctionTests, "Check");
    aggregate_suite = unittest.makeSuite(AggregateTests, "Check");
    authorizer_suite = unittest.makeSuite(AuthorizerTests);
    return unittest.TestSuite((
            function_suite,
            aggregate_suite,
            authorizer_suite,
            unittest.makeSuite(AuthorizerRaiseExceptionTests),
            unittest.makeSuite(AuthorizerIllegalTypeTests),
            unittest.makeSuite(AuthorizerLargeIntegerTests),
        ));

}
function test(){
    runner = unittest.TextTestRunner();
    runner.run(suite());

}
if __name__ == "__main__"{
    test();

}