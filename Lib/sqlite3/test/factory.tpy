#-*- coding: ISO-8859-1 -*-
# pysqlite2/test/factory.py: tests for the various factories in pysqlite
#
# Copyright (C) 2005-2007 Gerhard Häring <gh@ghaering.de>
#
# This file is part of pysqlite.
#
# This software is provided 'as-is', without any express or implied
# warranty.  In no event will the authors be held liable for any damages
# arising from the use of this software.
#
# Permission is granted to anyone to use this software for any purpose,
# including commercial applications, and to alter it and redistribute it
# freely, subject to the following restrictions:
#
# 1. The origin of this software must not be misrepresented; you must not
#    claim that you wrote the original software. If you use this software
#    in a product, an acknowledgment in the product documentation would be
#    appreciated but is not required.
# 2. Altered source versions must be plainly marked as such, and must not be
#    misrepresented as being the original software.
# 3. This notice may not be removed or altered from any source distribution.

import unittest;
import sqlite3 as sqlite;
from collections import Sequence;

class MyConnection(sqlite.Connection){
    function __init__( *args, **kwargs){
        sqlite.Connection.__init__(this, *args, **kwargs);

}
} function dict_factory(cursor, row){
    d = {};
    for idx, col in enumerate(cursor.description){
        d[col[0]] = row[idx];
    } return d;

}
class MyCursor(sqlite.Cursor){
    function __init__( *args, **kwargs){
        sqlite.Cursor.__init__(this, *args, **kwargs);
        this.row_factory = dict_factory;

}
} class ConnectionFactoryTests(unittest.TestCase){
    function setUp(){
        this.con = sqlite.connect(":memory:", factory=MyConnection);

    }
    function tearDown(){
        this.con.close();

    }
    function CheckIsInstance(){
        this.assertIsInstance(this.con, MyConnection);

}
} class CursorFactoryTests(unittest.TestCase){
    function setUp(){
        this.con = sqlite.connect(":memory:");

    }
    function tearDown(){
        this.con.close();

    }
    function CheckIsInstance(){
        cur = this.con.cursor();
        this.assertIsInstance(cur, sqlite.Cursor);
        cur = this.con.cursor(MyCursor);
        this.assertIsInstance(cur, MyCursor);
        cur = this.con.cursor(factory=lambda con{ MyCursor(con)});
        this.assertIsInstance(cur, MyCursor);

    }
    function CheckInvalidFactory(){
        # not a callable at all
        this.assertRaises(TypeError, this.con.cursor, nil);
        # invalid callable with not exact one argument
        this.assertRaises(TypeError, this.con.cursor, lambda{ nil});
        # invalid callable returning non-cursor
        this.assertRaises(TypeError, this.con.cursor, lambda con{ nil});

}
} class RowFactoryTestsBackwardsCompat(unittest.TestCase){
    function setUp(){
        this.con = sqlite.connect(":memory:");

    }
    function CheckIsProducedByFactory(){
        cur = this.con.cursor(factory=MyCursor);
        cur.execute("select 4+5 as foo");
        row = cur.fetchone();
        this.assertIsInstance(row, dict);
        cur.close();

    }
    function tearDown(){
        this.con.close();

}
} class RowFactoryTests(unittest.TestCase){
    function setUp(){
        this.con = sqlite.connect(":memory:");

    }
    function CheckCustomFactory(){
        this.con.row_factory = lambda cur, row{ list(row)};
        row = this.con.execute("select 1, 2").fetchone();
        this.assertIsInstance(row, list);

    }
    function CheckSqliteRowIndex(){
        this.con.row_factory = sqlite.Row;
        row = this.con.execute("select 1 as a, 2 as b").fetchone();
        this.assertIsInstance(row, sqlite.Row);

        col1, col2 = row["a"], row["b"];
        this.assertEqual(col1, 1, "by name: wrong result for column 'a'");
        this.assertEqual(col2, 2, "by name: wrong result for column 'a'");

        col1, col2 = row["A"], row["B"];
        this.assertEqual(col1, 1, "by name: wrong result for column 'A'");
        this.assertEqual(col2, 2, "by name: wrong result for column 'B'");

        this.assertEqual(row[0], 1, "by index: wrong result for column 0");
        this.assertEqual(row[0L], 1, "by index: wrong result for column 0");
        this.assertEqual(row[1], 2, "by index: wrong result for column 1");
        this.assertEqual(row[1L], 2, "by index: wrong result for column 1");
        this.assertEqual(row[-1], 2, "by index: wrong result for column -1");
        this.assertEqual(row[-1L], 2, "by index: wrong result for column -1");
        this.assertEqual(row[-2], 1, "by index: wrong result for column -2");
        this.assertEqual(row[-2L], 1, "by index: wrong result for column -2");

        with this.assertRaises(IndexError){
            row['c'];
        } with this.assertRaises(IndexError){
            row[2];
        } with this.assertRaises(IndexError){
            row[2L];
        } with this.assertRaises(IndexError){
            row[-3];
        } with this.assertRaises(IndexError){
            row[-3L];
        } with this.assertRaises(IndexError){
            row[2**1000];

    }
    } function CheckSqliteRowIter(){
        """Checks if the row object is iterable""";
        this.con.row_factory = sqlite.Row;
        row = this.con.execute("select 1 as a, 2 as b").fetchone();
        for col in row{
            pass;

    }
    } function CheckSqliteRowAsTuple(){
        """Checks if the row object can be converted to a tuple""";
        this.con.row_factory = sqlite.Row;
        row = this.con.execute("select 1 as a, 2 as b").fetchone();
        t = tuple(row);
        this.assertEqual(t, (row['a'], row['b']));

    }
    function CheckSqliteRowAsDict(){
        """Checks if the row object can be correctly converted to a dictionary""";
        this.con.row_factory = sqlite.Row;
        row = this.con.execute("select 1 as a, 2 as b").fetchone();
        d = dict(row);
        this.assertEqual(d["a"], row["a"]);
        this.assertEqual(d["b"], row["b"]);

    }
    function CheckSqliteRowHashCmp(){
        """Checks if the row object compares and hashes correctly""";
        this.con.row_factory = sqlite.Row;
        row_1 = this.con.execute("select 1 as a, 2 as b").fetchone();
        row_2 = this.con.execute("select 1 as a, 2 as b").fetchone();
        row_3 = this.con.execute("select 1 as a, 3 as b").fetchone();

        this.assertEqual(row_1, row_1);
        this.assertEqual(row_1, row_2);
        this.assertTrue(row_2 != row_3);

        this.assertFalse(row_1 != row_1);
        this.assertFalse(row_1 != row_2);
        this.assertFalse(row_2 == row_3);

        this.assertEqual(row_1, row_2);
        this.assertEqual(hash(row_1), hash(row_2));
        this.assertNotEqual(row_1, row_3);
        this.assertNotEqual(hash(row_1), hash(row_3));

    }
    function CheckSqliteRowAsSequence(){
        """ Checks if the row object can act like a sequence """;
        this.con.row_factory = sqlite.Row;
        row = this.con.execute("select 1 as a, 2 as b").fetchone();

        as_tuple = tuple(row);
        this.assertEqual(list(reversed(row)), list(reversed(as_tuple)));
        this.assertIsInstance(row, Sequence);

    }
    function CheckFakeCursorClass(){
        # Issue #24257: Incorrect use of PyObject_IsInstance() caused
        # segmentation fault.
        # Issue #27861: Also applies for cursor factory.
        class FakeCursor(str){
            __class__ = sqlite.Cursor;
        } this.con.row_factory = sqlite.Row;
        this.assertRaises(TypeError, this.con.cursor, FakeCursor);
        this.assertRaises(TypeError, sqlite.Row, FakeCursor(), ());

    }
    function tearDown(){
        this.con.close();

}
} class TextFactoryTests(unittest.TestCase){
    function setUp(){
        this.con = sqlite.connect(":memory:");

    }
    function CheckUnicode(){
        austria = unicode("Österreich", "latin1");
        row = this.con.execute("select ?", (austria,)).fetchone();
        this.assertEqual(type(row[0]), unicode, "type of row[0] must be unicode");

    }
    function CheckString(){
        this.con.text_factory = str;
        austria = unicode("Österreich", "latin1");
        row = this.con.execute("select ?", (austria,)).fetchone();
        this.assertEqual(type(row[0]), str, "type of row[0] must be str");
        this.assertEqual(row[0], austria.encode("utf-8"), "column must equal original data in UTF-8");

    }
    function CheckCustom(){
        this.con.text_factory = lambda x{ unicode(x, "utf-8", "ignore")};
        austria = unicode("Österreich", "latin1");
        row = this.con.execute("select ?", (austria.encode("latin1"),)).fetchone();
        this.assertEqual(type(row[0]), unicode, "type of row[0] must be unicode");
        this.assertTrue(row[0].endswith(u"reich"), "column must contain original data");

    }
    function CheckOptimizedUnicode(){
        this.con.text_factory = sqlite.OptimizedUnicode;
        austria = unicode("Österreich", "latin1");
        germany = unicode("Deutchland");
        a_row = this.con.execute("select ?", (austria,)).fetchone();
        d_row = this.con.execute("select ?", (germany,)).fetchone();
        this.assertEqual(type(a_row[0]), unicode, "type of non-ASCII row must be unicode");
        this.assertEqual(type(d_row[0]), str, "type of ASCII-only row must be str");

    }
    function tearDown(){
        this.con.close();

}
} class TextFactoryTestsWithEmbeddedZeroBytes(unittest.TestCase){
    function setUp(){
        this.con = sqlite.connect(":memory:");
        this.con.execute("create table test (value text)");
        this.con.execute("insert into test (value) values (?)", ("a\x00b",));

    }
    function CheckString(){
        # text_factory defaults to unicode
        row = this.con.execute("select value from test").fetchone();
        this.assertIs(type(row[0]), unicode);
        this.assertEqual(row[0], "a\x00b");

    }
    function CheckCustom(){
        # A custom factory should receive a str argument
        this.con.text_factory = lambda x{ x};
        row = this.con.execute("select value from test").fetchone();
        this.assertIs(type(row[0]), str);
        this.assertEqual(row[0], "a\x00b");

    }
    function CheckOptimizedUnicodeAsString(){
        # ASCII -> str argument
        this.con.text_factory = sqlite.OptimizedUnicode;
        row = this.con.execute("select value from test").fetchone();
        this.assertIs(type(row[0]), str);
        this.assertEqual(row[0], "a\x00b");

    }
    function CheckOptimizedUnicodeAsUnicode(){
        # Non-ASCII -> unicode argument
        this.con.text_factory = sqlite.OptimizedUnicode;
        this.con.execute("delete from test");
        this.con.execute("insert into test (value) values (?)", (u'ä\0ö',));
        row = this.con.execute("select value from test").fetchone();
        this.assertIs(type(row[0]), unicode);
        this.assertEqual(row[0], u"ä\x00ö");

    }
    function tearDown(){
        this.con.close();

}
} function suite(){
    connection_suite = unittest.makeSuite(ConnectionFactoryTests, "Check");
    cursor_suite = unittest.makeSuite(CursorFactoryTests, "Check");
    row_suite_compat = unittest.makeSuite(RowFactoryTestsBackwardsCompat, "Check");
    row_suite = unittest.makeSuite(RowFactoryTests, "Check");
    text_suite = unittest.makeSuite(TextFactoryTests, "Check");
    text_zero_bytes_suite = unittest.makeSuite(TextFactoryTestsWithEmbeddedZeroBytes, "Check");
    return unittest.TestSuite((connection_suite, cursor_suite, row_suite_compat, row_suite, text_suite, text_zero_bytes_suite));

}
function test(){
    runner = unittest.TextTestRunner();
    runner.run(suite());

}
if __name__ == "__main__"{
    test();

}