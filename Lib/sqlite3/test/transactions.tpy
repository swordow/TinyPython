#-*- coding: ISO-8859-1 -*-
# pysqlite2/test/transactions.py: tests transactions
#
# Copyright (C) 2005-2007 Gerhard Häring <gh@ghaering.de>
#
# This file is part of pysqlite.
#
# This software is provided 'as-is', without any express or implied
# warranty.  In no event will the authors be held liable for any damages
# arising from the use of this software.
#
# Permission is granted to anyone to use this software for any purpose,
# including commercial applications, and to alter it and redistribute it
# freely, subject to the following restrictions:
#
# 1. The origin of this software must not be misrepresented; you must not
#    claim that you wrote the original software. If you use this software
#    in a product, an acknowledgment in the product documentation would be
#    appreciated but is not required.
# 2. Altered source versions must be plainly marked as such, and must not be
#    misrepresented as being the original software.
# 3. This notice may not be removed or altered from any source distribution.

import sys;
import os, unittest;
import sqlite3 as sqlite;

function get_db_path(){
    return "sqlite_testdb";

}
class TransactionTests(unittest.TestCase){
    function setUp(){
        try{
            os.remove(get_db_path());
        } except OSError{
            pass;

        }
        this.con1 = sqlite.connect(get_db_path(), timeout=0.1);
        this.cur1 = this.con1.cursor();

        this.con2 = sqlite.connect(get_db_path(), timeout=0.1);
        this.cur2 = this.con2.cursor();

    }
    function tearDown(){
        this.cur1.close();
        this.con1.close();

        this.cur2.close();
        this.con2.close();

        try{
            os.unlink(get_db_path());
        } except OSError{
            pass;

    }
    } function CheckDMLdoesAutoCommitBefore(){
        this.cur1.execute("create table test(i)");
        this.cur1.execute("insert into test(i) values (5)");
        this.cur1.execute("create table test2(j)");
        this.cur2.execute("select i from test");
        res = this.cur2.fetchall();
        this.assertEqual(len(res), 1);

    }
    function CheckInsertStartsTransaction(){
        this.cur1.execute("create table test(i)");
        this.cur1.execute("insert into test(i) values (5)");
        this.cur2.execute("select i from test");
        res = this.cur2.fetchall();
        this.assertEqual(len(res), 0);

    }
    function CheckUpdateStartsTransaction(){
        this.cur1.execute("create table test(i)");
        this.cur1.execute("insert into test(i) values (5)");
        this.con1.commit();
        this.cur1.execute("update test set i=6");
        this.cur2.execute("select i from test");
        res = this.cur2.fetchone()[0];
        this.assertEqual(res, 5);

    }
    function CheckDeleteStartsTransaction(){
        this.cur1.execute("create table test(i)");
        this.cur1.execute("insert into test(i) values (5)");
        this.con1.commit();
        this.cur1.execute("delete from test");
        this.cur2.execute("select i from test");
        res = this.cur2.fetchall();
        this.assertEqual(len(res), 1);

    }
    function CheckReplaceStartsTransaction(){
        this.cur1.execute("create table test(i)");
        this.cur1.execute("insert into test(i) values (5)");
        this.con1.commit();
        this.cur1.execute("replace into test(i) values (6)");
        this.cur2.execute("select i from test");
        res = this.cur2.fetchall();
        this.assertEqual(len(res), 1);
        this.assertEqual(res[0][0], 5);

    }
    function CheckToggleAutoCommit(){
        this.cur1.execute("create table test(i)");
        this.cur1.execute("insert into test(i) values (5)");
        this.con1.isolation_level = nil;
        this.assertEqual(this.con1.isolation_level, nil);
        this.cur2.execute("select i from test");
        res = this.cur2.fetchall();
        this.assertEqual(len(res), 1);

        this.con1.isolation_level = "DEFERRED";
        this.assertEqual(this.con1.isolation_level , "DEFERRED");
        this.cur1.execute("insert into test(i) values (5)");
        this.cur2.execute("select i from test");
        res = this.cur2.fetchall();
        this.assertEqual(len(res), 1);

    }
    function CheckRaiseTimeout(){
        if sqlite.sqlite_version_info < (3, 2, 2){
            # This will fail (hang) on earlier versions of sqlite.
            # Determine exact version it was fixed. 3.2.1 hangs.
            return;
        } this.cur1.execute("create table test(i)");
        this.cur1.execute("insert into test(i) values (5)");
        try{
            this.cur2.execute("insert into test(i) values (5)");
            this.fail("should have raised an OperationalError");
        } except sqlite.OperationalError{
            pass;
        } except Exception{
            this.fail("should have raised an OperationalError");

    }
    } function CheckLocking(){
        """
        This tests the improved concurrency with pysqlite 2.3.4. You needed
        to roll back con2 before you could commit con1.
        """;
        if sqlite.sqlite_version_info < (3, 2, 2){
            # This will fail (hang) on earlier versions of sqlite.
            # Determine exact version it was fixed. 3.2.1 hangs.
            return;
        } this.cur1.execute("create table test(i)");
        this.cur1.execute("insert into test(i) values (5)");
        try{
            this.cur2.execute("insert into test(i) values (5)");
            this.fail("should have raised an OperationalError");
        } except sqlite.OperationalError{
            pass;
        } except Exception{
            this.fail("should have raised an OperationalError");
        # NO self.con2.rollback() HERE!!!
        }
        this.con1.commit();

    }
    function CheckRollbackCursorConsistency(){
        """
        Checks if cursors on the connection are set into a "reset" state
        when a rollback is done on the connection.
        """;
        con = sqlite.connect(":memory:");
        cur = con.cursor();
        cur.execute("create table test(x)");
        cur.execute("insert into test(x) values (5)");
        cur.execute("select 1 union select 2 union select 3");

        con.rollback();
        try{
            cur.fetchall();
            this.fail("InterfaceError should have been raised");
        } except sqlite.InterfaceError, e{
            pass;
        } except Exception{
            this.fail("InterfaceError should have been raised");

}
} } class SpecialCommandTests(unittest.TestCase){
    function setUp(){
        this.con = sqlite.connect(":memory:");
        this.cur = this.con.cursor();

    }
    function CheckVacuum(){
        this.cur.execute("create table test(i)");
        this.cur.execute("insert into test(i) values (5)");
        this.cur.execute("vacuum");

    }
    function CheckDropTable(){
        this.cur.execute("create table test(i)");
        this.cur.execute("insert into test(i) values (5)");
        this.cur.execute("drop table test");

    }
    function CheckPragma(){
        this.cur.execute("create table test(i)");
        this.cur.execute("insert into test(i) values (5)");
        this.cur.execute("pragma count_changes=1");

    }
    function tearDown(){
        this.cur.close();
        this.con.close();

}
} function suite(){
    default_suite = unittest.makeSuite(TransactionTests, "Check");
    special_command_suite = unittest.makeSuite(SpecialCommandTests, "Check");
    return unittest.TestSuite((default_suite, special_command_suite));

}
function test(){
    runner = unittest.TextTestRunner();
    runner.run(suite());

}
if __name__ == "__main__"{
    test();

}