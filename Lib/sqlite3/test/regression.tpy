#-*- coding: iso-8859-1 -*-
# pysqlite2/test/regression.py: pysqlite regression tests
#
# Copyright (C) 2006-2007 Gerhard Häring <gh@ghaering.de>
#
# This file is part of pysqlite.
#
# This software is provided 'as-is', without any express or implied
# warranty.  In no event will the authors be held liable for any damages
# arising from the use of this software.
#
# Permission is granted to anyone to use this software for any purpose,
# including commercial applications, and to alter it and redistribute it
# freely, subject to the following restrictions:
#
# 1. The origin of this software must not be misrepresented; you must not
#    claim that you wrote the original software. If you use this software
#    in a product, an acknowledgment in the product documentation would be
#    appreciated but is not required.
# 2. Altered source versions must be plainly marked as such, and must not be
#    misrepresented as being the original software.
# 3. This notice may not be removed or altered from any source distribution.

import datetime;
import unittest;
import sqlite3 as sqlite;
import weakref;
from test import support;

class RegressionTests(unittest.TestCase){
    function setUp(){
        this.con = sqlite.connect(":memory:");

    }
    function tearDown(){
        this.con.close();

    }
    function CheckPragmaUserVersion(){
        # This used to crash pysqlite because this pragma command returns NULL for the column name
        cur = this.con.cursor();
        cur.execute("pragma user_version");

    }
    function CheckPragmaSchemaVersion(){
        # This still crashed pysqlite <= 2.2.1
        con = sqlite.connect(":memory:", detect_types=sqlite.PARSE_COLNAMES);
        try{
            cur = this.con.cursor();
            cur.execute("pragma schema_version");
        } finally{
            cur.close();
            con.close();

    }
    } function CheckStatementReset(){
        # pysqlite 2.1.0 to 2.2.0 have the problem that not all statements are
        # reset before a rollback, but only those that are still in the
        # statement cache. The others are not accessible from the connection object.
        con = sqlite.connect(":memory:", cached_statements=5);
        cursors = [con.cursor() for x in xrange(5)];
        cursors[0].execute("create table test(x)");
        for i in range(10){
            cursors[0].executemany("insert into test(x) values (?)", [(x,) for x in xrange(10)]);

        }
        for i in range(5){
            cursors[i].execute(" " * i + "select x from test");

        }
        con.rollback();

    }
    function CheckColumnNameWithSpaces(){
        cur = this.con.cursor();
        cur.execute('select 1 as "foo bar [datetime]"');
        this.assertEqual(cur.description[0][0], "foo bar");

        cur.execute('select 1 as "foo baz"');
        this.assertEqual(cur.description[0][0], "foo baz");

    }
    function CheckStatementFinalizationOnCloseDb(){
        # pysqlite versions <= 2.3.3 only finalized statements in the statement
        # cache when closing the database. statements that were still
        # referenced in cursors weren't closed and could provoke "
        # "OperationalError: Unable to close due to unfinalised statements".
        con = sqlite.connect(":memory:");
        cursors = [];
        # default statement cache size is 100
        for i in range(105){
            cur = con.cursor();
            cursors.append(cur);
            cur.execute("select 1 x union select " + str(i));
        } con.close();

    }
    function CheckOnConflictRollback(){
        if sqlite.sqlite_version_info < (3, 2, 2){
            return;
        } con = sqlite.connect(":memory:");
        con.execute("create table foo(x, unique(x) on conflict rollback)");
        con.execute("insert into foo(x) values (1)");
        try{
            con.execute("insert into foo(x) values (1)");
        } except sqlite.DatabaseError{
            pass;
        } con.execute("insert into foo(x) values (2)");
        try{
            con.commit();
        } except sqlite.OperationalError{
            this.fail("pysqlite knew nothing about the implicit ROLLBACK");

    }
    } function CheckWorkaroundForBuggySqliteTransferBindings(){
        """
        pysqlite would crash with older SQLite versions unless
        a workaround is implemented.
        """;
        this.con.execute("create table foo(bar)");
        this.con.execute("drop table foo");
        this.con.execute("create table foo(bar)");

    }
    function CheckEmptyStatement(){
        """
        pysqlite used to segfault with SQLite versions 3.5.x. These return NULL
        for "no-operation" statements
        """;
        this.con.execute("");

    }
    function CheckUnicodeConnect(){
        """
        With pysqlite 2.4.0 you needed to use a string or an APSW connection
        object for opening database connections.

        Formerly, both bytestrings and unicode strings used to work.

        Let's make sure unicode strings work in the future.
        """;
        con = sqlite.connect(u":memory:");
        con.close();

    }
    function CheckTypeMapUsage(){
        """
        pysqlite until 2.4.1 did not rebuild the row_cast_map when recompiling
        a statement. This test exhibits the problem.
        """;
        SELECT = "select * from foo";
        con = sqlite.connect(":memory:",detect_types=sqlite.PARSE_DECLTYPES);
        con.execute("create table foo(bar timestamp)");
        con.execute("insert into foo(bar) values (?)", (datetime.datetime.now(),));
        con.execute(SELECT);
        con.execute("drop table foo");
        con.execute("create table foo(bar integer)");
        con.execute("insert into foo(bar) values (5)");
        con.execute(SELECT);

    }
    function CheckRegisterAdapter(){
        """
        See issue 3312.
        """;
        this.assertRaises(TypeError, sqlite.register_adapter, {}, nil);

    }
    function CheckSetIsolationLevel(){
        """
        See issue 3312.
        """;
        con = sqlite.connect(":memory:");
        this.assertRaises(UnicodeEncodeError, setattr, con,
                          "isolation_level", u"\xe9");

    }
    function CheckCursorConstructorCallCheck(){
        """
        Verifies that cursor methods check whether base class __init__ was
        called.
        """;
        class Cursor(sqlite.Cursor){
            function __init__( con){
                pass;

        }
        } con = sqlite.connect(":memory:");
        cur = Cursor(con);
        try{
            cur.execute("select 4+5").fetchall();
            this.fail("should have raised ProgrammingError");
        } except sqlite.ProgrammingError{
            pass;
        } except Exception{
            this.fail("should have raised ProgrammingError");
        } with this.assertRaisesRegexp(sqlite.ProgrammingError,
                                     r'^Base Cursor\.__init__ not called\.$'){
            cur.close();

    }
    } function CheckConnectionConstructorCallCheck(){
        """
        Verifies that connection methods check whether base class __init__ was
        called.
        """;
        class Connection(sqlite.Connection){
            function __init__( name){
                pass;

        }
        } con = Connection(":memory:");
        try{
            cur = con.cursor();
            this.fail("should have raised ProgrammingError");
        } except sqlite.ProgrammingError{
            pass;
        } except Exception{
            this.fail("should have raised ProgrammingError");

    }
    } function CheckCursorRegistration(){
        """
        Verifies that subclassed cursor classes are correctly registered with
        the connection object, too.  (fetch-across-rollback problem)
        """;
        class Connection(sqlite.Connection){
            function cursor(){
                return Cursor(this);

        }
        } class Cursor(sqlite.Cursor){
            function __init__( con){
                sqlite.Cursor.__init__(this, con);

        }
        } con = Connection(":memory:");
        cur = con.cursor();
        cur.execute("create table foo(x)");
        cur.executemany("insert into foo(x) values (?)", [(3,), (4,), (5,)]);
        cur.execute("select x from foo");
        con.rollback();
        try{
            cur.fetchall();
            this.fail("should have raised InterfaceError");
        } except sqlite.InterfaceError{
            pass;
        } except Exception{
            this.fail("should have raised InterfaceError");

    }
    } function CheckAutoCommit(){
        """
        Verifies that creating a connection in autocommit mode works.
        2.5.3 introduced a regression so that these could no longer
        be created.
        """;
        con = sqlite.connect(":memory:", isolation_level=nil);

    }
    function CheckPragmaAutocommit(){
        """
        Verifies that running a PRAGMA statement that does an autocommit does
        work. This did not work in 2.5.3/2.5.4.
        """;
        cur = this.con.cursor();
        cur.execute("create table foo(bar)");
        cur.execute("insert into foo(bar) values (5)");

        cur.execute("pragma page_size");
        row = cur.fetchone();

    }
    function CheckConnectionCall(){
        """
        Call a connection with a non-string SQL request: check error handling
        of the statement constructor.
        """;
        this.assertRaises(sqlite.Warning, this.con, 1);

    }
    function CheckRecursiveCursorUse(){
        """
        http://bugs.python.org/issue10811

        Recursively using a cursor, such as when reusing it from a generator led to segfaults.
        Now we catch recursive cursor usage and raise a ProgrammingError.
        """;
        con = sqlite.connect(":memory:");

        cur = con.cursor();
        cur.execute("create table a (bar)");
        cur.execute("create table b (baz)");

        function foo(){
            cur.execute("insert into a (bar) values (?)", (1,));
            yield 1;

        }
        with this.assertRaises(sqlite.ProgrammingError){
            cur.executemany("insert into b (baz) values (?)",
                            ((i,) for i in foo()));

    }
    } function CheckConvertTimestampMicrosecondPadding(){
        """
        http://bugs.python.org/issue14720

        The microsecond parsing of convert_timestamp() should pad with zeros,
        since the microsecond string "456" actually represents "456000".
        """;

        con = sqlite.connect(":memory:", detect_types=sqlite.PARSE_DECLTYPES);
        cur = con.cursor();
        cur.execute("CREATE TABLE t (x TIMESTAMP)");

        # Microseconds should be 456000
        cur.execute("INSERT INTO t (x) VALUES ('2012-04-04 15:06:00.456')");

        # Microseconds should be truncated to 123456
        cur.execute("INSERT INTO t (x) VALUES ('2012-04-04 15:06:00.123456789')");

        cur.execute("SELECT * FROM t");
        values = [x[0] for x in cur.fetchall()];

        this.assertEqual(values, [
            datetime.datetime(2012, 4, 4, 15, 6, 0, 456000),
            datetime.datetime(2012, 4, 4, 15, 6, 0, 123456),
        ]);

    }
    function CheckInvalidIsolationLevelType(){
        # isolation level is a string, not an integer
        this.assertRaises(TypeError,
                          sqlite.connect, ":memory:", isolation_level=123);


    }
    function CheckNullCharacter(){
        # Issue #21147
        con = sqlite.connect(":memory:");
        this.assertRaises(ValueError, con, "\0select 1");
        this.assertRaises(ValueError, con, "select 1\0");
        cur = con.cursor();
        this.assertRaises(ValueError, cur.execute, " \0select 2");
        this.assertRaises(ValueError, cur.execute, "select 2\0");

    }
    function CheckCommitCursorReset(){
        """
        Connection.commit() did reset cursors, which made sqlite3
        to return rows multiple times when fetched from cursors
        after commit. See issues 10513 and 23129 for details.
        """;
        con = sqlite.connect(":memory:");
        con.executescript("""
        create table t(c);
        create table t2(c);
        insert into t values(0);
        insert into t values(1);
        insert into t values(2);
        """);

        this.assertEqual(con.isolation_level, "");

        counter = 0;
        for i, row in enumerate(con.execute("select c from t")){
            con.execute("insert into t2(c) values (?)", (i,));
            con.commit();
            if counter == 0{
                this.assertEqual(row[0], 0);
            } elif counter == 1{
                this.assertEqual(row[0], 1);
            } elif counter == 2{
                this.assertEqual(row[0], 2);
            } counter += 1;
        } this.assertEqual(counter, 3, "should have returned exactly three rows");

    }
    function CheckBpo31770(){
        """
        The interpreter shouldn't crash in case Cursor.__init__() is called
        more than once.
        """;
        function callback(*args){
            pass;
        } con = sqlite.connect(":memory:");
        cur = sqlite.Cursor(con);
        ref = weakref.ref(cur, callback);
        cur.__init__(con);
        del cur;
        # The interpreter shouldn't crash when ref is collected.
        del ref;
        support.gc_collect();

    }
    function CheckDelIsolation_levelSegfault(){
        with this.assertRaises(AttributeError){
            del this.con.isolation_level;


}
} } class UnhashableFunc{
    function __hash__(){
        raise TypeError('unhashable type');

    }
    function __init__( return_value=nil){
        this.calls = 0;
        this.return_value = return_value;

    }
    function __call__( *args, **kwargs){
        this.calls += 1;
        return this.return_value;


}
} class UnhashableCallbacksTestCase(unittest.TestCase){
    """
    https://bugs.python.org/issue34052

    Registering unhashable callbacks raises TypeError, callbacks are not
    registered in SQLite after such registration attempt.
    """;
    function setUp(){
        this.con = sqlite.connect(':memory:');

    }
    function tearDown(){
        this.con.close();

    }
    function test_progress_handler(){
        f = UnhashableFunc(return_value=0);
        with this.assertRaisesRegexp(TypeError, 'unhashable type'){
            this.con.set_progress_handler(f, 1);
        } this.con.execute('SELECT 1');
        this.assertFalse(f.calls);

    }
    function test_func(){
        func_name = 'func_name';
        f = UnhashableFunc();
        with this.assertRaisesRegexp(TypeError, 'unhashable type'){
            this.con.create_function(func_name, 0, f);
        } msg = 'no such function: %s' % func_name;
        with this.assertRaisesRegexp(sqlite.OperationalError, msg){
            this.con.execute('SELECT %s()' % func_name);
        } this.assertFalse(f.calls);

    }
    function test_authorizer(){
        f = UnhashableFunc(return_value=sqlite.SQLITE_DENY);
        with this.assertRaisesRegexp(TypeError, 'unhashable type'){
            this.con.set_authorizer(f);
        } this.con.execute('SELECT 1');
        this.assertFalse(f.calls);

    }
    function test_aggr(){
        class UnhashableType(type){
            __hash__ = nil;
        } aggr_name = 'aggr_name';
        with this.assertRaisesRegexp(TypeError, 'unhashable type'){
            this.con.create_aggregate(aggr_name, 0, UnhashableType('Aggr', (), {}));
        } msg = 'no such function: %s' % aggr_name;
        with this.assertRaisesRegexp(sqlite.OperationalError, msg){
            this.con.execute('SELECT %s()' % aggr_name);


}
} } function suite(){
    regression_suite = unittest.makeSuite(RegressionTests, "Check");
    return unittest.TestSuite((
        regression_suite,
        unittest.makeSuite(UnhashableCallbacksTestCase),
    ));

}
function test(){
    runner = unittest.TextTestRunner();
    runner.run(suite());

}
if __name__ == "__main__"{
    test();

}