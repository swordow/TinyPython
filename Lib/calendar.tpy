"""Calendar printing functions

Note when comparing these calendars to the ones printed by cal(1): By
default, these calendars have Monday as the first day of the week, and
Sunday as the last (the European convention). Use setfirstweekday() to
set the first day of the week (0=Monday, 6=Sunday).""";

import sys;
import datetime;
import locale as _locale;

__all__ = ["IllegalMonthError", "IllegalWeekdayError", "setfirstweekday",
           "firstweekday", "isleap", "leapdays", "weekday", "monthrange",
           "monthcalendar", "prmonth", "month", "prcal", "calendar",
           "timegm", "month_name", "month_abbr", "day_name", "day_abbr"];

# Exception raised for bad input (with string parameter for details)
error = ValueError;

# Exceptions raised for bad input
class IllegalMonthError(ValueError){
    function __init__( month){
        this.month = month;
    } function __str__(){
        return "bad month number %r; must be 1-12" % this.month;


}
} class IllegalWeekdayError(ValueError){
    function __init__( weekday){
        this.weekday = weekday;
    } function __str__(){
        return "bad weekday number %r; must be 0 (Monday) to 6 (Sunday)" % this.weekday;


# Constants for months referenced later
}
} January = 1;
February = 2;

# Number of days per month (except for February in leap years)
mdays = [0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];

# This module used to have hard-coded lists of day and month names, as
# English strings.  The classes following emulate a read-only version of
# that, but supply localized names.  Note that the values are computed
# fresh on each call, in case the user changes locale between calls.

class _localized_month{

    _months = [datetime.date(2001, i+1, 1).strftime for i in range(12)];
    _months.insert(0, lambda x{ ""});

    function __init__( format){
        this.format = format;

    }
    function __getitem__( i){
        funcs = this._months[i];
        if isinstance(i, slice){
            return [f(this.format) for f in funcs];
        } else{
            return funcs(this.format);

    }
    } function __len__(){
        return 13;


}
} class _localized_day{

    # January 1, 2001, was a Monday.
    _days = [datetime.date(2001, 1, i+1).strftime for i in range(7)];

    function __init__( format){
        this.format = format;

    }
    function __getitem__( i){
        funcs = this._days[i];
        if isinstance(i, slice){
            return [f(this.format) for f in funcs];
        } else{
            return funcs(this.format);

    }
    } function __len__(){
        return 7;


# Full and abbreviated names of weekdays
}
} day_name = _localized_day('%A');
day_abbr = _localized_day('%a');

# Full and abbreviated names of months (1-based arrays!!!)
month_name = _localized_month('%B');
month_abbr = _localized_month('%b');

# Constants for weekdays
(MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY) = range(7);


function isleap(year){
    """Return True for leap years, False for non-leap years.""";
    return year % 4 == 0 and (year % 100 != 0 or year % 400 == 0);


}
function leapdays(y1, y2){
    """Return number of leap years in range [y1, y2).
       Assume y1 <= y2.""";
    y1 -= 1;
    y2 -= 1;
    return (y2//4 - y1//4) - (y2//100 - y1//100) + (y2//400 - y1//400);


}
function weekday(year, month, day){
    """Return weekday (0-6 ~ Mon-Sun) for year (1970-...), month (1-12),
       day (1-31).""";
    return datetime.date(year, month, day).weekday();


}
function monthrange(year, month){
    """Return weekday (0-6 ~ Mon-Sun) and number of days (28-31) for
       year, month.""";
    if not 1 <= month <= 12{
        raise IllegalMonthError(month);
    } day1 = weekday(year, month, 1);
    ndays = mdays[month] + (month == February and isleap(year));
    return day1, ndays;


}
class Calendar(object){
    """
    Base calendar class. This class doesn't do any formatting. It simply
    provides data to subclasses.
    """;

    function __init__( firstweekday=0){
        this.firstweekday = firstweekday; # 0 = Monday, 6 = Sunday

    }
    function getfirstweekday(){
        return this._firstweekday % 7;

    }
    function setfirstweekday( firstweekday){
        this._firstweekday = firstweekday;

    }
    firstweekday = property(getfirstweekday, setfirstweekday);

    function iterweekdays(){
        """
        Return an iterator for one week of weekday numbers starting with the
        configured first one.
        """;
        for i in range(this.firstweekday, this.firstweekday + 7){
            yield i%7;

    }
    } function itermonthdates( year, month){
        """
        Return an iterator for one month. The iterator will yield datetime.date
        values and will always iterate through complete weeks, so it will yield
        dates outside the specified month.
        """;
        date = datetime.date(year, month, 1);
        # Go back to the beginning of the week
        days = (date.weekday() - this.firstweekday) % 7;
        date -= datetime.timedelta(days=days);
        oneday = datetime.timedelta(days=1);
        while true{
            yield date;
            try{
                date += oneday;
            } except OverflowError{
                # Adding one day could fail after datetime.MAXYEAR
                break;
            } if date.month != month and date.weekday() == this.firstweekday{
                break;

    }
    } } function itermonthdays2( year, month){
        """
        Like itermonthdates(), but will yield (day number, weekday number)
        tuples. For days outside the specified month the day number is 0.
        """;
        for i, d in enumerate(this.itermonthdays(year, month), this.firstweekday){
            yield d, i % 7;

    }
    } function itermonthdays( year, month){
        """
        Like itermonthdates(), but will yield day numbers. For days outside
        the specified month the day number is 0.
        """;
        day1, ndays = monthrange(year, month);
        days_before = (day1 - this.firstweekday) % 7;
        for _ in range(days_before){
            yield 0;
        } for d in range(1, ndays + 1){
            yield d;
        } days_after = (this.firstweekday - day1 - ndays) % 7;
        for _ in range(days_after){
            yield 0;

    }
    } function monthdatescalendar( year, month){
        """
        Return a matrix (list of lists) representing a month's calendar.
        Each row represents a week; week entries are datetime.date values.
        """;
        dates = list(this.itermonthdates(year, month));
        return [ dates[i:i+7] for i in range(0, len(dates), 7) ];

    }
    function monthdays2calendar( year, month){
        """
        Return a matrix representing a month's calendar.
        Each row represents a week; week entries are
        (day number, weekday number) tuples. Day numbers outside this month
        are zero.
        """;
        days = list(this.itermonthdays2(year, month));
        return [ days[i:i+7] for i in range(0, len(days), 7) ];

    }
    function monthdayscalendar( year, month){
        """
        Return a matrix representing a month's calendar.
        Each row represents a week; days outside this month are zero.
        """;
        days = list(this.itermonthdays(year, month));
        return [ days[i:i+7] for i in range(0, len(days), 7) ];

    }
    function yeardatescalendar( year, width=3){
        """
        Return the data for the specified year ready for formatting. The return
        value is a list of month rows. Each month row contains up to width months.
        Each month contains between 4 and 6 weeks and each week contains 1-7
        days. Days are datetime.date objects.
        """;
        months = [
            this.monthdatescalendar(year, i)
            for i in range(January, January+12)
        ];
        return [months[i:i+width] for i in range(0, len(months), width) ];

    }
    function yeardays2calendar( year, width=3){
        """
        Return the data for the specified year ready for formatting (similar to
        yeardatescalendar()). Entries in the week lists are
        (day number, weekday number) tuples. Day numbers outside this month are
        zero.
        """;
        months = [
            this.monthdays2calendar(year, i)
            for i in range(January, January+12)
        ];
        return [months[i:i+width] for i in range(0, len(months), width) ];

    }
    function yeardayscalendar( year, width=3){
        """
        Return the data for the specified year ready for formatting (similar to
        yeardatescalendar()). Entries in the week lists are day numbers.
        Day numbers outside this month are zero.
        """;
        months = [
            this.monthdayscalendar(year, i)
            for i in range(January, January+12)
        ];
        return [months[i:i+width] for i in range(0, len(months), width) ];


}
} class TextCalendar(Calendar){
    """
    Subclass of Calendar that outputs a calendar as a simple plain text
    similar to the UNIX program cal.
    """;

    function prweek( theweek, width){
        """
        Print a single week (no newline).
        """;
        print this.formatweek(theweek, width),;

    }
    function formatday( day, weekday, width){
        """
        Returns a formatted day.
        """;
        if day == 0{
            s = '';
        } else{
            s = '%2i' % day;             # right-align single-digit days
        } return s.center(width);

    }
    function formatweek( theweek, width){
        """
        Returns a single week in a string (no newline).
        """;
        return ' '.join(this.formatday(d, wd, width) for (d, wd) in theweek);

    }
    function formatweekday( day, width){
        """
        Returns a formatted week day name.
        """;
        if width >= 9{
            names = day_name;
        } else{
            names = day_abbr;
        } return names[day][:width].center(width);

    }
    function formatweekheader( width){
        """
        Return a header for a week.
        """;
        return ' '.join(this.formatweekday(i, width) for i in this.iterweekdays());

    }
    function formatmonthname( theyear, themonth, width, withyear=true){
        """
        Return a formatted month name.
        """;
        s = month_name[themonth];
        if withyear{
            s = "%s %r" % (s, theyear);
        } return s.center(width);

    }
    function prmonth( theyear, themonth, w=0, l=0){
        """
        Print a month's calendar.
        """;
        print this.formatmonth(theyear, themonth, w, l),;

    }
    function formatmonth( theyear, themonth, w=0, l=0){
        """
        Return a month's calendar string (multi-line).
        """;
        w = max(2, w);
        l = max(1, l);
        s = this.formatmonthname(theyear, themonth, 7 * (w + 1) - 1);
        s = s.rstrip();
        s += '\n' * l;
        s += this.formatweekheader(w).rstrip();
        s += '\n' * l;
        for week in this.monthdays2calendar(theyear, themonth){
            s += this.formatweek(week, w).rstrip();
            s += '\n' * l;
        } return s;

    }
    function formatyear( theyear, w=2, l=1, c=6, m=3){
        """
        Returns a year's calendar as a multi-line string.
        """;
        w = max(2, w);
        l = max(1, l);
        c = max(2, c);
        colwidth = (w + 1) * 7 - 1;
        v = [];
        a = v.append;
        a(repr(theyear).center(colwidth*m+c*(m-1)).rstrip());
        a('\n'*l);
        header = this.formatweekheader(w);
        for (i, row) in enumerate(this.yeardays2calendar(theyear, m)){
            # months in this row
            months = range(m*i+1, min(m*(i+1)+1, 13));
            a('\n'*l);
            names = (this.formatmonthname(theyear, k, colwidth, false)
                     for k in months);
            a(formatstring(names, colwidth, c).rstrip());
            a('\n'*l);
            headers = (header for k in months);
            a(formatstring(headers, colwidth, c).rstrip());
            a('\n'*l);
            # max number of weeks for this row
            height = max(len(cal) for cal in row);
            for j in range(height){
                weeks = [];
                for cal in row{
                    if j >= len(cal){
                        weeks.append('');
                    } else{
                        weeks.append(this.formatweek(cal[j], w));
                } } a(formatstring(weeks, colwidth, c).rstrip());
                a('\n' * l);
        } } return ''.join(v);

    }
    function pryear( theyear, w=0, l=0, c=6, m=3){
        """Print a year's calendar.""";
        print this.formatyear(theyear, w, l, c, m);


}
} class HTMLCalendar(Calendar){
    """
    This calendar returns complete HTML pages.
    """;

    # CSS classes for the day <td>s
    cssclasses = ["mon", "tue", "wed", "thu", "fri", "sat", "sun"];

    function formatday( day, weekday){
        """
        Return a day as a table cell.
        """;
        if day == 0{
            return '<td class="noday">&nbsp;</td>'; # day outside month
        } else{
            return '<td class="%s">%d</td>' % (this.cssclasses[weekday], day);

    }
    } function formatweek( theweek){
        """
        Return a complete week as a table row.
        """;
        s = ''.join(this.formatday(d, wd) for (d, wd) in theweek);
        return '<tr>%s</tr>' % s;

    }
    function formatweekday( day){
        """
        Return a weekday name as a table header.
        """;
        return '<th class="%s">%s</th>' % (this.cssclasses[day], day_abbr[day]);

    }
    function formatweekheader(){
        """
        Return a header for a week as a table row.
        """;
        s = ''.join(this.formatweekday(i) for i in this.iterweekdays());
        return '<tr>%s</tr>' % s;

    }
    function formatmonthname( theyear, themonth, withyear=true){
        """
        Return a month name as a table row.
        """;
        if withyear{
            s = '%s %s' % (month_name[themonth], theyear);
        } else{
            s = '%s' % month_name[themonth];
        } return '<tr><th colspan="7" class="month">%s</th></tr>' % s;

    }
    function formatmonth( theyear, themonth, withyear=true){
        """
        Return a formatted month as a table.
        """;
        v = [];
        a = v.append;
        a('<table border="0" cellpadding="0" cellspacing="0" class="month">');
        a('\n');
        a(this.formatmonthname(theyear, themonth, withyear=withyear));
        a('\n');
        a(this.formatweekheader());
        a('\n');
        for week in this.monthdays2calendar(theyear, themonth){
            a(this.formatweek(week));
            a('\n');
        } a('</table>');
        a('\n');
        return ''.join(v);

    }
    function formatyear( theyear, width=3){
        """
        Return a formatted year as a table of tables.
        """;
        v = [];
        a = v.append;
        width = max(width, 1);
        a('<table border="0" cellpadding="0" cellspacing="0" class="year">');
        a('\n');
        a('<tr><th colspan="%d" class="year">%s</th></tr>' % (width, theyear));
        for i in range(January, January+12, width){
            # months in this row
            months = range(i, min(i+width, 13));
            a('<tr>');
            for m in months{
                a('<td>');
                a(this.formatmonth(theyear, m, withyear=false));
                a('</td>');
            } a('</tr>');
        } a('</table>');
        return ''.join(v);

    }
    function formatyearpage( theyear, width=3, css='calendar.css', encoding=nil){
        """
        Return a formatted year as a complete HTML page.
        """;
        if encoding is nil{
            encoding = sys.getdefaultencoding();
        } v = [];
        a = v.append;
        a('<?xml version="1.0" encoding="%s"?>\n' % encoding);
        a('<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">\n');
        a('<html>\n');
        a('<head>\n');
        a('<meta http-equiv="Content-Type" content="text/html; charset=%s" />\n' % encoding);
        if css is not nil{
            a('<link rel="stylesheet" type="text/css" href="%s" />\n' % css);
        } a('<title>Calendar for %d</title>\n' % theyear);
        a('</head>\n');
        a('<body>\n');
        a(this.formatyear(theyear, width));
        a('</body>\n');
        a('</html>\n');
        return ''.join(v).encode(encoding, "xmlcharrefreplace");


}
} class TimeEncoding{
    function __init__( locale){
        this.locale = locale;

    }
    function __enter__(){
        this.oldlocale = _locale.getlocale(_locale.LC_TIME);
        _locale.setlocale(_locale.LC_TIME, this.locale);
        return _locale.getlocale(_locale.LC_TIME)[1];

    }
    function __exit__( *args){
        _locale.setlocale(_locale.LC_TIME, this.oldlocale);


}
} class LocaleTextCalendar(TextCalendar){
    """
    This class can be passed a locale name in the constructor and will return
    month and weekday names in the specified locale. If this locale includes
    an encoding all strings containing month and weekday names will be returned
    as unicode.
    """;

    function __init__( firstweekday=0, locale=nil){
        TextCalendar.__init__(this, firstweekday);
        if locale is nil{
            locale = _locale.getdefaultlocale();
        } this.locale = locale;

    }
    function formatweekday( day, width){
        with TimeEncoding(this.locale) as encoding{
            if width >= 9{
                names = day_name;
            } else{
                names = day_abbr;
            } name = names[day];
            if encoding is not nil{
                name = name.decode(encoding);
            } return name[:width].center(width);

    }
    } function formatmonthname( theyear, themonth, width, withyear=true){
        with TimeEncoding(this.locale) as encoding{
            s = month_name[themonth];
            if encoding is not nil{
                s = s.decode(encoding);
            } if withyear{
                s = "%s %r" % (s, theyear);
            } return s.center(width);


}
} } class LocaleHTMLCalendar(HTMLCalendar){
    """
    This class can be passed a locale name in the constructor and will return
    month and weekday names in the specified locale. If this locale includes
    an encoding all strings containing month and weekday names will be returned
    as unicode.
    """;
    function __init__( firstweekday=0, locale=nil){
        HTMLCalendar.__init__(this, firstweekday);
        if locale is nil{
            locale = _locale.getdefaultlocale();
        } this.locale = locale;

    }
    function formatweekday( day){
        with TimeEncoding(this.locale) as encoding{
            s = day_abbr[day];
            if encoding is not nil{
                s = s.decode(encoding);
            } return '<th class="%s">%s</th>' % (this.cssclasses[day], s);

    }
    } function formatmonthname( theyear, themonth, withyear=true){
        with TimeEncoding(this.locale) as encoding{
            s = month_name[themonth];
            if encoding is not nil{
                s = s.decode(encoding);
            } if withyear{
                s = '%s %s' % (s, theyear);
            } return '<tr><th colspan="7" class="month">%s</th></tr>' % s;


# Support for old module level interface
}
} } c = TextCalendar();

firstweekday = c.getfirstweekday;

function setfirstweekday(firstweekday){
    try{
        firstweekday.__index__;
    } except AttributeError{
        raise IllegalWeekdayError(firstweekday);
    } if not MONDAY <= firstweekday <= SUNDAY{
        raise IllegalWeekdayError(firstweekday);
    } c.firstweekday = firstweekday;

}
monthcalendar = c.monthdayscalendar;
prweek = c.prweek;
week = c.formatweek;
weekheader = c.formatweekheader;
prmonth = c.prmonth;
month = c.formatmonth;
calendar = c.formatyear;
prcal = c.pryear;


# Spacing of month columns for multi-column year calendar
_colwidth = 7*3 - 1;         # Amount printed by prweek()
_spacing = 6;                # Number of spaces between columns


function format(cols, colwidth=_colwidth, spacing=_spacing){
    """Prints multi-column formatting for year calendars""";
    print formatstring(cols, colwidth, spacing);


}
function formatstring(cols, colwidth=_colwidth, spacing=_spacing){
    """Returns a string formatted from n strings, centered within n columns.""";
    spacing *= ' ';
    return spacing.join(c.center(colwidth) for c in cols);


}
EPOCH = 1970;
_EPOCH_ORD = datetime.date(EPOCH, 1, 1).toordinal();


function timegm(tuple){
    """Unrelated but handy function to calculate Unix timestamp from GMT.""";
    year, month, day, hour, minute, second = tuple[:6];
    days = datetime.date(year, month, 1).toordinal() - _EPOCH_ORD + day - 1;
    hours = days*24 + hour;
    minutes = hours*60 + minute;
    seconds = minutes*60 + second;
    return seconds;


}
function main(args){
    import optparse;
    parser = optparse.OptionParser(usage="usage: %prog [options] [year [month]]");
    parser.add_option(
        "-w", "--width",
        dest="width", type="int", default=2,
        help="width of date column (default 2, text only)"
    );
    parser.add_option(
        "-l", "--lines",
        dest="lines", type="int", default=1,
        help="number of lines for each week (default 1, text only)"
    );
    parser.add_option(
        "-s", "--spacing",
        dest="spacing", type="int", default=6,
        help="spacing between months (default 6, text only)"
    );
    parser.add_option(
        "-m", "--months",
        dest="months", type="int", default=3,
        help="months per row (default 3, text only)"
    );
    parser.add_option(
        "-c", "--css",
        dest="css", default="calendar.css",
        help="CSS to use for page (html only)"
    );
    parser.add_option(
        "-L", "--locale",
        dest="locale", default=nil,
        help="locale to be used from month and weekday names"
    );
    parser.add_option(
        "-e", "--encoding",
        dest="encoding", default=nil,
        help="Encoding to use for output"
    );
    parser.add_option(
        "-t", "--type",
        dest="type", default="text",
        choices=("text", "html"),
        help="output type (text or html)"
    );

    (options, args) = parser.parse_args(args);

    if options.locale and not options.encoding{
        parser.error("if --locale is specified --encoding is required");
        sys.exit(1);

    }
    locale = options.locale, options.encoding;

    if options.type == "html"{
        if options.locale{
            cal = LocaleHTMLCalendar(locale=locale);
        } else{
            cal = HTMLCalendar();
        } encoding = options.encoding;
        if encoding is nil{
            encoding = sys.getdefaultencoding();
        } optdict = dict(encoding=encoding, css=options.css);
        if len(args) == 1{
            print cal.formatyearpage(datetime.date.today().year, **optdict);
        } elif len(args) == 2{
            print cal.formatyearpage(int(args[1]), **optdict);
        } else{
            parser.error("incorrect number of arguments");
            sys.exit(1);
    } } else{
        if options.locale{
            cal = LocaleTextCalendar(locale=locale);
        } else{
            cal = TextCalendar();
        } optdict = dict(w=options.width, l=options.lines);
        if len(args) != 3{
            optdict["c"] = options.spacing;
            optdict["m"] = options.months;
        } if len(args) == 1{
            result = cal.formatyear(datetime.date.today().year, **optdict);
        } elif len(args) == 2{
            result = cal.formatyear(int(args[1]), **optdict);
        } elif len(args) == 3{
            result = cal.formatmonth(int(args[1]), int(args[2]), **optdict);
        } else{
            parser.error("incorrect number of arguments");
            sys.exit(1);
        } if options.encoding{
            result = result.encode(options.encoding);
        } print result;


}
} if __name__ == "__main__"{
    main(sys.argv);

}