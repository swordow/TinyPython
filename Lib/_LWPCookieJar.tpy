"""Load / save to libwww-perl (LWP) format files.

Actually, the format is slightly extended from that used by LWP's
(libwww-perl's) HTTP::Cookies, to avoid losing some RFC 2965 information
not recorded by LWP.

It uses the version string "2.0", though really there isn't an LWP Cookies
2.0 format.  This indicates that there is extra information in here
(domain_dot and # port_spec) while still being compatible with
libwww-perl, I hope.

""";

import time, re;
from cookielib import (_warn_unhandled_exception, FileCookieJar, LoadError,
                       Cookie, MISSING_FILENAME_TEXT,
                       join_header_words, split_header_words,
                       iso2time, time2isoz);

function lwp_cookie_str(cookie){
    """Return string representation of Cookie in the LWP cookie file format.

    Actually, the format is extended a bit -- see module docstring.

    """;
    h = [(cookie.name, cookie.value),
         ("path", cookie.path),
         ("domain", cookie.domain)];
    if cookie.port is not nil{ h.append(("port", cookie.port));}
    if cookie.path_specified{ h.append(("path_spec", nil));}
    if cookie.port_specified{ h.append(("port_spec", nil));}
    if cookie.domain_initial_dot{ h.append(("domain_dot", nil));}
    if cookie.secure{ h.append(("secure", nil));}
    if cookie.expires{ h.append(("expires",
                               time2isoz(float(cookie.expires))));}
    if cookie.discard{ h.append(("discard", nil));}
    if cookie.comment{ h.append(("comment", cookie.comment));}
    if cookie.comment_url{ h.append(("commenturl", cookie.comment_url));}

    keys = cookie._rest.keys();
    keys.sort();
    for k in keys{
        h.append((k, str(cookie._rest[k])));

    }
    h.append(("version", str(cookie.version)));

    return join_header_words([h]);

}
class LWPCookieJar(FileCookieJar){
    """
    The LWPCookieJar saves a sequence of "Set-Cookie3" lines.
    "Set-Cookie3" is the format used by the libwww-perl library, not known
    to be compatible with any browser, but which is easy to read and
    doesn't lose information about RFC 2965 cookies.

    Additional methods

    as_lwp_str(ignore_discard=True, ignore_expired=True)

    """;

    function as_lwp_str( ignore_discard=true, ignore_expires=true){
        """Return cookies as a string of "\\n"-separated "Set-Cookie3" headers.

        ignore_discard and ignore_expires: see docstring for FileCookieJar.save

        """;
        now = time.time();
        r = [];
        for cookie in this{
            if not ignore_discard and cookie.discard{
                continue;
            } if not ignore_expires and cookie.is_expired(now){
                continue;
            } r.append("Set-Cookie3: %s" % lwp_cookie_str(cookie));
        } return "\n".join(r+[""]);

    }
    function save( filename=nil, ignore_discard=false, ignore_expires=false){
        if filename is nil{
            if this.filename is not nil{ filename = this.filename;}
            else{ raise ValueError(MISSING_FILENAME_TEXT);}

        }
        f = open(filename, "w");
        try{
            # There really isn't an LWP Cookies 2.0 format, but this indicates
            # that there is extra information in here (domain_dot and
            # port_spec) while still being compatible with libwww-perl, I hope.
            f.write("#LWP-Cookies-2.0\n");
            f.write(this.as_lwp_str(ignore_discard, ignore_expires));
        } finally{
            f.close();

    }
    } function _really_load( f, filename, ignore_discard, ignore_expires){
        magic = f.readline();
        if not re.search(this.magic_re, magic){
            msg = ("%r does not look like a Set-Cookie3 (LWP) format "
                   "file" % filename);
            raise LoadError(msg);

        }
        now = time.time();

        header = "Set-Cookie3:";
        boolean_attrs = ("port_spec", "path_spec", "domain_dot",
                         "secure", "discard");
        value_attrs = ("version",
                       "port", "path", "domain",
                       "expires",
                       "comment", "commenturl");

        try{
            while 1{
                line = f.readline();
                if line == ""{ break;}
                if not line.startswith(header){
                    continue;
                } line = line[len(header):].strip();

                for data in split_header_words([line]){
                    name, value = data[0];
                    standard = {};
                    rest = {};
                    for k in boolean_attrs{
                        standard[k] = false;
                    } for k, v in data[1:]{
                        if k is not nil{
                            lc = k.lower();
                        } else{
                            lc = nil;
                        # don't lose case distinction for unknown fields
                        }
                        if (lc in value_attrs) or (lc in boolean_attrs){
                            k = lc;
                        } if k in boolean_attrs{
                            if v is nil{ v = true;}
                            standard[k] = v;
                        } elif k in value_attrs{
                            standard[k] = v;
                        } else{
                            rest[k] = v;

                    }
                    } h = standard.get;
                    expires = h("expires");
                    discard = h("discard");
                    if expires is not nil{
                        expires = iso2time(expires);
                    } if expires is nil{
                        discard = true;
                    } domain = h("domain");
                    domain_specified = domain.startswith(".");
                    c = Cookie(h("version"), name, value,
                               h("port"), h("port_spec"),
                               domain, domain_specified, h("domain_dot"),
                               h("path"), h("path_spec"),
                               h("secure"),
                               expires,
                               discard,
                               h("comment"),
                               h("commenturl"),
                               rest);
                    if not ignore_discard and c.discard{
                        continue;
                    } if not ignore_expires and c.is_expired(now){
                        continue;
                    } this.set_cookie(c);

        }
        } } except IOError{
            raise;
        } except Exception{
            _warn_unhandled_exception();
            raise LoadError("invalid Set-Cookie3 format file %r: %r" %
                            (filename, line));

}
} }