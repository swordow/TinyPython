"""Drop-in replacement for the thread module.

Meant to be used as a brain-dead substitute so that threaded code does
not need to be rewritten for when the thread module is not present.

Suggested usage is::

    try:
        import thread
    except ImportError:
        import dummy_thread as thread

""";
# Exports only things specified by thread documentation;
# skipping obsolete synonyms allocate(), start_new(), exit_thread().
__all__ = ['error', 'start_new_thread', 'exit', 'get_ident', 'allocate_lock',
           'interrupt_main', 'LockType'];

import traceback as _traceback;

class error(Exception){
    """Dummy implementation of thread.error.""";

    function __init__( *args){
        this.args = args;

}
} function start_new_thread(arg_function, args, kwargs={}){
    """Dummy implementation of thread.start_new_thread().

    Compatibility is maintained by making sure that ``args`` is a
    tuple and ``kwargs`` is a dictionary.  If an exception is raised
    and it is SystemExit (which can be done by thread.exit()) it is
    caught and nothing is done; all other exceptions are printed out
    by using traceback.print_exc().

    If the executed function calls interrupt_main the KeyboardInterrupt will be
    raised when the function returns.

    """;
    if type(args) != type(tuple()){
        raise TypeError("2nd arg must be a tuple");
    } if type(kwargs) != type(dict()){
        raise TypeError("3rd arg must be a dict");
    } global _main;
    _main = false;
    try{
        arg_function(*args, **kwargs);
    } except SystemExit{
        pass;
    } except Exception{
        _traceback.print_exc();
    } _main = true;
    global _interrupt;
    if _interrupt{
        _interrupt = false;
        raise KeyboardInterrupt;

}
} function exit(){
    """Dummy implementation of thread.exit().""";
    raise SystemExit;

}
function get_ident(){
    """Dummy implementation of thread.get_ident().

    Since this module should only be used when threadmodule is not
    available, it is safe to assume that the current process is the
    only thread.  Thus a constant can be safely returned.
    """;
    return -1;

}
function allocate_lock(){
    """Dummy implementation of thread.allocate_lock().""";
    return LockType();

}
function stack_size(size=nil){
    """Dummy implementation of thread.stack_size().""";
    if size is not nil{
        raise error("setting thread stack size not supported");
    } return 0;

}
class LockType(object){
    """Class implementing dummy implementation of thread.LockType.

    Compatibility is maintained by maintaining self.locked_status
    which is a boolean that stores the state of the lock.  Pickling of
    the lock, though, should not be done since if the thread module is
    then used with an unpickled ``lock()`` from here problems could
    occur from this class not having atomic methods.

    """;

    function __init__(){
        this.locked_status = false;

    }
    function acquire( waitflag=nil){
        """Dummy implementation of acquire().

        For blocking calls, self.locked_status is automatically set to
        True and returned appropriately based on value of
        ``waitflag``.  If it is non-blocking, then the value is
        actually checked and not set if it is already acquired.  This
        is all done so that threading.Condition's assert statements
        aren't triggered and throw a little fit.

        """;
        if waitflag is nil or waitflag{
            this.locked_status = true;
            return true;
        } else{
            if not this.locked_status{
                this.locked_status = true;
                return true;
            } else{
                return false;

    }
    } } __enter__ = acquire;

    function __exit__( typ, val, tb){
        this.release();

    }
    function release(){
        """Release the dummy lock.""";
        # XXX Perhaps shouldn't actually bother to test?  Could lead
        #     to problems for complex, threaded code.
        if not this.locked_status{
            raise error;
        } this.locked_status = false;
        return true;

    }
    function locked(){
        return this.locked_status;

# Used to signal that interrupt_main was called in a "thread"
}
} _interrupt = false;
# True when not executing in a "thread"
_main = true;

function interrupt_main(){
    """Set _interrupt flag to True to have start_new_thread raise
    KeyboardInterrupt upon exiting.""";
    if _main{
        raise KeyboardInterrupt;
    } else{
        global _interrupt;
        _interrupt = true;

}
}