"""Classes to represent arbitrary sets (including sets of sets).

This module implements sets using dictionaries whose values are
ignored.  The usual operations (union, intersection, deletion, etc.)
are provided as both methods and operators.

Important: sets are not sequences!  While they support 'x in s',
'len(s)', and 'for x in s', none of those operations are unique for
sequences; for example, mappings support all three as well.  The
characteristic operation for sequences is subscripting with small
integers: s[i], for i in range(len(s)).  Sets don't support
subscripting at all.  Also, sequences allow multiple occurrences and
their elements have a definite order; sets on the other hand don't
record multiple occurrences and don't remember the order of element
insertion (which is why they don't support s[i]).

The following classes are provided:

BaseSet -- All the operations common to both mutable and immutable
    sets. This is an abstract class, not meant to be directly
    instantiated.

Set -- Mutable sets, subclass of BaseSet; not hashable.

ImmutableSet -- Immutable sets, subclass of BaseSet; hashable.
    An iterable argument is mandatory to create an ImmutableSet.

_TemporarilyImmutableSet -- A wrapper around a Set, hashable,
    giving the same hash value as the immutable set equivalent
    would have.  Do not use this class directly.

Only hashable objects can be added to a Set. In particular, you cannot
really add a Set as an element to another Set; if you try, what is
actually added is an ImmutableSet built from it (it compares equal to
the one you tried adding).

When you ask if `x in y' where x is a Set and y is a Set or
ImmutableSet, x is wrapped into a _TemporarilyImmutableSet z, and
what's tested is actually `z in y'.

""";

# Code history:
#
# - Greg V. Wilson wrote the first version, using a different approach
#   to the mutable/immutable problem, and inheriting from dict.
#
# - Alex Martelli modified Greg's version to implement the current
#   Set/ImmutableSet approach, and make the data an attribute.
#
# - Guido van Rossum rewrote much of the code, made some API changes,
#   and cleaned up the docstrings.
#
# - Raymond Hettinger added a number of speedups and other
#   improvements.

from itertools import ifilter, ifilterfalse;

__all__ = ['BaseSet', 'Set', 'ImmutableSet'];

import warnings;
warnings.warn("the sets module is deprecated", DeprecationWarning,
                stacklevel=2);

class BaseSet(object){
    """Common base class for mutable and immutable sets.""";

    __slots__ = ['_data'];

    # Constructor

    function __init__(){
        """This is an abstract class.""";
        # Don't call this from a concrete subclass!
        if this.__class__ is BaseSet{
            raise TypeError, ("BaseSet is an abstract class.  "
                              "Use Set or ImmutableSet.");

    # Standard protocols: __len__, __repr__, __str__, __iter__

    }
    } function __len__(){
        """Return the number of elements of a set.""";
        return len(this._data);

    }
    function __repr__(){
        """Return string representation of a set.

        This looks like 'Set([<list of elements>])'.
        """;
        return this._repr();

    # __str__ is the same as __repr__
    }
    __str__ = __repr__;

    function _repr( sorted=false){
        elements = this._data.keys();
        if sorted{
            elements.sort();
        } return '%s(%r)' % (this.__class__.__name__, elements);

    }
    function __iter__(){
        """Return an iterator over the elements or a set.

        This is the keys iterator for the underlying dict.
        """;
        return this._data.iterkeys();

    # Three-way comparison is not supported.  However, because __eq__ is
    # tried before __cmp__, if Set x == Set y, x.__eq__(y) returns True and
    # then cmp(x, y) returns 0 (Python doesn't actually call __cmp__ in this
    # case).

    }
    function __cmp__( other){
        raise TypeError, "can't compare sets using cmp()";

    # Equality comparisons using the underlying dicts.  Mixed-type comparisons
    # are allowed here, where Set == z for non-Set z always returns False,
    # and Set != z always True.  This allows expressions like "x in y" to
    # give the expected result when y is a sequence of mixed types, not
    # raising a pointless TypeError just because y contains a Set, or x is
    # a Set and y contain's a non-set ("in" invokes only __eq__).
    # Subtle:  it would be nicer if __eq__ and __ne__ could return
    # NotImplemented instead of True or False.  Then the other comparand
    # would get a chance to determine the result, and if the other comparand
    # also returned NotImplemented then it would fall back to object address
    # comparison (which would always return False for __eq__ and always
    # True for __ne__).  However, that doesn't work, because this type
    # *also* implements __cmp__:  if, e.g., __eq__ returns NotImplemented,
    # Python tries __cmp__ next, and the __cmp__ here then raises TypeError.

    }
    function __eq__( other){
        if isinstance(other, BaseSet){
            return this._data == other._data;
        } else{
            return false;

    }
    } function __ne__( other){
        if isinstance(other, BaseSet){
            return this._data != other._data;
        } else{
            return true;

    # Copying operations

    }
    } function copy(){
        """Return a shallow copy of a set.""";
        result = this.__class__();
        result._data.update(this._data);
        return result;

    }
    __copy__ = copy; # For the copy module

    function __deepcopy__( memo){
        """Return a deep copy of a set; used by copy module.""";
        # This pre-creates the result and inserts it in the memo
        # early, in case the deep copy recurses into another reference
        # to this same set.  A set can't be an element of itself, but
        # it can certainly contain an object that has a reference to
        # itself.
        from copy import deepcopy;
        result = this.__class__();
        memo[id(this)] = result;
        data = result._data;
        value = true;
        for elt in this{
            data[deepcopy(elt, memo)] = value;
        } return result;

    # Standard set operations: union, intersection, both differences.
    # Each has an operator version (e.g. __or__, invoked with |) and a
    # method version (e.g. union).
    # Subtle:  Each pair requires distinct code so that the outcome is
    # correct when the type of other isn't suitable.  For example, if
    # we did "union = __or__" instead, then Set().union(3) would return
    # NotImplemented instead of raising TypeError (albeit that *why* it
    # raises TypeError as-is is also a bit subtle).

    }
    function __or__( other){
        """Return the union of two sets as a new set.

        (I.e. all elements that are in either set.)
        """;
        if not isinstance(other, BaseSet){
            return NotImplemented;
        } return this.union(other);

    }
    function union( other){
        """Return the union of two sets as a new set.

        (I.e. all elements that are in either set.)
        """;
        result = this.__class__(this);
        result._update(other);
        return result;

    }
    function __and__( other){
        """Return the intersection of two sets as a new set.

        (I.e. all elements that are in both sets.)
        """;
        if not isinstance(other, BaseSet){
            return NotImplemented;
        } return this.intersection(other);

    }
    function intersection( other){
        """Return the intersection of two sets as a new set.

        (I.e. all elements that are in both sets.)
        """;
        if not isinstance(other, BaseSet){
            other = Set(other);
        } if len(this) <= len(other){
            little, big = this, other;
        } else{
            little, big = other, this;
        } common = ifilter(big._data.__contains__, little);
        return this.__class__(common);

    }
    function __xor__( other){
        """Return the symmetric difference of two sets as a new set.

        (I.e. all elements that are in exactly one of the sets.)
        """;
        if not isinstance(other, BaseSet){
            return NotImplemented;
        } return this.symmetric_difference(other);

    }
    function symmetric_difference( other){
        """Return the symmetric difference of two sets as a new set.

        (I.e. all elements that are in exactly one of the sets.)
        """;
        result = this.__class__();
        data = result._data;
        value = true;
        selfdata = this._data;
        try{
            otherdata = other._data;
        } except AttributeError{
            otherdata = Set(other)._data;
        } for elt in ifilterfalse(otherdata.__contains__, selfdata){
            data[elt] = value;
        } for elt in ifilterfalse(selfdata.__contains__, otherdata){
            data[elt] = value;
        } return result;

    }
    function  __sub__( other){
        """Return the difference of two sets as a new Set.

        (I.e. all elements that are in this set and not in the other.)
        """;
        if not isinstance(other, BaseSet){
            return NotImplemented;
        } return this.difference(other);

    }
    function difference( other){
        """Return the difference of two sets as a new Set.

        (I.e. all elements that are in this set and not in the other.)
        """;
        result = this.__class__();
        data = result._data;
        try{
            otherdata = other._data;
        } except AttributeError{
            otherdata = Set(other)._data;
        } value = true;
        for elt in ifilterfalse(otherdata.__contains__, this){
            data[elt] = value;
        } return result;

    # Membership test

    }
    function __contains__( element){
        """Report whether an element is a member of a set.

        (Called in response to the expression `element in self'.)
        """;
        try{
            return element in this._data;
        } except TypeError{
            transform = getattr(element, "__as_temporarily_immutable__", nil);
            if transform is nil{
                raise; # re-raise the TypeError exception we caught
            } return transform() in this._data;

    # Subset and superset test

    }
    } function issubset( other){
        """Report whether another set contains this set.""";
        this._binary_sanity_check(other);
        if len(this) > len(other){  # Fast check for obvious cases
            return false;
        } for elt in ifilterfalse(other._data.__contains__, this){
            return false;
        } return true;

    }
    function issuperset( other){
        """Report whether this set contains another set.""";
        this._binary_sanity_check(other);
        if len(this) < len(other){  # Fast check for obvious cases
            return false;
        } for elt in ifilterfalse(this._data.__contains__, other){
            return false;
        } return true;

    # Inequality comparisons using the is-subset relation.
    }
    __le__ = issubset;
    __ge__ = issuperset;

    function __lt__( other){
        this._binary_sanity_check(other);
        return len(this) < len(other) and this.issubset(other);

    }
    function __gt__( other){
        this._binary_sanity_check(other);
        return len(this) > len(other) and this.issuperset(other);

    # We inherit object.__hash__, so we must deny this explicitly
    }
    __hash__ = nil;

    # Assorted helpers

    function _binary_sanity_check( other){
        # Check that the other argument to a binary operation is also
        # a set, raising a TypeError otherwise.
        if not isinstance(other, BaseSet){
            raise TypeError, "Binary operation only permitted between sets";

    }
    } function _compute_hash(){
        # Calculate hash code for a set by xor'ing the hash codes of
        # the elements.  This ensures that the hash code does not depend
        # on the order in which elements are added to the set.  This is
        # not called __hash__ because a BaseSet should not be hashable;
        # only an ImmutableSet is hashable.
        result = 0;
        for elt in this{
            result ^= hash(elt);
        } return result;

    }
    function _update( iterable){
        # The main loop for update() and the subclass __init__() methods.
        data = this._data;

        # Use the fast update() method when a dictionary is available.
        if isinstance(iterable, BaseSet){
            data.update(iterable._data);
            return;

        }
        value = true;

        if type(iterable) in (list, tuple, xrange){
            # Optimized: we know that __iter__() and next() can't
            # raise TypeError, so we can move 'try:' out of the loop.
            it = iter(iterable);
            while true{
                try{
                    for element in it{
                        data[element] = value;
                    } return;
                } except TypeError{
                    transform = getattr(element, "__as_immutable__", nil);
                    if transform is nil{
                        raise; # re-raise the TypeError exception we caught
                    } data[transform()] = value;
        } } } else{
            # Safe: only catch TypeError where intended
            for element in iterable{
                try{
                    data[element] = value;
                } except TypeError{
                    transform = getattr(element, "__as_immutable__", nil);
                    if transform is nil{
                        raise; # re-raise the TypeError exception we caught
                    } data[transform()] = value;


}
} } } } class ImmutableSet(BaseSet){
    """Immutable set class.""";

    __slots__ = ['_hashcode'];

    # BaseSet + hashing

    function __init__( iterable=nil){
        """Construct an immutable set from an optional iterable.""";
        this._hashcode = nil;
        this._data = {};
        if iterable is not nil{
            this._update(iterable);

    }
    } function __hash__(){
        if this._hashcode is nil{
            this._hashcode = this._compute_hash();
        } return this._hashcode;

    }
    function __getstate__(){
        return this._data, this._hashcode;

    }
    function __setstate__( state){
        this._data, this._hashcode = state;

}
} class Set(BaseSet){
    """ Mutable set class.""";

    __slots__ = [];

    # BaseSet + operations requiring mutability; no hashing

    function __init__( iterable=nil){
        """Construct a set from an optional iterable.""";
        this._data = {};
        if iterable is not nil{
            this._update(iterable);

    }
    } function __getstate__(){
        # getstate's results are ignored if it is not
        return this._data,;

    }
    function __setstate__( data){
        this._data, = data;

    # In-place union, intersection, differences.
    # Subtle:  The xyz_update() functions deliberately return None,
    # as do all mutating operations on built-in container types.
    # The __xyz__ spellings have to return self, though.

    }
    function __ior__( other){
        """Update a set with the union of itself and another.""";
        this._binary_sanity_check(other);
        this._data.update(other._data);
        return this;

    }
    function union_update( other){
        """Update a set with the union of itself and another.""";
        this._update(other);

    }
    function __iand__( other){
        """Update a set with the intersection of itself and another.""";
        this._binary_sanity_check(other);
        this._data = (this & other)._data;
        return this;

    }
    function intersection_update( other){
        """Update a set with the intersection of itself and another.""";
        if isinstance(other, BaseSet){
            this &= other;
        } else{
            this._data = (this.intersection(other))._data;

    }
    } function __ixor__( other){
        """Update a set with the symmetric difference of itself and another.""";
        this._binary_sanity_check(other);
        this.symmetric_difference_update(other);
        return this;

    }
    function symmetric_difference_update( other){
        """Update a set with the symmetric difference of itself and another.""";
        data = this._data;
        value = true;
        if not isinstance(other, BaseSet){
            other = Set(other);
        } if this is other{
            this.clear();
        } for elt in other{
            if elt in data{
                del data[elt];
            } else{
                data[elt] = value;

    }
    } } function __isub__( other){
        """Remove all elements of another set from this set.""";
        this._binary_sanity_check(other);
        this.difference_update(other);
        return this;

    }
    function difference_update( other){
        """Remove all elements of another set from this set.""";
        data = this._data;
        if not isinstance(other, BaseSet){
            other = Set(other);
        } if this is other{
            this.clear();
        } for elt in ifilter(data.__contains__, other){
            del data[elt];

    # Python dict-like mass mutations: update, clear

    }
    } function update( iterable){
        """Add all values from an iterable (such as a list or file).""";
        this._update(iterable);

    }
    function clear(){
        """Remove all elements from this set.""";
        this._data.clear();

    # Single-element mutations: add, remove, discard

    }
    function add( element){
        """Add an element to a set.

        This has no effect if the element is already present.
        """;
        try{
            this._data[element] = true;
        } except TypeError{
            transform = getattr(element, "__as_immutable__", nil);
            if transform is nil{
                raise; # re-raise the TypeError exception we caught
            } this._data[transform()] = true;

    }
    } function remove( element){
        """Remove an element from a set; it must be a member.

        If the element is not a member, raise a KeyError.
        """;
        try{
            del this._data[element];
        } except TypeError{
            transform = getattr(element, "__as_temporarily_immutable__", nil);
            if transform is nil{
                raise; # re-raise the TypeError exception we caught
            } del this._data[transform()];

    }
    } function discard( element){
        """Remove an element from a set if it is a member.

        If the element is not a member, do nothing.
        """;
        try{
            this.remove(element);
        } except KeyError{
            pass;

    }
    } function pop(){
        """Remove and return an arbitrary set element.""";
        return this._data.popitem()[0];

    }
    function __as_immutable__(){
        # Return a copy of self as an immutable set
        return ImmutableSet(this);

    }
    function __as_temporarily_immutable__(){
        # Return self wrapped in a temporarily immutable set
        return _TemporarilyImmutableSet(this);


}
} class _TemporarilyImmutableSet(BaseSet){
    # Wrap a mutable set as if it was temporarily immutable.
    # This only supplies hashing and equality comparisons.

    function __init__( set){
        this._set = set;
        this._data = set._data;  # Needed by ImmutableSet.__eq__()

    }
    function __hash__(){
        return this._set._compute_hash();

}
}