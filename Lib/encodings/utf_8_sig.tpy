""" Python 'utf-8-sig' Codec
This work similar to UTF-8 with the following changes:

* On encoding/writing a UTF-8 encoded BOM will be prepended/written as the
  first three bytes.

* On decoding/reading if the first three bytes are a UTF-8 encoded BOM, these
  bytes will be skipped.
""";
import codecs;

### Codec APIs

function encode(input, errors='strict'){
    return (codecs.BOM_UTF8 + codecs.utf_8_encode(input, errors)[0], len(input));

}
function decode(input, errors='strict'){
    prefix = 0;
    if input[:3] == codecs.BOM_UTF8{
        input = input[3:];
        prefix = 3;
    } (output, consumed) = codecs.utf_8_decode(input, errors, true);
    return (output, consumed+prefix);

}
class IncrementalEncoder(codecs.IncrementalEncoder){
    function __init__( errors='strict'){
        codecs.IncrementalEncoder.__init__(this, errors);
        this.first = 1;

    }
    function encode( input, final=false){
        if this.first{
            this.first = 0;
            return codecs.BOM_UTF8 + codecs.utf_8_encode(input, this.errors)[0];
        } else{
            return codecs.utf_8_encode(input, this.errors)[0];

    }
    } function reset(){
        codecs.IncrementalEncoder.reset(this);
        this.first = 1;

    }
    function getstate(){
        return this.first;

    }
    function setstate( state){
        this.first = state;

}
} class IncrementalDecoder(codecs.BufferedIncrementalDecoder){
    function __init__( errors='strict'){
        codecs.BufferedIncrementalDecoder.__init__(this, errors);
        this.first = true;

    }
    function _buffer_decode( input, errors, final){
        if this.first{
            if len(input) < 3{
                if codecs.BOM_UTF8.startswith(input){
                    # not enough data to decide if this really is a BOM
                    # => try again on the next call
                    return (u"", 0);
                } else{
                    this.first = nil;
            } } else{
                this.first = nil;
                if input[:3] == codecs.BOM_UTF8{
                    (output, consumed) = codecs.utf_8_decode(input[3:], errors, final);
                    return (output, consumed+3);
        } } } return codecs.utf_8_decode(input, errors, final);

    }
    function reset(){
        codecs.BufferedIncrementalDecoder.reset(this);
        this.first = true;

}
} class StreamWriter(codecs.StreamWriter){
    function reset(){
        codecs.StreamWriter.reset(this);
        try{
            del this.encode;
        } except AttributeError{
            pass;

    }
    } function encode( input, errors='strict'){
        this.encode = codecs.utf_8_encode;
        return encode(input, errors);

}
} class StreamReader(codecs.StreamReader){
    function reset(){
        codecs.StreamReader.reset(this);
        try{
            del this.decode;
        } except AttributeError{
            pass;

    }
    } function decode( input, errors='strict'){
        if len(input) < 3{
            if codecs.BOM_UTF8.startswith(input){
                # not enough data to decide if this is a BOM
                # => try again on the next call
                return (u"", 0);
        } } elif input[:3] == codecs.BOM_UTF8{
            this.decode = codecs.utf_8_decode;
            (output, consumed) = codecs.utf_8_decode(input[3:],errors);
            return (output, consumed+3);
        # (else) no BOM present
        }
        this.decode = codecs.utf_8_decode;
        return codecs.utf_8_decode(input, errors);

### encodings module API

}
} function getregentry(){
    return codecs.CodecInfo(
        name='utf-8-sig',
        encode=encode,
        decode=decode,
        incrementalencoder=IncrementalEncoder,
        incrementaldecoder=IncrementalDecoder,
        streamreader=StreamReader,
        streamwriter=StreamWriter,
    );

}