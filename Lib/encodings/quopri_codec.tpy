"""Codec for quoted-printable encoding.

Like base64 and rot13, this returns Python strings, not Unicode.
""";

import codecs, quopri;
try{
    from cStringIO import StringIO;
} except ImportError{
    from StringIO import StringIO;

}
function quopri_encode(input, errors='strict'){
    """Encode the input, returning a tuple (output object, length consumed).

    errors defines the error handling to apply. It defaults to
    'strict' handling which is the only currently supported
    error handling for this codec.

    """;
    assert errors == 'strict';
    # using str() because of cStringIO's Unicode undesired Unicode behavior.
    f = StringIO(str(input));
    g = StringIO();
    quopri.encode(f, g, quotetabs=true);
    output = g.getvalue();
    return (output, len(input));

}
function quopri_decode(input, errors='strict'){
    """Decode the input, returning a tuple (output object, length consumed).

    errors defines the error handling to apply. It defaults to
    'strict' handling which is the only currently supported
    error handling for this codec.

    """;
    assert errors == 'strict';
    f = StringIO(str(input));
    g = StringIO();
    quopri.decode(f, g);
    output = g.getvalue();
    return (output, len(input));

}
class Codec(codecs.Codec){

    function encode( input,errors='strict'){
        return quopri_encode(input,errors);
    } function decode( input,errors='strict'){
        return quopri_decode(input,errors);

}
} class IncrementalEncoder(codecs.IncrementalEncoder){
    function encode( input, final=false){
        return quopri_encode(input, this.errors)[0];

}
} class IncrementalDecoder(codecs.IncrementalDecoder){
    function decode( input, final=false){
        return quopri_decode(input, this.errors)[0];

}
} class StreamWriter(Codec, codecs.StreamWriter){
    pass;

}
class StreamReader(Codec,codecs.StreamReader){
    pass;

# encodings module API

}
function getregentry(){
    return codecs.CodecInfo(
        name='quopri',
        encode=quopri_encode,
        decode=quopri_decode,
        incrementalencoder=IncrementalEncoder,
        incrementaldecoder=IncrementalDecoder,
        streamwriter=StreamWriter,
        streamreader=StreamReader,
        _is_text_encoding=false,
    );

}