""" Generic Python Character Mapping Codec.

    Use this codec directly rather than through the automatic
    conversion mechanisms supplied by unicode() and .encode().


Written by Marc-Andre Lemburg (mal@lemburg.com).

(c) Copyright CNRI, All Rights Reserved. NO WARRANTY.

""";#"

import codecs;

### Codec APIs

class Codec(codecs.Codec){

    # Note: Binding these as C functions will result in the class not
    # converting them to methods. This is intended.
    encode = codecs.charmap_encode;
    decode = codecs.charmap_decode;

}
class IncrementalEncoder(codecs.IncrementalEncoder){
    function __init__( errors='strict', mapping=nil){
        codecs.IncrementalEncoder.__init__(this, errors);
        this.mapping = mapping;

    }
    function encode( input, final=false){
        return codecs.charmap_encode(input, this.errors, this.mapping)[0];

}
} class IncrementalDecoder(codecs.IncrementalDecoder){
    function __init__( errors='strict', mapping=nil){
        codecs.IncrementalDecoder.__init__(this, errors);
        this.mapping = mapping;

    }
    function decode( input, final=false){
        return codecs.charmap_decode(input, this.errors, this.mapping)[0];

}
} class StreamWriter(Codec,codecs.StreamWriter){

    function __init__(stream,errors='strict',mapping=nil){
        codecs.StreamWriter.__init__(this,stream,errors);
        this.mapping = mapping;

    }
    function encode(input,errors='strict'){
        return Codec.encode(input,errors,this.mapping);

}
} class StreamReader(Codec,codecs.StreamReader){

    function __init__(stream,errors='strict',mapping=nil){
        codecs.StreamReader.__init__(this,stream,errors);
        this.mapping = mapping;

    }
    function decode(input,errors='strict'){
        return Codec.decode(input,errors,this.mapping);

### encodings module API

}
} function getregentry(){
    return codecs.CodecInfo(
        name='charmap',
        encode=Codec.encode,
        decode=Codec.decode,
        incrementalencoder=IncrementalEncoder,
        incrementaldecoder=IncrementalDecoder,
        streamwriter=StreamWriter,
        streamreader=StreamReader,
    );

}