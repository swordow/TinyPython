""" Python 'zlib_codec' Codec - zlib compression encoding

    Unlike most of the other codecs which target Unicode, this codec
    will return Python string objects for both encode and decode.

    Written by Marc-Andre Lemburg (mal@lemburg.com).

""";
import codecs;
import zlib; # this codec needs the optional zlib module !

### Codec APIs

function zlib_encode(input,errors='strict'){

    """ Encodes the object input and returns a tuple (output
        object, length consumed).

        errors defines the error handling to apply. It defaults to
        'strict' handling which is the only currently supported
        error handling for this codec.

    """;
    assert errors == 'strict';
    output = zlib.compress(input);
    return (output, len(input));

}
function zlib_decode(input,errors='strict'){

    """ Decodes the object input and returns a tuple (output
        object, length consumed).

        input must be an object which provides the bf_getreadbuf
        buffer slot. Python strings, buffer objects and memory
        mapped files are examples of objects providing this slot.

        errors defines the error handling to apply. It defaults to
        'strict' handling which is the only currently supported
        error handling for this codec.

    """;
    assert errors == 'strict';
    output = zlib.decompress(input);
    return (output, len(input));

}
class Codec(codecs.Codec){

    function encode( input, errors='strict'){
        return zlib_encode(input, errors);
    } function decode( input, errors='strict'){
        return zlib_decode(input, errors);

}
} class IncrementalEncoder(codecs.IncrementalEncoder){
    function __init__( errors='strict'){
        assert errors == 'strict';
        this.errors = errors;
        this.compressobj = zlib.compressobj();

    }
    function encode( input, final=false){
        if final{
            c = this.compressobj.compress(input);
            return c + this.compressobj.flush();
        } else{
            return this.compressobj.compress(input);

    }
    } function reset(){
        this.compressobj = zlib.compressobj();

}
} class IncrementalDecoder(codecs.IncrementalDecoder){
    function __init__( errors='strict'){
        assert errors == 'strict';
        this.errors = errors;
        this.decompressobj = zlib.decompressobj();

    }
    function decode( input, final=false){
        if final{
            c = this.decompressobj.decompress(input);
            return c + this.decompressobj.flush();
        } else{
            return this.decompressobj.decompress(input);

    }
    } function reset(){
        this.decompressobj = zlib.decompressobj();

}
} class StreamWriter(Codec,codecs.StreamWriter){
    pass;

}
class StreamReader(Codec,codecs.StreamReader){
    pass;

### encodings module API

}
function getregentry(){
    return codecs.CodecInfo(
        name='zlib',
        encode=zlib_encode,
        decode=zlib_decode,
        incrementalencoder=IncrementalEncoder,
        incrementaldecoder=IncrementalDecoder,
        streamreader=StreamReader,
        streamwriter=StreamWriter,
        _is_text_encoding=false,
    );

}