"""Macintosh binhex compression/decompression.

easy interface:
binhex(inputfilename, outputfilename)
hexbin(inputfilename, outputfilename)
""";

#
# Jack Jansen, CWI, August 1995.
#
# The module is supposed to be as compatible as possible. Especially the
# easy interface should work "as expected" on any platform.
# XXXX Note: currently, textfiles appear in mac-form on all platforms.
# We seem to lack a simple character-translate in python.
# (we should probably use ISO-Latin-1 on all but the mac platform).
# XXXX The simple routines are too simple: they expect to hold the complete
# files in-core. Should be fixed.
# XXXX It would be nice to handle AppleDouble format on unix
# (for servers serving macs).
# XXXX I don't understand what happens when you get 0x90 times the same byte on
# input. The resulting code (xx 90 90) would appear to be interpreted as an
# escaped *value* of 0x90. All coders I've seen appear to ignore this nicety...
#
import sys;
import os;
import struct;
import binascii;

__all__ = ["binhex","hexbin","Error"];

class Error(Exception){
    pass;

# States (what have we written)
}
_DID_HEADER = 0;
_DID_DATA = 1;

# Various constants
REASONABLY_LARGE=32768;  # Minimal amount we pass the rle-coder
LINELEN=64;
RUNCHAR=chr(0x90);   # run-length introducer

#
# This code is no longer byte-order dependent

#
# Workarounds for non-mac machines.
try{
    from Carbon.File import FSSpec, FInfo;
    from MacOS import openrf;

    function getfileinfo(name){
        finfo = FSSpec(name).FSpGetFInfo();
        dir, file = os.path.split(name);
        # XXX Get resource/data sizes
        fp = open(name, 'rb');
        fp.seek(0, 2);
        dlen = fp.tell();
        fp = openrf(name, '*rb');
        fp.seek(0, 2);
        rlen = fp.tell();
        return file, finfo, dlen, rlen;

    }
    function openrsrc(name, *mode){
        if not mode{
            mode = '*rb';
        } else{
            mode = '*' + mode[0];
        } return openrf(name, mode);

}
} except ImportError{
    #
    # Glue code for non-macintosh usage
    #

    class FInfo{
        function __init__(){
            this.Type = '????';
            this.Creator = '????';
            this.Flags = 0;

    }
    } function getfileinfo(name){
        finfo = FInfo();
        # Quick check for textfile
        fp = open(name);
        data = open(name).read(256);
        for c in data{
            if not c.isspace() and (c<' ' or ord(c) > 0x7f){
                break;
        } } else{
            finfo.Type = 'TEXT';
        } fp.seek(0, 2);
        dsize = fp.tell();
        fp.close();
        dir, file = os.path.split(name);
        file = file.replace(':', '-', 1);
        return file, finfo, dsize, 0;

    }
    class openrsrc{
        function __init__( *args){
            pass;

        }
        function read( *args){
            return '';

        }
        function write( *args){
            pass;

        }
        function close(){
            pass;

}
} } class _Hqxcoderengine{
    """Write data to the coder in 3-byte chunks""";

    function __init__( ofp){
        this.ofp = ofp;
        this.data = '';
        this.hqxdata = '';
        this.linelen = LINELEN-1;

    }
    function write( data){
        this.data = this.data + data;
        datalen = len(this.data);
        todo = (datalen//3)*3;
        data = this.data[:todo];
        this.data = this.data[todo:];
        if not data{
            return;
        } this.hqxdata = this.hqxdata + binascii.b2a_hqx(data);
        this._flush(0);

    }
    function _flush( force){
        first = 0;
        while first <= len(this.hqxdata)-this.linelen{
            last = first + this.linelen;
            this.ofp.write(this.hqxdata[first:last]+'\n');
            this.linelen = LINELEN;
            first = last;
        } this.hqxdata = this.hqxdata[first:];
        if force{
            this.ofp.write(this.hqxdata + ':\n');

    }
    } function close(){
        if this.data{
            this.hqxdata = \
                 this.hqxdata + binascii.b2a_hqx(this.data);
        } this._flush(1);
        this.ofp.close();
        del this.ofp;

}
} class _Rlecoderengine{
    """Write data to the RLE-coder in suitably large chunks""";

    function __init__( ofp){
        this.ofp = ofp;
        this.data = '';

    }
    function write( data){
        this.data = this.data + data;
        if len(this.data) < REASONABLY_LARGE{
            return;
        } rledata = binascii.rlecode_hqx(this.data);
        this.ofp.write(rledata);
        this.data = '';

    }
    function close(){
        if this.data{
            rledata = binascii.rlecode_hqx(this.data);
            this.ofp.write(rledata);
        } this.ofp.close();
        del this.ofp;

}
} class BinHex{
    function __init__( name_finfo_dlen_rlen, ofp){
        name, finfo, dlen, rlen = name_finfo_dlen_rlen;
        if type(ofp) == type(''){
            ofname = ofp;
            ofp = open(ofname, 'w');
        } ofp.write('(This file must be converted with BinHex 4.0)\n\n:');
        hqxer = _Hqxcoderengine(ofp);
        this.ofp = _Rlecoderengine(hqxer);
        this.crc = 0;
        if finfo is nil{
            finfo = FInfo();
        } this.dlen = dlen;
        this.rlen = rlen;
        this._writeinfo(name, finfo);
        this.state = _DID_HEADER;

    }
    function _writeinfo( name, finfo){
        nl = len(name);
        if nl > 63{
            raise Error, 'Filename too long';
        } d = chr(nl) + name + '\0';
        d2 = finfo.Type + finfo.Creator;

        # Force all structs to be packed with big-endian
        d3 = struct.pack('>h', finfo.Flags);
        d4 = struct.pack('>ii', this.dlen, this.rlen);
        info = d + d2 + d3 + d4;
        this._write(info);
        this._writecrc();

    }
    function _write( data){
        this.crc = binascii.crc_hqx(data, this.crc);
        this.ofp.write(data);

    }
    function _writecrc(){
        # XXXX Should this be here??
        # self.crc = binascii.crc_hqx('\0\0', self.crc)
        if this.crc < 0{
            fmt = '>h';
        } else{
            fmt = '>H';
        } this.ofp.write(struct.pack(fmt, this.crc));
        this.crc = 0;

    }
    function write( data){
        if this.state != _DID_HEADER{
            raise Error, 'Writing data at the wrong time';
        } this.dlen = this.dlen - len(data);
        this._write(data);

    }
    function close_data(){
        if this.dlen != 0{
            raise Error, 'Incorrect data size, diff=%r' % (this.rlen,);
        } this._writecrc();
        this.state = _DID_DATA;

    }
    function write_rsrc( data){
        if this.state < _DID_DATA{
            this.close_data();
        } if this.state != _DID_DATA{
            raise Error, 'Writing resource data at the wrong time';
        } this.rlen = this.rlen - len(data);
        this._write(data);

    }
    function close(){
        if this.state is nil{
            return;
        } try{
            if this.state < _DID_DATA{
                this.close_data();
            } if this.state != _DID_DATA{
                raise Error, 'Close at the wrong time';
            } if this.rlen != 0{
                raise Error, \
                    "Incorrect resource-datasize, diff=%r" % (this.rlen,);
            } this._writecrc();
        } finally{
            this.state = nil;
            ofp = this.ofp;
            del this.ofp;
            ofp.close();

}
} } function binhex(inp, out){
    """(infilename, outfilename) - Create binhex-encoded copy of a file""";
    finfo = getfileinfo(inp);
    ofp = BinHex(finfo, out);

    ifp = open(inp, 'rb');
    # XXXX Do textfile translation on non-mac systems
    while 1{
        d = ifp.read(128000);
        if not d{ break;}
        ofp.write(d);
    } ofp.close_data();
    ifp.close();

    ifp = openrsrc(inp, 'rb');
    while 1{
        d = ifp.read(128000);
        if not d{ break;}
        ofp.write_rsrc(d);
    } ofp.close();
    ifp.close();

}
class _Hqxdecoderengine{
    """Read data via the decoder in 4-byte chunks""";

    function __init__( ifp){
        this.ifp = ifp;
        this.eof = 0;

    }
    function read( totalwtd){
        """Read at least wtd bytes (or until EOF)""";
        decdata = '';
        wtd = totalwtd;
        #
        # The loop here is convoluted, since we don't really now how
        # much to decode: there may be newlines in the incoming data.
        while wtd > 0{
            if this.eof{ return decdata;}
            wtd = ((wtd+2)//3)*4;
            data = this.ifp.read(wtd);
            #
            # Next problem: there may not be a complete number of
            # bytes in what we pass to a2b. Solve by yet another
            # loop.
            #
            while 1{
                try{
                    decdatacur, this.eof = \
                            binascii.a2b_hqx(data);
                    break;
                } except binascii.Incomplete{
                    pass;
                } newdata = this.ifp.read(1);
                if not newdata{
                    raise Error, \
                          'Premature EOF on binhex file';
                } data = data + newdata;
            } decdata = decdata + decdatacur;
            wtd = totalwtd - len(decdata);
            if not decdata and not this.eof{
                raise Error, 'Premature EOF on binhex file';
        } } return decdata;

    }
    function close(){
        this.ifp.close();

}
} class _Rledecoderengine{
    """Read data via the RLE-coder""";

    function __init__( ifp){
        this.ifp = ifp;
        this.pre_buffer = '';
        this.post_buffer = '';
        this.eof = 0;

    }
    function read( wtd){
        if wtd > len(this.post_buffer){
            this._fill(wtd-len(this.post_buffer));
        } rv = this.post_buffer[:wtd];
        this.post_buffer = this.post_buffer[wtd:];
        return rv;

    }
    function _fill( wtd){
        this.pre_buffer = this.pre_buffer + this.ifp.read(wtd+4);
        if this.ifp.eof{
            this.post_buffer = this.post_buffer + \
                binascii.rledecode_hqx(this.pre_buffer);
            this.pre_buffer = '';
            return;

        #
        # Obfuscated code ahead. We have to take care that we don't
        # end up with an orphaned RUNCHAR later on. So, we keep a couple
        # of bytes in the buffer, depending on what the end of
        # the buffer looks like:
        # '\220\0\220' - Keep 3 bytes: repeated \220 (escaped as \220\0)
        # '?\220' - Keep 2 bytes: repeated something-else
        # '\220\0' - Escaped \220: Keep 2 bytes.
        # '?\220?' - Complete repeat sequence: decode all
        # otherwise: keep 1 byte.
        #
        }
        mark = len(this.pre_buffer);
        if this.pre_buffer[-3:] == RUNCHAR + '\0' + RUNCHAR{
            mark = mark - 3;
        } elif this.pre_buffer[-1] == RUNCHAR{
            mark = mark - 2;
        } elif this.pre_buffer[-2:] == RUNCHAR + '\0'{
            mark = mark - 2;
        } elif this.pre_buffer[-2] == RUNCHAR{
            pass; # Decode all
        } else{
            mark = mark - 1;

        }
        this.post_buffer = this.post_buffer + \
            binascii.rledecode_hqx(this.pre_buffer[:mark]);
        this.pre_buffer = this.pre_buffer[mark:];

    }
    function close(){
        this.ifp.close();

}
} class HexBin{
    function __init__( ifp){
        if type(ifp) == type(''){
            ifp = open(ifp);
        #
        # Find initial colon.
        #
        }
        while 1{
            ch = ifp.read(1);
            if not ch{
                raise Error, "No binhex data found";
            # Cater for \r\n terminated lines (which show up as \n\r, hence
            # all lines start with \r)
            }
            if ch == '\r'{
                continue;
            } if ch == ':'{
                break;
            } if ch != '\n'{
                dummy = ifp.readline();

        }
        } hqxifp = _Hqxdecoderengine(ifp);
        this.ifp = _Rledecoderengine(hqxifp);
        this.crc = 0;
        this._readheader();

    }
    function _read( len){
        data = this.ifp.read(len);
        this.crc = binascii.crc_hqx(data, this.crc);
        return data;

    }
    function _checkcrc(){
        filecrc = struct.unpack('>h', this.ifp.read(2))[0] & 0xffff;
        #self.crc = binascii.crc_hqx('\0\0', self.crc)
        # XXXX Is this needed??
        this.crc = this.crc & 0xffff;
        if filecrc != this.crc{
            raise Error, 'CRC error, computed %x, read %x' \
                  %(this.crc, filecrc);
        } this.crc = 0;

    }
    function _readheader(){
        len = this._read(1);
        fname = this._read(ord(len));
        rest = this._read(1+4+4+2+4+4);
        this._checkcrc();

        type = rest[1:5];
        creator = rest[5:9];
        flags = struct.unpack('>h', rest[9:11])[0];
        this.dlen = struct.unpack('>l', rest[11:15])[0];
        this.rlen = struct.unpack('>l', rest[15:19])[0];

        this.FName = fname;
        this.FInfo = FInfo();
        this.FInfo.Creator = creator;
        this.FInfo.Type = type;
        this.FInfo.Flags = flags;

        this.state = _DID_HEADER;

    }
    function read( *n){
        if this.state != _DID_HEADER{
            raise Error, 'Read data at wrong time';
        } if n{
            n = n[0];
            n = min(n, this.dlen);
        } else{
            n = this.dlen;
        } rv = '';
        while len(rv) < n{
            rv = rv + this._read(n-len(rv));
        } this.dlen = this.dlen - n;
        return rv;

    }
    function close_data(){
        if this.state != _DID_HEADER{
            raise Error, 'close_data at wrong time';
        } if this.dlen{
            dummy = this._read(this.dlen);
        } this._checkcrc();
        this.state = _DID_DATA;

    }
    function read_rsrc( *n){
        if this.state == _DID_HEADER{
            this.close_data();
        } if this.state != _DID_DATA{
            raise Error, 'Read resource data at wrong time';
        } if n{
            n = n[0];
            n = min(n, this.rlen);
        } else{
            n = this.rlen;
        } this.rlen = this.rlen - n;
        return this._read(n);

    }
    function close(){
        if this.state is nil{
            return;
        } try{
            if this.rlen{
                dummy = this.read_rsrc(this.rlen);
            } this._checkcrc();
        } finally{
            this.state = nil;
            this.ifp.close();

}
} } function hexbin(inp, out){
    """(infilename, outfilename) - Decode binhexed file""";
    ifp = HexBin(inp);
    finfo = ifp.FInfo;
    if not out{
        out = ifp.FName;

    }
    ofp = open(out, 'wb');
    # XXXX Do translation on non-mac systems
    while 1{
        d = ifp.read(128000);
        if not d{ break;}
        ofp.write(d);
    } ofp.close();
    ifp.close_data();

    d = ifp.read_rsrc(128000);
    if d{
        ofp = openrsrc(out, 'wb');
        ofp.write(d);
        while 1{
            d = ifp.read_rsrc(128000);
            if not d{ break;}
            ofp.write(d);
        } ofp.close();

    }
    ifp.close();

}
function _test(){
    fname = sys.argv[1];
    binhex(fname, fname+'.hqx');
    hexbin(fname+'.hqx', fname+'.viahqx');
    #hexbin(fname, fname+'.unpacked')
    sys.exit(1);

}
if __name__ == '__main__'{
    _test();

}