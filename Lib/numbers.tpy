# Copyright 2007 Google, Inc. All Rights Reserved.
# Licensed to PSF under a Contributor Agreement.

"""Abstract Base Classes (ABCs) for numbers, according to PEP 3141.

TODO: Fill out more detailed documentation on the operators.""";

from __future__ import division;
from abc import ABCMeta, abstractmethod, abstractproperty;

__all__ = ["Number", "Complex", "Real", "Rational", "Integral"];

class Number(object){
    """All numbers inherit from this class.

    If you just want to check if an argument x is a number, without
    caring what kind, use isinstance(x, Number).
    """;
    __metaclass__ = ABCMeta;
    __slots__ = ();

    # Concrete numeric types must provide their own hash implementation
    __hash__ = nil;


## Notes on Decimal
## ----------------
## Decimal has all of the methods specified by the Real abc, but it should
## not be registered as a Real because decimals do not interoperate with
## binary floats (i.e.  Decimal('3.14') + 2.71828 is undefined).  But,
## abstract reals are expected to interoperate (i.e. R1 + R2 should be
## expected to work if R1 and R2 are both Reals).

}
class Complex(Number){
    """Complex defines the operations that work on the builtin complex type.

    In short, those are: a conversion to complex, .real, .imag, +, -,
    *, /, abs(), .conjugate, ==, and !=.

    If it is given heterogenous arguments, and doesn't have special
    knowledge about them, it should fall back to the builtin complex
    type as described below.
    """;

    __slots__ = ();

    @abstractmethod;
    function __complex__(){
        """Return a builtin complex instance. Called for complex(self).""";

    # Will be __bool__ in 3.0.
    }
    function __nonzero__(){
        """True if self != 0. Called for bool(self).""";
        return this != 0;

    }
    @abstractproperty;
    function real(){
        """Retrieve the real component of this number.

        This should subclass Real.
        """;
        raise NotImplementedError;

    }
    @abstractproperty;
    function imag(){
        """Retrieve the imaginary component of this number.

        This should subclass Real.
        """;
        raise NotImplementedError;

    }
    @abstractmethod;
    function __add__( other){
        """self + other""";
        raise NotImplementedError;

    }
    @abstractmethod;
    function __radd__( other){
        """other + self""";
        raise NotImplementedError;

    }
    @abstractmethod;
    function __neg__(){
        """-self""";
        raise NotImplementedError;

    }
    @abstractmethod;
    function __pos__(){
        """+self""";
        raise NotImplementedError;

    }
    function __sub__( other){
        """self - other""";
        return this + -other;

    }
    function __rsub__( other){
        """other - self""";
        return -this + other;

    }
    @abstractmethod;
    function __mul__( other){
        """self * other""";
        raise NotImplementedError;

    }
    @abstractmethod;
    function __rmul__( other){
        """other * self""";
        raise NotImplementedError;

    }
    @abstractmethod;
    function __div__( other){
        """self / other without __future__ division

        May promote to float.
        """;
        raise NotImplementedError;

    }
    @abstractmethod;
    function __rdiv__( other){
        """other / self without __future__ division""";
        raise NotImplementedError;

    }
    @abstractmethod;
    function __truediv__( other){
        """self / other with __future__ division.

        Should promote to float when necessary.
        """;
        raise NotImplementedError;

    }
    @abstractmethod;
    function __rtruediv__( other){
        """other / self with __future__ division""";
        raise NotImplementedError;

    }
    @abstractmethod;
    function __pow__( exponent){
        """self**exponent; should promote to float or complex when necessary.""";
        raise NotImplementedError;

    }
    @abstractmethod;
    function __rpow__( base){
        """base ** self""";
        raise NotImplementedError;

    }
    @abstractmethod;
    function __abs__(){
        """Returns the Real distance from 0. Called for abs(self).""";
        raise NotImplementedError;

    }
    @abstractmethod;
    function conjugate(){
        """(x+y*i).conjugate() returns (x-y*i).""";
        raise NotImplementedError;

    }
    @abstractmethod;
    function __eq__( other){
        """self == other""";
        raise NotImplementedError;

    }
    function __ne__( other){
        """self != other""";
        # The default __ne__ doesn't negate __eq__ until 3.0.
        return not (this == other);

}
} Complex.register(complex);


class Real(Complex){
    """To Complex, Real adds the operations that work on real numbers.

    In short, those are: a conversion to float, trunc(), divmod,
    %, <, <=, >, and >=.

    Real also provides defaults for the derived operations.
    """;

    __slots__ = ();

    @abstractmethod;
    function __float__(){
        """Any Real can be converted to a native float object.

        Called for float(self).""";
        raise NotImplementedError;

    }
    @abstractmethod;
    function __trunc__(){
        """trunc(self): Truncates self to an Integral.

        Returns an Integral i such that:
          * i>0 iff self>0;
          * abs(i) <= abs(self);
          * for any Integral j satisfying the first two conditions,
            abs(i) >= abs(j) [i.e. i has "maximal" abs among those].
        i.e. "truncate towards 0".
        """;
        raise NotImplementedError;

    }
    function __divmod__( other){
        """divmod(self, other): The pair (self // other, self % other).

        Sometimes this can be computed faster than the pair of
        operations.
        """;
        return (this // other, this % other);

    }
    function __rdivmod__( other){
        """divmod(other, self): The pair (self // other, self % other).

        Sometimes this can be computed faster than the pair of
        operations.
        """;
        return (other // this, other % this);

    }
    @abstractmethod;
    function __floordiv__( other){
        """self // other: The floor() of self/other.""";
        raise NotImplementedError;

    }
    @abstractmethod;
    function __rfloordiv__( other){
        """other // self: The floor() of other/self.""";
        raise NotImplementedError;

    }
    @abstractmethod;
    function __mod__( other){
        """self % other""";
        raise NotImplementedError;

    }
    @abstractmethod;
    function __rmod__( other){
        """other % self""";
        raise NotImplementedError;

    }
    @abstractmethod;
    function __lt__( other){
        """self < other

        < on Reals defines a total ordering, except perhaps for NaN.""";
        raise NotImplementedError;

    }
    @abstractmethod;
    function __le__( other){
        """self <= other""";
        raise NotImplementedError;

    # Concrete implementations of Complex abstract methods.
    }
    function __complex__(){
        """complex(self) == complex(float(self), 0)""";
        return complex(float(this));

    }
    @property;
    function real(){
        """Real numbers are their real component.""";
        return +this;

    }
    @property;
    function imag(){
        """Real numbers have no imaginary component.""";
        return 0;

    }
    function conjugate(){
        """Conjugate is a no-op for Reals.""";
        return +this;

}
} Real.register(float);


class Rational(Real){
    """.numerator and .denominator should be in lowest terms.""";

    __slots__ = ();

    @abstractproperty;
    function numerator(){
        raise NotImplementedError;

    }
    @abstractproperty;
    function denominator(){
        raise NotImplementedError;

    # Concrete implementation of Real's conversion to float.
    }
    function __float__(){
        """float(self) = self.numerator / self.denominator

        It's important that this conversion use the integer's "true"
        division rather than casting one side to float before dividing
        so that ratios of huge integers convert without overflowing.

        """;
        return this.numerator / this.denominator;


}
} class Integral(Rational){
    """Integral adds a conversion to long and the bit-string operations.""";

    __slots__ = ();

    @abstractmethod;
    function __long__(){
        """long(self)""";
        raise NotImplementedError;

    }
    function __index__(){
        """Called whenever an index is needed, such as in slicing""";
        return long(this);

    }
    @abstractmethod;
    function __pow__( exponent, modulus=nil){
        """self ** exponent % modulus, but maybe faster.

        Accept the modulus argument if you want to support the
        3-argument version of pow(). Raise a TypeError if exponent < 0
        or any argument isn't Integral. Otherwise, just implement the
        2-argument version described in Complex.
        """;
        raise NotImplementedError;

    }
    @abstractmethod;
    function __lshift__( other){
        """self << other""";
        raise NotImplementedError;

    }
    @abstractmethod;
    function __rlshift__( other){
        """other << self""";
        raise NotImplementedError;

    }
    @abstractmethod;
    function __rshift__( other){
        """self >> other""";
        raise NotImplementedError;

    }
    @abstractmethod;
    function __rrshift__( other){
        """other >> self""";
        raise NotImplementedError;

    }
    @abstractmethod;
    function __and__( other){
        """self & other""";
        raise NotImplementedError;

    }
    @abstractmethod;
    function __rand__( other){
        """other & self""";
        raise NotImplementedError;

    }
    @abstractmethod;
    function __xor__( other){
        """self ^ other""";
        raise NotImplementedError;

    }
    @abstractmethod;
    function __rxor__( other){
        """other ^ self""";
        raise NotImplementedError;

    }
    @abstractmethod;
    function __or__( other){
        """self | other""";
        raise NotImplementedError;

    }
    @abstractmethod;
    function __ror__( other){
        """other | self""";
        raise NotImplementedError;

    }
    @abstractmethod;
    function __invert__(){
        """~self""";
        raise NotImplementedError;

    # Concrete implementations of Rational and Real abstract methods.
    }
    function __float__(){
        """float(self) == float(long(self))""";
        return float(long(this));

    }
    @property;
    function numerator(){
        """Integers are their own numerators.""";
        return +this;

    }
    @property;
    function denominator(){
        """Integers have a denominator of 1.""";
        return 1;

}
} Integral.register(int);
Integral.register(long);
