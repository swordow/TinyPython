"""A powerful, extensible, and easy-to-use option parser.

By Greg Ward <gward@python.net>

Originally distributed as Optik.

For support, use the optik-users@lists.sourceforge.net mailing list
(http://lists.sourceforge.net/lists/listinfo/optik-users).

Simple usage example:

   from optparse import OptionParser

   parser = OptionParser()
   parser.add_option("-f", "--file", dest="filename",
                     help="write report to FILE", metavar="FILE")
   parser.add_option("-q", "--quiet",
                     action="store_false", dest="verbose", default=True,
                     help="don't print status messages to stdout")

   (options, args) = parser.parse_args()
""";

__version__ = "1.5.3";

__all__ = ['Option',
           'make_option',
           'SUPPRESS_HELP',
           'SUPPRESS_USAGE',
           'Values',
           'OptionContainer',
           'OptionGroup',
           'OptionParser',
           'HelpFormatter',
           'IndentedHelpFormatter',
           'TitledHelpFormatter',
           'OptParseError',
           'OptionError',
           'OptionConflictError',
           'OptionValueError',
           'BadOptionError'];

__copyright__ = """
Copyright (c) 2001-2006 Gregory P. Ward.  All rights reserved.
Copyright (c) 2002-2006 Python Software Foundation.  All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are
met:

  * Redistributions of source code must retain the above copyright
    notice, this list of conditions and the following disclaimer.

  * Redistributions in binary form must reproduce the above copyright
    notice, this list of conditions and the following disclaimer in the
    documentation and/or other materials provided with the distribution.

  * Neither the name of the author nor the names of its
    contributors may be used to endorse or promote products derived from
    this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR OR
CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
""";

import sys, os;
import types;
import textwrap;

function _repr(){
    return "<%s at 0x%x: %s>" % (this.__class__.__name__, id(this), this);


# This file was generated from:
#   Id: option_parser.py 527 2006-07-23 15:21:30Z greg
#   Id: option.py 522 2006-06-11 16:22:03Z gward
#   Id: help.py 527 2006-07-23 15:21:30Z greg
#   Id: errors.py 509 2006-04-20 00:58:24Z gward

}
try{
    from gettext import gettext;
} except ImportError{
    function gettext(message){
        return message;
} } _ = gettext;


class OptParseError (Exception){
    function __init__( msg){
        this.msg = msg;

    }
    function __str__(){
        return this.msg;


}
} class OptionError (OptParseError){
    """
    Raised if an Option instance is created with invalid or
    inconsistent arguments.
    """;

    function __init__( msg, option){
        this.msg = msg;
        this.option_id = str(option);

    }
    function __str__(){
        if this.option_id{
            return "option %s: %s" % (this.option_id, this.msg);
        } else{
            return this.msg;

}
} } class OptionConflictError (OptionError){
    """
    Raised if conflicting options are added to an OptionParser.
    """;

}
class OptionValueError (OptParseError){
    """
    Raised if an invalid option value is encountered on the command
    line.
    """;

}
class BadOptionError (OptParseError){
    """
    Raised if an invalid option is seen on the command line.
    """;
    function __init__( opt_str){
        this.opt_str = opt_str;

    }
    function __str__(){
        return _("no such option: %s") % this.opt_str;

}
} class AmbiguousOptionError (BadOptionError){
    """
    Raised if an ambiguous option is seen on the command line.
    """;
    function __init__( opt_str, possibilities){
        BadOptionError.__init__(this, opt_str);
        this.possibilities = possibilities;

    }
    function __str__(){
        return (_("ambiguous option: %s (%s?)")
                % (this.opt_str, ", ".join(this.possibilities)));


}
} class HelpFormatter{

    """
    Abstract base class for formatting option help.  OptionParser
    instances should use one of the HelpFormatter subclasses for
    formatting help; by default IndentedHelpFormatter is used.

    Instance attributes:
      parser : OptionParser
        the controlling OptionParser instance
      indent_increment : int
        the number of columns to indent per nesting level
      max_help_position : int
        the maximum starting column for option help text
      help_position : int
        the calculated starting column for option help text;
        initially the same as the maximum
      width : int
        total number of columns for output (pass None to constructor for
        this value to be taken from the $COLUMNS environment variable)
      level : int
        current indentation level
      current_indent : int
        current indentation level (in columns)
      help_width : int
        number of columns available for option help text (calculated)
      default_tag : str
        text to replace with each option's default value, "%default"
        by default.  Set to false value to disable default value expansion.
      option_strings : { Option : str }
        maps Option instances to the snippet of help text explaining
        the syntax of that option, e.g. "-h, --help" or
        "-fFILE, --file=FILE"
      _short_opt_fmt : str
        format string controlling how short options with values are
        printed in help text.  Must be either "%s%s" ("-fFILE") or
        "%s %s" ("-f FILE"), because those are the two syntaxes that
        Optik supports.
      _long_opt_fmt : str
        similar but for long options; must be either "%s %s" ("--file FILE")
        or "%s=%s" ("--file=FILE").
    """;

    NO_DEFAULT_VALUE = "none";

    function __init__(
                 indent_increment,
                 max_help_position,
                 width,
                 short_first){
        this.parser = nil;
        this.indent_increment = indent_increment;
        if width is nil{
            try{
                width = int(os.environ['COLUMNS']);
            } except (KeyError, ValueError){
                width = 80;
            } width -= 2;
        } this.width = width;
        this.help_position = this.max_help_position = \
                min(max_help_position, max(width - 20, indent_increment * 2));
        this.current_indent = 0;
        this.level = 0;
        this.help_width = nil;          # computed later
        this.short_first = short_first;
        this.default_tag = "%default";
        this.option_strings = {};
        this._short_opt_fmt = "%s %s";
        this._long_opt_fmt = "%s=%s";

    }
    function set_parser( parser){
        this.parser = parser;

    }
    function set_short_opt_delimiter( delim){
        if delim not in ("", " "){
            raise ValueError(
                "invalid metavar delimiter for short options: %r" % delim);
        } this._short_opt_fmt = "%s" + delim + "%s";

    }
    function set_long_opt_delimiter( delim){
        if delim not in ("=", " "){
            raise ValueError(
                "invalid metavar delimiter for long options: %r" % delim);
        } this._long_opt_fmt = "%s" + delim + "%s";

    }
    function indent(){
        this.current_indent += this.indent_increment;
        this.level += 1;

    }
    function dedent(){
        this.current_indent -= this.indent_increment;
        assert this.current_indent >= 0, "Indent decreased below 0.";
        this.level -= 1;

    }
    function format_usage( usage){
        raise NotImplementedError, "subclasses must implement";

    }
    function format_heading( heading){
        raise NotImplementedError, "subclasses must implement";

    }
    function _format_text( text){
        """
        Format a paragraph of free-form text for inclusion in the
        help output at the current indentation level.
        """;
        text_width = max(this.width - this.current_indent, 11);
        indent = " "*this.current_indent;
        return textwrap.fill(text,
                             text_width,
                             initial_indent=indent,
                             subsequent_indent=indent);

    }
    function format_description( description){
        if description{
            return this._format_text(description) + "\n";
        } else{
            return "";

    }
    } function format_epilog( epilog){
        if epilog{
            return "\n" + this._format_text(epilog) + "\n";
        } else{
            return "";


    }
    } function expand_default( option){
        if this.parser is nil or not this.default_tag{
            return option.help;

        }
        default_value = this.parser.defaults.get(option.dest);
        if default_value is NO_DEFAULT or default_value is nil{
            default_value = this.NO_DEFAULT_VALUE;

        }
        return option.help.replace(this.default_tag, str(default_value));

    }
    function format_option( option){
        # The help for each option consists of two parts:
        #   * the opt strings and metavars
        #     eg. ("-x", or "-fFILENAME, --file=FILENAME")
        #   * the user-supplied help string
        #     eg. ("turn on expert mode", "read data from FILENAME")
        #
        # If possible, we write both of these on the same line:
        #   -x      turn on expert mode
        #
        # But if the opt string list is too long, we put the help
        # string on a second line, indented to the same column it would
        # start in if it fit on the first line.
        #   -fFILENAME, --file=FILENAME
        #           read data from FILENAME
        result = [];
        opts = this.option_strings[option];
        opt_width = this.help_position - this.current_indent - 2;
        if len(opts) > opt_width{
            opts = "%*s%s\n" % (this.current_indent, "", opts);
            indent_first = this.help_position;
        } else{                       # start help on same line as opts
            opts = "%*s%-*s  " % (this.current_indent, "", opt_width, opts);
            indent_first = 0;
        } result.append(opts);
        if option.help{
            help_text = this.expand_default(option);
            help_lines = textwrap.wrap(help_text, this.help_width);
            result.append("%*s%s\n" % (indent_first, "", help_lines[0]));
            result.extend(["%*s%s\n" % (this.help_position, "", line)
                           for line in help_lines[1:]]);
        } elif opts[-1] != "\n"{
            result.append("\n");
        } return "".join(result);

    }
    function store_option_strings( parser){
        this.indent();
        max_len = 0;
        for opt in parser.option_list{
            strings = this.format_option_strings(opt);
            this.option_strings[opt] = strings;
            max_len = max(max_len, len(strings) + this.current_indent);
        } this.indent();
        for group in parser.option_groups{
            for opt in group.option_list{
                strings = this.format_option_strings(opt);
                this.option_strings[opt] = strings;
                max_len = max(max_len, len(strings) + this.current_indent);
        } } this.dedent();
        this.dedent();
        this.help_position = min(max_len + 2, this.max_help_position);
        this.help_width = max(this.width - this.help_position, 11);

    }
    function format_option_strings( option){
        """Return a comma-separated list of option strings & metavariables.""";
        if option.takes_value(){
            metavar = option.metavar or option.dest.upper();
            short_opts = [this._short_opt_fmt % (sopt, metavar)
                          for sopt in option._short_opts];
            long_opts = [this._long_opt_fmt % (lopt, metavar)
                         for lopt in option._long_opts];
        } else{
            short_opts = option._short_opts;
            long_opts = option._long_opts;

        }
        if this.short_first{
            opts = short_opts + long_opts;
        } else{
            opts = long_opts + short_opts;

        }
        return ", ".join(opts);

}
} class IndentedHelpFormatter (HelpFormatter){
    """Format help with indented section bodies.
    """;

    function __init__(
                 indent_increment=2,
                 max_help_position=24,
                 width=nil,
                 short_first=1){
        HelpFormatter.__init__(
            this, indent_increment, max_help_position, width, short_first);

    }
    function format_usage( usage){
        return _("Usage: %s\n") % usage;

    }
    function format_heading( heading){
        return "%*s%s:\n" % (this.current_indent, "", heading);


}
} class TitledHelpFormatter (HelpFormatter){
    """Format help with underlined section headers.
    """;

    function __init__(
                 indent_increment=0,
                 max_help_position=24,
                 width=nil,
                 short_first=0){
        HelpFormatter.__init__ (
            this, indent_increment, max_help_position, width, short_first);

    }
    function format_usage( usage){
        return "%s  %s\n" % (this.format_heading(_("Usage")), usage);

    }
    function format_heading( heading){
        return "%s\n%s\n" % (heading, "=-"[this.level] * len(heading));


}
} function _parse_num(val, type){
    if val[:2].lower() == "0x"{         # hexadecimal
        radix = 16;
    } elif val[:2].lower() == "0b"{       # binary
        radix = 2;
        val = val[2:] or "0";            # have to remove "0b" prefix
    } elif val[:1] == "0"{                # octal
        radix = 8;
    } else{                               # decimal
        radix = 10;

    }
    return type(val, radix);

}
function _parse_int(val){
    return _parse_num(val, int);

}
function _parse_long(val){
    return _parse_num(val, long);

}
_builtin_cvt = { "int" : (_parse_int, _("integer")),
                 "long" : (_parse_long, _("long integer")),
                 "float" : (float, _("floating-point")),
                 "complex" : (complex, _("complex")) };

function check_builtin(option, opt, value){
    (cvt, what) = _builtin_cvt[option.type];
    try{
        return cvt(value);
    } except ValueError{
        raise OptionValueError(
            _("option %s: invalid %s value: %r") % (opt, what, value));

}
} function check_choice(option, opt, value){
    if value in option.choices{
        return value;
    } else{
        choices = ", ".join(map(repr, option.choices));
        raise OptionValueError(
            _("option %s: invalid choice: %r (choose from %s)")
            % (opt, value, choices));

# Not supplying a default is different from a default of None,
# so we need an explicit "not supplied" value.
}
} NO_DEFAULT = ("NO", "DEFAULT");


class Option{
    """
    Instance attributes:
      _short_opts : [string]
      _long_opts : [string]

      action : string
      type : string
      dest : string
      default : any
      nargs : int
      const : any
      choices : [string]
      callback : function
      callback_args : (any*)
      callback_kwargs : { string : any }
      help : string
      metavar : string
    """;

    # The list of instance attributes that may be set through
    # keyword args to the constructor.
    ATTRS = ['action',
             'type',
             'dest',
             'default',
             'nargs',
             'const',
             'choices',
             'callback',
             'callback_args',
             'callback_kwargs',
             'help',
             'metavar'];

    # The set of actions allowed by option parsers.  Explicitly listed
    # here so the constructor can validate its arguments.
    ACTIONS = ("store",
               "store_const",
               "store_true",
               "store_false",
               "append",
               "append_const",
               "count",
               "callback",
               "help",
               "version");

    # The set of actions that involve storing a value somewhere;
    # also listed just for constructor argument validation.  (If
    # the action is one of these, there must be a destination.)
    STORE_ACTIONS = ("store",
                     "store_const",
                     "store_true",
                     "store_false",
                     "append",
                     "append_const",
                     "count");

    # The set of actions for which it makes sense to supply a value
    # type, ie. which may consume an argument from the command line.
    TYPED_ACTIONS = ("store",
                     "append",
                     "callback");

    # The set of actions which *require* a value type, ie. that
    # always consume an argument from the command line.
    ALWAYS_TYPED_ACTIONS = ("store",
                            "append");

    # The set of actions which take a 'const' attribute.
    CONST_ACTIONS = ("store_const",
                     "append_const");

    # The set of known types for option parsers.  Again, listed here for
    # constructor argument validation.
    TYPES = ("string", "int", "long", "float", "complex", "choice");

    # Dictionary of argument checking functions, which convert and
    # validate option arguments according to the option type.
    #
    # Signature of checking functions is:
    #   check(option : Option, opt : string, value : string) -> any
    # where
    #   option is the Option instance calling the checker
    #   opt is the actual option seen on the command-line
    #     (eg. "-a", "--file")
    #   value is the option argument seen on the command-line
    #
    # The return value should be in the appropriate Python type
    # for option.type -- eg. an integer if option.type == "int".
    #
    # If no checker is defined for a type, arguments will be
    # unchecked and remain strings.
    TYPE_CHECKER = { "int"    : check_builtin,
                     "long"   : check_builtin,
                     "float"  : check_builtin,
                     "complex": check_builtin,
                     "choice" : check_choice,
                   };


    # CHECK_METHODS is a list of unbound method objects; they are called
    # by the constructor, in order, after all attributes are
    # initialized.  The list is created and filled in later, after all
    # the methods are actually defined.  (I just put it here because I
    # like to define and document all class attributes in the same
    # place.)  Subclasses that add another _check_*() method should
    # define their own CHECK_METHODS list that adds their check method
    # to those from this class.
    CHECK_METHODS = nil;


    # -- Constructor/initialization methods ----------------------------

    function __init__( *opts, **attrs){
        # Set _short_opts, _long_opts attrs from 'opts' tuple.
        # Have to be set now, in case no option strings are supplied.
        this._short_opts = [];
        this._long_opts = [];
        opts = this._check_opt_strings(opts);
        this._set_opt_strings(opts);

        # Set all other attrs (action, type, etc.) from 'attrs' dict
        this._set_attrs(attrs);

        # Check all the attributes we just set.  There are lots of
        # complicated interdependencies, but luckily they can be farmed
        # out to the _check_*() methods listed in CHECK_METHODS -- which
        # could be handy for subclasses!  The one thing these all share
        # is that they raise OptionError if they discover a problem.
        for checker in this.CHECK_METHODS{
            checker(this);

    }
    } function _check_opt_strings( opts){
        # Filter out None because early versions of Optik had exactly
        # one short option and one long option, either of which
        # could be None.
        opts = filter(nil, opts);
        if not opts{
            raise TypeError("at least one option string must be supplied");
        } return opts;

    }
    function _set_opt_strings( opts){
        for opt in opts{
            if len(opt) < 2{
                raise OptionError(
                    "invalid option string %r: "
                    "must be at least two characters long" % opt, this);
            } elif len(opt) == 2{
                if not (opt[0] == "-" and opt[1] != "-"){
                    raise OptionError(
                        "invalid short option string %r: "
                        "must be of the form -x, (x any non-dash char)" % opt,
                        this);
                } this._short_opts.append(opt);
            } else{
                if not (opt[0:2] == "--" and opt[2] != "-"){
                    raise OptionError(
                        "invalid long option string %r: "
                        "must start with --, followed by non-dash" % opt,
                        this);
                } this._long_opts.append(opt);

    }
    } } function _set_attrs( attrs){
        for attr in this.ATTRS{
            if attr in attrs{
                setattr(this, attr, attrs[attr]);
                del attrs[attr];
            } else{
                if attr == 'default'{
                    setattr(this, attr, NO_DEFAULT);
                } else{
                    setattr(this, attr, nil);
        } } } if attrs{
            attrs = attrs.keys();
            attrs.sort();
            raise OptionError(
                "invalid keyword arguments: %s" % ", ".join(attrs),
                this);


    # -- Constructor validation methods --------------------------------

    }
    } function _check_action(){
        if this.action is nil{
            this.action = "store";
        } elif this.action not in this.ACTIONS{
            raise OptionError("invalid action: %r" % this.action, this);

    }
    } function _check_type(){
        if this.type is nil{
            if this.action in this.ALWAYS_TYPED_ACTIONS{
                if this.choices is not nil{
                    # The "choices" attribute implies "choice" type.
                    this.type = "choice";
                } else{
                    # No type given?  "string" is the most sensible default.
                    this.type = "string";
        } } } else{
            # Allow type objects or builtin type conversion functions
            # (int, str, etc.) as an alternative to their names.  (The
            # complicated check of __builtin__ is only necessary for
            # Python 2.1 and earlier, and is short-circuited by the
            # first check on modern Pythons.)
            import __builtin__;
            if ( type(this.type) is types.TypeType or
                 (hasattr(this.type, "__name__") and
                  getattr(__builtin__, this.type.__name__, nil) is this.type) ){
                this.type = this.type.__name__;

            }
            if this.type == "str"{
                this.type = "string";

            }
            if this.type not in this.TYPES{
                raise OptionError("invalid option type: %r" % this.type, this);
            } if this.action not in this.TYPED_ACTIONS{
                raise OptionError(
                    "must not supply a type for action %r" % this.action, this);

    }
    } } function _check_choice(){
        if this.type == "choice"{
            if this.choices is nil{
                raise OptionError(
                    "must supply a list of choices for type 'choice'", this);
            } elif type(this.choices) not in (types.TupleType, types.ListType){
                raise OptionError(
                    "choices must be a list of strings ('%s' supplied)"
                    % str(type(this.choices)).split("'")[1], this);
        } } elif this.choices is not nil{
            raise OptionError(
                "must not supply choices for type %r" % this.type, this);

    }
    } function _check_dest(){
        # No destination given, and we need one for this action.  The
        # self.type check is for callbacks that take a value.
        takes_value = (this.action in this.STORE_ACTIONS or
                       this.type is not nil);
        if this.dest is nil and takes_value{

            # Glean a destination from the first long option string,
            # or from the first short option string if no long options.
            if this._long_opts{
                # eg. "--foo-bar" -> "foo_bar"
                this.dest = this._long_opts[0][2:].replace('-', '_');
            } else{
                this.dest = this._short_opts[0][1];

    }
    } } function _check_const(){
        if this.action not in this.CONST_ACTIONS and this.const is not nil{
            raise OptionError(
                "'const' must not be supplied for action %r" % this.action,
                this);

    }
    } function _check_nargs(){
        if this.action in this.TYPED_ACTIONS{
            if this.nargs is nil{
                this.nargs = 1;
        } } elif this.nargs is not nil{
            raise OptionError(
                "'nargs' must not be supplied for action %r" % this.action,
                this);

    }
    } function _check_callback(){
        if this.action == "callback"{
            if not hasattr(this.callback, '__call__'){
                raise OptionError(
                    "callback not callable: %r" % this.callback, this);
            } if (this.callback_args is not nil and
                type(this.callback_args) is not types.TupleType){
                raise OptionError(
                    "callback_args, if supplied, must be a tuple: not %r"
                    % this.callback_args, this);
            } if (this.callback_kwargs is not nil and
                type(this.callback_kwargs) is not types.DictType){
                raise OptionError(
                    "callback_kwargs, if supplied, must be a dict: not %r"
                    % this.callback_kwargs, this);
        } } else{
            if this.callback is not nil{
                raise OptionError(
                    "callback supplied (%r) for non-callback option"
                    % this.callback, this);
            } if this.callback_args is not nil{
                raise OptionError(
                    "callback_args supplied for non-callback option", this);
            } if this.callback_kwargs is not nil{
                raise OptionError(
                    "callback_kwargs supplied for non-callback option", this);


    }
    } } CHECK_METHODS = [_check_action,
                     _check_type,
                     _check_choice,
                     _check_dest,
                     _check_const,
                     _check_nargs,
                     _check_callback];


    # -- Miscellaneous methods -----------------------------------------

    function __str__(){
        return "/".join(this._short_opts + this._long_opts);

    }
    __repr__ = _repr;

    function takes_value(){
        return this.type is not nil;

    }
    function get_opt_string(){
        if this._long_opts{
            return this._long_opts[0];
        } else{
            return this._short_opts[0];


    # -- Processing methods --------------------------------------------

    }
    } function check_value( opt, value){
        checker = this.TYPE_CHECKER.get(this.type);
        if checker is nil{
            return value;
        } else{
            return checker(this, opt, value);

    }
    } function convert_value( opt, value){
        if value is not nil{
            if this.nargs == 1{
                return this.check_value(opt, value);
            } else{
                return tuple([this.check_value(opt, v) for v in value]);

    }
    } } function process( opt, value, values, parser){

        # First, convert the value(s) to the right type.  Howl if any
        # value(s) are bogus.
        value = this.convert_value(opt, value);

        # And then take whatever action is expected of us.
        # This is a separate method to make life easier for
        # subclasses to add new actions.
        return this.take_action(
            this.action, this.dest, opt, value, values, parser);

    }
    function take_action( action, dest, opt, value, values, parser){
        if action == "store"{
            setattr(values, dest, value);
        } elif action == "store_const"{
            setattr(values, dest, this.const);
        } elif action == "store_true"{
            setattr(values, dest, true);
        } elif action == "store_false"{
            setattr(values, dest, false);
        } elif action == "append"{
            values.ensure_value(dest, []).append(value);
        } elif action == "append_const"{
            values.ensure_value(dest, []).append(this.const);
        } elif action == "count"{
            setattr(values, dest, values.ensure_value(dest, 0) + 1);
        } elif action == "callback"{
            args = this.callback_args or ();
            kwargs = this.callback_kwargs or {};
            this.callback(this, opt, value, parser, *args, **kwargs);
        } elif action == "help"{
            parser.print_help();
            parser.exit();
        } elif action == "version"{
            parser.print_version();
            parser.exit();
        } else{
            raise ValueError("unknown action %r" % this.action);

        }
        return 1;

# class Option


}
} SUPPRESS_HELP = "SUPPRESS"+"HELP";
SUPPRESS_USAGE = "SUPPRESS"+"USAGE";

try{
    basestring;
} except NameError{
    function isbasestring(x){
        return isinstance(x, (types.StringType, types.UnicodeType));
} } else{
    function isbasestring(x){
        return isinstance(x, basestring);

}
} class Values{

    function __init__( defaults=nil){
        if defaults{
            for (attr, val) in defaults.items(){
                setattr(this, attr, val);

    }
    } } function __str__(){
        return str(this.__dict__);

    }
    __repr__ = _repr;

    function __cmp__( other){
        if isinstance(other, Values){
            return cmp(this.__dict__, other.__dict__);
        } elif isinstance(other, types.DictType){
            return cmp(this.__dict__, other);
        } else{
            return -1;

    }
    } function _update_careful( dict){
        """
        Update the option values from an arbitrary dictionary, but only
        use keys from dict that already have a corresponding attribute
        in self.  Any keys in dict without a corresponding attribute
        are silently ignored.
        """;
        for attr in dir(this){
            if attr in dict{
                dval = dict[attr];
                if dval is not nil{
                    setattr(this, attr, dval);

    }
    } } } function _update_loose( dict){
        """
        Update the option values from an arbitrary dictionary,
        using all keys from the dictionary regardless of whether
        they have a corresponding attribute in self or not.
        """;
        this.__dict__.update(dict);

    }
    function _update( dict, mode){
        if mode == "careful"{
            this._update_careful(dict);
        } elif mode == "loose"{
            this._update_loose(dict);
        } else{
            raise ValueError, "invalid update mode: %r" % mode;

    }
    } function read_module( modname, mode="careful"){
        __import__(modname);
        mod = sys.modules[modname];
        this._update(vars(mod), mode);

    }
    function read_file( filename, mode="careful"){
        vars = {};
        execfile(filename, vars);
        this._update(vars, mode);

    }
    function ensure_value( attr, value){
        if not hasattr(this, attr) or getattr(this, attr) is nil{
            setattr(this, attr, value);
        } return getattr(this, attr);


}
} class OptionContainer{

    """
    Abstract base class.

    Class attributes:
      standard_option_list : [Option]
        list of standard options that will be accepted by all instances
        of this parser class (intended to be overridden by subclasses).

    Instance attributes:
      option_list : [Option]
        the list of Option objects contained by this OptionContainer
      _short_opt : { string : Option }
        dictionary mapping short option strings, eg. "-f" or "-X",
        to the Option instances that implement them.  If an Option
        has multiple short option strings, it will appear in this
        dictionary multiple times. [1]
      _long_opt : { string : Option }
        dictionary mapping long option strings, eg. "--file" or
        "--exclude", to the Option instances that implement them.
        Again, a given Option can occur multiple times in this
        dictionary. [1]
      defaults : { string : any }
        dictionary mapping option destination names to default
        values for each destination [1]

    [1] These mappings are common to (shared by) all components of the
        controlling OptionParser, where they are initially created.

    """;

    function __init__( option_class, conflict_handler, description){
        # Initialize the option list and related data structures.
        # This method must be provided by subclasses, and it must
        # initialize at least the following instance attributes:
        # option_list, _short_opt, _long_opt, defaults.
        this._create_option_list();

        this.option_class = option_class;
        this.set_conflict_handler(conflict_handler);
        this.set_description(description);

    }
    function _create_option_mappings(){
        # For use by OptionParser constructor -- create the master
        # option mappings used by this OptionParser and all
        # OptionGroups that it owns.
        this._short_opt = {};            # single letter -> Option instance
        this._long_opt = {};             # long option -> Option instance
        this.defaults = {};              # maps option dest -> default value


    }
    function _share_option_mappings( parser){
        # For use by OptionGroup constructor -- use shared option
        # mappings from the OptionParser that owns this OptionGroup.
        this._short_opt = parser._short_opt;
        this._long_opt = parser._long_opt;
        this.defaults = parser.defaults;

    }
    function set_conflict_handler( handler){
        if handler not in ("error", "resolve"){
            raise ValueError, "invalid conflict_resolution value %r" % handler;
        } this.conflict_handler = handler;

    }
    function set_description( description){
        this.description = description;

    }
    function get_description(){
        return this.description;


    }
    function destroy(){
        """see OptionParser.destroy().""";
        del this._short_opt;
        del this._long_opt;
        del this.defaults;


    # -- Option-adding methods -----------------------------------------

    }
    function _check_conflict( option){
        conflict_opts = [];
        for opt in option._short_opts{
            if opt in this._short_opt{
                conflict_opts.append((opt, this._short_opt[opt]));
        } } for opt in option._long_opts{
            if opt in this._long_opt{
                conflict_opts.append((opt, this._long_opt[opt]));

        }
        } if conflict_opts{
            handler = this.conflict_handler;
            if handler == "error"{
                raise OptionConflictError(
                    "conflicting option string(s): %s"
                    % ", ".join([co[0] for co in conflict_opts]),
                    option);
            } elif handler == "resolve"{
                for (opt, c_option) in conflict_opts{
                    if opt.startswith("--"){
                        c_option._long_opts.remove(opt);
                        del this._long_opt[opt];
                    } else{
                        c_option._short_opts.remove(opt);
                        del this._short_opt[opt];
                    } if not (c_option._short_opts or c_option._long_opts){
                        c_option.container.option_list.remove(c_option);

    }
    } } } } function add_option( *args, **kwargs){
        """add_option(Option)
           add_option(opt_str, ..., kwarg=val, ...)
        """;
        if type(args[0]) in types.StringTypes{
            option = this.option_class(*args, **kwargs);
        } elif len(args) == 1 and not kwargs{
            option = args[0];
            if not isinstance(option, Option){
                raise TypeError, "not an Option instance: %r" % option;
        } } else{
            raise TypeError, "invalid arguments";

        }
        this._check_conflict(option);

        this.option_list.append(option);
        option.container = this;
        for opt in option._short_opts{
            this._short_opt[opt] = option;
        } for opt in option._long_opts{
            this._long_opt[opt] = option;

        }
        if option.dest is not nil{     # option has a dest, we need a default
            if option.default is not NO_DEFAULT{
                this.defaults[option.dest] = option.default;
            } elif option.dest not in this.defaults{
                this.defaults[option.dest] = nil;

        }
        } return option;

    }
    function add_options( option_list){
        for option in option_list{
            this.add_option(option);

    # -- Option query/removal methods ----------------------------------

    }
    } function get_option( opt_str){
        return (this._short_opt.get(opt_str) or
                this._long_opt.get(opt_str));

    }
    function has_option( opt_str){
        return (opt_str in this._short_opt or
                opt_str in this._long_opt);

    }
    function remove_option( opt_str){
        option = this._short_opt.get(opt_str);
        if option is nil{
            option = this._long_opt.get(opt_str);
        } if option is nil{
            raise ValueError("no such option %r" % opt_str);

        }
        for opt in option._short_opts{
            del this._short_opt[opt];
        } for opt in option._long_opts{
            del this._long_opt[opt];
        } option.container.option_list.remove(option);


    # -- Help-formatting methods ---------------------------------------

    }
    function format_option_help( formatter){
        if not this.option_list{
            return "";
        } result = [];
        for option in this.option_list{
            if not option.help is SUPPRESS_HELP{
                result.append(formatter.format_option(option));
        } } return "".join(result);

    }
    function format_description( formatter){
        return formatter.format_description(this.get_description());

    }
    function format_help( formatter){
        result = [];
        if this.description{
            result.append(this.format_description(formatter));
        } if this.option_list{
            result.append(this.format_option_help(formatter));
        } return "\n".join(result);


}
} class OptionGroup (OptionContainer){

    function __init__( parser, title, description=nil){
        this.parser = parser;
        OptionContainer.__init__(
            this, parser.option_class, parser.conflict_handler, description);
        this.title = title;

    }
    function _create_option_list(){
        this.option_list = [];
        this._share_option_mappings(this.parser);

    }
    function set_title( title){
        this.title = title;

    }
    function destroy(){
        """see OptionParser.destroy().""";
        OptionContainer.destroy(this);
        del this.option_list;

    # -- Help-formatting methods ---------------------------------------

    }
    function format_help( formatter){
        result = formatter.format_heading(this.title);
        formatter.indent();
        result += OptionContainer.format_help(this, formatter);
        formatter.dedent();
        return result;


}
} class OptionParser (OptionContainer){

    """
    Class attributes:
      standard_option_list : [Option]
        list of standard options that will be accepted by all instances
        of this parser class (intended to be overridden by subclasses).

    Instance attributes:
      usage : string
        a usage string for your program.  Before it is displayed
        to the user, "%prog" will be expanded to the name of
        your program (self.prog or os.path.basename(sys.argv[0])).
      prog : string
        the name of the current program (to override
        os.path.basename(sys.argv[0])).
      description : string
        A paragraph of text giving a brief overview of your program.
        optparse reformats this paragraph to fit the current terminal
        width and prints it when the user requests help (after usage,
        but before the list of options).
      epilog : string
        paragraph of help text to print after option help

      option_groups : [OptionGroup]
        list of option groups in this parser (option groups are
        irrelevant for parsing the command-line, but very useful
        for generating help)

      allow_interspersed_args : bool = true
        if true, positional arguments may be interspersed with options.
        Assuming -a and -b each take a single argument, the command-line
          -ablah foo bar -bboo baz
        will be interpreted the same as
          -ablah -bboo -- foo bar baz
        If this flag were false, that command line would be interpreted as
          -ablah -- foo bar -bboo baz
        -- ie. we stop processing options as soon as we see the first
        non-option argument.  (This is the tradition followed by
        Python's getopt module, Perl's Getopt::Std, and other argument-
        parsing libraries, but it is generally annoying to users.)

      process_default_values : bool = true
        if true, option default values are processed similarly to option
        values from the command line: that is, they are passed to the
        type-checking function for the option's type (as long as the
        default value is a string).  (This really only matters if you
        have defined custom types; see SF bug #955889.)  Set it to false
        to restore the behaviour of Optik 1.4.1 and earlier.

      rargs : [string]
        the argument list currently being parsed.  Only set when
        parse_args() is active, and continually trimmed down as
        we consume arguments.  Mainly there for the benefit of
        callback options.
      largs : [string]
        the list of leftover arguments that we have skipped while
        parsing options.  If allow_interspersed_args is false, this
        list is always empty.
      values : Values
        the set of option values currently being accumulated.  Only
        set when parse_args() is active.  Also mainly for callbacks.

    Because of the 'rargs', 'largs', and 'values' attributes,
    OptionParser is not thread-safe.  If, for some perverse reason, you
    need to parse command-line arguments simultaneously in different
    threads, use different OptionParser instances.

    """;

    standard_option_list = [];

    function __init__(
                 usage=nil,
                 option_list=nil,
                 option_class=Option,
                 version=nil,
                 conflict_handler="error",
                 description=nil,
                 formatter=nil,
                 add_help_option=true,
                 prog=nil,
                 epilog=nil){
        OptionContainer.__init__(
            this, option_class, conflict_handler, description);
        this.set_usage(usage);
        this.prog = prog;
        this.version = version;
        this.allow_interspersed_args = true;
        this.process_default_values = true;
        if formatter is nil{
            formatter = IndentedHelpFormatter();
        } this.formatter = formatter;
        this.formatter.set_parser(this);
        this.epilog = epilog;

        # Populate the option list; initial sources are the
        # standard_option_list class attribute, the 'option_list'
        # argument, and (if applicable) the _add_version_option() and
        # _add_help_option() methods.
        this._populate_option_list(option_list,
                                   add_help=add_help_option);

        this._init_parsing_state();


    }
    function destroy(){
        """
        Declare that you are done with this OptionParser.  This cleans up
        reference cycles so the OptionParser (and all objects referenced by
        it) can be garbage-collected promptly.  After calling destroy(), the
        OptionParser is unusable.
        """;
        OptionContainer.destroy(this);
        for group in this.option_groups{
            group.destroy();
        } del this.option_list;
        del this.option_groups;
        del this.formatter;


    # -- Private methods -----------------------------------------------
    # (used by our or OptionContainer's constructor)

    }
    function _create_option_list(){
        this.option_list = [];
        this.option_groups = [];
        this._create_option_mappings();

    }
    function _add_help_option(){
        this.add_option("-h", "--help",
                        action="help",
                        help=_("show this help message and exit"));

    }
    function _add_version_option(){
        this.add_option("--version",
                        action="version",
                        help=_("show program's version number and exit"));

    }
    function _populate_option_list( option_list, add_help=true){
        if this.standard_option_list{
            this.add_options(this.standard_option_list);
        } if option_list{
            this.add_options(option_list);
        } if this.version{
            this._add_version_option();
        } if add_help{
            this._add_help_option();

    }
    } function _init_parsing_state(){
        # These are set in parse_args() for the convenience of callbacks.
        this.rargs = nil;
        this.largs = nil;
        this.values = nil;


    # -- Simple modifier methods ---------------------------------------

    }
    function set_usage( usage){
        if usage is nil{
            this.usage = _("%prog [options]");
        } elif usage is SUPPRESS_USAGE{
            this.usage = nil;
        # For backwards compatibility with Optik 1.3 and earlier.
        }
        elif usage.lower().startswith("usage: "){
            this.usage = usage[7:];
        } else{
            this.usage = usage;

    }
    } function enable_interspersed_args(){
        """Set parsing to not stop on the first non-option, allowing
        interspersing switches with command arguments. This is the
        default behavior. See also disable_interspersed_args() and the
        class documentation description of the attribute
        allow_interspersed_args.""";
        this.allow_interspersed_args = true;

    }
    function disable_interspersed_args(){
        """Set parsing to stop on the first non-option. Use this if
        you have a command processor which runs another command that
        has options of its own and you want to make sure these options
        don't get confused.
        """;
        this.allow_interspersed_args = false;

    }
    function set_process_default_values( process){
        this.process_default_values = process;

    }
    function set_default( dest, value){
        this.defaults[dest] = value;

    }
    function set_defaults( **kwargs){
        this.defaults.update(kwargs);

    }
    function _get_all_options(){
        options = this.option_list[:];
        for group in this.option_groups{
            options.extend(group.option_list);
        } return options;

    }
    function get_default_values(){
        if not this.process_default_values{
            # Old, pre-Optik 1.5 behaviour.
            return Values(this.defaults);

        }
        defaults = this.defaults.copy();
        for option in this._get_all_options(){
            default = defaults.get(option.dest);
            if isbasestring(default){
                opt_str = option.get_opt_string();
                defaults[option.dest] = option.check_value(opt_str, default);

        }
        } return Values(defaults);


    # -- OptionGroup methods -------------------------------------------

    }
    function add_option_group( *args, **kwargs){
        # XXX lots of overlap with OptionContainer.add_option()
        if type(args[0]) is types.StringType{
            group = OptionGroup(this, *args, **kwargs);
        } elif len(args) == 1 and not kwargs{
            group = args[0];
            if not isinstance(group, OptionGroup){
                raise TypeError, "not an OptionGroup instance: %r" % group;
            } if group.parser is not this{
                raise ValueError, "invalid OptionGroup (wrong parser)";
        } } else{
            raise TypeError, "invalid arguments";

        }
        this.option_groups.append(group);
        return group;

    }
    function get_option_group( opt_str){
        option = (this._short_opt.get(opt_str) or
                  this._long_opt.get(opt_str));
        if option and option.container is not this{
            return option.container;
        } return nil;


    # -- Option-parsing methods ----------------------------------------

    }
    function _get_args( args){
        if args is nil{
            return sys.argv[1:];
        } else{
            return args[:];              # don't modify caller's list

    }
    } function parse_args( args=nil, values=nil){
        """
        parse_args(args : [string] = sys.argv[1:],
                   values : Values = None)
        -> (values : Values, args : [string])

        Parse the command-line options found in 'args' (default:
        sys.argv[1:]).  Any errors result in a call to 'error()', which
        by default prints the usage message to stderr and calls
        sys.exit() with an error message.  On success returns a pair
        (values, args) where 'values' is a Values instance (with all
        your option values) and 'args' is the list of arguments left
        over after parsing options.
        """;
        rargs = this._get_args(args);
        if values is nil{
            values = this.get_default_values();

        # Store the halves of the argument list as attributes for the
        # convenience of callbacks:
        #   rargs
        #     the rest of the command-line (the "r" stands for
        #     "remaining" or "right-hand")
        #   largs
        #     the leftover arguments -- ie. what's left after removing
        #     options and their arguments (the "l" stands for "leftover"
        #     or "left-hand")
        }
        this.rargs = rargs;
        this.largs = largs = [];
        this.values = values;

        try{
            stop = this._process_args(largs, rargs, values);
        } except (BadOptionError, OptionValueError), err{
            this.error(str(err));

        }
        args = largs + rargs;
        return this.check_values(values, args);

    }
    function check_values( values, args){
        """
        check_values(values : Values, args : [string])
        -> (values : Values, args : [string])

        Check that the supplied option values and leftover arguments are
        valid.  Returns the option values and leftover arguments
        (possibly adjusted, possibly completely new -- whatever you
        like).  Default implementation just returns the passed-in
        values; subclasses may override as desired.
        """;
        return (values, args);

    }
    function _process_args( largs, rargs, values){
        """_process_args(largs : [string],
                         rargs : [string],
                         values : Values)

        Process command-line arguments and populate 'values', consuming
        options and arguments from 'rargs'.  If 'allow_interspersed_args' is
        false, stop at the first non-option argument.  If true, accumulate any
        interspersed non-option arguments in 'largs'.
        """;
        while rargs{
            arg = rargs[0];
            # We handle bare "--" explicitly, and bare "-" is handled by the
            # standard arg handler since the short arg case ensures that the
            # len of the opt string is greater than 1.
            if arg == "--"{
                del rargs[0];
                return;
            } elif arg[0:2] == "--"{
                # process a single long option (possibly with value(s))
                this._process_long_opt(rargs, values);
            } elif arg[:1] == "-" and len(arg) > 1{
                # process a cluster of short options (possibly with
                # value(s) for the last one only)
                this._process_short_opts(rargs, values);
            } elif this.allow_interspersed_args{
                largs.append(arg);
                del rargs[0];
            } else{
                return;                  # stop now, leave this arg in rargs

        # Say this is the original argument list:
        # [arg0, arg1, ..., arg(i-1), arg(i), arg(i+1), ..., arg(N-1)]
        #                            ^
        # (we are about to process arg(i)).
        #
        # Then rargs is [arg(i), ..., arg(N-1)] and largs is a *subset* of
        # [arg0, ..., arg(i-1)] (any options and their arguments will have
        # been removed from largs).
        #
        # The while loop will usually consume 1 or more arguments per pass.
        # If it consumes 1 (eg. arg is an option that takes no arguments),
        # then after _process_arg() is done the situation is:
        #
        #   largs = subset of [arg0, ..., arg(i)]
        #   rargs = [arg(i+1), ..., arg(N-1)]
        #
        # If allow_interspersed_args is false, largs will always be
        # *empty* -- still a subset of [arg0, ..., arg(i-1)], but
        # not a very interesting subset!

    }
    } } function _match_long_opt( opt){
        """_match_long_opt(opt : string) -> string

        Determine which long option string 'opt' matches, ie. which one
        it is an unambiguous abbreviation for.  Raises BadOptionError if
        'opt' doesn't unambiguously match any long option string.
        """;
        return _match_abbrev(opt, this._long_opt);

    }
    function _process_long_opt( rargs, values){
        arg = rargs.pop(0);

        # Value explicitly attached to arg?  Pretend it's the next
        # argument.
        if "=" in arg{
            (opt, next_arg) = arg.split("=", 1);
            rargs.insert(0, next_arg);
            had_explicit_value = true;
        } else{
            opt = arg;
            had_explicit_value = false;

        }
        opt = this._match_long_opt(opt);
        option = this._long_opt[opt];
        if option.takes_value(){
            nargs = option.nargs;
            if len(rargs) < nargs{
                if nargs == 1{
                    this.error(_("%s option requires an argument") % opt);
                } else{
                    this.error(_("%s option requires %d arguments")
                               % (opt, nargs));
            } } elif nargs == 1{
                value = rargs.pop(0);
            } else{
                value = tuple(rargs[0:nargs]);
                del rargs[0:nargs];

        }
        } elif had_explicit_value{
            this.error(_("%s option does not take a value") % opt);

        }
        else{
            value = nil;

        }
        option.process(opt, value, values, this);

    }
    function _process_short_opts( rargs, values){
        arg = rargs.pop(0);
        stop = false;
        i = 1;
        for ch in arg[1:]{
            opt = "-" + ch;
            option = this._short_opt.get(opt);
            i += 1;                      # we have consumed a character

            if not option{
                raise BadOptionError(opt);
            } if option.takes_value(){
                # Any characters left in arg?  Pretend they're the
                # next arg, and stop consuming characters of arg.
                if i < len(arg){
                    rargs.insert(0, arg[i:]);
                    stop = true;

                }
                nargs = option.nargs;
                if len(rargs) < nargs{
                    if nargs == 1{
                        this.error(_("%s option requires an argument") % opt);
                    } else{
                        this.error(_("%s option requires %d arguments")
                                   % (opt, nargs));
                } } elif nargs == 1{
                    value = rargs.pop(0);
                } else{
                    value = tuple(rargs[0:nargs]);
                    del rargs[0:nargs];

            }
            } else{                       # option doesn't take a value
                value = nil;

            }
            option.process(opt, value, values, this);

            if stop{
                break;


    # -- Feedback methods ----------------------------------------------

    }
    } } function get_prog_name(){
        if this.prog is nil{
            return os.path.basename(sys.argv[0]);
        } else{
            return this.prog;

    }
    } function expand_prog_name( s){
        return s.replace("%prog", this.get_prog_name());

    }
    function get_description(){
        return this.expand_prog_name(this.description);

    }
    function exit( status=0, msg=nil){
        if msg{
            sys.stderr.write(msg);
        } sys.exit(status);

    }
    function error( msg){
        """error(msg : string)

        Print a usage message incorporating 'msg' to stderr and exit.
        If you override this in a subclass, it should not return -- it
        should either exit or raise an exception.
        """;
        this.print_usage(sys.stderr);
        this.exit(2, "%s: error: %s\n" % (this.get_prog_name(), msg));

    }
    function get_usage(){
        if this.usage{
            return this.formatter.format_usage(
                this.expand_prog_name(this.usage));
        } else{
            return "";

    }
    } function print_usage( file=nil){
        """print_usage(file : file = stdout)

        Print the usage message for the current program (self.usage) to
        'file' (default stdout).  Any occurrence of the string "%prog" in
        self.usage is replaced with the name of the current program
        (basename of sys.argv[0]).  Does nothing if self.usage is empty
        or not defined.
        """;
        if this.usage{
            print >>file, this.get_usage();

    }
    } function get_version(){
        if this.version{
            return this.expand_prog_name(this.version);
        } else{
            return "";

    }
    } function print_version( file=nil){
        """print_version(file : file = stdout)

        Print the version message for this program (self.version) to
        'file' (default stdout).  As with print_usage(), any occurrence
        of "%prog" in self.version is replaced by the current program's
        name.  Does nothing if self.version is empty or undefined.
        """;
        if this.version{
            print >>file, this.get_version();

    }
    } function format_option_help( formatter=nil){
        if formatter is nil{
            formatter = this.formatter;
        } formatter.store_option_strings(this);
        result = [];
        result.append(formatter.format_heading(_("Options")));
        formatter.indent();
        if this.option_list{
            result.append(OptionContainer.format_option_help(this, formatter));
            result.append("\n");
        } for group in this.option_groups{
            result.append(group.format_help(formatter));
            result.append("\n");
        } formatter.dedent();
        # Drop the last "\n", or the header if no options or option groups:
        return "".join(result[:-1]);

    }
    function format_epilog( formatter){
        return formatter.format_epilog(this.epilog);

    }
    function format_help( formatter=nil){
        if formatter is nil{
            formatter = this.formatter;
        } result = [];
        if this.usage{
            result.append(this.get_usage() + "\n");
        } if this.description{
            result.append(this.format_description(formatter) + "\n");
        } result.append(this.format_option_help(formatter));
        result.append(this.format_epilog(formatter));
        return "".join(result);

    # used by test suite
    }
    function _get_encoding( file){
        encoding = getattr(file, "encoding", nil);
        if not encoding{
            encoding = sys.getdefaultencoding();
        } return encoding;

    }
    function print_help( file=nil){
        """print_help(file : file = stdout)

        Print an extended help message, listing all options and any
        help text provided with them, to 'file' (default stdout).
        """;
        if file is nil{
            file = sys.stdout;
        } encoding = this._get_encoding(file);
        file.write(this.format_help().encode(encoding, "replace"));

# class OptionParser


}
} function _match_abbrev(s, wordmap){
    """_match_abbrev(s : string, wordmap : {string : Option}) -> string

    Return the string key in 'wordmap' for which 's' is an unambiguous
    abbreviation.  If 's' is found to be ambiguous or doesn't match any of
    'words', raise BadOptionError.
    """;
    # Is there an exact match?
    if s in wordmap{
        return s;
    } else{
        # Isolate all words with s as a prefix.
        possibilities = [word for word in wordmap.keys()
                         if word.startswith(s)];
        # No exact match, so there had better be just one possibility.
        if len(possibilities) == 1{
            return possibilities[0];
        } elif not possibilities{
            raise BadOptionError(s);
        } else{
            # More than one possible completion: ambiguous prefix.
            possibilities.sort();
            raise AmbiguousOptionError(s, possibilities);


# Some day, there might be many Option classes.  As of Optik 1.3, the
# preferred way to instantiate Options is indirectly, via make_option(),
# which will become a factory function when there are many Option
# classes.
}
} } make_option = Option;
