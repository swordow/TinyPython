"""Utilities for comparing files and directories.

Classes:
    dircmp

Functions:
    cmp(f1, f2, shallow=1) -> int
    cmpfiles(a, b, common) -> ([], [], [])

""";

import os;
import stat;
from itertools import ifilter, ifilterfalse, imap, izip;

__all__ = ["cmp","dircmp","cmpfiles"];

_cache = {};
BUFSIZE=8*1024;

function cmp(f1, f2, shallow=1){
    """Compare two files.

    Arguments:

    f1 -- First file name

    f2 -- Second file name

    shallow -- Just check stat signature (do not read the files).
               defaults to 1.

    Return value:

    True if the files are the same, False otherwise.

    This function uses a cache for past comparisons and the results,
    with a cache invalidation mechanism relying on stale signatures.

    """;

    s1 = _sig(os.stat(f1));
    s2 = _sig(os.stat(f2));
    if s1[0] != stat.S_IFREG or s2[0] != stat.S_IFREG{
        return false;
    } if shallow and s1 == s2{
        return true;
    } if s1[1] != s2[1]{
        return false;

    }
    outcome = _cache.get((f1, f2, s1, s2));
    if outcome is nil{
        outcome = _do_cmp(f1, f2);
        if len(_cache) > 100{      # limit the maximum size of the cache
            _cache.clear();
        } _cache[f1, f2, s1, s2] = outcome;
    } return outcome;

}
function _sig(st){
    return (stat.S_IFMT(st.st_mode),
            st.st_size,
            st.st_mtime);

}
function _do_cmp(f1, f2){
    bufsize = BUFSIZE;
    with open(f1, 'rb') as fp1, open(f2, 'rb') as fp2{
        while true{
            b1 = fp1.read(bufsize);
            b2 = fp2.read(bufsize);
            if b1 != b2{
                return false;
            } if not b1{
                return true;

# Directory comparison class.
#
}
} } } class dircmp{
    """A class that manages the comparison of 2 directories.

    dircmp(a,b,ignore=None,hide=None)
      A and B are directories.
      IGNORE is a list of names to ignore,
        defaults to ['RCS', 'CVS', 'tags'].
      HIDE is a list of names to hide,
        defaults to [os.curdir, os.pardir].

    High level usage:
      x = dircmp(dir1, dir2)
      x.report() -> prints a report on the differences between dir1 and dir2
       or
      x.report_partial_closure() -> prints report on differences between dir1
            and dir2, and reports on common immediate subdirectories.
      x.report_full_closure() -> like report_partial_closure,
            but fully recursive.

    Attributes:
     left_list, right_list: The files in dir1 and dir2,
        filtered by hide and ignore.
     common: a list of names in both dir1 and dir2.
     left_only, right_only: names only in dir1, dir2.
     common_dirs: subdirectories in both dir1 and dir2.
     common_files: files in both dir1 and dir2.
     common_funny: names in both dir1 and dir2 where the type differs between
        dir1 and dir2, or the name is not stat-able.
     same_files: list of identical files.
     diff_files: list of filenames which differ.
     funny_files: list of files which could not be compared.
     subdirs: a dictionary of dircmp objects, keyed by names in common_dirs.
     """;

    function __init__( a, b, ignore=nil, hide=nil){ # Initialize
        this.left = a;
        this.right = b;
        if hide is nil{
            this.hide = [os.curdir, os.pardir]; # Names never to be shown
        } else{
            this.hide = hide;
        } if ignore is nil{
            this.ignore = ['RCS', 'CVS', 'tags']; # Names ignored in comparison
        } else{
            this.ignore = ignore;

    }
    } function phase0(){ # Compare everything except common subdirectories
        this.left_list = _filter(os.listdir(this.left),
                                 this.hide+this.ignore);
        this.right_list = _filter(os.listdir(this.right),
                                  this.hide+this.ignore);
        this.left_list.sort();
        this.right_list.sort();

    }
    function phase1(){ # Compute common names
        a = dict(izip(imap(os.path.normcase, this.left_list), this.left_list));
        b = dict(izip(imap(os.path.normcase, this.right_list), this.right_list));
        this.common = map(a.__getitem__, ifilter(b.__contains__, a));
        this.left_only = map(a.__getitem__, ifilterfalse(b.__contains__, a));
        this.right_only = map(b.__getitem__, ifilterfalse(a.__contains__, b));

    }
    function phase2(){ # Distinguish files, directories, funnies
        this.common_dirs = [];
        this.common_files = [];
        this.common_funny = [];

        for x in this.common{
            a_path = os.path.join(this.left, x);
            b_path = os.path.join(this.right, x);

            ok = 1;
            try{
                a_stat = os.stat(a_path);
            } except os.error, why{
                # print 'Can\'t stat', a_path, ':', why[1]
                ok = 0;
            } try{
                b_stat = os.stat(b_path);
            } except os.error, why{
                # print 'Can\'t stat', b_path, ':', why[1]
                ok = 0;

            }
            if ok{
                a_type = stat.S_IFMT(a_stat.st_mode);
                b_type = stat.S_IFMT(b_stat.st_mode);
                if a_type != b_type{
                    this.common_funny.append(x);
                } elif stat.S_ISDIR(a_type){
                    this.common_dirs.append(x);
                } elif stat.S_ISREG(a_type){
                    this.common_files.append(x);
                } else{
                    this.common_funny.append(x);
            } } else{
                this.common_funny.append(x);

    }
    } } function phase3(){ # Find out differences between common files
        xx = cmpfiles(this.left, this.right, this.common_files);
        this.same_files, this.diff_files, this.funny_files = xx;

    }
    function phase4(){ # Find out differences between common subdirectories
        # A new dircmp object is created for each common subdirectory,
        # these are stored in a dictionary indexed by filename.
        # The hide and ignore properties are inherited from the parent
        this.subdirs = {};
        for x in this.common_dirs{
            a_x = os.path.join(this.left, x);
            b_x = os.path.join(this.right, x);
            this.subdirs[x]  = dircmp(a_x, b_x, this.ignore, this.hide);

    }
    } function phase4_closure(){ # Recursively call phase4() on subdirectories
        this.phase4();
        for sd in this.subdirs.itervalues(){
            sd.phase4_closure();

    }
    } function report(){ # Print a report on the differences between a and b
        # Output format is purposely lousy
        print 'diff', this.left, this.right;
        if this.left_only{
            this.left_only.sort();
            print 'Only in', this.left, ':', this.left_only;
        } if this.right_only{
            this.right_only.sort();
            print 'Only in', this.right, ':', this.right_only;
        } if this.same_files{
            this.same_files.sort();
            print 'Identical files :', this.same_files;
        } if this.diff_files{
            this.diff_files.sort();
            print 'Differing files :', this.diff_files;
        } if this.funny_files{
            this.funny_files.sort();
            print 'Trouble with common files :', this.funny_files;
        } if this.common_dirs{
            this.common_dirs.sort();
            print 'Common subdirectories :', this.common_dirs;
        } if this.common_funny{
            this.common_funny.sort();
            print 'Common funny cases :', this.common_funny;

    }
    } function report_partial_closure(){ # Print reports on self and on subdirs
        this.report();
        for sd in this.subdirs.itervalues(){
            print;
            sd.report();

    }
    } function report_full_closure(){ # Report on self and subdirs recursively
        this.report();
        for sd in this.subdirs.itervalues(){
            print;
            sd.report_full_closure();

    }
    } methodmap = dict(subdirs=phase4,
                     same_files=phase3, diff_files=phase3, funny_files=phase3,
                     common_dirs = phase2, common_files=phase2, common_funny=phase2,
                     common=phase1, left_only=phase1, right_only=phase1,
                     left_list=phase0, right_list=phase0);

    function __getattr__( attr){
        if attr not in this.methodmap{
            raise AttributeError, attr;
        } this.methodmap[attr](this);
        return getattr(this, attr);

}
} function cmpfiles(a, b, common, shallow=1){
    """Compare common files in two directories.

    a, b -- directory names
    common -- list of file names found in both directories
    shallow -- if true, do comparison based solely on stat() information

    Returns a tuple of three lists:
      files that compare equal
      files that are different
      filenames that aren't regular files.

    """;
    res = ([], [], []);
    for x in common{
        ax = os.path.join(a, x);
        bx = os.path.join(b, x);
        res[_cmp(ax, bx, shallow)].append(x);
    } return res;


# Compare two files.
# Return:
#       0 for equal
#       1 for different
#       2 for funny cases (can't stat, etc.)
#
}
function _cmp(a, b, sh, abs=abs, cmp=cmp){
    try{
        return not abs(cmp(a, b, sh));
    } except (os.error, IOError){
        return 2;


# Return a copy with items that occur in skip removed.
#
}
} function _filter(flist, skip){
    return list(ifilterfalse(skip.__contains__, flist));


# Demonstration and testing.
#
}
function demo(){
    import sys;
    import getopt;
    options, args = getopt.getopt(sys.argv[1:], 'r');
    if len(args) != 2{
        raise getopt.GetoptError('need exactly two args', nil);
    } dd = dircmp(args[0], args[1]);
    if ('-r', '') in options{
        dd.report_full_closure();
    } else{
        dd.report();

}
} if __name__ == '__main__'{
    demo();

}