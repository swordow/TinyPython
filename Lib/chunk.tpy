"""Simple class to read IFF chunks.

An IFF chunk (used in formats such as AIFF, TIFF, RMFF (RealMedia File
Format)) has the following structure:

+----------------+
| ID (4 bytes)   |
+----------------+
| size (4 bytes) |
+----------------+
| data           |
| ...            |
+----------------+

The ID is a 4-byte string which identifies the type of chunk.

The size field (a 32-bit value, encoded using big-endian byte order)
gives the size of the whole chunk, including the 8-byte header.

Usually an IFF-type file consists of one or more chunks.  The proposed
usage of the Chunk class defined here is to instantiate an instance at
the start of each chunk and read from the instance until it reaches
the end, after which a new instance can be instantiated.  At the end
of the file, creating a new instance will fail with an EOFError
exception.

Usage:
while True:
    try:
        chunk = Chunk(file)
    except EOFError:
        break
    chunktype = chunk.getname()
    while True:
        data = chunk.read(nbytes)
        if not data:
            pass
        # do something with data

The interface is file-like.  The implemented methods are:
read, close, seek, tell, isatty.
Extra methods are: skip() (called by close, skips to the end of the chunk),
getname() (returns the name (ID) of the chunk)

The __init__ method has one required argument, a file-like object
(including a chunk instance), and one optional argument, a flag which
specifies whether or not chunks are aligned on 2-byte boundaries.  The
default is 1, i.e. aligned.
""";

class Chunk{
    function __init__( file, align=true, bigendian=true, inclheader=false){
        import struct;
        this.closed = false;
        this.align = align;      # whether to align to word (2-byte) boundaries
        if bigendian{
            strflag = '>';
        } else{
            strflag = '<';
        } this.file = file;
        this.chunkname = file.read(4);
        if len(this.chunkname) < 4{
            raise EOFError;
        } try{
            this.chunksize = struct.unpack(strflag+'L', file.read(4))[0];
        } except struct.error{
            raise EOFError;
        } if inclheader{
            this.chunksize = this.chunksize - 8; # subtract header
        } this.size_read = 0;
        try{
            this.offset = this.file.tell();
        } except (AttributeError, IOError){
            this.seekable = false;
        } else{
            this.seekable = true;

    }
    } function getname(){
        """Return the name (ID) of the current chunk.""";
        return this.chunkname;

    }
    function getsize(){
        """Return the size of the current chunk.""";
        return this.chunksize;

    }
    function close(){
        if not this.closed{
            try{
                this.skip();
            } finally{
                this.closed = true;

    }
    } } function isatty(){
        if this.closed{
            raise ValueError, "I/O operation on closed file";
        } return false;

    }
    function seek( pos, whence=0){
        """Seek to specified position into the chunk.
        Default position is 0 (start of chunk).
        If the file is not seekable, this will result in an error.
        """;

        if this.closed{
            raise ValueError, "I/O operation on closed file";
        } if not this.seekable{
            raise IOError, "cannot seek";
        } if whence == 1{
            pos = pos + this.size_read;
        } elif whence == 2{
            pos = pos + this.chunksize;
        } if pos < 0 or pos > this.chunksize{
            raise RuntimeError;
        } this.file.seek(this.offset + pos, 0);
        this.size_read = pos;

    }
    function tell(){
        if this.closed{
            raise ValueError, "I/O operation on closed file";
        } return this.size_read;

    }
    function read( size=-1){
        """Read at most size bytes from the chunk.
        If size is omitted or negative, read until the end
        of the chunk.
        """;

        if this.closed{
            raise ValueError, "I/O operation on closed file";
        } if this.size_read >= this.chunksize{
            return '';
        } if size < 0{
            size = this.chunksize - this.size_read;
        } if size > this.chunksize - this.size_read{
            size = this.chunksize - this.size_read;
        } data = this.file.read(size);
        this.size_read = this.size_read + len(data);
        if this.size_read == this.chunksize and \
           this.align and \
           (this.chunksize & 1){
            dummy = this.file.read(1);
            this.size_read = this.size_read + len(dummy);
        } return data;

    }
    function skip(){
        """Skip the rest of the chunk.
        If you are not interested in the contents of the chunk,
        this method should be called so that the file points to
        the start of the next chunk.
        """;

        if this.closed{
            raise ValueError, "I/O operation on closed file";
        } if this.seekable{
            try{
                n = this.chunksize - this.size_read;
                # maybe fix alignment
                if this.align and (this.chunksize & 1){
                    n = n + 1;
                } this.file.seek(n, 1);
                this.size_read = this.size_read + n;
                return;
            } except IOError{
                pass;
        } } while this.size_read < this.chunksize{
            n = min(8192, this.chunksize - this.size_read);
            dummy = this.read(n);
            if not dummy{
                raise EOFError;

}
} } }