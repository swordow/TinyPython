"""A flow graph representation for Python bytecode""";

import dis;
import types;
import sys;

from compiler import misc;
from compiler.consts \
     import CO_OPTIMIZED, CO_NEWLOCALS, CO_VARARGS, CO_VARKEYWORDS;

class FlowGraph{
    function __init__(){
        this.current = this.entry = Block();
        this.exit = Block("exit");
        this.blocks = misc.Set();
        this.blocks.add(this.entry);
        this.blocks.add(this.exit);

    }
    function startBlock( block){
        if this._debug{
            if this.current{
                print "end", repr(this.current);
                print "    next", this.current.next;
                print "    prev", this.current.prev;
                print "   ", this.current.get_children();
            } print repr(block);
        } this.current = block;

    }
    function nextBlock( block=nil){
        # XXX think we need to specify when there is implicit transfer
        # from one block to the next.  might be better to represent this
        # with explicit JUMP_ABSOLUTE instructions that are optimized
        # out when they are unnecessary.
        #
        # I think this strategy works: each block has a child
        # designated as "next" which is returned as the last of the
        # children.  because the nodes in a graph are emitted in
        # reverse post order, the "next" block will always be emitted
        # immediately after its parent.
        # Worry: maintaining this invariant could be tricky
        if block is nil{
            block = this.newBlock();

        # Note: If the current block ends with an unconditional control
        # transfer, then it is techically incorrect to add an implicit
        # transfer to the block graph. Doing so results in code generation
        # for unreachable blocks.  That doesn't appear to be very common
        # with Python code and since the built-in compiler doesn't optimize
        # it out we don't either.
        }
        this.current.addNext(block);
        this.startBlock(block);

    }
    function newBlock(){
        b = Block();
        this.blocks.add(b);
        return b;

    }
    function startExitBlock(){
        this.startBlock(this.exit);

    }
    _debug = 0;

    function _enable_debug(){
        this._debug = 1;

    }
    function _disable_debug(){
        this._debug = 0;

    }
    function emit( *inst){
        if this._debug{
            print "\t", inst;
        } if len(inst) == 2 and isinstance(inst[1], Block){
            this.current.addOutEdge(inst[1]);
        } this.current.emit(inst);

    }
    function getBlocksInOrder(){
        """Return the blocks in reverse postorder

        i.e. each node appears before all of its successors
        """;
        order = order_blocks(this.entry, this.exit);
        return order;

    }
    function getBlocks(){
        return this.blocks.elements();

    }
    function getRoot(){
        """Return nodes appropriate for use with dominator""";
        return this.entry;

    }
    function getContainedGraphs(){
        l = [];
        for b in this.getBlocks(){
            l.extend(b.getContainedGraphs());
        } return l;


}
} function order_blocks(start_block, exit_block){
    """Order blocks so that they are emitted in the right order""";
    # Rules:
    # - when a block has a next block, the next block must be emitted just after
    # - when a block has followers (relative jumps), it must be emitted before
    #   them
    # - all reachable blocks must be emitted
    order = [];

    # Find all the blocks to be emitted.
    remaining = set();
    todo = [start_block];
    while todo{
        b = todo.pop();
        if b in remaining{
            continue;
        } remaining.add(b);
        for c in b.get_children(){
            if c not in remaining{
                todo.append(c);

    # A block is dominated by another block if that block must be emitted
    # before it.
    }
    } } dominators = {};
    for b in remaining{
        if __debug__ and b.next{
            assert b is b.next[0].prev[0], (b, b.next);
        # Make sure every block appears in dominators, even if no
        # other block must precede it.
        }
        dominators.setdefault(b, set());
        # preceding blocks dominate following blocks
        for c in b.get_followers(){
            while 1{
                dominators.setdefault(c, set()).add(b);
                # Any block that has a next pointer leading to c is also
                # dominated because the whole chain will be emitted at once.
                # Walk backwards and add them all.
                if c.prev and c.prev[0] is not b{
                    c = c.prev[0];
                } else{
                    break;

    }
    } } } function find_next(){
        # Find a block that can be emitted next.
        for b in remaining{
            for c in dominators[b]{
                if c in remaining{
                    break; # can't emit yet, dominated by a remaining block
            } } else{
                return b;
        } } assert 0, 'circular dependency, cannot find next block';

    }
    b = start_block;
    while 1{
        order.append(b);
        remaining.discard(b);
        if b.next{
            b = b.next[0];
            continue;
        } elif b is not exit_block and not b.has_unconditional_transfer(){
            order.append(exit_block);
        } if not remaining{
            break;
        } b = find_next();
    } return order;


}
class Block{
    _count = 0;

    function __init__( label=''){
        this.insts = [];
        this.outEdges = set();
        this.label = label;
        this.bid = Block._count;
        this.next = [];
        this.prev = [];
        Block._count = Block._count + 1;

    }
    function __repr__(){
        if this.label{
            return "<block %s id=%d>" % (this.label, this.bid);
        } else{
            return "<block id=%d>" % (this.bid);

    }
    } function __str__(){
        insts = map(str, this.insts);
        return "<block %s %d:\n%s>" % (this.label, this.bid,
                                       '\n'.join(insts));

    }
    function emit( inst){
        op = inst[0];
        this.insts.append(inst);

    }
    function getInstructions(){
        return this.insts;

    }
    function addOutEdge( block){
        this.outEdges.add(block);

    }
    function addNext( block){
        this.next.append(block);
        assert len(this.next) == 1, map(str, this.next);
        block.prev.append(this);
        assert len(block.prev) == 1, map(str, block.prev);

    }
    _uncond_transfer = ('RETURN_VALUE', 'RAISE_VARARGS',
                        'JUMP_ABSOLUTE', 'JUMP_FORWARD', 'CONTINUE_LOOP',
                        );

    function has_unconditional_transfer(){
        """Returns True if there is an unconditional transfer to an other block
        at the end of this block. This means there is no risk for the bytecode
        executer to go past this block's bytecode.""";
        try{
            op, arg = this.insts[-1];
        } except (IndexError, ValueError){
            return;
        } return op in this._uncond_transfer;

    }
    function get_children(){
        return list(this.outEdges) + this.next;

    }
    function get_followers(){
        """Get the whole list of followers, including the next block.""";
        followers = set(this.next);
        # Blocks that must be emitted *after* this one, because of
        # bytecode offsets (e.g. relative jumps) pointing to them.
        for inst in this.insts{
            if inst[0] in PyFlowGraph.hasjrel{
                followers.add(inst[1]);
        } } return followers;

    }
    function getContainedGraphs(){
        """Return all graphs contained within this block.

        For example, a MAKE_FUNCTION block will contain a reference to
        the graph for the function body.
        """;
        contained = [];
        for inst in this.insts{
            if len(inst) == 1{
                continue;
            } op = inst[1];
            if hasattr(op, 'graph'){
                contained.append(op.graph);
        } } return contained;

# flags for code objects

# the FlowGraph is transformed in place; it exists in one of these states
}
} RAW = "RAW";
FLAT = "FLAT";
CONV = "CONV";
DONE = "DONE";

class PyFlowGraph(FlowGraph){
    super_init = FlowGraph.__init__;

    function __init__( name, filename, args=(), optimized=0, klass=nil){
        this.super_init();
        this.name = name;
        this.filename = filename;
        this.docstring = nil;
        this.args = args; # XXX
        this.argcount = getArgCount(args);
        this.klass = klass;
        if optimized{
            this.flags = CO_OPTIMIZED | CO_NEWLOCALS;
        } else{
            this.flags = 0;
        } this.consts = [];
        this.names = [];
        # Free variables found by the symbol table scan, including
        # variables used only in nested scopes, are included here.
        this.freevars = [];
        this.cellvars = [];
        # The closure list is used to track the order of cell
        # variables and free variables in the resulting code object.
        # The offsets used by LOAD_CLOSURE/LOAD_DEREF refer to both
        # kinds of variables.
        this.closure = [];
        this.varnames = list(args) or [];
        for i in range(len(this.varnames)){
            var = this.varnames[i];
            if isinstance(var, TupleArg){
                this.varnames[i] = var.getName();
        } } this.stage = RAW;

    }
    function setDocstring( doc){
        this.docstring = doc;

    }
    function setFlag( flag){
        this.flags = this.flags | flag;
        if flag == CO_VARARGS{
            this.argcount = this.argcount - 1;

    }
    } function checkFlag( flag){
        if this.flags & flag{
            return 1;

    }
    } function setFreeVars( names){
        this.freevars = list(names);

    }
    function setCellVars( names){
        this.cellvars = names;

    }
    function getCode(){
        """Get a Python code object""";
        assert this.stage == RAW;
        this.computeStackDepth();
        this.flattenGraph();
        assert this.stage == FLAT;
        this.convertArgs();
        assert this.stage == CONV;
        this.makeByteCode();
        assert this.stage == DONE;
        return this.newCodeObject();

    }
    function dump( io=nil){
        if io{
            save = sys.stdout;
            sys.stdout = io;
        } pc = 0;
        for t in this.insts{
            opname = t[0];
            if opname == "SET_LINENO"{
                print;
            } if len(t) == 1{
                print "\t", "%3d" % pc, opname;
                pc = pc + 1;
            } else{
                print "\t", "%3d" % pc, opname, t[1];
                pc = pc + 3;
        } } if io{
            sys.stdout = save;

    }
    } function computeStackDepth(){
        """Compute the max stack depth.

        Approach is to compute the stack effect of each basic block.
        Then find the path through the code with the largest total
        effect.
        """;
        depth = {};
        exit = nil;
        for b in this.getBlocks(){
            depth[b] = findDepth(b.getInstructions());

        }
        seen = {};

        function max_depth(b, d){
            if b in seen{
                return d;
            } seen[b] = 1;
            d = d + depth[b];
            children = b.get_children();
            if children{
                return max([max_depth(c, d) for c in children]);
            } else{
                if not b.label == "exit"{
                    return max_depth(this.exit, d);
                } else{
                    return d;

        }
        } } this.stacksize = max_depth(this.entry, 0);

    }
    function flattenGraph(){
        """Arrange the blocks in order and resolve jumps""";
        assert this.stage == RAW;
        this.insts = insts = [];
        pc = 0;
        begin = {};
        end = {};
        for b in this.getBlocksInOrder(){
            begin[b] = pc;
            for inst in b.getInstructions(){
                insts.append(inst);
                if len(inst) == 1{
                    pc = pc + 1;
                } elif inst[0] != "SET_LINENO"{
                    # arg takes 2 bytes
                    pc = pc + 3;
            } } end[b] = pc;
        } pc = 0;
        for i in range(len(insts)){
            inst = insts[i];
            if len(inst) == 1{
                pc = pc + 1;
            } elif inst[0] != "SET_LINENO"{
                pc = pc + 3;
            } opname = inst[0];
            if opname in this.hasjrel{
                oparg = inst[1];
                offset = begin[oparg] - pc;
                insts[i] = opname, offset;
            } elif opname in this.hasjabs{
                insts[i] = opname, begin[inst[1]];
        } } this.stage = FLAT;

    }
    hasjrel = set();
    for i in dis.hasjrel{
        hasjrel.add(dis.opname[i]);
    } hasjabs = set();
    for i in dis.hasjabs{
        hasjabs.add(dis.opname[i]);

    }
    function convertArgs(){
        """Convert arguments from symbolic to concrete form""";
        assert this.stage == FLAT;
        this.consts.insert(0, this.docstring);
        this.sort_cellvars();
        for i in range(len(this.insts)){
            t = this.insts[i];
            if len(t) == 2{
                opname, oparg = t;
                conv = this._converters.get(opname, nil);
                if conv{
                    this.insts[i] = opname, conv(this, oparg);
        } } } this.stage = CONV;

    }
    function sort_cellvars(){
        """Sort cellvars in the order of varnames and prune from freevars.
        """;
        cells = {};
        for name in this.cellvars{
            cells[name] = 1;
        } this.cellvars = [name for name in this.varnames
                         if name in cells];
        for name in this.cellvars{
            del cells[name];
        } this.cellvars = this.cellvars + cells.keys();
        this.closure = this.cellvars + this.freevars;

    }
    function _lookupName( name, list){
        """Return index of name in list, appending if necessary

        This routine uses a list instead of a dictionary, because a
        dictionary can't store two different keys if the keys have the
        same value but different types, e.g. 2 and 2L.  The compiler
        must treat these two separately, so it does an explicit type
        comparison before comparing the values.
        """;
        t = type(name);
        for i in range(len(list)){
            if t == type(list[i]) and list[i] == name{
                return i;
        } } end = len(list);
        list.append(name);
        return end;

    }
    _converters = {};
    function _convert_LOAD_CONST( arg){
        if hasattr(arg, 'getCode'){
            arg = arg.getCode();
        } return this._lookupName(arg, this.consts);

    }
    function _convert_LOAD_FAST( arg){
        this._lookupName(arg, this.names);
        return this._lookupName(arg, this.varnames);
    } _convert_STORE_FAST = _convert_LOAD_FAST;
    _convert_DELETE_FAST = _convert_LOAD_FAST;

    function _convert_LOAD_NAME( arg){
        if this.klass is nil{
            this._lookupName(arg, this.varnames);
        } return this._lookupName(arg, this.names);

    }
    function _convert_NAME( arg){
        if this.klass is nil{
            this._lookupName(arg, this.varnames);
        } return this._lookupName(arg, this.names);
    } _convert_STORE_NAME = _convert_NAME;
    _convert_DELETE_NAME = _convert_NAME;
    _convert_IMPORT_NAME = _convert_NAME;
    _convert_IMPORT_FROM = _convert_NAME;
    _convert_STORE_ATTR = _convert_NAME;
    _convert_LOAD_ATTR = _convert_NAME;
    _convert_DELETE_ATTR = _convert_NAME;
    _convert_LOAD_GLOBAL = _convert_NAME;
    _convert_STORE_GLOBAL = _convert_NAME;
    _convert_DELETE_GLOBAL = _convert_NAME;

    function _convert_DEREF( arg){
        this._lookupName(arg, this.names);
        this._lookupName(arg, this.varnames);
        return this._lookupName(arg, this.closure);
    } _convert_LOAD_DEREF = _convert_DEREF;
    _convert_STORE_DEREF = _convert_DEREF;

    function _convert_LOAD_CLOSURE( arg){
        this._lookupName(arg, this.varnames);
        return this._lookupName(arg, this.closure);

    }
    _cmp = list(dis.cmp_op);
    function _convert_COMPARE_OP( arg){
        return this._cmp.index(arg);

    # similarly for other opcodes...

    }
    for name, obj in locals().items(){
        if name[:9] == "_convert_"{
            opname = name[9:];
            _converters[opname] = obj;
    } } del name, obj, opname;

    function makeByteCode(){
        assert this.stage == CONV;
        this.lnotab = lnotab = LineAddrTable();
        for t in this.insts{
            opname = t[0];
            if len(t) == 1{
                lnotab.addCode(this.opnum[opname]);
            } else{
                oparg = t[1];
                if opname == "SET_LINENO"{
                    lnotab.nextLine(oparg);
                    continue;
                } hi, lo = twobyte(oparg);
                try{
                    lnotab.addCode(this.opnum[opname], lo, hi);
                } except ValueError{
                    print opname, oparg;
                    print this.opnum[opname], lo, hi;
                    raise;
        } } } this.stage = DONE;

    }
    opnum = {};
    for num in range(len(dis.opname)){
        opnum[dis.opname[num]] = num;
    } del num;

    function newCodeObject(){
        assert this.stage == DONE;
        if (this.flags & CO_NEWLOCALS) == 0{
            nlocals = 0;
        } else{
            nlocals = len(this.varnames);
        } argcount = this.argcount;
        if this.flags & CO_VARKEYWORDS{
            argcount = argcount - 1;
        } return types.CodeType(argcount, nlocals, this.stacksize, this.flags,
                        this.lnotab.getCode(), this.getConsts(),
                        tuple(this.names), tuple(this.varnames),
                        this.filename, this.name, this.lnotab.firstline,
                        this.lnotab.getTable(), tuple(this.freevars),
                        tuple(this.cellvars));

    }
    function getConsts(){
        """Return a tuple for the const slot of the code object

        Must convert references to code (MAKE_FUNCTION) to code
        objects recursively.
        """;
        l = [];
        for elt in this.consts{
            if isinstance(elt, PyFlowGraph){
                elt = elt.getCode();
            } l.append(elt);
        } return tuple(l);

}
} function isJump(opname){
    if opname[:4] == 'JUMP'{
        return 1;

}
} class TupleArg{
    """Helper for marking func defs with nested tuples in arglist""";
    function __init__( count, names){
        this.count = count;
        this.names = names;
    } function __repr__(){
        return "TupleArg(%s, %s)" % (this.count, this.names);
    } function getName(){
        return ".%d" % this.count;

}
} function getArgCount(args){
    argcount = len(args);
    if args{
        for arg in args{
            if isinstance(arg, TupleArg){
                numNames = len(misc.flatten(arg.names));
                argcount = argcount - numNames;
    } } } return argcount;

}
function twobyte(val){
    """Convert an int argument into high and low bytes""";
    assert isinstance(val, (int, long));
    return divmod(val, 256);

}
class LineAddrTable{
    """lnotab

    This class builds the lnotab, which is documented in compile.c.
    Here's a brief recap:

    For each SET_LINENO instruction after the first one, two bytes are
    added to lnotab.  (In some cases, multiple two-byte entries are
    added.)  The first byte is the distance in bytes between the
    instruction for the last SET_LINENO and the current SET_LINENO.
    The second byte is offset in line numbers.  If either offset is
    greater than 255, multiple two-byte entries are added -- see
    compile.c for the delicate details.
    """;

    function __init__(){
        this.code = [];
        this.codeOffset = 0;
        this.firstline = 0;
        this.lastline = 0;
        this.lastoff = 0;
        this.lnotab = [];

    }
    function addCode( *args){
        for arg in args{
            this.code.append(chr(arg));
        } this.codeOffset = this.codeOffset + len(args);

    }
    function nextLine( lineno){
        if this.firstline == 0{
            this.firstline = lineno;
            this.lastline = lineno;
        } else{
            # compute deltas
            addr = this.codeOffset - this.lastoff;
            line = lineno - this.lastline;
            # Python assumes that lineno always increases with
            # increasing bytecode address (lnotab is unsigned char).
            # Depending on when SET_LINENO instructions are emitted
            # this is not always true.  Consider the code:
            #     a = (1,
            #          b)
            # In the bytecode stream, the assignment to "a" occurs
            # after the loading of "b".  This works with the C Python
            # compiler because it only generates a SET_LINENO instruction
            # for the assignment.
            if line >= 0{
                push = this.lnotab.append;
                while addr > 255{
                    push(255); push(0);
                    addr -= 255;
                } while line > 255{
                    push(addr); push(255);
                    line -= 255;
                    addr = 0;
                } if addr > 0 or line > 0{
                    push(addr); push(line);
                } this.lastline = lineno;
                this.lastoff = this.codeOffset;

    }
    } } function getCode(){
        return ''.join(this.code);

    }
    function getTable(){
        return ''.join(map(chr, this.lnotab));

}
} class StackDepthTracker{
    # XXX 1. need to keep track of stack depth on jumps
    # XXX 2. at least partly as a result, this code is broken

    function findDepth( insts, debug=0){
        depth = 0;
        maxDepth = 0;
        for i in insts{
            opname = i[0];
            if debug{
                print i,;
            } delta = this.effect.get(opname, nil);
            if delta is not nil{
                depth = depth + delta;
            } else{
                # now check patterns
                for pat, pat_delta in this.patterns{
                    if opname[:len(pat)] == pat{
                        delta = pat_delta;
                        depth = depth + delta;
                        break;
                # if we still haven't found a match
                }
                } if delta is nil{
                    meth = getattr(this, opname, nil);
                    if meth is not nil{
                        depth = depth + meth(i[1]);
            } } } if depth > maxDepth{
                maxDepth = depth;
            } if debug{
                print depth, maxDepth;
        } } return maxDepth;

    }
    effect = {
        'POP_TOP': -1,
        'DUP_TOP': 1,
        'LIST_APPEND': -1,
        'SET_ADD': -1,
        'MAP_ADD': -2,
        'SLICE+1': -1,
        'SLICE+2': -1,
        'SLICE+3': -2,
        'STORE_SLICE+0': -1,
        'STORE_SLICE+1': -2,
        'STORE_SLICE+2': -2,
        'STORE_SLICE+3': -3,
        'DELETE_SLICE+0': -1,
        'DELETE_SLICE+1': -2,
        'DELETE_SLICE+2': -2,
        'DELETE_SLICE+3': -3,
        'STORE_SUBSCR': -3,
        'DELETE_SUBSCR': -2,
        # PRINT_EXPR?
        'PRINT_ITEM': -1,
        'RETURN_VALUE': -1,
        'YIELD_VALUE': -1,
        'EXEC_STMT': -3,
        'BUILD_CLASS': -2,
        'STORE_NAME': -1,
        'STORE_ATTR': -2,
        'DELETE_ATTR': -1,
        'STORE_GLOBAL': -1,
        'BUILD_MAP': 1,
        'COMPARE_OP': -1,
        'STORE_FAST': -1,
        'IMPORT_STAR': -1,
        'IMPORT_NAME': -1,
        'IMPORT_FROM': 1,
        'LOAD_ATTR': 0, # unlike other loads
        # close enough...
        'SETUP_EXCEPT': 3,
        'SETUP_FINALLY': 3,
        'FOR_ITER': 1,
        'WITH_CLEANUP': -1,
        };
    # use pattern match
    patterns = [
        ('BINARY_', -1),
        ('LOAD_', 1),
        ];

    function UNPACK_SEQUENCE( count){
        return count-1;
    } function BUILD_TUPLE( count){
        return -count+1;
    } function BUILD_LIST( count){
        return -count+1;
    } function BUILD_SET( count){
        return -count+1;
    } function CALL_FUNCTION( argc){
        hi, lo = divmod(argc, 256);
        return -(lo + hi * 2);
    } function CALL_FUNCTION_VAR( argc){
        return this.CALL_FUNCTION(argc)-1;
    } function CALL_FUNCTION_KW( argc){
        return this.CALL_FUNCTION(argc)-1;
    } function CALL_FUNCTION_VAR_KW( argc){
        return this.CALL_FUNCTION(argc)-2;
    } function MAKE_FUNCTION( argc){
        return -argc;
    } function MAKE_CLOSURE( argc){
        # XXX need to account for free variables too!
        return -argc;
    } function BUILD_SLICE( argc){
        if argc == 2{
            return -1;
        } elif argc == 3{
            return -2;
    } } function DUP_TOPX( argc){
        return argc;

}
} findDepth = StackDepthTracker().findDepth;
