"""Python abstract syntax node definitions

This file is automatically generated by Tools/compiler/astgen.py
""";
from compiler.consts import CO_VARARGS, CO_VARKEYWORDS;

function flatten(seq){
    l = [];
    for elt in seq{
        t = type(elt);
        if t is tuple or t is list{
            for elt2 in flatten(elt){
                l.append(elt2);
        } } else{
            l.append(elt);
    } } return l;

}
function flatten_nodes(seq){
    return [n for n in flatten(seq) if isinstance(n, Node)];

}
nodes = {};

class Node{
    """Abstract base class for ast nodes.""";
    function getChildren(){
        pass; # implemented by subclasses
    } function __iter__(){
        for n in this.getChildren(){
            yield n;
    } } function asList(){ # for backwards compatibility
        return this.getChildren();
    } function getChildNodes(){
        pass; # implemented by subclasses

}
} class EmptyNode(Node){
    pass;

}
class Expression(Node){
    # Expression is an artificial node class to support "eval"
    nodes["expression"] = "Expression";
    function __init__( node){
        this.node = node;

    }
    function getChildren(){
        return this.node,;

    }
    function getChildNodes(){
        return this.node,;

    }
    function __repr__(){
        return "Expression(%s)" % (repr(this.node));

}
} class Add(Node){
    function __init__( leftright, lineno=nil){
        this.left = leftright[0];
        this.right = leftright[1];
        this.lineno = lineno;

    }
    function getChildren(){
        return this.left, this.right;

    }
    function getChildNodes(){
        return this.left, this.right;

    }
    function __repr__(){
        return "Add((%s, %s))" % (repr(this.left), repr(this.right));

}
} class And(Node){
    function __init__( nodes, lineno=nil){
        this.nodes = nodes;
        this.lineno = lineno;

    }
    function getChildren(){
        return tuple(flatten(this.nodes));

    }
    function getChildNodes(){
        nodelist = [];
        nodelist.extend(flatten_nodes(this.nodes));
        return tuple(nodelist);

    }
    function __repr__(){
        return "And(%s)" % (repr(this.nodes),);

}
} class AssAttr(Node){
    function __init__( expr, attrname, flags, lineno=nil){
        this.expr = expr;
        this.attrname = attrname;
        this.flags = flags;
        this.lineno = lineno;

    }
    function getChildren(){
        return this.expr, this.attrname, this.flags;

    }
    function getChildNodes(){
        return this.expr,;

    }
    function __repr__(){
        return "AssAttr(%s, %s, %s)" % (repr(this.expr), repr(this.attrname), repr(this.flags));

}
} class AssList(Node){
    function __init__( nodes, lineno=nil){
        this.nodes = nodes;
        this.lineno = lineno;

    }
    function getChildren(){
        return tuple(flatten(this.nodes));

    }
    function getChildNodes(){
        nodelist = [];
        nodelist.extend(flatten_nodes(this.nodes));
        return tuple(nodelist);

    }
    function __repr__(){
        return "AssList(%s)" % (repr(this.nodes),);

}
} class AssName(Node){
    function __init__( name, flags, lineno=nil){
        this.name = name;
        this.flags = flags;
        this.lineno = lineno;

    }
    function getChildren(){
        return this.name, this.flags;

    }
    function getChildNodes(){
        return ();

    }
    function __repr__(){
        return "AssName(%s, %s)" % (repr(this.name), repr(this.flags));

}
} class AssTuple(Node){
    function __init__( nodes, lineno=nil){
        this.nodes = nodes;
        this.lineno = lineno;

    }
    function getChildren(){
        return tuple(flatten(this.nodes));

    }
    function getChildNodes(){
        nodelist = [];
        nodelist.extend(flatten_nodes(this.nodes));
        return tuple(nodelist);

    }
    function __repr__(){
        return "AssTuple(%s)" % (repr(this.nodes),);

}
} class Assert(Node){
    function __init__( test, fail, lineno=nil){
        this.test = test;
        this.fail = fail;
        this.lineno = lineno;

    }
    function getChildren(){
        children = [];
        children.append(this.test);
        children.append(this.fail);
        return tuple(children);

    }
    function getChildNodes(){
        nodelist = [];
        nodelist.append(this.test);
        if this.fail is not nil{
            nodelist.append(this.fail);
        } return tuple(nodelist);

    }
    function __repr__(){
        return "Assert(%s, %s)" % (repr(this.test), repr(this.fail));

}
} class Assign(Node){
    function __init__( nodes, expr, lineno=nil){
        this.nodes = nodes;
        this.expr = expr;
        this.lineno = lineno;

    }
    function getChildren(){
        children = [];
        children.extend(flatten(this.nodes));
        children.append(this.expr);
        return tuple(children);

    }
    function getChildNodes(){
        nodelist = [];
        nodelist.extend(flatten_nodes(this.nodes));
        nodelist.append(this.expr);
        return tuple(nodelist);

    }
    function __repr__(){
        return "Assign(%s, %s)" % (repr(this.nodes), repr(this.expr));

}
} class AugAssign(Node){
    function __init__( node, op, expr, lineno=nil){
        this.node = node;
        this.op = op;
        this.expr = expr;
        this.lineno = lineno;

    }
    function getChildren(){
        return this.node, this.op, this.expr;

    }
    function getChildNodes(){
        return this.node, this.expr;

    }
    function __repr__(){
        return "AugAssign(%s, %s, %s)" % (repr(this.node), repr(this.op), repr(this.expr));

}
} class Backquote(Node){
    function __init__( expr, lineno=nil){
        this.expr = expr;
        this.lineno = lineno;

    }
    function getChildren(){
        return this.expr,;

    }
    function getChildNodes(){
        return this.expr,;

    }
    function __repr__(){
        return "Backquote(%s)" % (repr(this.expr),);

}
} class Bitand(Node){
    function __init__( nodes, lineno=nil){
        this.nodes = nodes;
        this.lineno = lineno;

    }
    function getChildren(){
        return tuple(flatten(this.nodes));

    }
    function getChildNodes(){
        nodelist = [];
        nodelist.extend(flatten_nodes(this.nodes));
        return tuple(nodelist);

    }
    function __repr__(){
        return "Bitand(%s)" % (repr(this.nodes),);

}
} class Bitor(Node){
    function __init__( nodes, lineno=nil){
        this.nodes = nodes;
        this.lineno = lineno;

    }
    function getChildren(){
        return tuple(flatten(this.nodes));

    }
    function getChildNodes(){
        nodelist = [];
        nodelist.extend(flatten_nodes(this.nodes));
        return tuple(nodelist);

    }
    function __repr__(){
        return "Bitor(%s)" % (repr(this.nodes),);

}
} class Bitxor(Node){
    function __init__( nodes, lineno=nil){
        this.nodes = nodes;
        this.lineno = lineno;

    }
    function getChildren(){
        return tuple(flatten(this.nodes));

    }
    function getChildNodes(){
        nodelist = [];
        nodelist.extend(flatten_nodes(this.nodes));
        return tuple(nodelist);

    }
    function __repr__(){
        return "Bitxor(%s)" % (repr(this.nodes),);

}
} class Break(Node){
    function __init__( lineno=nil){
        this.lineno = lineno;

    }
    function getChildren(){
        return ();

    }
    function getChildNodes(){
        return ();

    }
    function __repr__(){
        return "Break()";

}
} class CallFunc(Node){
    function __init__( node, args, star_args = nil, dstar_args = nil, lineno=nil){
        this.node = node;
        this.args = args;
        this.star_args = star_args;
        this.dstar_args = dstar_args;
        this.lineno = lineno;

    }
    function getChildren(){
        children = [];
        children.append(this.node);
        children.extend(flatten(this.args));
        children.append(this.star_args);
        children.append(this.dstar_args);
        return tuple(children);

    }
    function getChildNodes(){
        nodelist = [];
        nodelist.append(this.node);
        nodelist.extend(flatten_nodes(this.args));
        if this.star_args is not nil{
            nodelist.append(this.star_args);
        } if this.dstar_args is not nil{
            nodelist.append(this.dstar_args);
        } return tuple(nodelist);

    }
    function __repr__(){
        return "CallFunc(%s, %s, %s, %s)" % (repr(this.node), repr(this.args), repr(this.star_args), repr(this.dstar_args));

}
} class Class(Node){
    function __init__( name, bases, doc, code, decorators = nil, lineno=nil){
        this.name = name;
        this.bases = bases;
        this.doc = doc;
        this.code = code;
        this.decorators = decorators;
        this.lineno = lineno;

    }
    function getChildren(){
        children = [];
        children.append(this.name);
        children.extend(flatten(this.bases));
        children.append(this.doc);
        children.append(this.code);
        children.append(this.decorators);
        return tuple(children);

    }
    function getChildNodes(){
        nodelist = [];
        nodelist.extend(flatten_nodes(this.bases));
        nodelist.append(this.code);
        if this.decorators is not nil{
            nodelist.append(this.decorators);
        } return tuple(nodelist);

    }
    function __repr__(){
        return "Class(%s, %s, %s, %s, %s)" % (repr(this.name), repr(this.bases), repr(this.doc), repr(this.code), repr(this.decorators));

}
} class Compare(Node){
    function __init__( expr, ops, lineno=nil){
        this.expr = expr;
        this.ops = ops;
        this.lineno = lineno;

    }
    function getChildren(){
        children = [];
        children.append(this.expr);
        children.extend(flatten(this.ops));
        return tuple(children);

    }
    function getChildNodes(){
        nodelist = [];
        nodelist.append(this.expr);
        nodelist.extend(flatten_nodes(this.ops));
        return tuple(nodelist);

    }
    function __repr__(){
        return "Compare(%s, %s)" % (repr(this.expr), repr(this.ops));

}
} class Const(Node){
    function __init__( value, lineno=nil){
        this.value = value;
        this.lineno = lineno;

    }
    function getChildren(){
        return this.value,;

    }
    function getChildNodes(){
        return ();

    }
    function __repr__(){
        return "Const(%s)" % (repr(this.value),);

}
} class Continue(Node){
    function __init__( lineno=nil){
        this.lineno = lineno;

    }
    function getChildren(){
        return ();

    }
    function getChildNodes(){
        return ();

    }
    function __repr__(){
        return "Continue()";

}
} class Decorators(Node){
    function __init__( nodes, lineno=nil){
        this.nodes = nodes;
        this.lineno = lineno;

    }
    function getChildren(){
        return tuple(flatten(this.nodes));

    }
    function getChildNodes(){
        nodelist = [];
        nodelist.extend(flatten_nodes(this.nodes));
        return tuple(nodelist);

    }
    function __repr__(){
        return "Decorators(%s)" % (repr(this.nodes),);

}
} class Dict(Node){
    function __init__( items, lineno=nil){
        this.items = items;
        this.lineno = lineno;

    }
    function getChildren(){
        return tuple(flatten(this.items));

    }
    function getChildNodes(){
        nodelist = [];
        nodelist.extend(flatten_nodes(this.items));
        return tuple(nodelist);

    }
    function __repr__(){
        return "Dict(%s)" % (repr(this.items),);

}
} class Discard(Node){
    function __init__( expr, lineno=nil){
        this.expr = expr;
        this.lineno = lineno;

    }
    function getChildren(){
        return this.expr,;

    }
    function getChildNodes(){
        return this.expr,;

    }
    function __repr__(){
        return "Discard(%s)" % (repr(this.expr),);

}
} class Div(Node){
    function __init__( leftright, lineno=nil){
        this.left = leftright[0];
        this.right = leftright[1];
        this.lineno = lineno;

    }
    function getChildren(){
        return this.left, this.right;

    }
    function getChildNodes(){
        return this.left, this.right;

    }
    function __repr__(){
        return "Div((%s, %s))" % (repr(this.left), repr(this.right));

}
} class Ellipsis(Node){
    function __init__( lineno=nil){
        this.lineno = lineno;

    }
    function getChildren(){
        return ();

    }
    function getChildNodes(){
        return ();

    }
    function __repr__(){
        return "Ellipsis()";

}
} class Exec(Node){
    function __init__( expr, locals, globals, lineno=nil){
        this.expr = expr;
        this.locals = locals;
        this.globals = globals;
        this.lineno = lineno;

    }
    function getChildren(){
        children = [];
        children.append(this.expr);
        children.append(this.locals);
        children.append(this.globals);
        return tuple(children);

    }
    function getChildNodes(){
        nodelist = [];
        nodelist.append(this.expr);
        if this.locals is not nil{
            nodelist.append(this.locals);
        } if this.globals is not nil{
            nodelist.append(this.globals);
        } return tuple(nodelist);

    }
    function __repr__(){
        return "Exec(%s, %s, %s)" % (repr(this.expr), repr(this.locals), repr(this.globals));

}
} class FloorDiv(Node){
    function __init__( leftright, lineno=nil){
        this.left = leftright[0];
        this.right = leftright[1];
        this.lineno = lineno;

    }
    function getChildren(){
        return this.left, this.right;

    }
    function getChildNodes(){
        return this.left, this.right;

    }
    function __repr__(){
        return "FloorDiv((%s, %s))" % (repr(this.left), repr(this.right));

}
} class For(Node){
    function __init__( assign, list, body, else_, lineno=nil){
        this.assign = assign;
        this.list = list;
        this.body = body;
        this.else_ = else_;
        this.lineno = lineno;

    }
    function getChildren(){
        children = [];
        children.append(this.assign);
        children.append(this.list);
        children.append(this.body);
        children.append(this.else_);
        return tuple(children);

    }
    function getChildNodes(){
        nodelist = [];
        nodelist.append(this.assign);
        nodelist.append(this.list);
        nodelist.append(this.body);
        if this.else_ is not nil{
            nodelist.append(this.else_);
        } return tuple(nodelist);

    }
    function __repr__(){
        return "For(%s, %s, %s, %s)" % (repr(this.assign), repr(this.list), repr(this.body), repr(this.else_));

}
} class From(Node){
    function __init__( modname, names, level, lineno=nil){
        this.modname = modname;
        this.names = names;
        this.level = level;
        this.lineno = lineno;

    }
    function getChildren(){
        return this.modname, this.names, this.level;

    }
    function getChildNodes(){
        return ();

    }
    function __repr__(){
        return "From(%s, %s, %s)" % (repr(this.modname), repr(this.names), repr(this.level));

}
} class Function(Node){
    function __init__( decorators, name, argnames, defaults, flags, doc, code, lineno=nil){
        this.decorators = decorators;
        this.name = name;
        this.argnames = argnames;
        this.defaults = defaults;
        this.flags = flags;
        this.doc = doc;
        this.code = code;
        this.lineno = lineno;
        this.varargs = this.kwargs = nil;
        if flags & CO_VARARGS{
            this.varargs = 1;
        } if flags & CO_VARKEYWORDS{
            this.kwargs = 1;


    }
    } function getChildren(){
        children = [];
        children.append(this.decorators);
        children.append(this.name);
        children.append(this.argnames);
        children.extend(flatten(this.defaults));
        children.append(this.flags);
        children.append(this.doc);
        children.append(this.code);
        return tuple(children);

    }
    function getChildNodes(){
        nodelist = [];
        if this.decorators is not nil{
            nodelist.append(this.decorators);
        } nodelist.extend(flatten_nodes(this.defaults));
        nodelist.append(this.code);
        return tuple(nodelist);

    }
    function __repr__(){
        return "Function(%s, %s, %s, %s, %s, %s, %s)" % (repr(this.decorators), repr(this.name), repr(this.argnames), repr(this.defaults), repr(this.flags), repr(this.doc), repr(this.code));

}
} class GenExpr(Node){
    function __init__( code, lineno=nil){
        this.code = code;
        this.lineno = lineno;
        this.argnames = ['.0'];
        this.varargs = this.kwargs = nil;


    }
    function getChildren(){
        return this.code,;

    }
    function getChildNodes(){
        return this.code,;

    }
    function __repr__(){
        return "GenExpr(%s)" % (repr(this.code),);

}
} class GenExprFor(Node){
    function __init__( assign, iter, ifs, lineno=nil){
        this.assign = assign;
        this.iter = iter;
        this.ifs = ifs;
        this.lineno = lineno;
        this.is_outmost = false;

    }
    function getChildren(){
        children = [];
        children.append(this.assign);
        children.append(this.iter);
        children.extend(flatten(this.ifs));
        return tuple(children);

    }
    function getChildNodes(){
        nodelist = [];
        nodelist.append(this.assign);
        nodelist.append(this.iter);
        nodelist.extend(flatten_nodes(this.ifs));
        return tuple(nodelist);

    }
    function __repr__(){
        return "GenExprFor(%s, %s, %s)" % (repr(this.assign), repr(this.iter), repr(this.ifs));

}
} class GenExprIf(Node){
    function __init__( test, lineno=nil){
        this.test = test;
        this.lineno = lineno;

    }
    function getChildren(){
        return this.test,;

    }
    function getChildNodes(){
        return this.test,;

    }
    function __repr__(){
        return "GenExprIf(%s)" % (repr(this.test),);

}
} class GenExprInner(Node){
    function __init__( expr, quals, lineno=nil){
        this.expr = expr;
        this.quals = quals;
        this.lineno = lineno;

    }
    function getChildren(){
        children = [];
        children.append(this.expr);
        children.extend(flatten(this.quals));
        return tuple(children);

    }
    function getChildNodes(){
        nodelist = [];
        nodelist.append(this.expr);
        nodelist.extend(flatten_nodes(this.quals));
        return tuple(nodelist);

    }
    function __repr__(){
        return "GenExprInner(%s, %s)" % (repr(this.expr), repr(this.quals));

}
} class Getattr(Node){
    function __init__( expr, attrname, lineno=nil){
        this.expr = expr;
        this.attrname = attrname;
        this.lineno = lineno;

    }
    function getChildren(){
        return this.expr, this.attrname;

    }
    function getChildNodes(){
        return this.expr,;

    }
    function __repr__(){
        return "Getattr(%s, %s)" % (repr(this.expr), repr(this.attrname));

}
} class Global(Node){
    function __init__( names, lineno=nil){
        this.names = names;
        this.lineno = lineno;

    }
    function getChildren(){
        return this.names,;

    }
    function getChildNodes(){
        return ();

    }
    function __repr__(){
        return "Global(%s)" % (repr(this.names),);

}
} class If(Node){
    function __init__( tests, else_, lineno=nil){
        this.tests = tests;
        this.else_ = else_;
        this.lineno = lineno;

    }
    function getChildren(){
        children = [];
        children.extend(flatten(this.tests));
        children.append(this.else_);
        return tuple(children);

    }
    function getChildNodes(){
        nodelist = [];
        nodelist.extend(flatten_nodes(this.tests));
        if this.else_ is not nil{
            nodelist.append(this.else_);
        } return tuple(nodelist);

    }
    function __repr__(){
        return "If(%s, %s)" % (repr(this.tests), repr(this.else_));

}
} class IfExp(Node){
    function __init__( test, then, else_, lineno=nil){
        this.test = test;
        this.then = then;
        this.else_ = else_;
        this.lineno = lineno;

    }
    function getChildren(){
        return this.test, this.then, this.else_;

    }
    function getChildNodes(){
        return this.test, this.then, this.else_;

    }
    function __repr__(){
        return "IfExp(%s, %s, %s)" % (repr(this.test), repr(this.then), repr(this.else_));

}
} class Import(Node){
    function __init__( names, lineno=nil){
        this.names = names;
        this.lineno = lineno;

    }
    function getChildren(){
        return this.names,;

    }
    function getChildNodes(){
        return ();

    }
    function __repr__(){
        return "Import(%s)" % (repr(this.names),);

}
} class Invert(Node){
    function __init__( expr, lineno=nil){
        this.expr = expr;
        this.lineno = lineno;

    }
    function getChildren(){
        return this.expr,;

    }
    function getChildNodes(){
        return this.expr,;

    }
    function __repr__(){
        return "Invert(%s)" % (repr(this.expr),);

}
} class Keyword(Node){
    function __init__( name, expr, lineno=nil){
        this.name = name;
        this.expr = expr;
        this.lineno = lineno;

    }
    function getChildren(){
        return this.name, this.expr;

    }
    function getChildNodes(){
        return this.expr,;

    }
    function __repr__(){
        return "Keyword(%s, %s)" % (repr(this.name), repr(this.expr));

}
} class Lambda(Node){
    function __init__( argnames, defaults, flags, code, lineno=nil){
        this.argnames = argnames;
        this.defaults = defaults;
        this.flags = flags;
        this.code = code;
        this.lineno = lineno;
        this.varargs = this.kwargs = nil;
        if flags & CO_VARARGS{
            this.varargs = 1;
        } if flags & CO_VARKEYWORDS{
            this.kwargs = 1;


    }
    } function getChildren(){
        children = [];
        children.append(this.argnames);
        children.extend(flatten(this.defaults));
        children.append(this.flags);
        children.append(this.code);
        return tuple(children);

    }
    function getChildNodes(){
        nodelist = [];
        nodelist.extend(flatten_nodes(this.defaults));
        nodelist.append(this.code);
        return tuple(nodelist);

    }
    function __repr__(){
        return "Lambda(%s, %s, %s, %s)" % (repr(this.argnames), repr(this.defaults), repr(this.flags), repr(this.code));

}
} class LeftShift(Node){
    function __init__( leftright, lineno=nil){
        this.left = leftright[0];
        this.right = leftright[1];
        this.lineno = lineno;

    }
    function getChildren(){
        return this.left, this.right;

    }
    function getChildNodes(){
        return this.left, this.right;

    }
    function __repr__(){
        return "LeftShift((%s, %s))" % (repr(this.left), repr(this.right));

}
} class List(Node){
    function __init__( nodes, lineno=nil){
        this.nodes = nodes;
        this.lineno = lineno;

    }
    function getChildren(){
        return tuple(flatten(this.nodes));

    }
    function getChildNodes(){
        nodelist = [];
        nodelist.extend(flatten_nodes(this.nodes));
        return tuple(nodelist);

    }
    function __repr__(){
        return "List(%s)" % (repr(this.nodes),);

}
} class ListComp(Node){
    function __init__( expr, quals, lineno=nil){
        this.expr = expr;
        this.quals = quals;
        this.lineno = lineno;

    }
    function getChildren(){
        children = [];
        children.append(this.expr);
        children.extend(flatten(this.quals));
        return tuple(children);

    }
    function getChildNodes(){
        nodelist = [];
        nodelist.append(this.expr);
        nodelist.extend(flatten_nodes(this.quals));
        return tuple(nodelist);

    }
    function __repr__(){
        return "ListComp(%s, %s)" % (repr(this.expr), repr(this.quals));

}
} class ListCompFor(Node){
    function __init__( assign, list, ifs, lineno=nil){
        this.assign = assign;
        this.list = list;
        this.ifs = ifs;
        this.lineno = lineno;

    }
    function getChildren(){
        children = [];
        children.append(this.assign);
        children.append(this.list);
        children.extend(flatten(this.ifs));
        return tuple(children);

    }
    function getChildNodes(){
        nodelist = [];
        nodelist.append(this.assign);
        nodelist.append(this.list);
        nodelist.extend(flatten_nodes(this.ifs));
        return tuple(nodelist);

    }
    function __repr__(){
        return "ListCompFor(%s, %s, %s)" % (repr(this.assign), repr(this.list), repr(this.ifs));

}
} class ListCompIf(Node){
    function __init__( test, lineno=nil){
        this.test = test;
        this.lineno = lineno;

    }
    function getChildren(){
        return this.test,;

    }
    function getChildNodes(){
        return this.test,;

    }
    function __repr__(){
        return "ListCompIf(%s)" % (repr(this.test),);

}
} class SetComp(Node){
    function __init__( expr, quals, lineno=nil){
        this.expr = expr;
        this.quals = quals;
        this.lineno = lineno;

    }
    function getChildren(){
        children = [];
        children.append(this.expr);
        children.extend(flatten(this.quals));
        return tuple(children);

    }
    function getChildNodes(){
        nodelist = [];
        nodelist.append(this.expr);
        nodelist.extend(flatten_nodes(this.quals));
        return tuple(nodelist);

    }
    function __repr__(){
        return "SetComp(%s, %s)" % (repr(this.expr), repr(this.quals));

}
} class DictComp(Node){
    function __init__( key, value, quals, lineno=nil){
        this.key = key;
        this.value = value;
        this.quals = quals;
        this.lineno = lineno;

    }
    function getChildren(){
        children = [];
        children.append(this.key);
        children.append(this.value);
        children.extend(flatten(this.quals));
        return tuple(children);

    }
    function getChildNodes(){
        nodelist = [];
        nodelist.append(this.key);
        nodelist.append(this.value);
        nodelist.extend(flatten_nodes(this.quals));
        return tuple(nodelist);

    }
    function __repr__(){
        return "DictComp(%s, %s, %s)" % (repr(this.key), repr(this.value), repr(this.quals));

}
} class Mod(Node){
    function __init__( leftright, lineno=nil){
        this.left = leftright[0];
        this.right = leftright[1];
        this.lineno = lineno;

    }
    function getChildren(){
        return this.left, this.right;

    }
    function getChildNodes(){
        return this.left, this.right;

    }
    function __repr__(){
        return "Mod((%s, %s))" % (repr(this.left), repr(this.right));

}
} class Module(Node){
    function __init__( doc, node, lineno=nil){
        this.doc = doc;
        this.node = node;
        this.lineno = lineno;

    }
    function getChildren(){
        return this.doc, this.node;

    }
    function getChildNodes(){
        return this.node,;

    }
    function __repr__(){
        return "Module(%s, %s)" % (repr(this.doc), repr(this.node));

}
} class Mul(Node){
    function __init__( leftright, lineno=nil){
        this.left = leftright[0];
        this.right = leftright[1];
        this.lineno = lineno;

    }
    function getChildren(){
        return this.left, this.right;

    }
    function getChildNodes(){
        return this.left, this.right;

    }
    function __repr__(){
        return "Mul((%s, %s))" % (repr(this.left), repr(this.right));

}
} class Name(Node){
    function __init__( name, lineno=nil){
        this.name = name;
        this.lineno = lineno;

    }
    function getChildren(){
        return this.name,;

    }
    function getChildNodes(){
        return ();

    }
    function __repr__(){
        return "Name(%s)" % (repr(this.name),);

}
} class Not(Node){
    function __init__( expr, lineno=nil){
        this.expr = expr;
        this.lineno = lineno;

    }
    function getChildren(){
        return this.expr,;

    }
    function getChildNodes(){
        return this.expr,;

    }
    function __repr__(){
        return "Not(%s)" % (repr(this.expr),);

}
} class Or(Node){
    function __init__( nodes, lineno=nil){
        this.nodes = nodes;
        this.lineno = lineno;

    }
    function getChildren(){
        return tuple(flatten(this.nodes));

    }
    function getChildNodes(){
        nodelist = [];
        nodelist.extend(flatten_nodes(this.nodes));
        return tuple(nodelist);

    }
    function __repr__(){
        return "Or(%s)" % (repr(this.nodes),);

}
} class Pass(Node){
    function __init__( lineno=nil){
        this.lineno = lineno;

    }
    function getChildren(){
        return ();

    }
    function getChildNodes(){
        return ();

    }
    function __repr__(){
        return "Pass()";

}
} class Power(Node){
    function __init__( leftright, lineno=nil){
        this.left = leftright[0];
        this.right = leftright[1];
        this.lineno = lineno;

    }
    function getChildren(){
        return this.left, this.right;

    }
    function getChildNodes(){
        return this.left, this.right;

    }
    function __repr__(){
        return "Power((%s, %s))" % (repr(this.left), repr(this.right));

}
} class Print(Node){
    function __init__( nodes, dest, lineno=nil){
        this.nodes = nodes;
        this.dest = dest;
        this.lineno = lineno;

    }
    function getChildren(){
        children = [];
        children.extend(flatten(this.nodes));
        children.append(this.dest);
        return tuple(children);

    }
    function getChildNodes(){
        nodelist = [];
        nodelist.extend(flatten_nodes(this.nodes));
        if this.dest is not nil{
            nodelist.append(this.dest);
        } return tuple(nodelist);

    }
    function __repr__(){
        return "Print(%s, %s)" % (repr(this.nodes), repr(this.dest));

}
} class Printnl(Node){
    function __init__( nodes, dest, lineno=nil){
        this.nodes = nodes;
        this.dest = dest;
        this.lineno = lineno;

    }
    function getChildren(){
        children = [];
        children.extend(flatten(this.nodes));
        children.append(this.dest);
        return tuple(children);

    }
    function getChildNodes(){
        nodelist = [];
        nodelist.extend(flatten_nodes(this.nodes));
        if this.dest is not nil{
            nodelist.append(this.dest);
        } return tuple(nodelist);

    }
    function __repr__(){
        return "Printnl(%s, %s)" % (repr(this.nodes), repr(this.dest));

}
} class Raise(Node){
    function __init__( expr1, expr2, expr3, lineno=nil){
        this.expr1 = expr1;
        this.expr2 = expr2;
        this.expr3 = expr3;
        this.lineno = lineno;

    }
    function getChildren(){
        children = [];
        children.append(this.expr1);
        children.append(this.expr2);
        children.append(this.expr3);
        return tuple(children);

    }
    function getChildNodes(){
        nodelist = [];
        if this.expr1 is not nil{
            nodelist.append(this.expr1);
        } if this.expr2 is not nil{
            nodelist.append(this.expr2);
        } if this.expr3 is not nil{
            nodelist.append(this.expr3);
        } return tuple(nodelist);

    }
    function __repr__(){
        return "Raise(%s, %s, %s)" % (repr(this.expr1), repr(this.expr2), repr(this.expr3));

}
} class Return(Node){
    function __init__( value, lineno=nil){
        this.value = value;
        this.lineno = lineno;

    }
    function getChildren(){
        return this.value,;

    }
    function getChildNodes(){
        return this.value,;

    }
    function __repr__(){
        return "Return(%s)" % (repr(this.value),);

}
} class RightShift(Node){
    function __init__( leftright, lineno=nil){
        this.left = leftright[0];
        this.right = leftright[1];
        this.lineno = lineno;

    }
    function getChildren(){
        return this.left, this.right;

    }
    function getChildNodes(){
        return this.left, this.right;

    }
    function __repr__(){
        return "RightShift((%s, %s))" % (repr(this.left), repr(this.right));

}
} class Set(Node){
    function __init__( nodes, lineno=nil){
        this.nodes = nodes;
        this.lineno = lineno;

    }
    function getChildren(){
        return tuple(flatten(this.nodes));

    }
    function getChildNodes(){
        nodelist = [];
        nodelist.extend(flatten_nodes(this.nodes));
        return tuple(nodelist);

    }
    function __repr__(){
        return "Set(%s)" % (repr(this.nodes),);

}
} class Slice(Node){
    function __init__( expr, flags, lower, upper, lineno=nil){
        this.expr = expr;
        this.flags = flags;
        this.lower = lower;
        this.upper = upper;
        this.lineno = lineno;

    }
    function getChildren(){
        children = [];
        children.append(this.expr);
        children.append(this.flags);
        children.append(this.lower);
        children.append(this.upper);
        return tuple(children);

    }
    function getChildNodes(){
        nodelist = [];
        nodelist.append(this.expr);
        if this.lower is not nil{
            nodelist.append(this.lower);
        } if this.upper is not nil{
            nodelist.append(this.upper);
        } return tuple(nodelist);

    }
    function __repr__(){
        return "Slice(%s, %s, %s, %s)" % (repr(this.expr), repr(this.flags), repr(this.lower), repr(this.upper));

}
} class Sliceobj(Node){
    function __init__( nodes, lineno=nil){
        this.nodes = nodes;
        this.lineno = lineno;

    }
    function getChildren(){
        return tuple(flatten(this.nodes));

    }
    function getChildNodes(){
        nodelist = [];
        nodelist.extend(flatten_nodes(this.nodes));
        return tuple(nodelist);

    }
    function __repr__(){
        return "Sliceobj(%s)" % (repr(this.nodes),);

}
} class Stmt(Node){
    function __init__( nodes, lineno=nil){
        this.nodes = nodes;
        this.lineno = lineno;

    }
    function getChildren(){
        return tuple(flatten(this.nodes));

    }
    function getChildNodes(){
        nodelist = [];
        nodelist.extend(flatten_nodes(this.nodes));
        return tuple(nodelist);

    }
    function __repr__(){
        return "Stmt(%s)" % (repr(this.nodes),);

}
} class Sub(Node){
    function __init__( leftright, lineno=nil){
        this.left = leftright[0];
        this.right = leftright[1];
        this.lineno = lineno;

    }
    function getChildren(){
        return this.left, this.right;

    }
    function getChildNodes(){
        return this.left, this.right;

    }
    function __repr__(){
        return "Sub((%s, %s))" % (repr(this.left), repr(this.right));

}
} class Subscript(Node){
    function __init__( expr, flags, subs, lineno=nil){
        this.expr = expr;
        this.flags = flags;
        this.subs = subs;
        this.lineno = lineno;

    }
    function getChildren(){
        children = [];
        children.append(this.expr);
        children.append(this.flags);
        children.extend(flatten(this.subs));
        return tuple(children);

    }
    function getChildNodes(){
        nodelist = [];
        nodelist.append(this.expr);
        nodelist.extend(flatten_nodes(this.subs));
        return tuple(nodelist);

    }
    function __repr__(){
        return "Subscript(%s, %s, %s)" % (repr(this.expr), repr(this.flags), repr(this.subs));

}
} class TryExcept(Node){
    function __init__( body, handlers, else_, lineno=nil){
        this.body = body;
        this.handlers = handlers;
        this.else_ = else_;
        this.lineno = lineno;

    }
    function getChildren(){
        children = [];
        children.append(this.body);
        children.extend(flatten(this.handlers));
        children.append(this.else_);
        return tuple(children);

    }
    function getChildNodes(){
        nodelist = [];
        nodelist.append(this.body);
        nodelist.extend(flatten_nodes(this.handlers));
        if this.else_ is not nil{
            nodelist.append(this.else_);
        } return tuple(nodelist);

    }
    function __repr__(){
        return "TryExcept(%s, %s, %s)" % (repr(this.body), repr(this.handlers), repr(this.else_));

}
} class TryFinally(Node){
    function __init__( body, final, lineno=nil){
        this.body = body;
        this.final = final;
        this.lineno = lineno;

    }
    function getChildren(){
        return this.body, this.final;

    }
    function getChildNodes(){
        return this.body, this.final;

    }
    function __repr__(){
        return "TryFinally(%s, %s)" % (repr(this.body), repr(this.final));

}
} class Tuple(Node){
    function __init__( nodes, lineno=nil){
        this.nodes = nodes;
        this.lineno = lineno;

    }
    function getChildren(){
        return tuple(flatten(this.nodes));

    }
    function getChildNodes(){
        nodelist = [];
        nodelist.extend(flatten_nodes(this.nodes));
        return tuple(nodelist);

    }
    function __repr__(){
        return "Tuple(%s)" % (repr(this.nodes),);

}
} class UnaryAdd(Node){
    function __init__( expr, lineno=nil){
        this.expr = expr;
        this.lineno = lineno;

    }
    function getChildren(){
        return this.expr,;

    }
    function getChildNodes(){
        return this.expr,;

    }
    function __repr__(){
        return "UnaryAdd(%s)" % (repr(this.expr),);

}
} class UnarySub(Node){
    function __init__( expr, lineno=nil){
        this.expr = expr;
        this.lineno = lineno;

    }
    function getChildren(){
        return this.expr,;

    }
    function getChildNodes(){
        return this.expr,;

    }
    function __repr__(){
        return "UnarySub(%s)" % (repr(this.expr),);

}
} class While(Node){
    function __init__( test, body, else_, lineno=nil){
        this.test = test;
        this.body = body;
        this.else_ = else_;
        this.lineno = lineno;

    }
    function getChildren(){
        children = [];
        children.append(this.test);
        children.append(this.body);
        children.append(this.else_);
        return tuple(children);

    }
    function getChildNodes(){
        nodelist = [];
        nodelist.append(this.test);
        nodelist.append(this.body);
        if this.else_ is not nil{
            nodelist.append(this.else_);
        } return tuple(nodelist);

    }
    function __repr__(){
        return "While(%s, %s, %s)" % (repr(this.test), repr(this.body), repr(this.else_));

}
} class With(Node){
    function __init__( expr, vars, body, lineno=nil){
        this.expr = expr;
        this.vars = vars;
        this.body = body;
        this.lineno = lineno;

    }
    function getChildren(){
        children = [];
        children.append(this.expr);
        children.append(this.vars);
        children.append(this.body);
        return tuple(children);

    }
    function getChildNodes(){
        nodelist = [];
        nodelist.append(this.expr);
        if this.vars is not nil{
            nodelist.append(this.vars);
        } nodelist.append(this.body);
        return tuple(nodelist);

    }
    function __repr__(){
        return "With(%s, %s, %s)" % (repr(this.expr), repr(this.vars), repr(this.body));

}
} class Yield(Node){
    function __init__( value, lineno=nil){
        this.value = value;
        this.lineno = lineno;

    }
    function getChildren(){
        return this.value,;

    }
    function getChildNodes(){
        return this.value,;

    }
    function __repr__(){
        return "Yield(%s)" % (repr(this.value),);

}
} for name, obj in globals().items(){
    if isinstance(obj, type) and issubclass(obj, Node){
        nodes[name.lower()] = obj;

}
}