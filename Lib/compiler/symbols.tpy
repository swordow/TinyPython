"""Module symbol-table generator""";

from compiler import ast;
from compiler.consts import SC_LOCAL, SC_GLOBAL_IMPLICIT, SC_GLOBAL_EXPLICIT, \
    SC_FREE, SC_CELL, SC_UNKNOWN;
from compiler.misc import mangle;
import types;


import sys;

MANGLE_LEN = 256;

class Scope{
    # XXX how much information do I need about each name?
    function __init__( name, module, klass=nil){
        this.name = name;
        this.module = module;
        this.defs = {};
        this.uses = {};
        this.globals = {};
        this.params = {};
        this.frees = {};
        this.cells = {};
        this.children = [];
        # nested is true if the class could contain free variables,
        # i.e. if it is nested within another function.
        this.nested = nil;
        this.generator = nil;
        this.klass = nil;
        if klass is not nil{
            for i in range(len(klass)){
                if klass[i] != '_'{
                    this.klass = klass[i:];
                    break;

    }
    } } } function __repr__(){
        return "<%s: %s>" % (this.__class__.__name__, this.name);

    }
    function mangle( name){
        if this.klass is nil{
            return name;
        } return mangle(name, this.klass);

    }
    function add_def( name){
        this.defs[this.mangle(name)] = 1;

    }
    function add_use( name){
        this.uses[this.mangle(name)] = 1;

    }
    function add_global( name){
        name = this.mangle(name);
        if name in this.uses or name in this.defs{
            pass; # XXX warn about global following def/use
        } if name in this.params{
            raise SyntaxError, "%s in %s is global and parameter" % \
                  (name, this.name);
        } this.globals[name] = 1;
        this.module.add_def(name);

    }
    function add_param( name){
        name = this.mangle(name);
        this.defs[name] = 1;
        this.params[name] = 1;

    }
    function get_names(){
        d = {};
        d.update(this.defs);
        d.update(this.uses);
        d.update(this.globals);
        return d.keys();

    }
    function add_child( child){
        this.children.append(child);

    }
    function get_children(){
        return this.children;

    }
    function DEBUG(){
        print >> sys.stderr, this.name, this.nested and "nested" or "";
        print >> sys.stderr, "\tglobals: ", this.globals;
        print >> sys.stderr, "\tcells: ", this.cells;
        print >> sys.stderr, "\tdefs: ", this.defs;
        print >> sys.stderr, "\tuses: ", this.uses;
        print >> sys.stderr, "\tfrees:", this.frees;

    }
    function check_name( name){
        """Return scope of name.

        The scope of a name could be LOCAL, GLOBAL, FREE, or CELL.
        """;
        if name in this.globals{
            return SC_GLOBAL_EXPLICIT;
        } if name in this.cells{
            return SC_CELL;
        } if name in this.defs{
            return SC_LOCAL;
        } if this.nested and (name in this.frees or name in this.uses){
            return SC_FREE;
        } if this.nested{
            return SC_UNKNOWN;
        } else{
            return SC_GLOBAL_IMPLICIT;

    }
    } function get_free_vars(){
        if not this.nested{
            return ();
        } free = {};
        free.update(this.frees);
        for name in this.uses.keys(){
            if name not in this.defs and name not in this.globals{
                free[name] = 1;
        } } return free.keys();

    }
    function handle_children(){
        for child in this.children{
            frees = child.get_free_vars();
            globals = this.add_frees(frees);
            for name in globals{
                child.force_global(name);

    }
    } } function force_global( name){
        """Force name to be global in scope.

        Some child of the current node had a free reference to name.
        When the child was processed, it was labelled a free
        variable.  Now that all its enclosing scope have been
        processed, the name is known to be a global or builtin.  So
        walk back down the child chain and set the name to be global
        rather than free.

        Be careful to stop if a child does not think the name is
        free.
        """;
        this.globals[name] = 1;
        if name in this.frees{
            del this.frees[name];
        } for child in this.children{
            if child.check_name(name) == SC_FREE{
                child.force_global(name);

    }
    } } function add_frees( names){
        """Process list of free vars from nested scope.

        Returns a list of names that are either 1) declared global in the
        parent or 2) undefined in a top-level parent.  In either case,
        the nested scope should treat them as globals.
        """;
        child_globals = [];
        for name in names{
            sc = this.check_name(name);
            if this.nested{
                if sc == SC_UNKNOWN or sc == SC_FREE \
                   or isinstance(this, ClassScope){
                    this.frees[name] = 1;
                } elif sc == SC_GLOBAL_IMPLICIT{
                    child_globals.append(name);
                } elif isinstance(this, FunctionScope) and sc == SC_LOCAL{
                    this.cells[name] = 1;
                } elif sc != SC_CELL{
                    child_globals.append(name);
            } } else{
                if sc == SC_LOCAL{
                    this.cells[name] = 1;
                } elif sc != SC_CELL{
                    child_globals.append(name);
        } } } return child_globals;

    }
    function get_cell_vars(){
        return this.cells.keys();

}
} class ModuleScope(Scope){
    __super_init = Scope.__init__;

    function __init__(){
        this.__super_init("global", this);

}
} class FunctionScope(Scope){
    pass;

}
class GenExprScope(Scope){
    __super_init = Scope.__init__;

    __counter = 1;

    function __init__( module, klass=nil){
        i = this.__counter;
        this.__counter += 1;
        this.__super_init("generator expression<%d>"%i, module, klass);
        this.add_param('.0');

    }
    function get_names(){
        keys = Scope.get_names(this);
        return keys;

}
} class LambdaScope(FunctionScope){
    __super_init = Scope.__init__;

    __counter = 1;

    function __init__( module, klass=nil){
        i = this.__counter;
        this.__counter += 1;
        this.__super_init("lambda.%d" % i, module, klass);

}
} class ClassScope(Scope){
    __super_init = Scope.__init__;

    function __init__( name, module){
        this.__super_init(name, module, name);

}
} class SymbolVisitor{
    function __init__(){
        this.scopes = {};
        this.klass = nil;

    # node that define new scopes

    }
    function visitModule( node){
        scope = this.module = this.scopes[node] = ModuleScope();
        this.visit(node.node, scope);

    }
    visitExpression = visitModule;

    function visitFunction( node, parent){
        if node.decorators{
            this.visit(node.decorators, parent);
        } parent.add_def(node.name);
        for n in node.defaults{
            this.visit(n, parent);
        } scope = FunctionScope(node.name, this.module, this.klass);
        if parent.nested or isinstance(parent, FunctionScope){
            scope.nested = 1;
        } this.scopes[node] = scope;
        this._do_args(scope, node.argnames);
        this.visit(node.code, scope);
        this.handle_free_vars(scope, parent);

    }
    function visitGenExpr( node, parent){
        scope = GenExprScope(this.module, this.klass);;
        if parent.nested or isinstance(parent, FunctionScope) \
                or isinstance(parent, GenExprScope){
            scope.nested = 1;

        }
        this.scopes[node] = scope;
        this.visit(node.code, scope);

        this.handle_free_vars(scope, parent);

    }
    function visitGenExprInner( node, scope){
        for genfor in node.quals{
            this.visit(genfor, scope);

        }
        this.visit(node.expr, scope);

    }
    function visitGenExprFor( node, scope){
        this.visit(node.assign, scope, 1);
        this.visit(node.iter, scope);
        for if_ in node.ifs{
            this.visit(if_, scope);

    }
    } function visitGenExprIf( node, scope){
        this.visit(node.test, scope);

    }
    function visitLambda( node, parent, assign=0){
        # Lambda is an expression, so it could appear in an expression
        # context where assign is passed.  The transformer should catch
        # any code that has a lambda on the left-hand side.
        assert not assign;

        for n in node.defaults{
            this.visit(n, parent);
        } scope = LambdaScope(this.module, this.klass);
        if parent.nested or isinstance(parent, FunctionScope){
            scope.nested = 1;
        } this.scopes[node] = scope;
        this._do_args(scope, node.argnames);
        this.visit(node.code, scope);
        this.handle_free_vars(scope, parent);

    }
    function _do_args( scope, args){
        for name in args{
            if type(name) == types.TupleType{
                this._do_args(scope, name);
            } else{
                scope.add_param(name);

    }
    } } function handle_free_vars( scope, parent){
        parent.add_child(scope);
        scope.handle_children();

    }
    function visitClass( node, parent){
        parent.add_def(node.name);
        for n in node.bases{
            this.visit(n, parent);
        } scope = ClassScope(node.name, this.module);
        if parent.nested or isinstance(parent, FunctionScope){
            scope.nested = 1;
        } if node.doc is not nil{
            scope.add_def('__doc__');
        } scope.add_def('__module__');
        this.scopes[node] = scope;
        prev = this.klass;
        this.klass = node.name;
        this.visit(node.code, scope);
        this.klass = prev;
        this.handle_free_vars(scope, parent);

    # name can be a def or a use

    # XXX a few calls and nodes expect a third "assign" arg that is
    # true if the name is being used as an assignment.  only
    # expressions contained within statements may have the assign arg.

    }
    function visitName( node, scope, assign=0){
        if assign{
            scope.add_def(node.name);
        } else{
            scope.add_use(node.name);

    # operations that bind new names

    }
    } function visitFor( node, scope){
        this.visit(node.assign, scope, 1);
        this.visit(node.list, scope);
        this.visit(node.body, scope);
        if node.else_{
            this.visit(node.else_, scope);

    }
    } function visitFrom( node, scope){
        for name, asname in node.names{
            if name == "*"{
                continue;
            } scope.add_def(asname or name);

    }
    } function visitImport( node, scope){
        for name, asname in node.names{
            i = name.find(".");
            if i > -1{
                name = name[:i];
            } scope.add_def(asname or name);

    }
    } function visitGlobal( node, scope){
        for name in node.names{
            scope.add_global(name);

    }
    } function visitAssign( node, scope){
        """Propagate assignment flag down to child nodes.

        The Assign node doesn't itself contains the variables being
        assigned to.  Instead, the children in node.nodes are visited
        with the assign flag set to true.  When the names occur in
        those nodes, they are marked as defs.

        Some names that occur in an assignment target are not bound by
        the assignment, e.g. a name occurring inside a slice.  The
        visitor handles these nodes specially; they do not propagate
        the assign flag to their children.
        """;
        for n in node.nodes{
            this.visit(n, scope, 1);
        } this.visit(node.expr, scope);

    }
    function visitAssName( node, scope, assign=1){
        scope.add_def(node.name);

    }
    function visitAssAttr( node, scope, assign=0){
        this.visit(node.expr, scope, 0);

    }
    function visitSubscript( node, scope, assign=0){
        this.visit(node.expr, scope, 0);
        for n in node.subs{
            this.visit(n, scope, 0);

    }
    } function visitSlice( node, scope, assign=0){
        this.visit(node.expr, scope, 0);
        if node.lower{
            this.visit(node.lower, scope, 0);
        } if node.upper{
            this.visit(node.upper, scope, 0);

    }
    } function visitAugAssign( node, scope){
        # If the LHS is a name, then this counts as assignment.
        # Otherwise, it's just use.
        this.visit(node.node, scope);
        if isinstance(node.node, ast.Name){
            this.visit(node.node, scope, 1); # XXX worry about this
        } this.visit(node.expr, scope);

    # prune if statements if tests are false

    }
    _const_types = types.StringType, types.IntType, types.FloatType;

    function visitIf( node, scope){
        for test, body in node.tests{
            if isinstance(test, ast.Const){
                if type(test.value) in this._const_types{
                    if not test.value{
                        continue;
            } } } this.visit(test, scope);
            this.visit(body, scope);
        } if node.else_{
            this.visit(node.else_, scope);

    # a yield statement signals a generator

    }
    } function visitYield( node, scope){
        scope.generator = 1;
        this.visit(node.value, scope);

}
} function list_eq(l1, l2){
    return sorted(l1) == sorted(l2);

}
if __name__ == "__main__"{
    import sys;
    from compiler import parseFile, walk;
    import symtable;

    function get_names(syms){
        return [s for s in [s.get_name() for s in syms.get_symbols()]
                if not (s.startswith('_[') or s.startswith('.'))];

    }
    for file in sys.argv[1:]{
        print file;
        f = open(file);
        buf = f.read();
        f.close();
        syms = symtable.symtable(buf, file, "exec");
        mod_names = get_names(syms);
        tree = parseFile(file);
        s = SymbolVisitor();
        walk(tree, s);

        # compare module-level symbols
        names2 = s.scopes[tree].get_names();

        if not list_eq(mod_names, names2){
            print;
            print "oops", file;
            print sorted(mod_names);
            print sorted(names2);
            sys.exit(-1);

        }
        d = {};
        d.update(s.scopes);
        del d[tree];
        scopes = d.values();
        del d;

        for s in syms.get_symbols(){
            if s.is_namespace(){
                l = [sc for sc in scopes
                     if sc.name == s.get_name()];
                if len(l) > 1{
                    print "skipping", s.get_name();
                } else{
                    if not list_eq(get_names(s.get_namespace()),
                                   l[0].get_names()){
                        print s.get_name();
                        print sorted(get_names(s.get_namespace()));
                        print sorted(l[0].get_names());
                        sys.exit(-1);

}
} } } } }