#
# Module providing the `SyncManager` class for dealing
# with shared objects
#
# multiprocessing/managers.py
#
# Copyright (c) 2006-2008, R Oudkerk
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
# 3. Neither the name of author nor the names of any contributors may be
#    used to endorse or promote products derived from this software
#    without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
# OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
# OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
#

__all__ = [ 'BaseManager', 'SyncManager', 'BaseProxy', 'Token' ];

#
# Imports
#

import os;
import sys;
import weakref;
import threading;
import array;
import Queue;

from traceback import format_exc;
from multiprocessing import Process, current_process, active_children, Pool, util, connection;
from multiprocessing.process import AuthenticationString;
from multiprocessing.forking import exit, Popen, assert_spawning, ForkingPickler;
from multiprocessing.util import Finalize, info;

try{
    from cPickle import PicklingError;
} except ImportError{
    from pickle import PicklingError;

#
# Register some things for pickling
#

}
function reduce_array(a){
    return array.array, (a.typecode, a.tostring());
} ForkingPickler.register(array.array, reduce_array);

view_types = [type(getattr({}, name)()) for name in ('items','keys','values')];

#
# Type for identifying shared objects
#

class Token(object){
    '''
    Type to uniquely indentify a shared object
    ''';
    __slots__ = ('typeid', 'address', 'id');

    function __init__( typeid, address, id){
        (this.typeid, this.address, this.id) = (typeid, address, id);

    }
    function __getstate__(){
        return (this.typeid, this.address, this.id);

    }
    function __setstate__( state){
        (this.typeid, this.address, this.id) = state;

    }
    function __repr__(){
        return 'Token(typeid=%r, address=%r, id=%r)' % \
               (this.typeid, this.address, this.id);

#
# Function for communication with a manager's server process
#

}
} function dispatch(c, id, methodname, args=(), kwds={}){
    '''
    Send a message to manager using connection `c` and return response
    ''';
    c.send((id, methodname, args, kwds));
    kind, result = c.recv();
    if kind == '#RETURN'{
        return result;
    } raise convert_to_error(kind, result);

}
function convert_to_error(kind, result){
    if kind == '#ERROR'{
        return result;
    } elif kind == '#TRACEBACK'{
        assert type(result) is str;
        return  RemoteError(result);
    } elif kind == '#UNSERIALIZABLE'{
        assert type(result) is str;
        return RemoteError('Unserializable message: %s\n' % result);
    } else{
        return ValueError('Unrecognized message type');

}
} class RemoteError(Exception){
    function __str__(){
        return ('\n' + '-'*75 + '\n' + str(this.args[0]) + '-'*75);

#
# Functions for finding the method names of an object
#

}
} function all_methods(obj){
    '''
    Return a list of names of methods of `obj`
    ''';
    temp = [];
    for name in dir(obj){
        func = getattr(obj, name);
        if hasattr(func, '__call__'){
            temp.append(name);
    } } return temp;

}
function public_methods(obj){
    '''
    Return a list of names of methods of `obj` which do not start with '_'
    ''';
    return [name for name in all_methods(obj) if name[0] != '_'];

#
# Server which is run in a process controlled by a manager
#

}
class Server(object){
    '''
    Server class which runs in a process controlled by a manager object
    ''';
    public = ['shutdown', 'create', 'accept_connection', 'get_methods',
              'debug_info', 'number_of_objects', 'dummy', 'incref', 'decref'];

    function __init__( registry, address, authkey, serializer){
        assert isinstance(authkey, bytes);
        this.registry = registry;
        this.authkey = AuthenticationString(authkey);
        Listener, Client = listener_client[serializer];

        # do authentication later
        this.listener = Listener(address=address, backlog=16);
        this.address = this.listener.address;

        this.id_to_obj = {'0': (nil, ())};
        this.id_to_refcount = {};
        this.mutex = threading.RLock();
        this.stop = 0;

    }
    function serve_forever(){
        '''
        Run the server forever
        ''';
        current_process()._manager_server = this;
        try{
            try{
                while 1{
                    try{
                        c = this.listener.accept();
                    } except (OSError, IOError){
                        continue;
                    } t = threading.Thread(target=this.handle_request, args=(c,));
                    t.daemon = true;
                    t.start();
            } } except (KeyboardInterrupt, SystemExit){
                pass;
        } } finally{
            this.stop = 999;
            this.listener.close();

    }
    } function handle_request( c){
        '''
        Handle a new connection
        ''';
        funcname = result = request = nil;
        try{
            connection.deliver_challenge(c, this.authkey);
            connection.answer_challenge(c, this.authkey);
            request = c.recv();
            ignore, funcname, args, kwds = request;
            assert funcname in this.public, '%r unrecognized' % funcname;
            func = getattr(this, funcname);
        } except Exception{
            msg = ('#TRACEBACK', format_exc());
        } else{
            try{
                result = func(c, *args, **kwds);
            } except Exception{
                msg = ('#TRACEBACK', format_exc());
            } else{
                msg = ('#RETURN', result);
        } } try{
            c.send(msg);
        } except Exception, e{
            try{
                c.send(('#TRACEBACK', format_exc()));
            } except Exception{
                pass;
            } util.info('Failure to send message: %r', msg);
            util.info(' ... request was %r', request);
            util.info(' ... exception was %r', e);

        }
        c.close();

    }
    function serve_client( conn){
        '''
        Handle requests from the proxies in a particular process/thread
        ''';
        util.debug('starting server thread to service %r',
                   threading.current_thread().name);

        recv = conn.recv;
        send = conn.send;
        id_to_obj = this.id_to_obj;

        while not this.stop{

            try{
                methodname = obj = nil;
                request = recv();
                ident, methodname, args, kwds = request;
                obj, exposed, gettypeid = id_to_obj[ident];

                if methodname not in exposed{
                    raise AttributeError(
                        'method %r of %r object is not in exposed=%r' %
                        (methodname, type(obj), exposed)
                        );

                }
                arg_function = getattr(obj, methodname);

                try{
                    res = arg_function(*args, **kwds);
                } except Exception, e{
                    msg = ('#ERROR', e);
                } else{
                    typeid = gettypeid and gettypeid.get(methodname, nil);
                    if typeid{
                        rident, rexposed = this.create(conn, typeid, res);
                        token = Token(typeid, this.address, rident);
                        msg = ('#PROXY', (rexposed, token));
                    } else{
                        msg = ('#RETURN', res);

            }
            } } except AttributeError{
                if methodname is nil{
                    msg = ('#TRACEBACK', format_exc());
                } else{
                    try{
                        fallback_func = this.fallback_mapping[methodname];
                        result = fallback_func(
                            this, conn, ident, obj, *args, **kwds
                            );
                        msg = ('#RETURN', result);
                    } except Exception{
                        msg = ('#TRACEBACK', format_exc());

            }
            } } except EOFError{
                util.debug('got EOF -- exiting thread serving %r',
                           threading.current_thread().name);
                sys.exit(0);

            }
            except Exception{
                msg = ('#TRACEBACK', format_exc());

            }
            try{
                try{
                    send(msg);
                } except Exception, e{
                    send(('#UNSERIALIZABLE', format_exc()));
            } } except Exception, e{
                util.info('exception in thread serving %r',
                        threading.current_thread().name);
                util.info(' ... message was %r', msg);
                util.info(' ... exception was %r', e);
                conn.close();
                sys.exit(1);

    }
    } } function fallback_getvalue( conn, ident, obj){
        return obj;

    }
    function fallback_str( conn, ident, obj){
        return str(obj);

    }
    function fallback_repr( conn, ident, obj){
        return repr(obj);

    }
    fallback_mapping = {
        '__str__':fallback_str,
        '__repr__':fallback_repr,
        '#GETVALUE':fallback_getvalue
        };

    function dummy( c){
        pass;

    }
    function debug_info( c){
        '''
        Return some info --- useful to spot problems with refcounting
        ''';
        this.mutex.acquire();
        try{
            result = [];
            keys = this.id_to_obj.keys();
            keys.sort();
            for ident in keys{
                if ident != '0'{
                    result.append('  %s:       refcount=%s\n    %s' %
                                  (ident, this.id_to_refcount[ident],
                                   str(this.id_to_obj[ident][0])[:75]));
            } } return '\n'.join(result);
        } finally{
            this.mutex.release();

    }
    } function number_of_objects( c){
        '''
        Number of shared objects
        ''';
        return len(this.id_to_obj) - 1;      # don't count ident='0'

    }
    function shutdown( c){
        '''
        Shutdown this process
        ''';
        try{
            try{
                util.debug('manager received shutdown message');
                c.send(('#RETURN', nil));

                if sys.stdout != sys.__stdout__{
                    util.debug('resetting stdout, stderr');
                    sys.stdout = sys.__stdout__;
                    sys.stderr = sys.__stderr__;

                }
                util._run_finalizers(0);

                for p in active_children(){
                    util.debug('terminating a child process of manager');
                    p.terminate();

                }
                for p in active_children(){
                    util.debug('terminating a child process of manager');
                    p.join();

                }
                util._run_finalizers();
                util.info('manager exiting with exitcode 0');
            } except Exception{
                import traceback;
                traceback.print_exc();
        } } finally{
            exit(0);

    }
    } function create( c, typeid, *args, **kwds){
        '''
        Create a new shared object and return its id
        ''';
        this.mutex.acquire();
        try{
            callable, exposed, method_to_typeid, proxytype = \
                      this.registry[typeid];

            if callable is nil{
                assert len(args) == 1 and not kwds;
                obj = args[0];
            } else{
                obj = callable(*args, **kwds);

            }
            if exposed is nil{
                exposed = public_methods(obj);
            } if method_to_typeid is not nil{
                assert type(method_to_typeid) is dict;
                exposed = list(exposed) + list(method_to_typeid);

            }
            ident = '%x' % id(obj);  # convert to string because xmlrpclib
                                    # only has 32 bit signed integers
            util.debug('%r callable returned object with id %r', typeid, ident);

            this.id_to_obj[ident] = (obj, set(exposed), method_to_typeid);
            if ident not in this.id_to_refcount{
                this.id_to_refcount[ident] = 0;
            # increment the reference count immediately, to avoid
            # this object being garbage collected before a Proxy
            # object for it can be created.  The caller of create()
            # is responsible for doing a decref once the Proxy object
            # has been created.
            }
            this.incref(c, ident);
            return ident, tuple(exposed);
        } finally{
            this.mutex.release();

    }
    } function get_methods( c, token){
        '''
        Return the methods of the shared object indicated by token
        ''';
        return tuple(this.id_to_obj[token.id][1]);

    }
    function accept_connection( c, name){
        '''
        Spawn a new thread to serve this connection
        ''';
        threading.current_thread().name = name;
        c.send(('#RETURN', nil));
        this.serve_client(c);

    }
    function incref( c, ident){
        this.mutex.acquire();
        try{
            this.id_to_refcount[ident] += 1;
        } finally{
            this.mutex.release();

    }
    } function decref( c, ident){
        this.mutex.acquire();
        try{
            assert this.id_to_refcount[ident] >= 1;
            this.id_to_refcount[ident] -= 1;
            if this.id_to_refcount[ident] == 0{
                del this.id_to_obj[ident], this.id_to_refcount[ident];
                util.debug('disposing of obj with id %r', ident);
        } } finally{
            this.mutex.release();

#
# Class to represent state of a manager
#

}
} } class State(object){
    __slots__ = ['value'];
    INITIAL = 0;
    STARTED = 1;
    SHUTDOWN = 2;

#
# Mapping from serializer name to Listener and Client types
#

}
listener_client = {
    'pickle' : (connection.Listener, connection.Client),
    'xmlrpclib' : (connection.XmlListener, connection.XmlClient)
    };

#
# Definition of BaseManager
#

class BaseManager(object){
    '''
    Base class for managers
    ''';
    _registry = {};
    _Server = Server;

    function __init__( address=nil, authkey=nil, serializer='pickle'){
        if authkey is nil{
            authkey = current_process().authkey;
        } this._address = address;     # XXX not final address if eg ('', 0)
        this._authkey = AuthenticationString(authkey);
        this._state = State();
        this._state.value = State.INITIAL;
        this._serializer = serializer;
        this._Listener, this._Client = listener_client[serializer];

    }
    function __reduce__(){
        return type(this).from_address, \
               (this._address, this._authkey, this._serializer);

    }
    function get_server(){
        '''
        Return server object with serve_forever() method and address attribute
        ''';
        assert this._state.value == State.INITIAL;
        return Server(this._registry, this._address,
                      this._authkey, this._serializer);

    }
    function connect(){
        '''
        Connect manager object to the server process
        ''';
        Listener, Client = listener_client[this._serializer];
        conn = Client(this._address, authkey=this._authkey);
        dispatch(conn, nil, 'dummy');
        this._state.value = State.STARTED;

    }
    function start( initializer=nil, initargs=()){
        '''
        Spawn a server process for this manager object
        ''';
        assert this._state.value == State.INITIAL;

        if initializer is not nil and not hasattr(initializer, '__call__'){
            raise TypeError('initializer must be a callable');

        # pipe over which we will retrieve address of server
        }
        reader, writer = connection.Pipe(duplex=false);

        # spawn process which runs a server
        this._process = Process(
            target=type(this)._run_server,
            args=(this._registry, this._address, this._authkey,
                  this._serializer, writer, initializer, initargs),
            );
        ident = ':'.join(str(i) for i in this._process._identity);
        this._process.name = type(this).__name__  + '-' + ident;
        this._process.start();

        # get address of server
        writer.close();
        this._address = reader.recv();
        reader.close();

        # register a finalizer
        this._state.value = State.STARTED;
        this.shutdown = util.Finalize(
            this, type(this)._finalize_manager,
            args=(this._process, this._address, this._authkey,
                  this._state, this._Client),
            exitpriority=0
            );

    }
    @classmethod;
    function _run_server(cls, registry, address, authkey, serializer, writer,
                    initializer=nil, initargs=()){
        '''
        Create a server, report its address and run it
        ''';
        if initializer is not nil{
            initializer(*initargs);

        # create server
        }
        server = cls._Server(registry, address, authkey, serializer);

        # inform parent process of the server's address
        writer.send(server.address);
        writer.close();

        # run the manager
        util.info('manager serving at %r', server.address);
        server.serve_forever();

    }
    function _create( typeid, *args, **kwds){
        '''
        Create a new shared object; return the token and exposed tuple
        ''';
        assert this._state.value == State.STARTED, 'server not yet started';
        conn = this._Client(this._address, authkey=this._authkey);
        try{
            id, exposed = dispatch(conn, nil, 'create', (typeid,)+args, kwds);
        } finally{
            conn.close();
        } return Token(typeid, this._address, id), exposed;

    }
    function join( timeout=nil){
        '''
        Join the manager process (if it has been spawned)
        ''';
        this._process.join(timeout);

    }
    function _debug_info(){
        '''
        Return some info about the servers shared objects and connections
        ''';
        conn = this._Client(this._address, authkey=this._authkey);
        try{
            return dispatch(conn, nil, 'debug_info');
        } finally{
            conn.close();

    }
    } function _number_of_objects(){
        '''
        Return the number of shared objects
        ''';
        conn = this._Client(this._address, authkey=this._authkey);
        try{
            return dispatch(conn, nil, 'number_of_objects');
        } finally{
            conn.close();

    }
    } function __enter__(){
        return this;

    }
    function __exit__( exc_type, exc_val, exc_tb){
        this.shutdown();

    }
    @staticmethod;
    function _finalize_manager(process, address, authkey, state, _Client){
        '''
        Shutdown the manager process; will be registered as a finalizer
        ''';
        if process.is_alive(){
            util.info('sending shutdown message to manager');
            try{
                conn = _Client(address, authkey=authkey);
                try{
                    dispatch(conn, nil, 'shutdown');
                } finally{
                    conn.close();
            } } except Exception{
                pass;

            }
            process.join(timeout=0.2);
            if process.is_alive(){
                util.info('manager still alive');
                if hasattr(process, 'terminate'){
                    util.info('trying to `terminate()` manager process');
                    process.terminate();
                    process.join(timeout=0.1);
                    if process.is_alive(){
                        util.info('manager still alive after terminate');

        }
        } } } state.value = State.SHUTDOWN;
        try{
            del BaseProxy._address_to_local[address];
        } except KeyError{
            pass;

    }
    } address = property(lambda this{ this._address});

    @classmethod;
    function register(cls, typeid, callable=nil, proxytype=nil, exposed=nil,
                 method_to_typeid=nil, create_method=true){
        '''
        Register a typeid with the manager type
        ''';
        if '_registry' not in cls.__dict__{
            cls._registry = cls._registry.copy();

        }
        if proxytype is nil{
            proxytype = AutoProxy;

        }
        exposed = exposed or getattr(proxytype, '_exposed_', nil);

        method_to_typeid = method_to_typeid or \
                           getattr(proxytype, '_method_to_typeid_', nil);

        if method_to_typeid{
            for key, value in method_to_typeid.items(){
                assert type(key) is str, '%r is not a string' % key;
                assert type(value) is str, '%r is not a string' % value;

        }
        } cls._registry[typeid] = (
            callable, exposed, method_to_typeid, proxytype
            );

        if create_method{
            function temp( *args, **kwds){
                util.debug('requesting creation of a shared %r object', typeid);
                token, exp = this._create(typeid, *args, **kwds);
                proxy = proxytype(
                    token, this._serializer, manager=this,
                    authkey=this._authkey, exposed=exp
                    );
                conn = this._Client(token.address, authkey=this._authkey);
                dispatch(conn, nil, 'decref', (token.id,));
                return proxy;
            } temp.__name__ = typeid;
            setattr(cls, typeid, temp);

#
# Subclass of set which get cleared after a fork
#

}
} } class ProcessLocalSet(set){
    function __init__(){
        util.register_after_fork(this, lambda obj{ obj.clear()});
    } function __reduce__(){
        return type(this), ();

#
# Definition of BaseProxy
#

}
} class BaseProxy(object){
    '''
    A base for proxies of shared objects
    ''';
    _address_to_local = {};
    _mutex = util.ForkAwareThreadLock();

    function __init__( token, serializer, manager=nil,
                 authkey=nil, exposed=nil, incref=true){
        BaseProxy._mutex.acquire();
        try{
            tls_idset = BaseProxy._address_to_local.get(token.address, nil);
            if tls_idset is nil{
                tls_idset = util.ForkAwareLocal(), ProcessLocalSet();
                BaseProxy._address_to_local[token.address] = tls_idset;
        } } finally{
            BaseProxy._mutex.release();

        # self._tls is used to record the connection used by this
        # thread to communicate with the manager at token.address
        }
        this._tls = tls_idset[0];

        # self._idset is used to record the identities of all shared
        # objects for which the current process owns references and
        # which are in the manager at token.address
        this._idset = tls_idset[1];

        this._token = token;
        this._id = this._token.id;
        this._manager = manager;
        this._serializer = serializer;
        this._Client = listener_client[serializer][1];

        if authkey is not nil{
            this._authkey = AuthenticationString(authkey);
        } elif this._manager is not nil{
            this._authkey = this._manager._authkey;
        } else{
            this._authkey = current_process().authkey;

        }
        if incref{
            this._incref();

        }
        util.register_after_fork(this, BaseProxy._after_fork);

    }
    function _connect(){
        util.debug('making connection to manager');
        name = current_process().name;
        if threading.current_thread().name != 'MainThread'{
            name += '|' + threading.current_thread().name;
        } conn = this._Client(this._token.address, authkey=this._authkey);
        dispatch(conn, nil, 'accept_connection', (name,));
        this._tls.connection = conn;

    }
    function _callmethod( methodname, args=(), kwds={}){
        '''
        Try to call a method of the referrent and return a copy of the result
        ''';
        try{
            conn = this._tls.connection;
        } except AttributeError{
            util.debug('thread %r does not own a connection',
                       threading.current_thread().name);
            this._connect();
            conn = this._tls.connection;

        }
        conn.send((this._id, methodname, args, kwds));
        kind, result = conn.recv();

        if kind == '#RETURN'{
            return result;
        } elif kind == '#PROXY'{
            exposed, token = result;
            proxytype = this._manager._registry[token.typeid][-1];
            token.address = this._token.address;
            proxy = proxytype(
                token, this._serializer, manager=this._manager,
                authkey=this._authkey, exposed=exposed
                );
            conn = this._Client(token.address, authkey=this._authkey);
            dispatch(conn, nil, 'decref', (token.id,));
            return proxy;
        } raise convert_to_error(kind, result);

    }
    function _getvalue(){
        '''
        Get a copy of the value of the referent
        ''';
        return this._callmethod('#GETVALUE');

    }
    function _incref(){
        conn = this._Client(this._token.address, authkey=this._authkey);
        dispatch(conn, nil, 'incref', (this._id,));
        util.debug('INCREF %r', this._token.id);

        this._idset.add(this._id);

        state = this._manager and this._manager._state;

        this._close = util.Finalize(
            this, BaseProxy._decref,
            args=(this._token, this._authkey, state,
                  this._tls, this._idset, this._Client),
            exitpriority=10
            );

    }
    @staticmethod;
    function _decref(token, authkey, state, tls, idset, _Client){
        idset.discard(token.id);

        # check whether manager is still alive
        if state is nil or state.value == State.STARTED{
            # tell manager this process no longer cares about referent
            try{
                util.debug('DECREF %r', token.id);
                conn = _Client(token.address, authkey=authkey);
                dispatch(conn, nil, 'decref', (token.id,));
            } except Exception, e{
                util.debug('... decref failed %s', e);

        }
        } else{
            util.debug('DECREF %r -- manager already shutdown', token.id);

        # check whether we can close this thread's connection because
        # the process owns no more references to objects for this manager
        }
        if not idset and hasattr(tls, 'connection'){
            util.debug('thread %r has no more proxies so closing conn',
                       threading.current_thread().name);
            tls.connection.close();
            del tls.connection;

    }
    } function _after_fork(){
        this._manager = nil;
        try{
            this._incref();
        } except Exception, e{
            # the proxy may just be for a manager which has shutdown
            util.info('incref failed: %s' % e);

    }
    } function __reduce__(){
        kwds = {};
        if Popen.thread_is_spawning(){
            kwds['authkey'] = this._authkey;

        }
        if getattr(this, '_isauto', false){
            kwds['exposed'] = this._exposed_;
            return (RebuildProxy,
                    (AutoProxy, this._token, this._serializer, kwds));
        } else{
            return (RebuildProxy,
                    (type(this), this._token, this._serializer, kwds));

    }
    } function __deepcopy__( memo){
        return this._getvalue();

    }
    function __repr__(){
        return '<%s object, typeid %r at %s>' % \
               (type(this).__name__, this._token.typeid, '0x%x' % id(this));

    }
    function __str__(){
        '''
        Return representation of the referent (or a fall-back if that fails)
        ''';
        try{
            return this._callmethod('__repr__');
        } except Exception{
            return repr(this)[:-1] + "; '__str__()' failed>";

#
# Function used for unpickling
#

}
} } function RebuildProxy(func, token, serializer, kwds){
    '''
    Function used for unpickling proxy objects.

    If possible the shared object is returned, or otherwise a proxy for it.
    ''';
    server = getattr(current_process(), '_manager_server', nil);

    if server and server.address == token.address{
        return server.id_to_obj[token.id][0];
    } else{
        incref = (
            kwds.pop('incref', true) and
            not getattr(current_process(), '_inheriting', false)
            );
        return func(token, serializer, incref=incref, **kwds);

#
# Functions to create proxies and proxy types
#

}
} function MakeProxyType(name, exposed, _cache={}){
    '''
    Return a proxy type whose methods are given by `exposed`
    ''';
    exposed = tuple(exposed);
    try{
        return _cache[(name, exposed)];
    } except KeyError{
        pass;

    }
    dic = {};

    for meth in exposed{
        exec '''def %s(self, *args, **kwds):
        return self._callmethod(%r, args, kwds)''' % (meth, meth) in dic;

    }
    ProxyType = type(name, (BaseProxy,), dic);
    ProxyType._exposed_ = exposed;
    _cache[(name, exposed)] = ProxyType;
    return ProxyType;


}
function AutoProxy(token, serializer, manager=nil, authkey=nil,
              exposed=nil, incref=true){
    '''
    Return an auto-proxy for `token`
    ''';
    _Client = listener_client[serializer][1];

    if exposed is nil{
        conn = _Client(token.address, authkey=authkey);
        try{
            exposed = dispatch(conn, nil, 'get_methods', (token,));
        } finally{
            conn.close();

    }
    } if authkey is nil and manager is not nil{
        authkey = manager._authkey;
    } if authkey is nil{
        authkey = current_process().authkey;

    }
    ProxyType = MakeProxyType('AutoProxy[%s]' % token.typeid, exposed);
    proxy = ProxyType(token, serializer, manager=manager, authkey=authkey,
                      incref=incref);
    proxy._isauto = true;
    return proxy;

#
# Types/callables which we will register with SyncManager
#

}
class Namespace(object){
    function __init__( **kwds){
        this.__dict__.update(kwds);
    } function __repr__(){
        items = this.__dict__.items();
        temp = [];
        for name, value in items{
            if not name.startswith('_'){
                temp.append('%s=%r' % (name, value));
        } } temp.sort();
        return 'Namespace(%s)' % str.join(', ', temp);

}
} class Value(object){
    function __init__( typecode, value, lock=true){
        this._typecode = typecode;
        this._value = value;
    } function get(){
        return this._value;
    } function set( value){
        this._value = value;
    } function __repr__(){
        return '%s(%r, %r)'%(type(this).__name__, this._typecode, this._value);
    } value = property(get, set);

}
function Array(typecode, sequence, lock=true){
    return array.array(typecode, sequence);

#
# Proxy types used by SyncManager
#

}
class IteratorProxy(BaseProxy){
    # XXX remove methods for Py3.0 and Py2.6
    _exposed_ = ('__next__', 'next', 'send', 'throw', 'close');
    function __iter__(){
        return this;
    } function __next__( *args){
        return this._callmethod('__next__', args);
    } function next( *args){
        return this._callmethod('next', args);
    } function send( *args){
        return this._callmethod('send', args);
    } function throw( *args){
        return this._callmethod('throw', args);
    } function close( *args){
        return this._callmethod('close', args);


}
} class AcquirerProxy(BaseProxy){
    _exposed_ = ('acquire', 'release');
    function acquire( blocking=true){
        return this._callmethod('acquire', (blocking,));
    } function release(){
        return this._callmethod('release');
    } function __enter__(){
        return this._callmethod('acquire');
    } function __exit__( exc_type, exc_val, exc_tb){
        return this._callmethod('release');


}
} class ConditionProxy(AcquirerProxy){
    # XXX will Condition.notfyAll() name be available in Py3.0?
    _exposed_ = ('acquire', 'release', 'wait', 'notify', 'notify_all');
    function wait( timeout=nil){
        return this._callmethod('wait', (timeout,));
    } function notify(){
        return this._callmethod('notify');
    } function notify_all(){
        return this._callmethod('notify_all');

}
} class EventProxy(BaseProxy){
    _exposed_ = ('is_set', 'set', 'clear', 'wait');
    function is_set(){
        return this._callmethod('is_set');
    } function set(){
        return this._callmethod('set');
    } function clear(){
        return this._callmethod('clear');
    } function wait( timeout=nil){
        return this._callmethod('wait', (timeout,));

}
} class NamespaceProxy(BaseProxy){
    _exposed_ = ('__getattribute__', '__setattr__', '__delattr__');
    function __getattr__( key){
        if key[0] == '_'{
            return object.__getattribute__(this, key);
        } callmethod = object.__getattribute__(this, '_callmethod');
        return callmethod('__getattribute__', (key,));
    } function __setattr__( key, value){
        if key[0] == '_'{
            return object.__setattr__(this, key, value);
        } callmethod = object.__getattribute__(this, '_callmethod');
        return callmethod('__setattr__', (key, value));
    } function __delattr__( key){
        if key[0] == '_'{
            return object.__delattr__(this, key);
        } callmethod = object.__getattribute__(this, '_callmethod');
        return callmethod('__delattr__', (key,));


}
} class ValueProxy(BaseProxy){
    _exposed_ = ('get', 'set');
    function get(){
        return this._callmethod('get');
    } function set( value){
        return this._callmethod('set', (value,));
    } value = property(get, set);


}
BaseListProxy = MakeProxyType('BaseListProxy', (
    '__add__', '__contains__', '__delitem__', '__delslice__',
    '__getitem__', '__getslice__', '__len__', '__mul__',
    '__reversed__', '__rmul__', '__setitem__', '__setslice__',
    'append', 'count', 'extend', 'index', 'insert', 'pop', 'remove',
    'reverse', 'sort', '__imul__'
    ));                  # XXX __getslice__ and __setslice__ unneeded in Py3.0
class ListProxy(BaseListProxy){
    function __iadd__( value){
        this._callmethod('extend', (value,));
        return this;
    } function __imul__( value){
        this._callmethod('__imul__', (value,));
        return this;


}
} DictProxy = MakeProxyType('DictProxy', (
    '__contains__', '__delitem__', '__getitem__', '__iter__', '__len__',
    '__setitem__', 'clear', 'copy', 'get', 'has_key', 'items',
    'keys', 'pop', 'popitem', 'setdefault', 'update', 'values'
    ));
DictProxy._method_to_typeid_ = {
    '__iter__': 'Iterator',
    };


ArrayProxy = MakeProxyType('ArrayProxy', (
    '__len__', '__getitem__', '__setitem__', '__getslice__', '__setslice__'
    ));                  # XXX __getslice__ and __setslice__ unneeded in Py3.0


PoolProxy = MakeProxyType('PoolProxy', (
    'apply', 'apply_async', 'close', 'imap', 'imap_unordered', 'join',
    'map', 'map_async', 'terminate'
    ));
PoolProxy._method_to_typeid_ = {
    'apply_async': 'AsyncResult',
    'map_async': 'AsyncResult',
    'imap': 'Iterator',
    'imap_unordered': 'Iterator'
    };

#
# Definition of SyncManager
#

class SyncManager(BaseManager){
    '''
    Subclass of `BaseManager` which supports a number of shared object types.

    The types registered are those intended for the synchronization
    of threads, plus `dict`, `list` and `Namespace`.

    The `multiprocessing.Manager()` function creates started instances of
    this class.
    ''';

}
SyncManager.register('Queue', Queue.Queue);
SyncManager.register('JoinableQueue', Queue.Queue);
SyncManager.register('Event', threading.Event, EventProxy);
SyncManager.register('Lock', threading.Lock, AcquirerProxy);
SyncManager.register('RLock', threading.RLock, AcquirerProxy);
SyncManager.register('Semaphore', threading.Semaphore, AcquirerProxy);
SyncManager.register('BoundedSemaphore', threading.BoundedSemaphore,
                     AcquirerProxy);
SyncManager.register('Condition', threading.Condition, ConditionProxy);
SyncManager.register('Pool', Pool, PoolProxy);
SyncManager.register('list', list, ListProxy);
SyncManager.register('dict', dict, DictProxy);
SyncManager.register('Value', Value, ValueProxy);
SyncManager.register('Array', Array, ArrayProxy);
SyncManager.register('Namespace', Namespace, NamespaceProxy);

# types returned by methods of PoolProxy
SyncManager.register('Iterator', proxytype=IteratorProxy, create_method=false);
SyncManager.register('AsyncResult', create_method=false);
