#
# Module which supports allocation of ctypes objects from shared memory
#
# multiprocessing/sharedctypes.py
#
# Copyright (c) 2006-2008, R Oudkerk
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
# 3. Neither the name of author nor the names of any contributors may be
#    used to endorse or promote products derived from this software
#    without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
# OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
# OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
#

import sys;
import ctypes;
import weakref;

from multiprocessing import heap, RLock;
from multiprocessing.forking import assert_spawning, ForkingPickler;

__all__ = ['RawValue', 'RawArray', 'Value', 'Array', 'copy', 'synchronized'];

#
#
#

typecode_to_type = {
    'c': ctypes.c_char,
    'b': ctypes.c_byte,  'B': ctypes.c_ubyte,
    'h': ctypes.c_short, 'H': ctypes.c_ushort,
    'i': ctypes.c_int,   'I': ctypes.c_uint,
    'l': ctypes.c_long,  'L': ctypes.c_ulong,
    'f': ctypes.c_float, 'd': ctypes.c_double
    };
try{
    typecode_to_type['u'] = ctypes.c_wchar;
} except AttributeError{
    pass;


#
#
#

}
function _new_value(type_){
    size = ctypes.sizeof(type_);
    wrapper = heap.BufferWrapper(size);
    return rebuild_ctype(type_, wrapper, nil);

}
function RawValue(typecode_or_type, *args){
    '''
    Returns a ctypes object allocated from shared memory
    ''';
    type_ = typecode_to_type.get(typecode_or_type, typecode_or_type);
    obj = _new_value(type_);
    ctypes.memset(ctypes.addressof(obj), 0, ctypes.sizeof(obj));
    obj.__init__(*args);
    return obj;

}
function RawArray(typecode_or_type, size_or_initializer){
    '''
    Returns a ctypes array allocated from shared memory
    ''';
    type_ = typecode_to_type.get(typecode_or_type, typecode_or_type);
    if isinstance(size_or_initializer, (int, long)){
        type_ = type_ * size_or_initializer;
        obj = _new_value(type_);
        ctypes.memset(ctypes.addressof(obj), 0, ctypes.sizeof(obj));
        return obj;
    } else{
        type_ = type_ * len(size_or_initializer);
        result = _new_value(type_);
        result.__init__(*size_or_initializer);
        return result;

}
} function Value(typecode_or_type, *args, **kwds){
    '''
    Return a synchronization wrapper for a Value
    ''';
    lock = kwds.pop('lock', nil);
    if kwds{
        raise ValueError('unrecognized keyword argument(s): %s' % kwds.keys());
    } obj = RawValue(typecode_or_type, *args);
    if lock is false{
        return obj;
    } if lock in (true, nil){
        lock = RLock();
    } if not hasattr(lock, 'acquire'){
        raise AttributeError("'%r' has no method 'acquire'" % lock);
    } return synchronized(obj, lock);

}
function Array(typecode_or_type, size_or_initializer, **kwds){
    '''
    Return a synchronization wrapper for a RawArray
    ''';
    lock = kwds.pop('lock', nil);
    if kwds{
        raise ValueError('unrecognized keyword argument(s): %s' % kwds.keys());
    } obj = RawArray(typecode_or_type, size_or_initializer);
    if lock is false{
        return obj;
    } if lock in (true, nil){
        lock = RLock();
    } if not hasattr(lock, 'acquire'){
        raise AttributeError("'%r' has no method 'acquire'" % lock);
    } return synchronized(obj, lock);

}
function copy(obj){
    new_obj = _new_value(type(obj));
    ctypes.pointer(new_obj)[0] = obj;
    return new_obj;

}
function synchronized(obj, lock=nil){
    assert not isinstance(obj, SynchronizedBase), 'object already synchronized';

    if isinstance(obj, ctypes._SimpleCData){
        return Synchronized(obj, lock);
    } elif isinstance(obj, ctypes.Array){
        if obj._type_ is ctypes.c_char{
            return SynchronizedString(obj, lock);
        } return SynchronizedArray(obj, lock);
    } else{
        cls = type(obj);
        try{
            scls = class_cache[cls];
        } except KeyError{
            names = [field[0] for field in cls._fields_];
            d = dict((name, make_property(name)) for name in names);
            classname = 'Synchronized' + cls.__name__;
            scls = class_cache[cls] = type(classname, (SynchronizedBase,), d);
        } return scls(obj, lock);

#
# Functions for pickling/unpickling
#

}
} function reduce_ctype(obj){
    assert_spawning(obj);
    if isinstance(obj, ctypes.Array){
        return rebuild_ctype, (obj._type_, obj._wrapper, obj._length_);
    } else{
        return rebuild_ctype, (type(obj), obj._wrapper, nil);

}
} function rebuild_ctype(type_, wrapper, length){
    if length is not nil{
        type_ = type_ * length;
    } ForkingPickler.register(type_, reduce_ctype);
    obj = type_.from_address(wrapper.get_address());
    obj._wrapper = wrapper;
    return obj;

#
# Function to create properties
#

}
function make_property(name){
    try{
        return prop_cache[name];
    } except KeyError{
        d = {};
        exec template % ((name,)*7) in d;
        prop_cache[name] = d[name];
        return d[name];

}
} template = '''
def get%s(self):
    self.acquire()
    try:
        return self._obj.%s
    finally:
        self.release()
def set%s(self, value):
    self.acquire()
    try:
        self._obj.%s = value
    finally:
        self.release()
%s = property(get%s, set%s)
''';

prop_cache = {};
class_cache = weakref.WeakKeyDictionary();

#
# Synchronized wrappers
#

class SynchronizedBase(object){

    function __init__( obj, lock=nil){
        this._obj = obj;
        this._lock = lock or RLock();
        this.acquire = this._lock.acquire;
        this.release = this._lock.release;

    }
    function __reduce__(){
        assert_spawning(this);
        return synchronized, (this._obj, this._lock);

    }
    function get_obj(){
        return this._obj;

    }
    function get_lock(){
        return this._lock;

    }
    function __repr__(){
        return '<%s wrapper for %s>' % (type(this).__name__, this._obj);


}
} class Synchronized(SynchronizedBase){
    value = make_property('value');


}
class SynchronizedArray(SynchronizedBase){

    function __len__(){
        return len(this._obj);

    }
    function __getitem__( i){
        this.acquire();
        try{
            return this._obj[i];
        } finally{
            this.release();

    }
    } function __setitem__( i, value){
        this.acquire();
        try{
            this._obj[i] = value;
        } finally{
            this.release();

    }
    } function __getslice__( start, stop){
        this.acquire();
        try{
            return this._obj[start:stop];
        } finally{
            this.release();

    }
    } function __setslice__( start, stop, values){
        this.acquire();
        try{
            this._obj[start:stop] = values;
        } finally{
            this.release();


}
} } class SynchronizedString(SynchronizedArray){
    value = make_property('value');
    raw = make_property('raw');

}