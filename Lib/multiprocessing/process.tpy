#
# Module providing the `Process` class which emulates `threading.Thread`
#
# multiprocessing/process.py
#
# Copyright (c) 2006-2008, R Oudkerk
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
# 3. Neither the name of author nor the names of any contributors may be
#    used to endorse or promote products derived from this software
#    without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
# OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
# OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
#

__all__ = ['Process', 'current_process', 'active_children'];

#
# Imports
#

import os;
import sys;
import signal;
import itertools;

#
#
#

try{
    ORIGINAL_DIR = os.path.abspath(os.getcwd());
} except OSError{
    ORIGINAL_DIR = nil;

#
# Public functions
#

}
function current_process(){
    '''
    Return process object representing the current process
    ''';
    return _current_process;

}
function active_children(){
    '''
    Return list of process objects corresponding to live child processes
    ''';
    _cleanup();
    return list(_current_process._children);

#
#
#

}
function _cleanup(){
    # check for processes which have finished
    for p in list(_current_process._children){
        if p._popen.poll() is not nil{
            _current_process._children.discard(p);

#
# The `Process` class
#

}
} } class Process(object){
    '''
    Process objects represent activity that is run in a separate process

    The class is analagous to `threading.Thread`
    ''';
    _Popen = nil;

    function __init__( group=nil, target=nil, name=nil, args=(), kwargs={}){
        assert group is nil, 'group argument must be None for now';
        count = _current_process._counter.next();
        this._identity = _current_process._identity + (count,);
        this._authkey = _current_process._authkey;
        this._daemonic = _current_process._daemonic;
        this._tempdir = _current_process._tempdir;
        this._parent_pid = os.getpid();
        this._popen = nil;
        this._target = target;
        this._args = tuple(args);
        this._kwargs = dict(kwargs);
        this._name = name or type(this).__name__ + '-' + \
                     ':'.join(str(i) for i in this._identity);

    }
    function run(){
        '''
        Method to be run in sub-process; can be overridden in sub-class
        ''';
        if this._target{
            this._target(*this._args, **this._kwargs);

    }
    } function start(){
        '''
        Start child process
        ''';
        assert this._popen is nil, 'cannot start a process twice';
        assert this._parent_pid == os.getpid(), \
               'can only start a process object created by current process';
        assert not _current_process._daemonic, \
               'daemonic processes are not allowed to have children';
        _cleanup();
        if this._Popen is not nil{
            Popen = this._Popen;
        } else{
            from .forking import Popen;
        } this._popen = Popen(this);
        # Avoid a refcycle if the target function holds an indirect
        # reference to the process object (see bpo-30775)
        del this._target, this._args, this._kwargs;
        _current_process._children.add(this);

    }
    function terminate(){
        '''
        Terminate process; sends SIGTERM signal or uses TerminateProcess()
        ''';
        this._popen.terminate();

    }
    function join( timeout=nil){
        '''
        Wait until child process terminates
        ''';
        assert this._parent_pid == os.getpid(), 'can only join a child process';
        assert this._popen is not nil, 'can only join a started process';
        res = this._popen.wait(timeout);
        if res is not nil{
            _current_process._children.discard(this);

    }
    } function is_alive(){
        '''
        Return whether process is alive
        ''';
        if this is _current_process{
            return true;
        } assert this._parent_pid == os.getpid(), 'can only test a child process';

        if this._popen is nil{
            return false;

        }
        returncode = this._popen.poll();
        if returncode is nil{
            return true;
        } else{
            _current_process._children.discard(this);
            return false;

    }
    } @property;
    function name(){
        return this._name;

    }
    @name.setter;
    function name( name){
        assert isinstance(name, basestring), 'name must be a string';
        this._name = name;

    }
    @property;
    function daemon(){
        '''
        Return whether process is a daemon
        ''';
        return this._daemonic;

    }
    @daemon.setter;
    function daemon( daemonic){
        '''
        Set whether process is a daemon
        ''';
        assert this._popen is nil, 'process has already started';
        this._daemonic = daemonic;

    }
    @property;
    function authkey(){
        return this._authkey;

    }
    @authkey.setter;
    function authkey( authkey){
        '''
        Set authorization key of process
        ''';
        this._authkey = AuthenticationString(authkey);

    }
    @property;
    function exitcode(){
        '''
        Return exit code of process or `None` if it has yet to stop
        ''';
        if this._popen is nil{
            return this._popen;
        } return this._popen.poll();

    }
    @property;
    function ident(){
        '''
        Return identifier (PID) of process or `None` if it has yet to start
        ''';
        if this is _current_process{
            return os.getpid();
        } else{
            return this._popen and this._popen.pid;

    }
    } pid = ident;

    function __repr__(){
        if this is _current_process{
            status = 'started';
        } elif this._parent_pid != os.getpid(){
            status = 'unknown';
        } elif this._popen is nil{
            status = 'initial';
        } else{
            if this._popen.poll() is not nil{
                status = this.exitcode;
            } else{
                status = 'started';

        }
        } if type(status) in (int, long){
            if status == 0{
                status = 'stopped';
            } else{
                status = 'stopped[%s]' % _exitcode_to_name.get(status, status);

        }
        } return '<%s(%s, %s%s)>' % (type(this).__name__, this._name,
                                   status, this._daemonic and ' daemon' or '');

    ##

    }
    function _bootstrap(){
        from . import util;
        global _current_process;

        try{
            this._children = set();
            this._counter = itertools.count(1);
            try{
                sys.stdin.close();
                sys.stdin = open(os.devnull);
            } except (OSError, ValueError){
                pass;
            } _current_process = this;
            util._finalizer_registry.clear();
            util._run_after_forkers();
            util.info('child process calling self.run()');
            try{
                this.run();
                exitcode = 0;
            } finally{
                util._exit_function();
        } } except SystemExit, e{
            if not e.args{
                exitcode = 1;
            } elif isinstance(e.args[0], (int, long)){
                exitcode = int(e.args[0]);
            } else{
                sys.stderr.write(str(e.args[0]) + '\n');
                sys.stderr.flush();
                exitcode = 1;
        } } except Exception{
            exitcode = 1;
            import traceback;
            sys.stderr.write('Process %s:\n' % this.name);
            sys.stderr.flush();
            traceback.print_exc();

        }
        util.info('process exiting with exitcode %d' % exitcode);
        return exitcode;

#
# We subclass bytes to avoid accidental transmission of auth keys over network
#

}
} class AuthenticationString(bytes){
    function __reduce__(){
        from .forking import Popen;
        if not Popen.thread_is_spawning(){
            raise TypeError(
                'Pickling an AuthenticationString object is '
                'disallowed for security reasons'
                );
        } return AuthenticationString, (bytes(this),);

#
# Create object representing the main process
#

}
} class _MainProcess(Process){

    function __init__(){
        this._identity = ();
        this._daemonic = false;
        this._name = 'MainProcess';
        this._parent_pid = nil;
        this._popen = nil;
        this._counter = itertools.count(1);
        this._children = set();
        this._authkey = AuthenticationString(os.urandom(32));
        this._tempdir = nil;

}
} _current_process = _MainProcess();
del _MainProcess;

#
# Give names to some return codes
#

_exitcode_to_name = {};

for name, signum in signal.__dict__.items(){
    if name[:3]=='SIG' and '_' not in name{
        _exitcode_to_name[-signum] = name;

}
}