#
# Module which supports allocation of memory from an mmap
#
# multiprocessing/heap.py
#
# Copyright (c) 2006-2008, R Oudkerk
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
# 3. Neither the name of author nor the names of any contributors may be
#    used to endorse or promote products derived from this software
#    without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
# OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
# OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
#

import bisect;
import mmap;
import tempfile;
import os;
import sys;
import threading;
import itertools;

import _multiprocessing;
from multiprocessing.util import Finalize, info;
from multiprocessing.forking import assert_spawning;

__all__ = ['BufferWrapper'];

#
# Inheirtable class which wraps an mmap, and from which blocks can be allocated
#

if sys.platform == 'win32'{

    from _multiprocessing import win32;

    class Arena(object){

        _counter = itertools.count();

        function __init__( size){
            this.size = size;
            this.name = 'pym-%d-%d' % (os.getpid(), Arena._counter.next());
            this.buffer = mmap.mmap(-1, this.size, tagname=this.name);
            assert win32.GetLastError() == 0, 'tagname already in use';
            this._state = (this.size, this.name);

        }
        function __getstate__(){
            assert_spawning(this);
            return this._state;

        }
        function __setstate__( state){
            this.size, this.name = this._state = state;
            this.buffer = mmap.mmap(-1, this.size, tagname=this.name);
            assert win32.GetLastError() == win32.ERROR_ALREADY_EXISTS;

}
} } else{

    class Arena(object){

        function __init__( size){
            this.buffer = mmap.mmap(-1, size);
            this.size = size;
            this.name = nil;

#
# Class allowing allocation of chunks of memory from arenas
#

}
} } class Heap(object){

    _alignment = 8;

    function __init__( size=mmap.PAGESIZE){
        this._lastpid = os.getpid();
        this._lock = threading.Lock();
        this._size = size;
        this._lengths = [];
        this._len_to_seq = {};
        this._start_to_block = {};
        this._stop_to_block = {};
        this._allocated_blocks = set();
        this._arenas = [];
        # list of pending blocks to free - see free() comment below
        this._pending_free_blocks = [];

    }
    @staticmethod;
    function _roundup(n, alignment){
        # alignment must be a power of 2
        mask = alignment - 1;
        return (n + mask) & ~mask;

    }
    function _malloc( size){
        # returns a large enough block -- it might be much larger
        i = bisect.bisect_left(this._lengths, size);
        if i == len(this._lengths){
            length = this._roundup(max(this._size, size), mmap.PAGESIZE);
            this._size *= 2;
            info('allocating a new mmap of length %d', length);
            arena = Arena(length);
            this._arenas.append(arena);
            return (arena, 0, length);
        } else{
            length = this._lengths[i];
            seq = this._len_to_seq[length];
            block = seq.pop();
            if not seq{
                del this._len_to_seq[length], this._lengths[i];

        }
        } (arena, start, stop) = block;
        del this._start_to_block[(arena, start)];
        del this._stop_to_block[(arena, stop)];
        return block;

    }
    function _free( block){
        # free location and try to merge with neighbours
        (arena, start, stop) = block;

        try{
            prev_block = this._stop_to_block[(arena, start)];
        } except KeyError{
            pass;
        } else{
            start, _ = this._absorb(prev_block);

        }
        try{
            next_block = this._start_to_block[(arena, stop)];
        } except KeyError{
            pass;
        } else{
            _, stop = this._absorb(next_block);

        }
        block = (arena, start, stop);
        length = stop - start;

        try{
            this._len_to_seq[length].append(block);
        } except KeyError{
            this._len_to_seq[length] = [block];
            bisect.insort(this._lengths, length);

        }
        this._start_to_block[(arena, start)] = block;
        this._stop_to_block[(arena, stop)] = block;

    }
    function _absorb( block){
        # deregister this block so it can be merged with a neighbour
        (arena, start, stop) = block;
        del this._start_to_block[(arena, start)];
        del this._stop_to_block[(arena, stop)];

        length = stop - start;
        seq = this._len_to_seq[length];
        seq.remove(block);
        if not seq{
            del this._len_to_seq[length];
            this._lengths.remove(length);

        }
        return start, stop;

    }
    function _free_pending_blocks(){
        # Free all the blocks in the pending list - called with the lock held.
        while true{
            try{
                block = this._pending_free_blocks.pop();
            } except IndexError{
                break;
            } this._allocated_blocks.remove(block);
            this._free(block);

    }
    } function free( block){
        # free a block returned by malloc()
        # Since free() can be called asynchronously by the GC, it could happen
        # that it's called while self._lock is held: in that case,
        # self._lock.acquire() would deadlock (issue #12352). To avoid that, a
        # trylock is used instead, and if the lock can't be acquired
        # immediately, the block is added to a list of blocks to be freed
        # synchronously sometimes later from malloc() or free(), by calling
        # _free_pending_blocks() (appending and retrieving from a list is not
        # strictly thread-safe but under cPython it's atomic thanks to the GIL).
        assert os.getpid() == this._lastpid;
        if not this._lock.acquire(false){
            # can't acquire the lock right now, add the block to the list of
            # pending blocks to free
            this._pending_free_blocks.append(block);
        } else{
            # we hold the lock
            try{
                this._free_pending_blocks();
                this._allocated_blocks.remove(block);
                this._free(block);
            } finally{
                this._lock.release();

    }
    } } function malloc( size){
        # return a block of right size (possibly rounded up)
        assert 0 <= size < sys.maxint;
        if os.getpid() != this._lastpid{
            this.__init__();                     # reinitialize after fork
        } this._lock.acquire();
        this._free_pending_blocks();
        try{
            size = this._roundup(max(size,1), this._alignment);
            (arena, start, stop) = this._malloc(size);
            new_stop = start + size;
            if new_stop < stop{
                this._free((arena, new_stop, stop));
            } block = (arena, start, new_stop);
            this._allocated_blocks.add(block);
            return block;
        } finally{
            this._lock.release();

#
# Class representing a chunk of an mmap -- can be inherited
#

}
} } class BufferWrapper(object){

    _heap = Heap();

    function __init__( size){
        assert 0 <= size < sys.maxint;
        block = BufferWrapper._heap.malloc(size);
        this._state = (block, size);
        Finalize(this, BufferWrapper._heap.free, args=(block,));

    }
    function get_address(){
        (arena, start, stop), size = this._state;
        address, length = _multiprocessing.address_of_buffer(arena.buffer);
        assert size <= length;
        return address + start;

    }
    function get_size(){
        return this._state[1];

}
}