#
# Module implementing queues
#
# multiprocessing/queues.py
#
# Copyright (c) 2006-2008, R Oudkerk
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
# 3. Neither the name of author nor the names of any contributors may be
#    used to endorse or promote products derived from this software
#    without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
# OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
# OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
#

__all__ = ['Queue', 'SimpleQueue', 'JoinableQueue'];

import sys;
import os;
import threading;
import collections;
import time;
import atexit;
import weakref;

from Queue import Empty, Full;
import _multiprocessing;
from . import Pipe;
from .synchronize import Lock, BoundedSemaphore, Semaphore, Condition;
from .util import debug, info, Finalize, register_after_fork, is_exiting;
from .forking import assert_spawning;

#
# Queue type using a pipe, buffer and thread
#

class Queue(object){

    function __init__( maxsize=0){
        if maxsize <= 0{
            maxsize = _multiprocessing.SemLock.SEM_VALUE_MAX;
        } this._maxsize = maxsize;
        this._reader, this._writer = Pipe(duplex=false);
        this._rlock = Lock();
        this._opid = os.getpid();
        if sys.platform == 'win32'{
            this._wlock = nil;
        } else{
            this._wlock = Lock();
        } this._sem = BoundedSemaphore(maxsize);

        this._after_fork();

        if sys.platform != 'win32'{
            register_after_fork(this, Queue._after_fork);

    }
    } function __getstate__(){
        assert_spawning(this);
        return (this._maxsize, this._reader, this._writer,
                this._rlock, this._wlock, this._sem, this._opid);

    }
    function __setstate__( state){
        (this._maxsize, this._reader, this._writer,
         this._rlock, this._wlock, this._sem, this._opid) = state;
        this._after_fork();

    }
    function _after_fork(){
        debug('Queue._after_fork()');
        this._notempty = threading.Condition(threading.Lock());
        this._buffer = collections.deque();
        this._thread = nil;
        this._jointhread = nil;
        this._joincancelled = false;
        this._closed = false;
        this._close = nil;
        this._send = this._writer.send;
        this._recv = this._reader.recv;
        this._poll = this._reader.poll;

    }
    function put( obj, block=true, timeout=nil){
        assert not this._closed;
        if not this._sem.acquire(block, timeout){
            raise Full;

        }
        this._notempty.acquire();
        try{
            if this._thread is nil{
                this._start_thread();
            } this._buffer.append(obj);
            this._notempty.notify();
        } finally{
            this._notempty.release();

    }
    } function get( block=true, timeout=nil){
        if block and timeout is nil{
            this._rlock.acquire();
            try{
                res = this._recv();
                this._sem.release();
                return res;
            } finally{
                this._rlock.release();

        }
        } else{
            if block{
                deadline = time.time() + timeout;
            } if not this._rlock.acquire(block, timeout){
                raise Empty;
            } try{
                if block{
                    timeout = deadline - time.time();
                    if not this._poll(timeout){
                        raise Empty;
                } } elif not this._poll(){
                    raise Empty;
                } res = this._recv();
                this._sem.release();
                return res;
            } finally{
                this._rlock.release();

    }
    } } function qsize(){
        # Raises NotImplementedError on Mac OSX because of broken sem_getvalue()
        return this._maxsize - this._sem._semlock._get_value();

    }
    function empty(){
        return not this._poll();

    }
    function full(){
        return this._sem._semlock._is_zero();

    }
    function get_nowait(){
        return this.get(false);

    }
    function put_nowait( obj){
        return this.put(obj, false);

    }
    function close(){
        this._closed = true;
        try{
            this._reader.close();
        } finally{
            close = this._close;
            if close{
                this._close = nil;
                close();

    }
    } } function join_thread(){
        debug('Queue.join_thread()');
        assert this._closed;
        if this._jointhread{
            this._jointhread();

    }
    } function cancel_join_thread(){
        debug('Queue.cancel_join_thread()');
        this._joincancelled = true;
        try{
            this._jointhread.cancel();
        } except AttributeError{
            pass;

    }
    } function _start_thread(){
        debug('Queue._start_thread()');

        # Start thread which transfers data from buffer to pipe
        this._buffer.clear();
        this._thread = threading.Thread(
            target=Queue._feed,
            args=(this._buffer, this._notempty, this._send,
                  this._wlock, this._writer.close),
            name='QueueFeederThread'
            );
        this._thread.daemon = true;

        debug('doing self._thread.start()');
        this._thread.start();
        debug('... done self._thread.start()');

        # On process exit we will wait for data to be flushed to pipe.
        if not this._joincancelled{
            this._jointhread = Finalize(
                this._thread, Queue._finalize_join,
                [weakref.ref(this._thread)],
                exitpriority=-5
                );

        # Send sentinel to the thread queue object when garbage collected
        }
        this._close = Finalize(
            this, Queue._finalize_close,
            [this._buffer, this._notempty],
            exitpriority=10
            );

    }
    @staticmethod;
    function _finalize_join(twr){
        debug('joining queue thread');
        thread = twr();
        if thread is not nil{
            thread.join();
            debug('... queue thread joined');
        } else{
            debug('... queue thread already dead');

    }
    } @staticmethod;
    function _finalize_close(buffer, notempty){
        debug('telling queue thread to quit');
        notempty.acquire();
        try{
            buffer.append(_sentinel);
            notempty.notify();
        } finally{
            notempty.release();

    }
    } @staticmethod;
    function _feed(buffer, notempty, send, writelock, close){
        debug('starting thread to feed data to pipe');
        nacquire = notempty.acquire;
        nrelease = notempty.release;
        nwait = notempty.wait;
        bpopleft = buffer.popleft;
        sentinel = _sentinel;
        if sys.platform != 'win32'{
            wacquire = writelock.acquire;
            wrelease = writelock.release;
        } else{
            wacquire = nil;

        }
        while 1{
            try{
                nacquire();
                try{
                    if not buffer{
                        nwait();
                } } finally{
                    nrelease();
                } try{
                    while 1{
                        obj = bpopleft();
                        if obj is sentinel{
                            debug('feeder thread got sentinel -- exiting');
                            close();
                            return;

                        }
                        if wacquire is nil{
                            send(obj);
                        } else{
                            wacquire();
                            try{
                                send(obj);
                            } finally{
                                wrelease();
                } } } } except IndexError{
                    pass;
            } } except Exception as e{
                # Since this runs in a daemon thread the resources it uses
                # may be become unusable while the process is cleaning up.
                # We ignore errors which happen after the process has
                # started to cleanup.
                if is_exiting(){
                    info('error in queue thread: %s', e);
                    return;
                } else{
                    import traceback;
                    traceback.print_exc();

}
} } } } _sentinel = object();

#
# A queue type which also supports join() and task_done() methods
#
# Note that if you do not call task_done() for each finished task then
# eventually the counter's semaphore may overflow causing Bad Things
# to happen.
#

class JoinableQueue(Queue){

    function __init__( maxsize=0){
        Queue.__init__(this, maxsize);
        this._unfinished_tasks = Semaphore(0);
        this._cond = Condition();

    }
    function __getstate__(){
        return Queue.__getstate__(this) + (this._cond, this._unfinished_tasks);

    }
    function __setstate__( state){
        Queue.__setstate__(this, state[:-2]);
        this._cond, this._unfinished_tasks = state[-2:];

    }
    function put( obj, block=true, timeout=nil){
        assert not this._closed;
        if not this._sem.acquire(block, timeout){
            raise Full;

        }
        this._notempty.acquire();
        this._cond.acquire();
        try{
            if this._thread is nil{
                this._start_thread();
            } this._buffer.append(obj);
            this._unfinished_tasks.release();
            this._notempty.notify();
        } finally{
            this._cond.release();
            this._notempty.release();

    }
    } function task_done(){
        this._cond.acquire();
        try{
            if not this._unfinished_tasks.acquire(false){
                raise ValueError('task_done() called too many times');
            } if this._unfinished_tasks._semlock._is_zero(){
                this._cond.notify_all();
        } } finally{
            this._cond.release();

    }
    } function join(){
        this._cond.acquire();
        try{
            if not this._unfinished_tasks._semlock._is_zero(){
                this._cond.wait();
        } } finally{
            this._cond.release();

#
# Simplified Queue type -- really just a locked pipe
#

}
} } class SimpleQueue(object){

    function __init__(){
        this._reader, this._writer = Pipe(duplex=false);
        this._rlock = Lock();
        if sys.platform == 'win32'{
            this._wlock = nil;
        } else{
            this._wlock = Lock();
        } this._make_methods();

    }
    function empty(){
        return not this._reader.poll();

    }
    function __getstate__(){
        assert_spawning(this);
        return (this._reader, this._writer, this._rlock, this._wlock);

    }
    function __setstate__( state){
        (this._reader, this._writer, this._rlock, this._wlock) = state;
        this._make_methods();

    }
    function _make_methods(){
        recv = this._reader.recv;
        racquire, rrelease = this._rlock.acquire, this._rlock.release;
        function get(){
            racquire();
            try{
                return recv();
            } finally{
                rrelease();
        } } this.get = get;

        if this._wlock is nil{
            # writes to a message oriented win32 pipe are atomic
            this.put = this._writer.send;
        } else{
            send = this._writer.send;
            wacquire, wrelease = this._wlock.acquire, this._wlock.release;
            function put(obj){
                wacquire();
                try{
                    return send(obj);
                } finally{
                    wrelease();
            } } this.put = put;

}
} }