#
# Analogue of `multiprocessing.connection` which uses queues instead of sockets
#
# multiprocessing/dummy/connection.py
#
# Copyright (c) 2006-2008, R Oudkerk
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
# 3. Neither the name of author nor the names of any contributors may be
#    used to endorse or promote products derived from this software
#    without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
# OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
# OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
#

__all__ = [ 'Client', 'Listener', 'Pipe' ];

from Queue import Queue;


families = [nil];


class Listener(object){

    function __init__( address=nil, family=nil, backlog=1){
        this._backlog_queue = Queue(backlog);

    }
    function accept(){
        return Connection(*this._backlog_queue.get());

    }
    function close(){
        this._backlog_queue = nil;

    }
    address = property(lambda this{ this._backlog_queue});


}
function Client(address){
    _in, _out = Queue(), Queue();
    address.put((_out, _in));
    return Connection(_in, _out);


}
function Pipe(duplex=true){
    a, b = Queue(), Queue();
    return Connection(a, b), Connection(b, a);


}
class Connection(object){

    function __init__( _in, _out){
        this._out = _out;
        this._in = _in;
        this.send = this.send_bytes = _out.put;
        this.recv = this.recv_bytes = _in.get;

    }
    function poll( timeout=0.0){
        if this._in.qsize() > 0{
            return true;
        } if timeout <= 0.0{
            return false;
        } this._in.not_empty.acquire();
        this._in.not_empty.wait(timeout);
        this._in.not_empty.release();
        return this._in.qsize() > 0;

    }
    function close(){
        pass;

}
}