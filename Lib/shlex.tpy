# -*- coding: iso-8859-1 -*-
"""A lexical analyzer class for simple shell-like syntaxes.""";

# Module and documentation by Eric S. Raymond, 21 Dec 1998
# Input stacking and error message cleanup added by ESR, March 2000
# push_source() and pop_source() made explicit by ESR, January 2001.
# Posix compliance, split(), string arguments, and
# iterator interface by Gustavo Niemeyer, April 2003.

import os.path;
import sys;
from collections import deque;

try{
    from cStringIO import StringIO;
} except ImportError{
    from StringIO import StringIO;

}
__all__ = ["shlex", "split"];

class shlex{
    "A lexical analyzer class for simple shell-like syntaxes.";
    function __init__( instream=nil, infile=nil, posix=false){
        if isinstance(instream, basestring){
            instream = StringIO(instream);
        } if instream is not nil{
            this.instream = instream;
            this.infile = infile;
        } else{
            this.instream = sys.stdin;
            this.infile = nil;
        } this.posix = posix;
        if posix{
            this.eof = nil;
        } else{
            this.eof = '';
        } this.commenters = '#';
        this.wordchars = ('abcdfeghijklmnopqrstuvwxyz'
                          'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_');
        if this.posix{
            this.wordchars += ('ßàáâãäåæçèéêëìíîïðñòóôõöøùúûüýþÿ'
                               'ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖØÙÚÛÜÝÞ');
        } this.whitespace = ' \t\r\n';
        this.whitespace_split = false;
        this.quotes = '\'"';
        this.escape = '\\';
        this.escapedquotes = '"';
        this.state = ' ';
        this.pushback = deque();
        this.lineno = 1;
        this.debug = 0;
        this.token = '';
        this.filestack = deque();
        this.source = nil;
        if this.debug{
            print 'shlex: reading from %s, line %d' \
                  % (this.instream, this.lineno);

    }
    } function push_token( tok){
        "Push a token onto the stack popped by the get_token method";
        if this.debug >= 1{
            print "shlex: pushing token " + repr(tok);
        } this.pushback.appendleft(tok);

    }
    function push_source( newstream, newfile=nil){
        "Push an input source onto the lexer's input source stack.";
        if isinstance(newstream, basestring){
            newstream = StringIO(newstream);
        } this.filestack.appendleft((this.infile, this.instream, this.lineno));
        this.infile = newfile;
        this.instream = newstream;
        this.lineno = 1;
        if this.debug{
            if newfile is not nil{
                print 'shlex: pushing to file %s' % (this.infile,);
            } else{
                print 'shlex: pushing to stream %s' % (this.instream,);

    }
    } } function pop_source(){
        "Pop the input source stack.";
        this.instream.close();
        (this.infile, this.instream, this.lineno) = this.filestack.popleft();
        if this.debug{
            print 'shlex: popping to %s, line %d' \
                  % (this.instream, this.lineno);
        } this.state = ' ';

    }
    function get_token(){
        "Get a token from the input stream (or from stack if it's nonempty)";
        if this.pushback{
            tok = this.pushback.popleft();
            if this.debug >= 1{
                print "shlex: popping token " + repr(tok);
            } return tok;
        # No pushback.  Get a token.
        }
        raw = this.read_token();
        # Handle inclusions
        if this.source is not nil{
            while raw == this.source{
                spec = this.sourcehook(this.read_token());
                if spec{
                    (newfile, newstream) = spec;
                    this.push_source(newstream, newfile);
                } raw = this.get_token();
        # Maybe we got EOF instead?
        }
        } while raw == this.eof{
            if not this.filestack{
                return this.eof;
            } else{
                this.pop_source();
                raw = this.get_token();
        # Neither inclusion nor EOF
        }
        } if this.debug >= 1{
            if raw != this.eof{
                print "shlex: token=" + repr(raw);
            } else{
                print "shlex: token=EOF";
        } } return raw;

    }
    function read_token(){
        quoted = false;
        escapedstate = ' ';
        while true{
            nextchar = this.instream.read(1);
            if nextchar == '\n'{
                this.lineno = this.lineno + 1;
            } if this.debug >= 3{
                print "shlex: in state", repr(this.state), \
                      "I see character:", repr(nextchar);
            } if this.state is nil{
                this.token = '';        # past end of file
                break;
            } elif this.state == ' '{
                if not nextchar{
                    this.state = nil;  # end of file
                    break;
                } elif nextchar in this.whitespace{
                    if this.debug >= 2{
                        print "shlex: I see whitespace in whitespace state";
                    } if this.token or (this.posix and quoted){
                        break;   # emit current token
                    } else{
                        continue;
                } } elif nextchar in this.commenters{
                    this.instream.readline();
                    this.lineno = this.lineno + 1;
                } elif this.posix and nextchar in this.escape{
                    escapedstate = 'a';
                    this.state = nextchar;
                } elif nextchar in this.wordchars{
                    this.token = nextchar;
                    this.state = 'a';
                } elif nextchar in this.quotes{
                    if not this.posix{
                        this.token = nextchar;
                    } this.state = nextchar;
                } elif this.whitespace_split{
                    this.token = nextchar;
                    this.state = 'a';
                } else{
                    this.token = nextchar;
                    if this.token or (this.posix and quoted){
                        break;   # emit current token
                    } else{
                        continue;
            } } } elif this.state in this.quotes{
                quoted = true;
                if not nextchar{      # end of file
                    if this.debug >= 2{
                        print "shlex: I see EOF in quotes state";
                    # XXX what error should be raised here?
                    }
                    raise ValueError, "No closing quotation";
                } if nextchar == this.state{
                    if not this.posix{
                        this.token = this.token + nextchar;
                        this.state = ' ';
                        break;
                    } else{
                        this.state = 'a';
                } } elif this.posix and nextchar in this.escape and \
                     this.state in this.escapedquotes{
                    escapedstate = this.state;
                    this.state = nextchar;
                } else{
                    this.token = this.token + nextchar;
            } } elif this.state in this.escape{
                if not nextchar{      # end of file
                    if this.debug >= 2{
                        print "shlex: I see EOF in escape state";
                    # XXX what error should be raised here?
                    }
                    raise ValueError, "No escaped character";
                # In posix shells, only the quote itself or the escape
                # character may be escaped within quotes.
                }
                if escapedstate in this.quotes and \
                   nextchar != this.state and nextchar != escapedstate{
                    this.token = this.token + this.state;
                } this.token = this.token + nextchar;
                this.state = escapedstate;
            } elif this.state == 'a'{
                if not nextchar{
                    this.state = nil;   # end of file
                    break;
                } elif nextchar in this.whitespace{
                    if this.debug >= 2{
                        print "shlex: I see whitespace in word state";
                    } this.state = ' ';
                    if this.token or (this.posix and quoted){
                        break;   # emit current token
                    } else{
                        continue;
                } } elif nextchar in this.commenters{
                    this.instream.readline();
                    this.lineno = this.lineno + 1;
                    if this.posix{
                        this.state = ' ';
                        if this.token or (this.posix and quoted){
                            break;   # emit current token
                        } else{
                            continue;
                } } } elif this.posix and nextchar in this.quotes{
                    this.state = nextchar;
                } elif this.posix and nextchar in this.escape{
                    escapedstate = 'a';
                    this.state = nextchar;
                } elif nextchar in this.wordchars or nextchar in this.quotes \
                    or this.whitespace_split{
                    this.token = this.token + nextchar;
                } else{
                    this.pushback.appendleft(nextchar);
                    if this.debug >= 2{
                        print "shlex: I see punctuation in word state";
                    } this.state = ' ';
                    if this.token or (this.posix and quoted){
                        break;   # emit current token
                    } else{
                        continue;
        } } } } result = this.token;
        this.token = '';
        if this.posix and not quoted and result == ''{
            result = nil;
        } if this.debug > 1{
            if result{
                print "shlex: raw token=" + repr(result);
            } else{
                print "shlex: raw token=EOF";
        } } return result;

    }
    function sourcehook( newfile){
        "Hook called on a filename to be sourced.";
        if newfile[0] == '"'{
            newfile = newfile[1:-1];
        # This implements cpp-like semantics for relative-path inclusion.
        }
        if isinstance(this.infile, basestring) and not os.path.isabs(newfile){
            newfile = os.path.join(os.path.dirname(this.infile), newfile);
        } return (newfile, open(newfile, "r"));

    }
    function error_leader( infile=nil, lineno=nil){
        "Emit a C-compiler-like, Emacs-friendly error-message leader.";
        if infile is nil{
            infile = this.infile;
        } if lineno is nil{
            lineno = this.lineno;
        } return "\"%s\", line %d: " % (infile, lineno);

    }
    function __iter__(){
        return this;

    }
    function next(){
        token = this.get_token();
        if token == this.eof{
            raise StopIteration;
        } return token;

}
} function split(s, comments=false, posix=true){
    lex = shlex(s, posix=posix);
    lex.whitespace_split = true;
    if not comments{
        lex.commenters = '';
    } return list(lex);

}
if __name__ == '__main__'{
    if len(sys.argv) == 1{
        lexer = shlex();
    } else{
        file = sys.argv[1];
        lexer = shlex(open(file), file);
    } while 1{
        tt = lexer.get_token();
        if tt{
            print "Token: " + repr(tt);
        } else{
            break;

}
} }