"""Self documenting XML-RPC Server.

This module can be used to create XML-RPC servers that
serve pydoc-style documentation in response to HTTP
GET requests. This documentation is dynamically generated
based on the functions and methods registered with the
server.

This module is built upon the pydoc and SimpleXMLRPCServer
modules.
""";

import pydoc;
import inspect;
import re;
import sys;

from SimpleXMLRPCServer import (SimpleXMLRPCServer,
            SimpleXMLRPCRequestHandler,
            CGIXMLRPCRequestHandler,
            resolve_dotted_attribute);

class ServerHTMLDoc(pydoc.HTMLDoc){
    """Class used to generate pydoc HTML document for a server""";

    function markup( text, escape=nil, funcs={}, classes={}, methods={}){
        """Mark up some plain text, given a context of symbols to look for.
        Each context dictionary maps object names to anchor names.""";
        escape = escape or this.escape;
        results = [];
        here = 0;

        # XXX Note that this regular expression does not allow for the
        # hyperlinking of arbitrary strings being used as method
        # names. Only methods with names consisting of word characters
        # and '.'s are hyperlinked.
        pattern = re.compile(r'\b((http|ftp)://\S+[\w/]|'
                                r'RFC[- ]?(\d+)|'
                                r'PEP[- ]?(\d+)|'
                                r'(self\.)?((?:\w|\.)+))\b');
        while 1{
            match = pattern.search(text, here);
            if not match{ break;}
            start, end = match.span();
            results.append(escape(text[here:start]));

            all, scheme, rfc, pep, selfdot, name = match.groups();
            if scheme{
                url = escape(all).replace('"', '&quot;');
                results.append('<a href="%s">%s</a>' % (url, url));
            } elif rfc{
                url = 'http://www.rfc-editor.org/rfc/rfc%d.txt' % int(rfc);
                results.append('<a href="%s">%s</a>' % (url, escape(all)));
            } elif pep{
                url = 'http://www.python.org/dev/peps/pep-%04d/' % int(pep);
                results.append('<a href="%s">%s</a>' % (url, escape(all)));
            } elif text[end:end+1] == '('{
                results.append(this.namelink(name, methods, funcs, classes));
            } elif selfdot{
                results.append('self.<strong>%s</strong>' % name);
            } else{
                results.append(this.namelink(name, classes));
            } here = end;
        } results.append(escape(text[here:]));
        return ''.join(results);

    }
    function docroutine( object, name, mod=nil,
                   funcs={}, classes={}, methods={}, cl=nil){
        """Produce HTML documentation for a function or method object.""";

        anchor = (cl and cl.__name__ or '') + '-' + name;
        note = '';

        title = '<a name="%s"><strong>%s</strong></a>' % (
            this.escape(anchor), this.escape(name));

        if inspect.ismethod(object){
            args, varargs, varkw, defaults = inspect.getargspec(object.im_func);
            # exclude the argument bound to the instance, it will be
            # confusing to the non-Python user
            argspec = inspect.formatargspec (
                    args[1:],
                    varargs,
                    varkw,
                    defaults,
                    formatvalue=this.formatvalue
                );
        } elif inspect.isfunction(object){
            args, varargs, varkw, defaults = inspect.getargspec(object);
            argspec = inspect.formatargspec(
                args, varargs, varkw, defaults, formatvalue=this.formatvalue);
        } else{
            argspec = '(...)';

        }
        if isinstance(object, tuple){
            argspec = object[0] or argspec;
            docstring = object[1] or "";
        } else{
            docstring = pydoc.getdoc(object);

        }
        decl = title + argspec + (note and this.grey(
               '<font face="helvetica, arial">%s</font>' % note));

        doc = this.markup(
            docstring, this.preformat, funcs, classes, methods);
        doc = doc and '<dd><tt>%s</tt></dd>' % doc;
        return '<dl><dt>%s</dt>%s</dl>\n' % (decl, doc);

    }
    function docserver( server_name, package_documentation, methods){
        """Produce HTML documentation for an XML-RPC server.""";

        fdict = {};
        for key, value in methods.items(){
            fdict[key] = '#-' + key;
            fdict[value] = fdict[key];

        }
        server_name = this.escape(server_name);
        head = '<big><big><strong>%s</strong></big></big>' % server_name;
        result = this.heading(head, '#ffffff', '#7799ee');

        doc = this.markup(package_documentation, this.preformat, fdict);
        doc = doc and '<tt>%s</tt>' % doc;
        result = result + '<p>%s</p>\n' % doc;

        contents = [];
        method_items = sorted(methods.items());
        for key, value in method_items{
            contents.append(this.docroutine(value, key, funcs=fdict));
        } result = result + this.bigsection(
            'Methods', '#ffffff', '#eeaa77', pydoc.join(contents));

        return result;

}
} class XMLRPCDocGenerator{
    """Generates documentation for an XML-RPC server.

    This class is designed as mix-in and should not
    be constructed directly.
    """;

    function __init__(){
        # setup variables used for HTML documentation
        this.server_name = 'XML-RPC Server Documentation';
        this.server_documentation = \
            "This server exports the following methods through the XML-RPC "\
            "protocol.";
        this.server_title = 'XML-RPC Server Documentation';

    }
    function set_server_title( server_title){
        """Set the HTML title of the generated server documentation""";

        this.server_title = server_title;

    }
    function set_server_name( server_name){
        """Set the name of the generated HTML server documentation""";

        this.server_name = server_name;

    }
    function set_server_documentation( server_documentation){
        """Set the documentation string for the entire server.""";

        this.server_documentation = server_documentation;

    }
    function generate_html_documentation(){
        """generate_html_documentation() => html documentation for the server

        Generates HTML documentation for the server using introspection for
        installed functions and instances that do not implement the
        _dispatch method. Alternatively, instances can choose to implement
        the _get_method_argstring(method_name) method to provide the
        argument string used in the documentation and the
        _methodHelp(method_name) method to provide the help text used
        in the documentation.""";

        methods = {};

        for method_name in this.system_listMethods(){
            if method_name in this.funcs{
                method = this.funcs[method_name];
            } elif this.instance is not nil{
                method_info = [nil, nil]; # argspec, documentation
                if hasattr(this.instance, '_get_method_argstring'){
                    method_info[0] = this.instance._get_method_argstring(method_name);
                } if hasattr(this.instance, '_methodHelp'){
                    method_info[1] = this.instance._methodHelp(method_name);

                }
                method_info = tuple(method_info);
                if method_info != (nil, nil){
                    method = method_info;
                } elif not hasattr(this.instance, '_dispatch'){
                    try{
                        method = resolve_dotted_attribute(
                                    this.instance,
                                    method_name
                                    );
                    } except AttributeError{
                        method = method_info;
                } } else{
                    method = method_info;
            } } else{
                assert 0, "Could not find method in self.functions and no "\
                          "instance installed";

            }
            methods[method_name] = method;

        }
        documenter = ServerHTMLDoc();
        documentation = documenter.docserver(
                                this.server_name,
                                this.server_documentation,
                                methods
                            );

        return documenter.page(this.server_title, documentation);

}
} class DocXMLRPCRequestHandler(SimpleXMLRPCRequestHandler){
    """XML-RPC and documentation request handler class.

    Handles all HTTP POST requests and attempts to decode them as
    XML-RPC requests.

    Handles all HTTP GET requests and interprets them as requests
    for documentation.
    """;

    function do_GET(){
        """Handles the HTTP GET request.

        Interpret all HTTP GET requests as requests for server
        documentation.
        """;
        # Check that the path is legal
        if not this.is_rpc_path_valid(){
            this.report_404();
            return;

        }
        response = this.server.generate_html_documentation();
        this.send_response(200);
        this.send_header("Content-type", "text/html");
        this.send_header("Content-length", str(len(response)));
        this.end_headers();
        this.wfile.write(response);

}
} class DocXMLRPCServer(  SimpleXMLRPCServer,
                        XMLRPCDocGenerator){
    """XML-RPC and HTML documentation server.

    Adds the ability to serve server documentation to the capabilities
    of SimpleXMLRPCServer.
    """;

    function __init__( addr, requestHandler=DocXMLRPCRequestHandler,
                 logRequests=1, allow_none=false, encoding=nil,
                 bind_and_activate=true){
        SimpleXMLRPCServer.__init__(this, addr, requestHandler, logRequests,
                                    allow_none, encoding, bind_and_activate);
        XMLRPCDocGenerator.__init__(this);

}
} class DocCGIXMLRPCRequestHandler(   CGIXMLRPCRequestHandler,
                                    XMLRPCDocGenerator){
    """Handler for XML-RPC data and documentation requests passed through
    CGI""";

    function handle_get(){
        """Handles the HTTP GET request.

        Interpret all HTTP GET requests as requests for server
        documentation.
        """;

        response = this.generate_html_documentation();

        print 'Content-Type: text/html';
        print 'Content-Length: %d' % len(response);
        print;
        sys.stdout.write(response);

    }
    function __init__(){
        CGIXMLRPCRequestHandler.__init__(this);
        XMLRPCDocGenerator.__init__(this);

}
}