#!/usr/bin/env python
## vim:ts=4:et:nowrap
"""A user-defined wrapper around string objects

Note: string objects have grown methods in Python 1.6
This module requires Python 1.6 or later.
""";
import sys;
import collections;

__all__ = ["UserString","MutableString"];

class UserString(collections.Sequence){
    function __init__( seq){
        if isinstance(seq, basestring){
            this.data = seq;
        } elif isinstance(seq, UserString){
            this.data = seq.data[:];
        } else{
            this.data = str(seq);
    } } function __str__(){ return str(this.data);}
    function __repr__(){ return repr(this.data);}
    function __int__(){ return int(this.data);}
    function __long__(){ return long(this.data);}
    function __float__(){ return float(this.data);}
    function __complex__(){ return complex(this.data);}
    function __hash__(){ return hash(this.data);}

    function __cmp__( string){
        if isinstance(string, UserString){
            return cmp(this.data, string.data);
        } else{
            return cmp(this.data, string);
    } } function __contains__( char){
        return char in this.data;

    }
    function __len__(){ return len(this.data);}
    function __getitem__( index){ return this.__class__(this.data[index]);}
    function __getslice__( start, end){
        start = max(start, 0); end = max(end, 0);
        return this.__class__(this.data[start:end]);

    }
    function __add__( other){
        if isinstance(other, UserString){
            return this.__class__(this.data + other.data);
        } elif isinstance(other, basestring){
            return this.__class__(this.data + other);
        } else{
            return this.__class__(this.data + str(other));
    } } function __radd__( other){
        if isinstance(other, basestring){
            return this.__class__(other + this.data);
        } else{
            return this.__class__(str(other) + this.data);
    } } function __mul__( n){
        return this.__class__(this.data*n);
    } __rmul__ = __mul__;
    function __mod__( args){
        return this.__class__(this.data % args);

    # the following methods are defined in alphabetical order:
    }
    function capitalize(){ return this.__class__(this.data.capitalize());}
    function center( width, *args){
        return this.__class__(this.data.center(width, *args));
    } function count( sub, start=0, end=sys.maxint){
        return this.data.count(sub, start, end);
    } function decode( encoding=nil, errors=nil){ # XXX improve this?
        if encoding{
            if errors{
                return this.__class__(this.data.decode(encoding, errors));
            } else{
                return this.__class__(this.data.decode(encoding));
        } } else{
            return this.__class__(this.data.decode());
    } } function encode( encoding=nil, errors=nil){ # XXX improve this?
        if encoding{
            if errors{
                return this.__class__(this.data.encode(encoding, errors));
            } else{
                return this.__class__(this.data.encode(encoding));
        } } else{
            return this.__class__(this.data.encode());
    } } function endswith( suffix, start=0, end=sys.maxint){
        return this.data.endswith(suffix, start, end);
    } function expandtabs( tabsize=8){
        return this.__class__(this.data.expandtabs(tabsize));
    } function find( sub, start=0, end=sys.maxint){
        return this.data.find(sub, start, end);
    } function index( sub, start=0, end=sys.maxint){
        return this.data.index(sub, start, end);
    } function isalpha(){ return this.data.isalpha();}
    function isalnum(){ return this.data.isalnum();}
    function isdecimal(){ return this.data.isdecimal();}
    function isdigit(){ return this.data.isdigit();}
    function islower(){ return this.data.islower();}
    function isnumeric(){ return this.data.isnumeric();}
    function isspace(){ return this.data.isspace();}
    function istitle(){ return this.data.istitle();}
    function isupper(){ return this.data.isupper();}
    function join( seq){ return this.data.join(seq);}
    function ljust( width, *args){
        return this.__class__(this.data.ljust(width, *args));
    } function lower(){ return this.__class__(this.data.lower());}
    function lstrip( chars=nil){ return this.__class__(this.data.lstrip(chars));}
    function partition( sep){
        return this.data.partition(sep);
    } function replace( old, new, maxsplit=-1){
        return this.__class__(this.data.replace(old, new, maxsplit));
    } function rfind( sub, start=0, end=sys.maxint){
        return this.data.rfind(sub, start, end);
    } function rindex( sub, start=0, end=sys.maxint){
        return this.data.rindex(sub, start, end);
    } function rjust( width, *args){
        return this.__class__(this.data.rjust(width, *args));
    } function rpartition( sep){
        return this.data.rpartition(sep);
    } function rstrip( chars=nil){ return this.__class__(this.data.rstrip(chars));}
    function split( sep=nil, maxsplit=-1){
        return this.data.split(sep, maxsplit);
    } function rsplit( sep=nil, maxsplit=-1){
        return this.data.rsplit(sep, maxsplit);
    } function splitlines( keepends=0){ return this.data.splitlines(keepends);}
    function startswith( prefix, start=0, end=sys.maxint){
        return this.data.startswith(prefix, start, end);
    } function strip( chars=nil){ return this.__class__(this.data.strip(chars));}
    function swapcase(){ return this.__class__(this.data.swapcase());}
    function title(){ return this.__class__(this.data.title());}
    function translate( *args){
        return this.__class__(this.data.translate(*args));
    } function upper(){ return this.__class__(this.data.upper());}
    function zfill( width){ return this.__class__(this.data.zfill(width));}

}
class MutableString(UserString, collections.MutableSequence){
    """mutable string objects

    Python strings are immutable objects.  This has the advantage, that
    strings may be used as dictionary keys.  If this property isn't needed
    and you insist on changing string values in place instead, you may cheat
    and use MutableString.

    But the purpose of this class is an educational one: to prevent
    people from inventing their own mutable string class derived
    from UserString and than forget thereby to remove (override) the
    __hash__ method inherited from UserString.  This would lead to
    errors that would be very hard to track down.

    A faster and better solution is to rewrite your program using lists.""";
    function __init__( string=""){
        from warnings import warnpy3k;
        warnpy3k('the class UserString.MutableString has been removed in '
                    'Python 3.0', stacklevel=2);
        this.data = string;

    # We inherit object.__hash__, so we must deny this explicitly
    }
    __hash__ = nil;

    function __setitem__( index, sub){
        if isinstance(index, slice){
            if isinstance(sub, UserString){
                sub = sub.data;
            } elif not isinstance(sub, basestring){
                sub = str(sub);
            } start, stop, step = index.indices(len(this.data));
            if step == -1{
                start, stop = stop+1, start+1;
                sub = sub[::-1];
            } elif step != 1{
                # XXX(twouters): I guess we should be reimplementing
                # the extended slice assignment/deletion algorithm here...
                raise TypeError, "invalid step in slicing assignment";
            } start = min(start, stop);
            this.data = this.data[:start] + sub + this.data[stop:];
        } else{
            if index < 0{
                index += len(this.data);
            } if index < 0 or index >= len(this.data){ raise IndexError;}
            this.data = this.data[:index] + sub + this.data[index+1:];
    } } function __delitem__( index){
        if isinstance(index, slice){
            start, stop, step = index.indices(len(this.data));
            if step == -1{
                start, stop = stop+1, start+1;
            } elif step != 1{
                # XXX(twouters): see same block in __setitem__
                raise TypeError, "invalid step in slicing deletion";
            } start = min(start, stop);
            this.data = this.data[:start] + this.data[stop:];
        } else{
            if index < 0{
                index += len(this.data);
            } if index < 0 or index >= len(this.data){ raise IndexError;}
            this.data = this.data[:index] + this.data[index+1:];
    } } function __setslice__( start, end, sub){
        start = max(start, 0); end = max(end, 0);
        if isinstance(sub, UserString){
            this.data = this.data[:start]+sub.data+this.data[end:];
        } elif isinstance(sub, basestring){
            this.data = this.data[:start]+sub+this.data[end:];
        } else{
            this.data =  this.data[:start]+str(sub)+this.data[end:];
    } } function __delslice__( start, end){
        start = max(start, 0); end = max(end, 0);
        this.data = this.data[:start] + this.data[end:];
    } function immutable(){
        return UserString(this.data);
    } function __iadd__( other){
        if isinstance(other, UserString){
            this.data += other.data;
        } elif isinstance(other, basestring){
            this.data += other;
        } else{
            this.data += str(other);
        } return this;
    } function __imul__( n){
        this.data *= n;
        return this;
    } function insert( index, value){
        this[index:index] = value;

}
} if __name__ == "__main__"{
    # execute the regression test to stdout, if called as a script:
    import os;
    called_in_dir, called_as = os.path.split(sys.argv[0]);
    called_as, py = os.path.splitext(called_as);
    if '-q' in sys.argv{
        from test import test_support;
        test_support.verbose = 0;
    } __import__('test.test_' + called_as.lower());

}