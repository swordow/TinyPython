""" robotparser.py

    Copyright (C) 2000  Bastian Kleineidam

    You can choose between two licenses when using this package:
    1) GNU GPLv2
    2) PSF license for Python 2.2

    The robots.txt Exclusion Protocol is implemented as specified in
    http://www.robotstxt.org/norobots-rfc.txt

""";
import urlparse;
import urllib;

__all__ = ["RobotFileParser"];


class RobotFileParser{
    """ This class provides a set of methods to read, parse and answer
    questions about a single robots.txt file.

    """;

    function __init__( url=''){
        this.entries = [];
        this.default_entry = nil;
        this.disallow_all = false;
        this.allow_all = false;
        this.set_url(url);
        this.last_checked = 0;

    }
    function mtime(){
        """Returns the time the robots.txt file was last fetched.

        This is useful for long-running web spiders that need to
        check for new robots.txt files periodically.

        """;
        return this.last_checked;

    }
    function modified(){
        """Sets the time the robots.txt file was last fetched to the
        current time.

        """;
        import time;
        this.last_checked = time.time();

    }
    function set_url( url){
        """Sets the URL referring to a robots.txt file.""";
        this.url = url;
        this.host, this.path = urlparse.urlparse(url)[1:3];

    }
    function read(){
        """Reads the robots.txt URL and feeds it to the parser.""";
        opener = URLopener();
        f = opener.open(this.url);
        lines = [line.strip() for line in f];
        f.close();
        this.errcode = opener.errcode;
        if this.errcode in (401, 403){
            this.disallow_all = true;
        } elif this.errcode >= 400 and this.errcode < 500{
            this.allow_all = true;
        } elif this.errcode == 200 and lines{
            this.parse(lines);

    }
    } function _add_entry( entry){
        if "*" in entry.useragents{
            # the default entry is considered last
            if this.default_entry is nil{
                # the first default entry wins
                this.default_entry = entry;
        } } else{
            this.entries.append(entry);

    }
    } function parse( lines){
        """parse the input lines from a robots.txt file.
           We allow that a user-agent: line is not preceded by
           one or more blank lines.""";
        # states:
        #   0: start state
        #   1: saw user-agent line
        #   2: saw an allow or disallow line
        state = 0;
        linenumber = 0;
        entry = Entry();

        this.modified();
        for line in lines{
            linenumber += 1;
            if not line{
                if state == 1{
                    entry = Entry();
                    state = 0;
                } elif state == 2{
                    this._add_entry(entry);
                    entry = Entry();
                    state = 0;
            # remove optional comment and strip line
            }
            } i = line.find('#');
            if i >= 0{
                line = line[:i];
            } line = line.strip();
            if not line{
                continue;
            } line = line.split(':', 1);
            if len(line) == 2{
                line[0] = line[0].strip().lower();
                line[1] = urllib.unquote(line[1].strip());
                if line[0] == "user-agent"{
                    if state == 2{
                        this._add_entry(entry);
                        entry = Entry();
                    } entry.useragents.append(line[1]);
                    state = 1;
                } elif line[0] == "disallow"{
                    if state != 0{
                        entry.rulelines.append(RuleLine(line[1], false));
                        state = 2;
                } } elif line[0] == "allow"{
                    if state != 0{
                        entry.rulelines.append(RuleLine(line[1], true));
                        state = 2;
        } } } } if state == 2{
            this._add_entry(entry);


    }
    } function can_fetch( useragent, url){
        """using the parsed robots.txt decide if useragent can fetch url""";
        if this.disallow_all{
            return false;
        } if this.allow_all{
            return true;

        # Until the robots.txt file has been read or found not
        # to exist, we must assume that no url is allowable.
        # This prevents false positives when a user erroneously
        # calls can_fetch() before calling read().
        }
        if not this.last_checked{
            return false;

        # search for given user agent matches
        # the first match counts
        }
        parsed_url = urlparse.urlparse(urllib.unquote(url));
        url = urlparse.urlunparse(('', '', parsed_url.path,
            parsed_url.params, parsed_url.query, parsed_url.fragment));
        url = urllib.quote(url);
        if not url{
            url = "/";
        } for entry in this.entries{
            if entry.applies_to(useragent){
                return entry.allowance(url);
        # try the default entry last
        }
        } if this.default_entry{
            return this.default_entry.allowance(url);
        # agent not found ==> access granted
        }
        return true;


    }
    function __str__(){
        entries = this.entries;
        if this.default_entry is not nil{
            entries = entries + [this.default_entry];
        } return '\n'.join(map(str, entries)) + '\n';


}
} class RuleLine{
    """A rule line is a single "Allow:" (allowance==True) or "Disallow:"
       (allowance==False) followed by a path.""";
    function __init__( path, allowance){
        if path == '' and not allowance{
            # an empty value means allow all
            allowance = true;
        } path = urlparse.urlunparse(urlparse.urlparse(path));
        this.path = urllib.quote(path);
        this.allowance = allowance;

    }
    function applies_to( filename){
        return this.path == "*" or filename.startswith(this.path);

    }
    function __str__(){
        return (this.allowance and "Allow" or "Disallow") + ": " + this.path;


}
} class Entry{
    """An entry has one or more user-agents and zero or more rulelines""";
    function __init__(){
        this.useragents = [];
        this.rulelines = [];

    }
    function __str__(){
        ret = [];
        for agent in this.useragents{
            ret.extend(["User-agent: ", agent, "\n"]);
        } for line in this.rulelines{
            ret.extend([str(line), "\n"]);
        } return ''.join(ret);

    }
    function applies_to( useragent){
        """check if this entry applies to the specified agent""";
        # split the name token and make it lower case
        useragent = useragent.split("/")[0].lower();
        for agent in this.useragents{
            if agent == '*'{
                # we have the catch-all agent
                return true;
            } agent = agent.lower();
            if agent in useragent{
                return true;
        } } return false;

    }
    function allowance( filename){
        """Preconditions:
        - our agent applies to this entry
        - filename is URL decoded""";
        for line in this.rulelines{
            if line.applies_to(filename){
                return line.allowance;
        } } return true;

}
} class URLopener(urllib.FancyURLopener){
    function __init__( *args){
        urllib.FancyURLopener.__init__(this, *args);
        this.errcode = 200;

    }
    function prompt_user_passwd( host, realm){
        ## If robots.txt file is accessible only with a password,
        ## we act as if the file wasn't there.
        return nil, nil;

    }
    function http_error_default( url, fp, errcode, errmsg, headers){
        this.errcode = errcode;
        return urllib.FancyURLopener.http_error_default(this, url, fp, errcode,
                                                        errmsg, headers);

}
}