"""distutils.msvccompiler

Contains MSVCCompiler, an implementation of the abstract CCompiler class
for the Microsoft Visual Studio.
""";

# Written by Perry Stoll
# hacked by Robin Becker and Thomas Heller to do a better job of
#   finding DevStudio (through the registry)

__revision__ = "$Id$";

import sys;
import os;
import string;

from distutils.errors import (DistutilsExecError, DistutilsPlatformError,
                              CompileError, LibError, LinkError);
from distutils.ccompiler import CCompiler, gen_lib_options;
from distutils import log;

_can_read_reg = 0;
try{
    import _winreg;

    _can_read_reg = 1;
    hkey_mod = _winreg;

    RegOpenKeyEx = _winreg.OpenKeyEx;
    RegEnumKey = _winreg.EnumKey;
    RegEnumValue = _winreg.EnumValue;
    RegError = _winreg.error;

}
except ImportError{
    try{
        import win32api;
        import win32con;
        _can_read_reg = 1;
        hkey_mod = win32con;

        RegOpenKeyEx = win32api.RegOpenKeyEx;
        RegEnumKey = win32api.RegEnumKey;
        RegEnumValue = win32api.RegEnumValue;
        RegError = win32api.error;

    }
    except ImportError{
        log.info("Warning: Can't read registry to find the "
                 "necessary compiler setting\n"
                 "Make sure that Python modules _winreg, "
                 "win32api or win32con are installed.");
        pass;

}
} if _can_read_reg{
    HKEYS = (hkey_mod.HKEY_USERS,
             hkey_mod.HKEY_CURRENT_USER,
             hkey_mod.HKEY_LOCAL_MACHINE,
             hkey_mod.HKEY_CLASSES_ROOT);

}
function read_keys(base, key){
    """Return list of registry keys.""";

    try{
        handle = RegOpenKeyEx(base, key);
    } except RegError{
        return nil;
    } L = [];
    i = 0;
    while 1{
        try{
            k = RegEnumKey(handle, i);
        } except RegError{
            break;
        } L.append(k);
        i = i + 1;
    } return L;

}
function read_values(base, key){
    """Return dict of registry keys and values.

    All names are converted to lowercase.
    """;
    try{
        handle = RegOpenKeyEx(base, key);
    } except RegError{
        return nil;
    } d = {};
    i = 0;
    while 1{
        try{
            name, value, type = RegEnumValue(handle, i);
        } except RegError{
            break;
        } name = name.lower();
        d[convert_mbcs(name)] = convert_mbcs(value);
        i = i + 1;
    } return d;

}
function convert_mbcs(s){
    enc = getattr(s, "encode", nil);
    if enc is not nil{
        try{
            s = enc("mbcs");
        } except UnicodeError{
            pass;
    } } return s;

}
class MacroExpander{

    function __init__( version){
        this.macros = {};
        this.load_macros(version);

    }
    function set_macro( macro, path, key){
        for base in HKEYS{
            d = read_values(base, path);
            if d{
                this.macros["$(%s)" % macro] = d[key];
                break;

    }
    } } function load_macros( version){
        vsbase = r"Software\Microsoft\VisualStudio\%0.1f" % version;
        this.set_macro("VCInstallDir", vsbase + r"\Setup\VC", "productdir");
        this.set_macro("VSInstallDir", vsbase + r"\Setup\VS", "productdir");
        net = r"Software\Microsoft\.NETFramework";
        this.set_macro("FrameworkDir", net, "installroot");
        try{
            if version > 7.0{
                this.set_macro("FrameworkSDKDir", net, "sdkinstallrootv1.1");
            } else{
                this.set_macro("FrameworkSDKDir", net, "sdkinstallroot");
        } } except KeyError{
            raise DistutilsPlatformError, \
                  ("""Python was built with Visual Studio 2003;
extensions must be built with a compiler than can generate compatible binaries.
Visual Studio 2003 was not found on this system. If you have Cygwin installed,
you can try compiling with MingW32, by passing "-c mingw32" to setup.py.""");

        }
        p = r"Software\Microsoft\NET Framework Setup\Product";
        for base in HKEYS{
            try{
                h = RegOpenKeyEx(base, p);
            } except RegError{
                continue;
            } key = RegEnumKey(h, 0);
            d = read_values(base, r"%s\%s" % (p, key));
            this.macros["$(FrameworkVersion)"] = d["version"];

    }
    } function sub( s){
        for k, v in this.macros.items(){
            s = string.replace(s, k, v);
        } return s;

}
} function get_build_version(){
    """Return the version of MSVC that was used to build Python.

    For Python 2.3 and up, the version number is included in
    sys.version.  For earlier versions, assume the compiler is MSVC 6.
    """;

    prefix = "MSC v.";
    i = string.find(sys.version, prefix);
    if i == -1{
        return 6;
    } i = i + len(prefix);
    s, rest = sys.version[i:].split(" ", 1);
    majorVersion = int(s[:-2]) - 6;
    minorVersion = int(s[2:3]) / 10.0;
    # I don't think paths are affected by minor version in version 6
    if majorVersion == 6{
        minorVersion = 0;
    } if majorVersion >= 6{
        return majorVersion + minorVersion;
    # else we don't know what version of the compiler this is
    }
    return nil;

}
function get_build_architecture(){
    """Return the processor architecture.

    Possible results are "Intel", "Itanium", or "AMD64".
    """;

    prefix = " bit (";
    i = string.find(sys.version, prefix);
    if i == -1{
        return "Intel";
    } j = string.find(sys.version, ")", i);
    return sys.version[i+len(prefix):j];

}
function normalize_and_reduce_paths(paths){
    """Return a list of normalized paths with duplicates removed.

    The current order of paths is maintained.
    """;
    # Paths are normalized so things like:  /a and /a/ aren't both preserved.
    reduced_paths = [];
    for p in paths{
        np = os.path.normpath(p);
        # XXX(nnorwitz): O(n**2), if reduced_paths gets long perhaps use a set.
        if np not in reduced_paths{
            reduced_paths.append(np);
    } } return reduced_paths;


}
class MSVCCompiler (CCompiler) {
    """Concrete class that implements an interface to Microsoft Visual C++,
       as defined by the CCompiler abstract class.""";

    compiler_type = 'msvc';

    # Just set this so CCompiler's constructor doesn't barf.  We currently
    # don't use the 'set_executables()' bureaucracy provided by CCompiler,
    # as it really isn't necessary for this sort of single-compiler class.
    # Would be nice to have a consistent interface with UnixCCompiler,
    # though, so it's worth thinking about.
    executables = {};

    # Private class data (need to distinguish C from C++ source for compiler)
    _c_extensions = ['.c'];
    _cpp_extensions = ['.cc', '.cpp', '.cxx'];
    _rc_extensions = ['.rc'];
    _mc_extensions = ['.mc'];

    # Needed for the filename generation methods provided by the
    # base class, CCompiler.
    src_extensions = (_c_extensions + _cpp_extensions +
                      _rc_extensions + _mc_extensions);
    res_extension = '.res';
    obj_extension = '.obj';
    static_lib_extension = '.lib';
    shared_lib_extension = '.dll';
    static_lib_format = shared_lib_format = '%s%s';
    exe_extension = '.exe';

    function __init__ ( verbose=0, dry_run=0, force=0){
        CCompiler.__init__ (this, verbose, dry_run, force);
        this.__version = get_build_version();
        this.__arch = get_build_architecture();
        if this.__arch == "Intel"{
            # x86
            if this.__version >= 7{
                this.__root = r"Software\Microsoft\VisualStudio";
                this.__macros = MacroExpander(this.__version);
            } else{
                this.__root = r"Software\Microsoft\Devstudio";
            } this.__product = "Visual Studio version %s" % this.__version;
        } else{
            # Win64. Assume this was built with the platform SDK
            this.__product = "Microsoft SDK compiler %s" % (this.__version + 6);

        }
        this.initialized = false;

    }
    function initialize(){
        this.__paths = [];
        if "DISTUTILS_USE_SDK" in os.environ and "MSSdk" in os.environ and this.find_exe("cl.exe"){
            # Assume that the SDK set up everything alright; don't try to be
            # smarter
            this.cc = "cl.exe";
            this.linker = "link.exe";
            this.lib = "lib.exe";
            this.rc = "rc.exe";
            this.mc = "mc.exe";
        } else{
            this.__paths = this.get_msvc_paths("path");

            if len (this.__paths) == 0{
                raise DistutilsPlatformError, \
                      ("Python was built with %s, "
                       "and extensions need to be built with the same "
                       "version of the compiler, but it isn't installed." % this.__product);

            }
            this.cc = this.find_exe("cl.exe");
            this.linker = this.find_exe("link.exe");
            this.lib = this.find_exe("lib.exe");
            this.rc = this.find_exe("rc.exe");   # resource compiler
            this.mc = this.find_exe("mc.exe");   # message compiler
            this.set_path_env_var('lib');
            this.set_path_env_var('include');

        # extend the MSVC path with the current path
        }
        try{
            for p in string.split(os.environ['path'], ';'){
                this.__paths.append(p);
        } } except KeyError{
            pass;
        } this.__paths = normalize_and_reduce_paths(this.__paths);
        os.environ['path'] = string.join(this.__paths, ';');

        this.preprocess_options = nil;
        if this.__arch == "Intel"{
            this.compile_options = [ '/nologo', '/Ox', '/MD', '/W3', '/GX' ,
                                     '/DNDEBUG'];
            this.compile_options_debug = ['/nologo', '/Od', '/MDd', '/W3', '/GX',
                                          '/Z7', '/D_DEBUG'];
        } else{
            # Win64
            this.compile_options = [ '/nologo', '/Ox', '/MD', '/W3', '/GS-' ,
                                     '/DNDEBUG'];
            this.compile_options_debug = ['/nologo', '/Od', '/MDd', '/W3', '/GS-',
                                          '/Z7', '/D_DEBUG'];

        }
        this.ldflags_shared = ['/DLL', '/nologo', '/INCREMENTAL:NO'];
        if this.__version >= 7{
            this.ldflags_shared_debug = [
                '/DLL', '/nologo', '/INCREMENTAL:no', '/DEBUG'
                ];
        } else{
            this.ldflags_shared_debug = [
                '/DLL', '/nologo', '/INCREMENTAL:no', '/pdb:None', '/DEBUG'
                ];
        } this.ldflags_static = [ '/nologo'];

        this.initialized = true;

    # -- Worker methods ------------------------------------------------

    }
    function object_filenames (
                          source_filenames,
                          strip_dir=0,
                          output_dir=''){
        # Copied from ccompiler.py, extended to return .res as 'object'-file
        # for .rc input file
        if output_dir is nil{ output_dir = '';}
        obj_names = [];
        for src_name in source_filenames{
            (base, ext) = os.path.splitext (src_name);
            base = os.path.splitdrive(base)[1]; # Chop off the drive
            base = base[os.path.isabs(base):];  # If abs, chop off leading /
            if ext not in this.src_extensions{
                # Better to raise an exception instead of silently continuing
                # and later complain about sources and targets having
                # different lengths
                raise CompileError ("Don't know how to compile %s" % src_name);
            } if strip_dir{
                base = os.path.basename (base);
            } if ext in this._rc_extensions{
                obj_names.append (os.path.join (output_dir,
                                                base + this.res_extension));
            } elif ext in this._mc_extensions{
                obj_names.append (os.path.join (output_dir,
                                                base + this.res_extension));
            } else{
                obj_names.append (os.path.join (output_dir,
                                                base + this.obj_extension));
        } } return obj_names;

    # object_filenames ()


    }
    function compile( sources,
                output_dir=nil, macros=nil, include_dirs=nil, debug=0,
                extra_preargs=nil, extra_postargs=nil, depends=nil){

        if not this.initialized{ this.initialize();}
        macros, objects, extra_postargs, pp_opts, build = \
                this._setup_compile(output_dir, macros, include_dirs, sources,
                                    depends, extra_postargs);

        compile_opts = extra_preargs or [];
        compile_opts.append ('/c');
        if debug{
            compile_opts.extend(this.compile_options_debug);
        } else{
            compile_opts.extend(this.compile_options);

        }
        for obj in objects{
            try{
                src, ext = build[obj];
            } except KeyError{
                continue;
            } if debug{
                # pass the full pathname to MSVC in debug mode,
                # this allows the debugger to find the source file
                # without asking the user to browse for it
                src = os.path.abspath(src);

            }
            if ext in this._c_extensions{
                input_opt = "/Tc" + src;
            } elif ext in this._cpp_extensions{
                input_opt = "/Tp" + src;
            } elif ext in this._rc_extensions{
                # compile .RC to .RES file
                input_opt = src;
                output_opt = "/fo" + obj;
                try{
                    this.spawn ([this.rc] + pp_opts +
                                [output_opt] + [input_opt]);
                } except DistutilsExecError, msg{
                    raise CompileError, msg;
                } continue;
            } elif ext in this._mc_extensions{

                # Compile .MC to .RC file to .RES file.
                #   * '-h dir' specifies the directory for the
                #     generated include file
                #   * '-r dir' specifies the target directory of the
                #     generated RC file and the binary message resource
                #     it includes
                #
                # For now (since there are no options to change this),
                # we use the source-directory for the include file and
                # the build directory for the RC file and message
                # resources. This works at least for win32all.

                h_dir = os.path.dirname (src);
                rc_dir = os.path.dirname (obj);
                try{
                    # first compile .MC to .RC and .H file
                    this.spawn ([this.mc] +
                                ['-h', h_dir, '-r', rc_dir] + [src]);
                    base, _ = os.path.splitext (os.path.basename (src));
                    rc_file = os.path.join (rc_dir, base + '.rc');
                    # then compile .RC to .RES file
                    this.spawn ([this.rc] +
                                ["/fo" + obj] + [rc_file]);

                }
                except DistutilsExecError, msg{
                    raise CompileError, msg;
                } continue;
            } else{
                # how to handle this file?
                raise CompileError (
                    "Don't know how to compile %s to %s" % \
                    (src, obj));

            }
            output_opt = "/Fo" + obj;
            try{
                this.spawn ([this.cc] + compile_opts + pp_opts +
                            [input_opt, output_opt] +
                            extra_postargs);
            } except DistutilsExecError, msg{
                raise CompileError, msg;

        }
        } return objects;

    # compile ()


    }
    function create_static_lib (
                           objects,
                           output_libname,
                           output_dir=nil,
                           debug=0,
                           target_lang=nil){

        if not this.initialized{ this.initialize();}
        (objects, output_dir) = this._fix_object_args (objects, output_dir);
        output_filename = \
            this.library_filename (output_libname, output_dir=output_dir);

        if this._need_link (objects, output_filename){
            lib_args = objects + ['/OUT:' + output_filename];
            if debug{
                pass;                    # XXX what goes here?
            } try{
                this.spawn ([this.lib] + lib_args);
            } except DistutilsExecError, msg{
                raise LibError, msg;

        }
        } else{
            log.debug("skipping %s (up-to-date)", output_filename);

    # create_static_lib ()

    }
    } function link (
              target_desc,
              objects,
              output_filename,
              output_dir=nil,
              libraries=nil,
              library_dirs=nil,
              runtime_library_dirs=nil,
              export_symbols=nil,
              debug=0,
              extra_preargs=nil,
              extra_postargs=nil,
              build_temp=nil,
              target_lang=nil){

        if not this.initialized{ this.initialize();}
        (objects, output_dir) = this._fix_object_args (objects, output_dir);
        (libraries, library_dirs, runtime_library_dirs) = \
            this._fix_lib_args (libraries, library_dirs, runtime_library_dirs);

        if runtime_library_dirs{
            this.warn ("I don't know what to do with 'runtime_library_dirs': "
                       + str (runtime_library_dirs));

        }
        lib_opts = gen_lib_options (this,
                                    library_dirs, runtime_library_dirs,
                                    libraries);
        if output_dir is not nil{
            output_filename = os.path.join (output_dir, output_filename);

        }
        if this._need_link (objects, output_filename){

            if target_desc == CCompiler.EXECUTABLE{
                if debug{
                    ldflags = this.ldflags_shared_debug[1:];
                } else{
                    ldflags = this.ldflags_shared[1:];
            } } else{
                if debug{
                    ldflags = this.ldflags_shared_debug;
                } else{
                    ldflags = this.ldflags_shared;

            }
            } export_opts = [];
            for sym in (export_symbols or []){
                export_opts.append("/EXPORT:" + sym);

            }
            ld_args = (ldflags + lib_opts + export_opts +
                       objects + ['/OUT:' + output_filename]);

            # The MSVC linker generates .lib and .exp files, which cannot be
            # suppressed by any linker switches. The .lib files may even be
            # needed! Make sure they are generated in the temporary build
            # directory. Since they have different names for debug and release
            # builds, they can go into the same directory.
            if export_symbols is not nil{
                (dll_name, dll_ext) = os.path.splitext(
                    os.path.basename(output_filename));
                implib_file = os.path.join(
                    os.path.dirname(objects[0]),
                    this.library_filename(dll_name));
                ld_args.append ('/IMPLIB:' + implib_file);

            }
            if extra_preargs{
                ld_args[:0] = extra_preargs;
            } if extra_postargs{
                ld_args.extend(extra_postargs);

            }
            this.mkpath (os.path.dirname (output_filename));
            try{
                this.spawn ([this.linker] + ld_args);
            } except DistutilsExecError, msg{
                raise LinkError, msg;

        }
        } else{
            log.debug("skipping %s (up-to-date)", output_filename);

    # link ()


    # -- Miscellaneous methods -----------------------------------------
    # These are all used by the 'gen_lib_options() function, in
    # ccompiler.py.

    }
    } function library_dir_option ( dir){
        return "/LIBPATH:" + dir;

    }
    function runtime_library_dir_option ( dir){
        raise DistutilsPlatformError, \
              "don't know how to set runtime library search path for MSVC++";

    }
    function library_option ( lib){
        return this.library_filename (lib);


    }
    function find_library_file ( dirs, lib, debug=0){
        # Prefer a debugging library if found (and requested), but deal
        # with it if we don't have one.
        if debug{
            try_names = [lib + "_d", lib];
        } else{
            try_names = [lib];
        } for dir in dirs{
            for name in try_names{
                libfile = os.path.join(dir, this.library_filename (name));
                if os.path.exists(libfile){
                    return libfile;
        } } } else{
            # Oops, didn't find it in *any* of 'dirs'
            return nil;

    # find_library_file ()

    # Helper methods for using the MSVC registry settings

    }
    } function find_exe( exe){
        """Return path to an MSVC executable program.

        Tries to find the program in several places: first, one of the
        MSVC program search paths from the registry; next, the directories
        in the PATH environment variable.  If any of those work, return an
        absolute path that is known to exist.  If none of them work, just
        return the original program name, 'exe'.
        """;

        for p in this.__paths{
            fn = os.path.join(os.path.abspath(p), exe);
            if os.path.isfile(fn){
                return fn;

        # didn't find it; try existing path
        }
        } for p in string.split(os.environ['Path'],';'){
            fn = os.path.join(os.path.abspath(p),exe);
            if os.path.isfile(fn){
                return fn;

        }
        } return exe;

    }
    function get_msvc_paths( path, platform='x86'){
        """Get a list of devstudio directories (include, lib or path).

        Return a list of strings.  The list will be empty if unable to
        access the registry or appropriate registry keys not found.
        """;

        if not _can_read_reg{
            return [];

        }
        path = path + " dirs";
        if this.__version >= 7{
            key = (r"%s\%0.1f\VC\VC_OBJECTS_PLATFORM_INFO\Win32\Directories"
                   % (this.__root, this.__version));
        } else{
            key = (r"%s\6.0\Build System\Components\Platforms"
                   r"\Win32 (%s)\Directories" % (this.__root, platform));

        }
        for base in HKEYS{
            d = read_values(base, key);
            if d{
                if this.__version >= 7{
                    return string.split(this.__macros.sub(d[path]), ";");
                } else{
                    return string.split(d[path], ";");
        # MSVC 6 seems to create the registry entries we need only when
        # the GUI is run.
        }
        } } if this.__version == 6{
            for base in HKEYS{
                if read_values(base, r"%s\6.0" % this.__root) is not nil{
                    this.warn("It seems you have Visual Studio 6 installed, "
                        "but the expected registry settings are not present.\n"
                        "You must at least run the Visual Studio GUI once "
                        "so that these entries are created.");
                    break;
        } } } return [];

    }
    function set_path_env_var( name){
        """Set environment variable 'name' to an MSVC path type value.

        This is equivalent to a SET command prior to execution of spawned
        commands.
        """;

        if name == "lib"{
            p = this.get_msvc_paths("library");
        } else{
            p = this.get_msvc_paths(name);
        } if p{
            os.environ[name] = string.join(p, ';');


}
} } if get_build_version() >= 8.0{
    log.debug("Importing new compiler from distutils.msvc9compiler");
    OldMSVCCompiler = MSVCCompiler;
    from distutils.msvc9compiler import MSVCCompiler;
    # get_build_architecture not really relevant now we support cross-compile
    from distutils.msvc9compiler import MacroExpander;

}