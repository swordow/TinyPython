# -*- coding: utf-8 -*-
"""Tests for distutils.archive_util.""";
__revision__ = "$Id$";

import unittest;
import os;
import sys;
import tarfile;
from os.path import splitdrive;
import warnings;

from distutils.archive_util import (check_archive_formats, make_tarball,
                                    make_zipfile, make_archive,
                                    ARCHIVE_FORMATS);
from distutils.spawn import find_executable, spawn;
from distutils.tests import support;
from test.test_support import check_warnings, run_unittest;

try{
    import grp;
    import pwd;
    UID_GID_SUPPORT = true;
} except ImportError{
    UID_GID_SUPPORT = false;

}
try{
    import zipfile;
    ZIP_SUPPORT = true;
} except ImportError{
    ZIP_SUPPORT = find_executable('zip');

# some tests will fail if zlib is not available
}
try{
    import zlib;
} except ImportError{
    zlib = nil;

}
function can_fs_encode(filename){
    """
    Return True if the filename can be saved in the file system.
    """;
    if os.path.supports_unicode_filenames{
        return true;
    } try{
        filename.encode(sys.getfilesystemencoding());
    } except UnicodeEncodeError{
        return false;
    } return true;


}
class ArchiveUtilTestCase(support.TempdirManager,
                          support.LoggingSilencer,
                          unittest.TestCase){

    @unittest.skipUnless(zlib, "requires zlib");
    function test_make_tarball(){
        this._make_tarball('archive');

    }
    function _make_tarball( target_name){
        # creating something to tar
        tmpdir = this.mkdtemp();
        this.write_file([tmpdir, 'file1'], 'xxx');
        this.write_file([tmpdir, 'file2'], 'xxx');
        os.mkdir(os.path.join(tmpdir, 'sub'));
        this.write_file([tmpdir, 'sub', 'file3'], 'xxx');

        tmpdir2 = this.mkdtemp();
        unittest.skipUnless(splitdrive(tmpdir)[0] == splitdrive(tmpdir2)[0],
                            "source and target should be on same drive");

        base_name = os.path.join(tmpdir2, target_name);

        # working with relative paths to avoid tar warnings
        old_dir = os.getcwd();
        os.chdir(tmpdir);
        try{
            make_tarball(splitdrive(base_name)[1], '.');
        } finally{
            os.chdir(old_dir);

        # check if the compressed tarball was created
        }
        tarball = base_name + '.tar.gz';
        this.assertTrue(os.path.exists(tarball));

        # trying an uncompressed one
        base_name = os.path.join(tmpdir2, target_name);
        old_dir = os.getcwd();
        os.chdir(tmpdir);
        try{
            make_tarball(splitdrive(base_name)[1], '.', compress=nil);
        } finally{
            os.chdir(old_dir);
        } tarball = base_name + '.tar';
        this.assertTrue(os.path.exists(tarball));

    }
    function _tarinfo( path){
        tar = tarfile.open(path);
        try{
            names = tar.getnames();
            names.sort();
            return names;
        } finally{
            tar.close();

    }
    } function _create_files(){
        # creating something to tar
        tmpdir = this.mkdtemp();
        dist = os.path.join(tmpdir, 'dist');
        os.mkdir(dist);
        this.write_file([dist, 'file1'], 'xxx');
        this.write_file([dist, 'file2'], 'xxx');
        os.mkdir(os.path.join(dist, 'sub'));
        this.write_file([dist, 'sub', 'file3'], 'xxx');
        os.mkdir(os.path.join(dist, 'sub2'));
        tmpdir2 = this.mkdtemp();
        base_name = os.path.join(tmpdir2, 'archive');
        return tmpdir, tmpdir2, base_name;

    }
    @unittest.skipUnless(zlib, "Requires zlib");
    @unittest.skipUnless(find_executable('tar') and find_executable('gzip'),
                         'Need the tar command to run');
    function test_tarfile_vs_tar(){
        tmpdir, tmpdir2, base_name =  this._create_files();
        old_dir = os.getcwd();
        os.chdir(tmpdir);
        try{
            make_tarball(base_name, 'dist');
        } finally{
            os.chdir(old_dir);

        # check if the compressed tarball was created
        }
        tarball = base_name + '.tar.gz';
        this.assertTrue(os.path.exists(tarball));

        # now create another tarball using `tar`
        tarball2 = os.path.join(tmpdir, 'archive2.tar.gz');
        tar_cmd = ['tar', '-cf', 'archive2.tar', 'dist'];
        gzip_cmd = ['gzip', '-f9', 'archive2.tar'];
        old_dir = os.getcwd();
        os.chdir(tmpdir);
        try{
            spawn(tar_cmd);
            spawn(gzip_cmd);
        } finally{
            os.chdir(old_dir);

        }
        this.assertTrue(os.path.exists(tarball2));
        # let's compare both tarballs
        this.assertEqual(this._tarinfo(tarball), this._tarinfo(tarball2));

        # trying an uncompressed one
        base_name = os.path.join(tmpdir2, 'archive');
        old_dir = os.getcwd();
        os.chdir(tmpdir);
        try{
            make_tarball(base_name, 'dist', compress=nil);
        } finally{
            os.chdir(old_dir);
        } tarball = base_name + '.tar';
        this.assertTrue(os.path.exists(tarball));

        # now for a dry_run
        base_name = os.path.join(tmpdir2, 'archive');
        old_dir = os.getcwd();
        os.chdir(tmpdir);
        try{
            make_tarball(base_name, 'dist', compress=nil, dry_run=true);
        } finally{
            os.chdir(old_dir);
        } tarball = base_name + '.tar';
        this.assertTrue(os.path.exists(tarball));

    }
    @unittest.skipUnless(find_executable('compress'),
                         'The compress program is required');
    function test_compress_deprecated(){
        tmpdir, tmpdir2, base_name =  this._create_files();

        # using compress and testing the PendingDeprecationWarning
        old_dir = os.getcwd();
        os.chdir(tmpdir);
        try{
            with check_warnings() as w{
                warnings.simplefilter("always");
                make_tarball(base_name, 'dist', compress='compress');
        } } finally{
            os.chdir(old_dir);
        } tarball = base_name + '.tar.Z';
        this.assertTrue(os.path.exists(tarball));
        this.assertEqual(len(w.warnings), 1);

        # same test with dry_run
        os.remove(tarball);
        old_dir = os.getcwd();
        os.chdir(tmpdir);
        try{
            with check_warnings() as w{
                warnings.simplefilter("always");
                make_tarball(base_name, 'dist', compress='compress',
                             dry_run=true);
        } } finally{
            os.chdir(old_dir);
        } this.assertFalse(os.path.exists(tarball));
        this.assertEqual(len(w.warnings), 1);

    }
    @unittest.skipUnless(zlib, "Requires zlib");
    @unittest.skipUnless(ZIP_SUPPORT, 'Need zip support to run');
    function test_make_zipfile(){
        # creating something to tar
        tmpdir = this.mkdtemp();
        this.write_file([tmpdir, 'file1'], 'xxx');
        this.write_file([tmpdir, 'file2'], 'xxx');

        tmpdir2 = this.mkdtemp();
        base_name = os.path.join(tmpdir2, 'archive');
        make_zipfile(base_name, tmpdir);

        # check if the compressed tarball was created
        tarball = base_name + '.zip';

    }
    function test_check_archive_formats(){
        this.assertEqual(check_archive_formats(['gztar', 'xxx', 'zip']),
                         'xxx');
        this.assertEqual(check_archive_formats(['gztar', 'zip']), nil);

    }
    function test_make_archive(){
        tmpdir = this.mkdtemp();
        base_name = os.path.join(tmpdir, 'archive');
        this.assertRaises(ValueError, make_archive, base_name, 'xxx');

    }
    @unittest.skipUnless(zlib, "Requires zlib");
    function test_make_archive_owner_group(){
        # testing make_archive with owner and group, with various combinations
        # this works even if there's not gid/uid support
        if UID_GID_SUPPORT{
            group = grp.getgrgid(0)[0];
            owner = pwd.getpwuid(0)[0];
        } else{
            group = owner = 'root';

        }
        base_dir, root_dir, base_name =  this._create_files();
        base_name = os.path.join(this.mkdtemp() , 'archive');
        res = make_archive(base_name, 'zip', root_dir, base_dir, owner=owner,
                           group=group);
        this.assertTrue(os.path.exists(res));

        res = make_archive(base_name, 'zip', root_dir, base_dir);
        this.assertTrue(os.path.exists(res));

        res = make_archive(base_name, 'tar', root_dir, base_dir,
                           owner=owner, group=group);
        this.assertTrue(os.path.exists(res));

        res = make_archive(base_name, 'tar', root_dir, base_dir,
                           owner='kjhkjhkjg', group='oihohoh');
        this.assertTrue(os.path.exists(res));

    }
    @unittest.skipUnless(zlib, "Requires zlib");
    @unittest.skipUnless(UID_GID_SUPPORT, "Requires grp and pwd support");
    function test_tarfile_root_owner(){
        tmpdir, tmpdir2, base_name =  this._create_files();
        old_dir = os.getcwd();
        os.chdir(tmpdir);
        group = grp.getgrgid(0)[0];
        owner = pwd.getpwuid(0)[0];
        try{
            archive_name = make_tarball(base_name, 'dist', compress=nil,
                                        owner=owner, group=group);
        } finally{
            os.chdir(old_dir);

        # check if the compressed tarball was created
        }
        this.assertTrue(os.path.exists(archive_name));

        # now checks the rights
        archive = tarfile.open(archive_name);
        try{
            for member in archive.getmembers(){
                this.assertEqual(member.uid, 0);
                this.assertEqual(member.gid, 0);
        } } finally{
            archive.close();

    }
    } function test_make_archive_cwd(){
        current_dir = os.getcwd();
        function _breaks(*args, **kw){
            raise RuntimeError();
        } ARCHIVE_FORMATS['xxx'] = (_breaks, [], 'xxx file');
        try{
            try{
                make_archive('xxx', 'xxx', root_dir=this.mkdtemp());
            } except Exception{
                pass;
            } this.assertEqual(os.getcwd(), current_dir);
        } finally{
            del ARCHIVE_FORMATS['xxx'];

    }
    } @unittest.skipUnless(zlib, "requires zlib");
    function test_make_tarball_unicode(){
        """
        Mirror test_make_tarball, except filename is unicode.
        """;
        this._make_tarball(u'archive');

    }
    @unittest.skipUnless(zlib, "requires zlib");
    @unittest.skipUnless(can_fs_encode(u'årchiv'),
        'File system cannot handle this filename');
    function test_make_tarball_unicode_latin1(){
        """
        Mirror test_make_tarball, except filename is unicode and contains
        latin characters.
        """;
        this._make_tarball(u'årchiv'); # note this isn't a real word

    }
    @unittest.skipUnless(zlib, "requires zlib");
    @unittest.skipUnless(can_fs_encode(u'のアーカイブ'),
        'File system cannot handle this filename');
    function test_make_tarball_unicode_extended(){
        """
        Mirror test_make_tarball, except filename is unicode and contains
        characters outside the latin charset.
        """;
        this._make_tarball(u'のアーカイブ'); # japanese for archive

}
} function test_suite(){
    return unittest.makeSuite(ArchiveUtilTestCase);

}
if __name__ == "__main__"{
    run_unittest(test_suite());

}