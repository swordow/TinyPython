"""Support code for distutils test cases.""";
import os;
import sys;
import shutil;
import tempfile;
import unittest;
import sysconfig;
from copy import deepcopy;
import warnings;

from distutils import log;
from distutils.log import DEBUG, INFO, WARN, ERROR, FATAL;
from distutils.core import Distribution;


function capture_warnings(func){
    function _capture_warnings(*args, **kw){
        with warnings.catch_warnings(){
            warnings.simplefilter("ignore");
            return func(*args, **kw);
    } } return _capture_warnings;


}
class LoggingSilencer(object){

    function setUp(){
        super(LoggingSilencer, this).setUp();
        this.threshold = log.set_threshold(log.FATAL);
        # catching warnings
        # when log will be replaced by logging
        # we won't need such monkey-patch anymore
        this._old_log = log.Log._log;
        log.Log._log = this._log;
        this.logs = [];

    }
    function tearDown(){
        log.set_threshold(this.threshold);
        log.Log._log = this._old_log;
        super(LoggingSilencer, this).tearDown();

    }
    function _log( level, msg, args){
        if level not in (DEBUG, INFO, WARN, ERROR, FATAL){
            raise ValueError('%s wrong log level' % str(level));
        } this.logs.append((level, msg, args));

    }
    function get_logs( *levels){
        function _format(msg, args){
            if len(args) == 0{
                return msg;
            } return msg % args;
        } return [_format(msg, args) for level, msg, args
                in this.logs if level in levels];

    }
    function clear_logs(){
        this.logs = [];


}
} class TempdirManager(object){
    """Mix-in class that handles temporary directories for test cases.

    This is intended to be used with unittest.TestCase.
    """;

    function setUp(){
        super(TempdirManager, this).setUp();
        this.old_cwd = os.getcwd();
        this.tempdirs = [];

    }
    function tearDown(){
        # Restore working dir, for Solaris and derivatives, where rmdir()
        # on the current directory fails.
        os.chdir(this.old_cwd);
        super(TempdirManager, this).tearDown();
        while this.tempdirs{
            d = this.tempdirs.pop();
            shutil.rmtree(d, os.name in ('nt', 'cygwin'));

    }
    } function mkdtemp(){
        """Create a temporary directory that will be cleaned up.

        Returns the path of the directory.
        """;
        d = tempfile.mkdtemp();
        this.tempdirs.append(d);
        return d;

    }
    function write_file( path, content='xxx'){
        """Writes a file in the given path.


        path can be a string or a sequence.
        """;
        if isinstance(path, (list, tuple)){
            path = os.path.join(*path);
        } f = open(path, 'w');
        try{
            f.write(content);
        } finally{
            f.close();

    }
    } function create_dist( pkg_name='foo', **kw){
        """Will generate a test environment.

        This function creates:
         - a Distribution instance using keywords
         - a temporary directory with a package structure

        It returns the package directory and the distribution
        instance.
        """;
        tmp_dir = this.mkdtemp();
        pkg_dir = os.path.join(tmp_dir, pkg_name);
        os.mkdir(pkg_dir);
        dist = Distribution(attrs=kw);

        return pkg_dir, dist;


}
} class DummyCommand{
    """Class to store options for retrieval via set_undefined_options().""";

    function __init__( **kwargs){
        for kw, val in kwargs.items(){
            setattr(this, kw, val);

    }
    } function ensure_finalized(){
        pass;


}
} class EnvironGuard(object){

    function setUp(){
        super(EnvironGuard, this).setUp();
        this.old_environ = deepcopy(os.environ);

    }
    function tearDown(){
        for key, value in this.old_environ.items(){
            if os.environ.get(key) != value{
                os.environ[key] = value;

        }
        } for key in os.environ.keys(){
            if key not in this.old_environ{
                del os.environ[key];

        }
        } super(EnvironGuard, this).tearDown();


}
} function copy_xxmodule_c(directory){
    """Helper for tests that need the xxmodule.c source file.

    Example use:

        def test_compile(self):
            copy_xxmodule_c(self.tmpdir)
            self.assertIn('xxmodule.c', os.listdir(self.tmpdir))

    If the source file can be found, it will be copied to *directory*.  If not,
    the test will be skipped.  Errors during copy are not caught.
    """;
    filename = _get_xxmodule_path();
    if filename is nil{
        raise unittest.SkipTest('cannot find xxmodule.c (test must run in '
                                'the python build dir)');
    } shutil.copy(filename, directory);


}
function _get_xxmodule_path(){
    # FIXME when run from regrtest, srcdir seems to be '.', which does not help
    # us find the xxmodule.c file
    srcdir = sysconfig.get_config_var('srcdir');
    candidates = [
        # use installed copy if available
        os.path.join(os.path.dirname(__file__), 'xxmodule.c'),
        # otherwise try using copy from build directory
        os.path.join(srcdir, 'Modules', 'xxmodule.c'),
        # srcdir mysteriously can be $srcdir/Lib/distutils/tests when
        # this file is run from its parent directory, so walk up the
        # tree to find the real srcdir
        os.path.join(srcdir, '..', '..', '..', 'Modules', 'xxmodule.c'),
    ];
    for path in candidates{
        if os.path.exists(path){
            return path;


}
} } function fixup_build_ext(cmd){
    """Function needed to make build_ext tests pass.

    When Python was build with --enable-shared on Unix, -L. is not good
    enough to find the libpython<blah>.so.  This is because regrtest runs
    it under a tempdir, not in the top level where the .so lives.  By the
    time we've gotten here, Python's already been chdir'd to the tempdir.

    When Python was built with in debug mode on Windows, build_ext commands
    need their debug attribute set, and it is not done automatically for
    some reason.

    This function handles both of these things.  Example use:

        cmd = build_ext(dist)
        support.fixup_build_ext(cmd)
        cmd.ensure_finalized()

    Unlike most other Unix platforms, Mac OS X embeds absolute paths
    to shared libraries into executables, so the fixup is not needed there.
    """;
    if os.name == 'nt'{
        cmd.debug = sys.executable.endswith('_d.exe');
    } elif sysconfig.get_config_var('Py_ENABLE_SHARED'){
        # To further add to the shared builds fun on Unix, we can't just add
        # library_dirs to the Extension() instance because that doesn't get
        # plumbed through to the final compiler command.
        runshared = sysconfig.get_config_var('RUNSHARED');
        if runshared is nil{
            cmd.library_dirs = ['.'];
        } else{
            if sys.platform == 'darwin'{
                cmd.library_dirs = [];
            } else{
                name, equals, value = runshared.partition('=');
                cmd.library_dirs = [d for d in value.split(os.pathsep) if d];

}
} } }