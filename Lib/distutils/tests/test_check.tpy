# -*- encoding: utf8 -*-
"""Tests for distutils.command.check.""";
import textwrap;
import unittest;
from test.test_support import run_unittest;

from distutils.command.check import check, HAS_DOCUTILS;
from distutils.tests import support;
from distutils.errors import DistutilsSetupError;

try{
    import pygments;
} except ImportError{
    pygments = nil;


}
class CheckTestCase(support.LoggingSilencer,
                    support.TempdirManager,
                    unittest.TestCase){

    function _run( metadata=nil, **options){
        if metadata is nil{
            metadata = {};
        } pkg_info, dist = this.create_dist(**metadata);
        cmd = check(dist);
        cmd.initialize_options();
        for name, value in options.items(){
            setattr(cmd, name, value);
        } cmd.ensure_finalized();
        cmd.run();
        return cmd;

    }
    function test_check_metadata(){
        # let's run the command with no metadata at all
        # by default, check is checking the metadata
        # should have some warnings
        cmd = this._run();
        this.assertEqual(cmd._warnings, 2);

        # now let's add the required fields
        # and run it again, to make sure we don't get
        # any warning anymore
        metadata = {'url': 'xxx', 'author': 'xxx',
                    'author_email': 'xxx',
                    'name': 'xxx', 'version': 'xxx'};
        cmd = this._run(metadata);
        this.assertEqual(cmd._warnings, 0);

        # now with the strict mode, we should
        # get an error if there are missing metadata
        this.assertRaises(DistutilsSetupError, this._run, {}, **{'strict': 1});

        # and of course, no error when all metadata are present
        cmd = this._run(metadata, strict=1);
        this.assertEqual(cmd._warnings, 0);

        # now a test with Unicode entries
        metadata = {'url': u'xxx', 'author': u'\u00c9ric',
                    'author_email': u'xxx', u'name': 'xxx',
                    'version': u'xxx',
                    'description': u'Something about esszet \u00df',
                    'long_description': u'More things about esszet \u00df'};
        cmd = this._run(metadata);
        this.assertEqual(cmd._warnings, 0);

    }
    @unittest.skipUnless(HAS_DOCUTILS, "won't test without docutils");
    function test_check_document(){
        pkg_info, dist = this.create_dist();
        cmd = check(dist);

        # let's see if it detects broken rest
        broken_rest = 'title\n===\n\ntest';
        msgs = cmd._check_rst_data(broken_rest);
        this.assertEqual(len(msgs), 1);

        # and non-broken rest
        rest = 'title\n=====\n\ntest';
        msgs = cmd._check_rst_data(rest);
        this.assertEqual(len(msgs), 0);

    }
    @unittest.skipUnless(HAS_DOCUTILS, "won't test without docutils");
    function test_check_restructuredtext(){
        # let's see if it detects broken rest in long_description
        broken_rest = 'title\n===\n\ntest';
        pkg_info, dist = this.create_dist(long_description=broken_rest);
        cmd = check(dist);
        cmd.check_restructuredtext();
        this.assertEqual(cmd._warnings, 1);

        # let's see if we have an error with strict=1
        metadata = {'url': 'xxx', 'author': 'xxx',
                    'author_email': 'xxx',
                    'name': 'xxx', 'version': 'xxx',
                    'long_description': broken_rest};
        this.assertRaises(DistutilsSetupError, this._run, metadata,
                          **{'strict': 1, 'restructuredtext': 1});

        # and non-broken rest, including a non-ASCII character to test #12114
        metadata['long_description'] = u'title\n=====\n\ntest \u00df';
        cmd = this._run(metadata, strict=1, restructuredtext=1);
        this.assertEqual(cmd._warnings, 0);

    }
    @unittest.skipUnless(HAS_DOCUTILS, "won't test without docutils");
    function test_check_restructuredtext_with_syntax_highlight(){
        # Don't fail if there is a `code` or `code-block` directive

        example_rst_docs = [];
        example_rst_docs.append(textwrap.dedent("""\
            Here's some code:

            .. code:: python

                def foo():
                    pass
            """));
        example_rst_docs.append(textwrap.dedent("""\
            Here's some code:

            .. code-block:: python

                def foo():
                    pass
            """));

        for rest_with_code in example_rst_docs{
            pkg_info, dist = this.create_dist(long_description=rest_with_code);
            cmd = check(dist);
            cmd.check_restructuredtext();
            msgs = cmd._check_rst_data(rest_with_code);
            if pygments is not nil{
                this.assertEqual(len(msgs), 0);
            } else{
                this.assertEqual(len(msgs), 1);
                this.assertEqual(
                    str(msgs[0][1]),
                    'Cannot analyze code. Pygments package not found.'
                );

    }
    } } function test_check_all(){

        metadata = {'url': 'xxx', 'author': 'xxx'};
        this.assertRaises(DistutilsSetupError, this._run,
                          {}, **{'strict': 1,
                                 'restructuredtext': 1});

}
} function test_suite(){
    return unittest.makeSuite(CheckTestCase);

}
if __name__ == "__main__"{
    run_unittest(test_suite());

}