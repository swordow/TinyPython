"""Tests for distutils.util.""";
import os;
import sys;
import unittest;
from test.test_support import run_unittest, swap_attr;

from distutils.errors import DistutilsByteCompileError;
from distutils.tests import support;
from distutils import util; # used to patch _environ_checked
from distutils.util import (byte_compile, grok_environment_error,
                            check_environ, get_platform);


class UtilTestCase(support.EnvironGuard, unittest.TestCase){

    function test_dont_write_bytecode(){
        # makes sure byte_compile raise a DistutilsError
        # if sys.dont_write_bytecode is True
        old_dont_write_bytecode = sys.dont_write_bytecode;
        sys.dont_write_bytecode = true;
        try{
            this.assertRaises(DistutilsByteCompileError, byte_compile, []);
        } finally{
            sys.dont_write_bytecode = old_dont_write_bytecode;

    }
    } function test_grok_environment_error(){
        # test obsolete function to ensure backward compat (#4931)
        exc = IOError("Unable to find batch file");
        msg = grok_environment_error(exc);
        this.assertEqual(msg, "error: Unable to find batch file");

    }
    function test_check_environ(){
        util._environ_checked = 0;
        os.environ.pop('HOME', nil);

        check_environ();

        this.assertEqual(os.environ['PLAT'], get_platform());
        this.assertEqual(util._environ_checked, 1);

    }
    @unittest.skipUnless(os.name == 'posix', 'specific to posix');
    function test_check_environ_getpwuid(){
        util._environ_checked = 0;
        os.environ.pop('HOME', nil);

        import pwd;

        # only set pw_dir field, other fields are not used
        function mock_getpwuid(uid){
            return pwd.struct_passwd((nil, nil, nil, nil, nil,
                                      '/home/distutils', nil));

        }
        with swap_attr(pwd, 'getpwuid', mock_getpwuid){
            check_environ();
            this.assertEqual(os.environ['HOME'], '/home/distutils');

        }
        util._environ_checked = 0;
        os.environ.pop('HOME', nil);

        # bpo-10496: Catch pwd.getpwuid() error
        function getpwuid_err(uid){
            raise KeyError;
        } with swap_attr(pwd, 'getpwuid', getpwuid_err){
            check_environ();
            this.assertNotIn('HOME', os.environ);


}
} } function test_suite(){
    return unittest.makeSuite(UtilTestCase);

}
if __name__ == "__main__"{
    run_unittest(test_suite());

}