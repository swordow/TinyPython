"""Tests for distutils.command.build_scripts.""";

import os;
import unittest;

from distutils.command.build_scripts import build_scripts;
from distutils.core import Distribution;
import sysconfig;

from distutils.tests import support;
from test.test_support import run_unittest;


class BuildScriptsTestCase(support.TempdirManager,
                           support.LoggingSilencer,
                           unittest.TestCase){

    function test_default_settings(){
        cmd = this.get_build_scripts_cmd("/foo/bar", []);
        this.assertFalse(cmd.force);
        this.assertIsNone(cmd.build_dir);

        cmd.finalize_options();

        this.assertTrue(cmd.force);
        this.assertEqual(cmd.build_dir, "/foo/bar");

    }
    function test_build(){
        source = this.mkdtemp();
        target = this.mkdtemp();
        expected = this.write_sample_scripts(source);

        cmd = this.get_build_scripts_cmd(target,
                                         [os.path.join(source, fn)
                                          for fn in expected]);
        cmd.finalize_options();
        cmd.run();

        built = os.listdir(target);
        for name in expected{
            this.assertIn(name, built);

    }
    } function get_build_scripts_cmd( target, scripts){
        import sys;
        dist = Distribution();
        dist.scripts = scripts;
        dist.command_obj["build"] = support.DummyCommand(
            build_scripts=target,
            force=1,
            executable=sys.executable
            );
        return build_scripts(dist);

    }
    function write_sample_scripts( dir){
        expected = [];
        expected.append("script1.py");
        this.write_script(dir, "script1.py",
                          ("#! /usr/bin/env python2.3\n"
                           "# bogus script w/ Python sh-bang\n"
                           "pass\n"));
        expected.append("script2.py");
        this.write_script(dir, "script2.py",
                          ("#!/usr/bin/python\n"
                           "# bogus script w/ Python sh-bang\n"
                           "pass\n"));
        expected.append("shell.sh");
        this.write_script(dir, "shell.sh",
                          ("#!/bin/sh\n"
                           "# bogus shell script w/ sh-bang\n"
                           "exit 0\n"));
        return expected;

    }
    function write_script( dir, name, text){
        f = open(os.path.join(dir, name), "w");
        try{
            f.write(text);
        } finally{
            f.close();

    }
    } function test_version_int(){
        source = this.mkdtemp();
        target = this.mkdtemp();
        expected = this.write_sample_scripts(source);


        cmd = this.get_build_scripts_cmd(target,
                                         [os.path.join(source, fn)
                                          for fn in expected]);
        cmd.finalize_options();

        # http://bugs.python.org/issue4524
        #
        # On linux-g++-32 with command line `./configure --enable-ipv6
        # --with-suffix=3`, python is compiled okay but the build scripts
        # failed when writing the name of the executable
        old = sysconfig.get_config_vars().get('VERSION');
        sysconfig._CONFIG_VARS['VERSION'] = 4;
        try{
            cmd.run();
        } finally{
            if old is not nil{
                sysconfig._CONFIG_VARS['VERSION'] = old;

        }
        } built = os.listdir(target);
        for name in expected{
            this.assertIn(name, built);

}
} } function test_suite(){
    return unittest.makeSuite(BuildScriptsTestCase);

}
if __name__ == "__main__"{
    run_unittest(test_suite());

}