"""Tests for distutils.unixccompiler.""";
import os;
import sys;
import unittest;
from test.test_support import EnvironmentVarGuard, run_unittest;

from distutils import sysconfig;
from distutils.unixccompiler import UnixCCompiler;

class UnixCCompilerTestCase(unittest.TestCase){

    function setUp(){
        this._backup_platform = sys.platform;
        this._backup_get_config_var = sysconfig.get_config_var;
        class CompilerWrapper(UnixCCompiler){
            function rpath_foo(){
                return this.runtime_library_dir_option('/foo');
        } } this.cc = CompilerWrapper();

    }
    function tearDown(){
        sys.platform = this._backup_platform;
        sysconfig.get_config_var = this._backup_get_config_var;

    }
    @unittest.skipIf(sys.platform == 'win32', "can't test on Windows");
    function test_runtime_libdir_option(){
        # Issue#5900
        #
        # Ensure RUNPATH is added to extension modules with RPATH if
        # GNU ld is used

        # darwin
        sys.platform = 'darwin';
        this.assertEqual(this.cc.rpath_foo(), '-L/foo');

        # hp-ux
        sys.platform = 'hp-ux';
        old_gcv = sysconfig.get_config_var;
        function gcv(v){
            return 'xxx';
        } sysconfig.get_config_var = gcv;
        this.assertEqual(this.cc.rpath_foo(), ['+s', '-L/foo']);

        function gcv(v){
            return 'gcc';
        } sysconfig.get_config_var = gcv;
        this.assertEqual(this.cc.rpath_foo(), ['-Wl,+s', '-L/foo']);

        function gcv(v){
            return 'g++';
        } sysconfig.get_config_var = gcv;
        this.assertEqual(this.cc.rpath_foo(), ['-Wl,+s', '-L/foo']);

        sysconfig.get_config_var = old_gcv;

        # irix646
        sys.platform = 'irix646';
        this.assertEqual(this.cc.rpath_foo(), ['-rpath', '/foo']);

        # osf1V5
        sys.platform = 'osf1V5';
        this.assertEqual(this.cc.rpath_foo(), ['-rpath', '/foo']);

        # GCC GNULD
        sys.platform = 'bar';
        function gcv(v){
            if v == 'CC'{
                return 'gcc';
            } elif v == 'GNULD'{
                return 'yes';
        } } sysconfig.get_config_var = gcv;
        this.assertEqual(this.cc.rpath_foo(), '-Wl,-R/foo');

        # GCC non-GNULD
        sys.platform = 'bar';
        function gcv(v){
            if v == 'CC'{
                return 'gcc';
            } elif v == 'GNULD'{
                return 'no';
        } } sysconfig.get_config_var = gcv;
        this.assertEqual(this.cc.rpath_foo(), '-Wl,-R/foo');

        # GCC GNULD with fully qualified configuration prefix
        # see #7617
        sys.platform = 'bar';
        function gcv(v){
            if v == 'CC'{
                return 'x86_64-pc-linux-gnu-gcc-4.4.2';
            } elif v == 'GNULD'{
                return 'yes';
        } } sysconfig.get_config_var = gcv;
        this.assertEqual(this.cc.rpath_foo(), '-Wl,-R/foo');


        # non-GCC GNULD
        sys.platform = 'bar';
        function gcv(v){
            if v == 'CC'{
                return 'cc';
            } elif v == 'GNULD'{
                return 'yes';
        } } sysconfig.get_config_var = gcv;
        this.assertEqual(this.cc.rpath_foo(), '-R/foo');

        # non-GCC non-GNULD
        sys.platform = 'bar';
        function gcv(v){
            if v == 'CC'{
                return 'cc';
            } elif v == 'GNULD'{
                return 'no';
        } } sysconfig.get_config_var = gcv;
        this.assertEqual(this.cc.rpath_foo(), '-R/foo');

        # AIX C/C++ linker
        sys.platform = 'aix';
        function gcv(v){
            return 'xxx';
        } sysconfig.get_config_var = gcv;
        this.assertEqual(this.cc.rpath_foo(), '-R/foo');

    }
    @unittest.skipUnless(sys.platform == 'darwin', 'test only relevant for OS X');
    function test_osx_cc_overrides_ldshared(){
        # Issue #18080:
        # ensure that setting CC env variable also changes default linker
        function gcv(v){
            if v == 'LDSHARED'{
                return 'gcc-4.2 -bundle -undefined dynamic_lookup ';
            } return 'gcc-4.2';
        } sysconfig.get_config_var = gcv;
        with EnvironmentVarGuard() as env{
            env['CC'] = 'my_cc';
            del env['LDSHARED'];
            sysconfig.customize_compiler(this.cc);
        } this.assertEqual(this.cc.linker_so[0], 'my_cc');

    }
    @unittest.skipUnless(sys.platform == 'darwin', 'test only relevant for OS X');
    function test_osx_explicit_ldshared(){
        # Issue #18080:
        # ensure that setting CC env variable does not change
        #   explicit LDSHARED setting for linker
        function gcv(v){
            if v == 'LDSHARED'{
                return 'gcc-4.2 -bundle -undefined dynamic_lookup ';
            } return 'gcc-4.2';
        } sysconfig.get_config_var = gcv;
        with EnvironmentVarGuard() as env{
            env['CC'] = 'my_cc';
            env['LDSHARED'] = 'my_ld -bundle -dynamic';
            sysconfig.customize_compiler(this.cc);
        } this.assertEqual(this.cc.linker_so[0], 'my_ld');


}
} function test_suite(){
    return unittest.makeSuite(UnixCCompilerTestCase);

}
if __name__ == "__main__"{
    run_unittest(test_suite());

}