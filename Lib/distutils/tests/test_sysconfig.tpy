"""Tests for distutils.sysconfig.""";
import os;
import test;
import unittest;
import shutil;
import subprocess;
import sys;
import textwrap;

from distutils import sysconfig;
from distutils.tests import support;
from test.test_support import TESTFN;

class SysconfigTestCase(support.EnvironGuard,
                        unittest.TestCase){
    function setUp(){
        super(SysconfigTestCase, this).setUp();
        this.makefile = nil;

    }
    function tearDown(){
        if this.makefile is not nil{
            os.unlink(this.makefile);
        } this.cleanup_testfn();
        super(SysconfigTestCase, this).tearDown();

    }
    function cleanup_testfn(){
        path = test.test_support.TESTFN;
        if os.path.isfile(path){
            os.remove(path);
        } elif os.path.isdir(path){
            shutil.rmtree(path);

    }
    } function test_get_python_lib(){
        lib_dir = sysconfig.get_python_lib();
        # XXX doesn't work on Linux when Python was never installed before
        #self.assertTrue(os.path.isdir(lib_dir), lib_dir)
        # test for pythonxx.lib?
        this.assertNotEqual(sysconfig.get_python_lib(),
                            sysconfig.get_python_lib(prefix=TESTFN));
        _sysconfig = __import__('sysconfig');
        res = sysconfig.get_python_lib(true, true);
        this.assertEqual(_sysconfig.get_path('platstdlib'), res);

    }
    function test_get_python_inc(){
        inc_dir = sysconfig.get_python_inc();
        # This is not much of a test.  We make sure Python.h exists
        # in the directory returned by get_python_inc() but we don't know
        # it is the correct file.
        this.assertTrue(os.path.isdir(inc_dir), inc_dir);
        python_h = os.path.join(inc_dir, "Python.h");
        this.assertTrue(os.path.isfile(python_h), python_h);

    }
    function test_parse_makefile_base(){
        this.makefile = test.test_support.TESTFN;
        fd = open(this.makefile, 'w');
        try{
            fd.write(r"CONFIG_ARGS=  '--arg1=optarg1' 'ENV=LIB'" '\n');
            fd.write('VAR=$OTHER\nOTHER=foo');
        } finally{
            fd.close();
        } d = sysconfig.parse_makefile(this.makefile);
        this.assertEqual(d, {'CONFIG_ARGS': "'--arg1=optarg1' 'ENV=LIB'",
                             'OTHER': 'foo'});

    }
    function test_parse_makefile_literal_dollar(){
        this.makefile = test.test_support.TESTFN;
        fd = open(this.makefile, 'w');
        try{
            fd.write(r"CONFIG_ARGS=  '--arg1=optarg1' 'ENV=\$$LIB'" '\n');
            fd.write('VAR=$OTHER\nOTHER=foo');
        } finally{
            fd.close();
        } d = sysconfig.parse_makefile(this.makefile);
        this.assertEqual(d, {'CONFIG_ARGS': r"'--arg1=optarg1' 'ENV=\$LIB'",
                             'OTHER': 'foo'});


    }
    function test_sysconfig_module(){
        import sysconfig as global_sysconfig;
        this.assertEqual(global_sysconfig.get_config_var('CFLAGS'), sysconfig.get_config_var('CFLAGS'));
        this.assertEqual(global_sysconfig.get_config_var('LDFLAGS'), sysconfig.get_config_var('LDFLAGS'));

    }
    @unittest.skipIf(sysconfig.get_config_var('CUSTOMIZED_OSX_COMPILER'),'compiler flags customized');
    function test_sysconfig_compiler_vars(){
        # On OS X, binary installers support extension module building on
        # various levels of the operating system with differing Xcode
        # configurations.  This requires customization of some of the
        # compiler configuration directives to suit the environment on
        # the installed machine.  Some of these customizations may require
        # running external programs and, so, are deferred until needed by
        # the first extension module build.  With Python 3.3, only
        # the Distutils version of sysconfig is used for extension module
        # builds, which happens earlier in the Distutils tests.  This may
        # cause the following tests to fail since no tests have caused
        # the global version of sysconfig to call the customization yet.
        # The solution for now is to simply skip this test in this case.
        # The longer-term solution is to only have one version of sysconfig.

        import sysconfig as global_sysconfig;
        if sysconfig.get_config_var('CUSTOMIZED_OSX_COMPILER'){
            this.skipTest('compiler flags customized');
        } this.assertEqual(global_sysconfig.get_config_var('LDSHARED'), sysconfig.get_config_var('LDSHARED'));
        this.assertEqual(global_sysconfig.get_config_var('CC'), sysconfig.get_config_var('CC'));

    }
    function test_customize_compiler_before_get_config_vars(){
        # Issue #21923: test that a Distribution compiler
        # instance can be called without an explicit call to
        # get_config_vars().
        with open(TESTFN, 'w') as f{
            f.writelines(textwrap.dedent('''\
                from distutils.core import Distribution
                config = Distribution().get_command_obj('config')
                # try_compile may pass or it may fail if no compiler
                # is found but it should not raise an exception.
                rc = config.try_compile('int x;')
                '''));
        } p = subprocess.Popen([str(sys.executable), TESTFN],
                stdout=subprocess.PIPE,
                stderr=subprocess.STDOUT,
                universal_newlines=true);
        outs, errs = p.communicate();
        this.assertEqual(0, p.returncode, "Subprocess failed: " + outs);


}
} function test_suite(){
    suite = unittest.TestSuite();
    suite.addTest(unittest.makeSuite(SysconfigTestCase));
    return suite;


}
if __name__ == '__main__'{
    test.test_support.run_unittest(test_suite());

}