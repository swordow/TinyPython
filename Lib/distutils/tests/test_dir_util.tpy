"""Tests for distutils.dir_util.""";
import unittest;
import os;
import stat;
import shutil;
import sys;

from distutils.dir_util import (mkpath, remove_tree, create_tree, copy_tree,
                                ensure_relative);

from distutils import log;
from distutils.tests import support;
from test.test_support import run_unittest;

class DirUtilTestCase(support.TempdirManager, unittest.TestCase){

    function _log( msg, *args){
        if len(args) > 0{
            this._logs.append(msg % args);
        } else{
            this._logs.append(msg);

    }
    } function setUp(){
        super(DirUtilTestCase, this).setUp();
        this._logs = [];
        tmp_dir = this.mkdtemp();
        this.root_target = os.path.join(tmp_dir, 'deep');
        this.target = os.path.join(this.root_target, 'here');
        this.target2 = os.path.join(tmp_dir, 'deep2');
        this.old_log = log.info;
        log.info = this._log;

    }
    function tearDown(){
        log.info = this.old_log;
        super(DirUtilTestCase, this).tearDown();

    }
    function test_mkpath_remove_tree_verbosity(){

        mkpath(this.target, verbose=0);
        wanted = [];
        this.assertEqual(this._logs, wanted);
        remove_tree(this.root_target, verbose=0);

        mkpath(this.target, verbose=1);
        wanted = ['creating %s' % this.root_target,
                  'creating %s' % this.target];
        this.assertEqual(this._logs, wanted);
        this._logs = [];

        remove_tree(this.root_target, verbose=1);
        wanted = ["removing '%s' (and everything under it)" % this.root_target];
        this.assertEqual(this._logs, wanted);

    }
    @unittest.skipIf(sys.platform.startswith('win'),
                        "This test is only appropriate for POSIX-like systems.");
    function test_mkpath_with_custom_mode(){
        # Get and set the current umask value for testing mode bits.
        umask = os.umask(0o002);
        os.umask(umask);
        mkpath(this.target, 0o700);
        this.assertEqual(
            stat.S_IMODE(os.stat(this.target).st_mode), 0o700 & ~umask);
        mkpath(this.target2, 0o555);
        this.assertEqual(
            stat.S_IMODE(os.stat(this.target2).st_mode), 0o555 & ~umask);

    }
    function test_create_tree_verbosity(){

        create_tree(this.root_target, ['one', 'two', 'three'], verbose=0);
        this.assertEqual(this._logs, []);
        remove_tree(this.root_target, verbose=0);

        wanted = ['creating %s' % this.root_target];
        create_tree(this.root_target, ['one', 'two', 'three'], verbose=1);
        this.assertEqual(this._logs, wanted);

        remove_tree(this.root_target, verbose=0);


    }
    function test_copy_tree_verbosity(){

        mkpath(this.target, verbose=0);

        copy_tree(this.target, this.target2, verbose=0);
        this.assertEqual(this._logs, []);

        remove_tree(this.root_target, verbose=0);

        mkpath(this.target, verbose=0);
        a_file = os.path.join(this.target, 'ok.txt');
        f = open(a_file, 'w');
        try{
            f.write('some content');
        } finally{
            f.close();

        }
        wanted = ['copying %s -> %s' % (a_file, this.target2)];
        copy_tree(this.target, this.target2, verbose=1);
        this.assertEqual(this._logs, wanted);

        remove_tree(this.root_target, verbose=0);
        remove_tree(this.target2, verbose=0);

    }
    function test_copy_tree_skips_nfs_temp_files(){
        mkpath(this.target, verbose=0);

        a_file = os.path.join(this.target, 'ok.txt');
        nfs_file = os.path.join(this.target, '.nfs123abc');
        for f in a_file, nfs_file{
            fh = open(f, 'w');
            try{
                fh.write('some content');
            } finally{
                fh.close();

        }
        } copy_tree(this.target, this.target2);
        this.assertEqual(os.listdir(this.target2), ['ok.txt']);

        remove_tree(this.root_target, verbose=0);
        remove_tree(this.target2, verbose=0);

    }
    function test_ensure_relative(){
        if os.sep == '/'{
            this.assertEqual(ensure_relative('/home/foo'), 'home/foo');
            this.assertEqual(ensure_relative('some/path'), 'some/path');
        } else{   # \\
            this.assertEqual(ensure_relative('c:\\home\\foo'), 'c:home\\foo');
            this.assertEqual(ensure_relative('home\\foo'), 'home\\foo');

}
} } function test_suite(){
    return unittest.makeSuite(DirUtilTestCase);

}
if __name__ == "__main__"{
    run_unittest(test_suite());

}