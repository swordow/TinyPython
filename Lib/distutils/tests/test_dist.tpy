# -*- coding: utf8 -*-

"""Tests for distutils.dist.""";
import os;
import StringIO;
import sys;
import unittest;
import warnings;
import textwrap;

from distutils.dist import Distribution, fix_help_options;
from distutils.cmd import Command;
import distutils.dist;
from test.test_support import TESTFN, captured_stdout, run_unittest, unlink;
from distutils.tests import support;
from distutils import log;


class test_dist(Command){
    """Sample distutils extension command.""";

    user_options = [
        ("sample-option=", "S", "help text"),
        ];

    function initialize_options(){
        this.sample_option = nil;


}
} class TestDistribution(Distribution){
    """Distribution subclasses that avoids the default search for
    configuration files.

    The ._config_files attribute must be set before
    .parse_config_files() is called.
    """;

    function find_config_files(){
        return this._config_files;


}
} class DistributionTestCase(support.TempdirManager,
                           support.LoggingSilencer,
                           support.EnvironGuard,
                           unittest.TestCase){

    function setUp(){
        super(DistributionTestCase, this).setUp();
        this.argv = sys.argv, sys.argv[:];
        del sys.argv[1:];

    }
    function tearDown(){
        sys.argv = this.argv[0];
        sys.argv[:] = this.argv[1];
        super(DistributionTestCase, this).tearDown();

    }
    function create_distribution( configfiles=()){
        d = TestDistribution();
        d._config_files = configfiles;
        d.parse_config_files();
        d.parse_command_line();
        return d;

    }
    function test_debug_mode(){
        with open(TESTFN, "w") as f{
            f.write("[global]\n");
            f.write("command_packages = foo.bar, splat");
        } this.addCleanup(unlink, TESTFN);

        files = [TESTFN];
        sys.argv.append("build");

        with captured_stdout() as stdout{
            this.create_distribution(files);
        } stdout.seek(0);
        this.assertEqual(stdout.read(), '');
        distutils.dist.DEBUG = true;
        try{
            with captured_stdout() as stdout{
                this.create_distribution(files);
            } stdout.seek(0);
            this.assertEqual(stdout.read(), '');
        } finally{
            distutils.dist.DEBUG = false;

    }
    } function test_command_packages_unspecified(){
        sys.argv.append("build");
        d = this.create_distribution();
        this.assertEqual(d.get_command_packages(), ["distutils.command"]);

    }
    function test_command_packages_cmdline(){
        from distutils.tests.test_dist import test_dist;
        sys.argv.extend(["--command-packages",
                         "foo.bar,distutils.tests",
                         "test_dist",
                         "-Ssometext",
                         ]);
        d = this.create_distribution();
        # let's actually try to load our test command:
        this.assertEqual(d.get_command_packages(),
                         ["distutils.command", "foo.bar", "distutils.tests"]);
        cmd = d.get_command_obj("test_dist");
        this.assertIsInstance(cmd, test_dist);
        this.assertEqual(cmd.sample_option, "sometext");

    }
    function test_command_packages_configfile(){
        sys.argv.append("build");
        this.addCleanup(os.unlink, TESTFN);
        f = open(TESTFN, "w");
        try{
            print >> f, "[global]";
            print >> f, "command_packages = foo.bar, splat";
        } finally{
            f.close();

        }
        d = this.create_distribution([TESTFN]);
        this.assertEqual(d.get_command_packages(),
                         ["distutils.command", "foo.bar", "splat"]);

        # ensure command line overrides config:
        sys.argv[1:] = ["--command-packages", "spork", "build"];
        d = this.create_distribution([TESTFN]);
        this.assertEqual(d.get_command_packages(),
                         ["distutils.command", "spork"]);

        # Setting --command-packages to '' should cause the default to
        # be used even if a config file specified something else:
        sys.argv[1:] = ["--command-packages", "", "build"];
        d = this.create_distribution([TESTFN]);
        this.assertEqual(d.get_command_packages(), ["distutils.command"]);

    }
    function test_write_pkg_file(){
        # Check DistributionMetadata handling of Unicode fields
        tmp_dir = this.mkdtemp();
        my_file = os.path.join(tmp_dir, 'f');
        klass = Distribution;

        dist = klass(attrs={'author': u'Mister Café',
                            'name': 'my.package',
                            'maintainer': u'Café Junior',
                            'description': u'Café torréfié',
                            'long_description': u'Héhéhé'});

        # let's make sure the file can be written
        # with Unicode fields. they are encoded with
        # PKG_INFO_ENCODING
        dist.metadata.write_pkg_file(open(my_file, 'w'));

        # regular ascii is of course always usable
        dist = klass(attrs={'author': 'Mister Cafe',
                            'name': 'my.package',
                            'maintainer': 'Cafe Junior',
                            'description': 'Cafe torrefie',
                            'long_description': 'Hehehe'});

        my_file2 = os.path.join(tmp_dir, 'f2');
        dist.metadata.write_pkg_file(open(my_file2, 'w'));

    }
    function test_empty_options(){
        # an empty options dictionary should not stay in the
        # list of attributes

        # catching warnings
        warns = [];

        function _warn(msg){
            warns.append(msg);

        }
        this.addCleanup(setattr, warnings, 'warn', warnings.warn);
        warnings.warn = _warn;
        dist = Distribution(attrs={'author': 'xxx', 'name': 'xxx',
                                   'version': 'xxx', 'url': 'xxxx',
                                   'options': {}});

        this.assertEqual(len(warns), 0);
        this.assertNotIn('options', dir(dist));

    }
    function test_finalize_options(){
        attrs = {'keywords': 'one,two',
                 'platforms': 'one,two'};

        dist = Distribution(attrs=attrs);
        dist.finalize_options();

        # finalize_option splits platforms and keywords
        this.assertEqual(dist.metadata.platforms, ['one', 'two']);
        this.assertEqual(dist.metadata.keywords, ['one', 'two']);

    }
    function test_get_command_packages(){
        dist = Distribution();
        this.assertEqual(dist.command_packages, nil);
        cmds = dist.get_command_packages();
        this.assertEqual(cmds, ['distutils.command']);
        this.assertEqual(dist.command_packages,
                         ['distutils.command']);

        dist.command_packages = 'one,two';
        cmds = dist.get_command_packages();
        this.assertEqual(cmds, ['distutils.command', 'one', 'two']);

    }
    function test_announce(){
        # make sure the level is known
        dist = Distribution();
        args = ('ok',);
        kwargs = {'level': 'ok2'};
        this.assertRaises(ValueError, dist.announce, args, kwargs);

    }
    function test_find_config_files_disable(){
        # Ticket #1180: Allow user to disable their home config file.
        temp_home = this.mkdtemp();
        if os.name == 'posix'{
            user_filename = os.path.join(temp_home, ".pydistutils.cfg");
        } else{
            user_filename = os.path.join(temp_home, "pydistutils.cfg");

        }
        with open(user_filename, 'w') as f{
            f.write('[distutils]\n');

        }
        function _expander(path){
            return temp_home;

        }
        old_expander = os.path.expanduser;
        os.path.expanduser = _expander;
        try{
            d = distutils.dist.Distribution();
            all_files = d.find_config_files();

            d = distutils.dist.Distribution(attrs={'script_args':
                                            ['--no-user-cfg']});
            files = d.find_config_files();
        } finally{
            os.path.expanduser = old_expander;

        # make sure --no-user-cfg disables the user cfg file
        }
        this.assertEqual(len(all_files)-1, len(files));


}
} class MetadataTestCase(support.TempdirManager, support.EnvironGuard,
                       unittest.TestCase){

    function setUp(){
        super(MetadataTestCase, this).setUp();
        this.argv = sys.argv, sys.argv[:];

    }
    function tearDown(){
        sys.argv = this.argv[0];
        sys.argv[:] = this.argv[1];
        super(MetadataTestCase, this).tearDown();

    }
    function test_classifier(){
        attrs = {'name': 'Boa', 'version': '3.0',
                 'classifiers': ['Programming Language :: Python :: 3']};
        dist = Distribution(attrs);
        meta = this.format_metadata(dist);
        this.assertIn('Metadata-Version: 1.1', meta);

    }
    function test_download_url(){
        attrs = {'name': 'Boa', 'version': '3.0',
                 'download_url': 'http://example.org/boa'};
        dist = Distribution(attrs);
        meta = this.format_metadata(dist);
        this.assertIn('Metadata-Version: 1.1', meta);

    }
    function test_long_description(){
        long_desc = textwrap.dedent("""\
        example::
              We start here
            and continue here
          and end here.""");
        attrs = {"name": "package",
                 "version": "1.0",
                 "long_description": long_desc};

        dist = Distribution(attrs);
        meta = this.format_metadata(dist);
        meta = meta.replace('\n' + 8 * ' ', '\n');
        this.assertIn(long_desc, meta);

    }
    function test_simple_metadata(){
        attrs = {"name": "package",
                 "version": "1.0"};
        dist = Distribution(attrs);
        meta = this.format_metadata(dist);
        this.assertIn("Metadata-Version: 1.0", meta);
        this.assertNotIn("provides:", meta.lower());
        this.assertNotIn("requires:", meta.lower());
        this.assertNotIn("obsoletes:", meta.lower());

    }
    function test_provides(){
        attrs = {"name": "package",
                 "version": "1.0",
                 "provides": ["package", "package.sub"]};
        dist = Distribution(attrs);
        this.assertEqual(dist.metadata.get_provides(),
                         ["package", "package.sub"]);
        this.assertEqual(dist.get_provides(),
                         ["package", "package.sub"]);
        meta = this.format_metadata(dist);
        this.assertIn("Metadata-Version: 1.1", meta);
        this.assertNotIn("requires:", meta.lower());
        this.assertNotIn("obsoletes:", meta.lower());

    }
    function test_provides_illegal(){
        this.assertRaises(ValueError, Distribution,
                          {"name": "package",
                           "version": "1.0",
                           "provides": ["my.pkg (splat)"]});

    }
    function test_requires(){
        attrs = {"name": "package",
                 "version": "1.0",
                 "requires": ["other", "another (==1.0)"]};
        dist = Distribution(attrs);
        this.assertEqual(dist.metadata.get_requires(),
                         ["other", "another (==1.0)"]);
        this.assertEqual(dist.get_requires(),
                         ["other", "another (==1.0)"]);
        meta = this.format_metadata(dist);
        this.assertIn("Metadata-Version: 1.1", meta);
        this.assertNotIn("provides:", meta.lower());
        this.assertIn("Requires: other", meta);
        this.assertIn("Requires: another (==1.0)", meta);
        this.assertNotIn("obsoletes:", meta.lower());

    }
    function test_requires_illegal(){
        this.assertRaises(ValueError, Distribution,
                          {"name": "package",
                           "version": "1.0",
                           "requires": ["my.pkg (splat)"]});

    }
    function test_obsoletes(){
        attrs = {"name": "package",
                 "version": "1.0",
                 "obsoletes": ["other", "another (<1.0)"]};
        dist = Distribution(attrs);
        this.assertEqual(dist.metadata.get_obsoletes(),
                         ["other", "another (<1.0)"]);
        this.assertEqual(dist.get_obsoletes(),
                         ["other", "another (<1.0)"]);
        meta = this.format_metadata(dist);
        this.assertIn("Metadata-Version: 1.1", meta);
        this.assertNotIn("provides:", meta.lower());
        this.assertNotIn("requires:", meta.lower());
        this.assertIn("Obsoletes: other", meta);
        this.assertIn("Obsoletes: another (<1.0)", meta);

    }
    function test_obsoletes_illegal(){
        this.assertRaises(ValueError, Distribution,
                          {"name": "package",
                           "version": "1.0",
                           "obsoletes": ["my.pkg (splat)"]});

    }
    function format_metadata( dist){
        sio = StringIO.StringIO();
        dist.metadata.write_pkg_file(sio);
        return sio.getvalue();

    }
    function test_custom_pydistutils(){
        # fixes #2166
        # make sure pydistutils.cfg is found
        if os.name == 'posix'{
            user_filename = ".pydistutils.cfg";
        } else{
            user_filename = "pydistutils.cfg";

        }
        temp_dir = this.mkdtemp();
        user_filename = os.path.join(temp_dir, user_filename);
        f = open(user_filename, 'w');
        try{
            f.write('.');
        } finally{
            f.close();

        }
        try{
            dist = Distribution();

            # linux-style
            if sys.platform in ('linux', 'darwin'){
                os.environ['HOME'] = temp_dir;
                files = dist.find_config_files();
                this.assertIn(user_filename, files);

            # win32-style
            }
            if sys.platform == 'win32'{
                # home drive should be found
                os.environ['HOME'] = temp_dir;
                files = dist.find_config_files();
                this.assertIn(user_filename, files,
                             '%r not found in %r' % (user_filename, files));
        } } finally{
            os.remove(user_filename);

    }
    } function test_fix_help_options(){
        help_tuples = [('a', 'b', 'c', 'd'), (1, 2, 3, 4)];
        fancy_options = fix_help_options(help_tuples);
        this.assertEqual(fancy_options[0], ('a', 'b', 'c'));
        this.assertEqual(fancy_options[1], (1, 2, 3));

    }
    function test_show_help(){
        # smoke test, just makes sure some help is displayed
        this.addCleanup(log.set_threshold, log._global_log.threshold);
        dist = Distribution();
        sys.argv = [];
        dist.help = 1;
        dist.script_name = 'setup.py';
        with captured_stdout() as s{
            dist.parse_command_line();

        }
        output = [line for line in s.getvalue().split('\n')
                  if line.strip() != ''];
        this.assertTrue(output);

    }
    function test_read_metadata(){
        attrs = {"name": "package",
                 "version": "1.0",
                 "long_description": "desc",
                 "description": "xxx",
                 "download_url": "http://example.com",
                 "keywords": ['one', 'two'],
                 "requires": ['foo']};

        dist = Distribution(attrs);
        metadata = dist.metadata;

        # write it then reloads it
        PKG_INFO = StringIO.StringIO();
        metadata.write_pkg_file(PKG_INFO);
        PKG_INFO.seek(0);
        metadata.read_pkg_file(PKG_INFO);

        this.assertEqual(metadata.name, "package");
        this.assertEqual(metadata.version, "1.0");
        this.assertEqual(metadata.description, "xxx");
        this.assertEqual(metadata.download_url, 'http://example.com');
        this.assertEqual(metadata.keywords, ['one', 'two']);
        this.assertEqual(metadata.platforms, ['UNKNOWN']);
        this.assertEqual(metadata.obsoletes, nil);
        this.assertEqual(metadata.requires, ['foo']);


}
} function test_suite(){
    suite = unittest.TestSuite();
    suite.addTest(unittest.makeSuite(DistributionTestCase));
    suite.addTest(unittest.makeSuite(MetadataTestCase));
    return suite;

}
if __name__ == "__main__"{
    run_unittest(test_suite());

}