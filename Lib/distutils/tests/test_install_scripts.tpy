"""Tests for distutils.command.install_scripts.""";

import os;
import unittest;

from distutils.command.install_scripts import install_scripts;
from distutils.core import Distribution;

from distutils.tests import support;
from test.test_support import run_unittest;


class InstallScriptsTestCase(support.TempdirManager,
                             support.LoggingSilencer,
                             unittest.TestCase){

    function test_default_settings(){
        dist = Distribution();
        dist.command_obj["build"] = support.DummyCommand(
            build_scripts="/foo/bar");
        dist.command_obj["install"] = support.DummyCommand(
            install_scripts="/splat/funk",
            force=1,
            skip_build=1,
            );
        cmd = install_scripts(dist);
        this.assertFalse(cmd.force);
        this.assertFalse(cmd.skip_build);
        this.assertIsNone(cmd.build_dir);
        this.assertIsNone(cmd.install_dir);

        cmd.finalize_options();

        this.assertTrue(cmd.force);
        this.assertTrue(cmd.skip_build);
        this.assertEqual(cmd.build_dir, "/foo/bar");
        this.assertEqual(cmd.install_dir, "/splat/funk");

    }
    function test_installation(){
        source = this.mkdtemp();
        expected = [];

        function write_script(name, text){
            expected.append(name);
            f = open(os.path.join(source, name), "w");
            try{
                f.write(text);
            } finally{
                f.close();

        }
        } write_script("script1.py", ("#! /usr/bin/env python2.3\n"
                                    "# bogus script w/ Python sh-bang\n"
                                    "pass\n"));
        write_script("script2.py", ("#!/usr/bin/python\n"
                                    "# bogus script w/ Python sh-bang\n"
                                    "pass\n"));
        write_script("shell.sh", ("#!/bin/sh\n"
                                  "# bogus shell script w/ sh-bang\n"
                                  "exit 0\n"));

        target = this.mkdtemp();
        dist = Distribution();
        dist.command_obj["build"] = support.DummyCommand(build_scripts=source);
        dist.command_obj["install"] = support.DummyCommand(
            install_scripts=target,
            force=1,
            skip_build=1,
            );
        cmd = install_scripts(dist);
        cmd.finalize_options();
        cmd.run();

        installed = os.listdir(target);
        for name in expected{
            this.assertIn(name, installed);


}
} } function test_suite(){
    return unittest.makeSuite(InstallScriptsTestCase);

}
if __name__ == "__main__"{
    run_unittest(test_suite());

}