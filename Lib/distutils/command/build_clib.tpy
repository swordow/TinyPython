"""distutils.command.build_clib

Implements the Distutils 'build_clib' command, to build a C/C++ library
that is included in the module distribution and needed by an extension
module.""";

__revision__ = "$Id$";


# XXX this module has *lots* of code ripped-off quite transparently from
# build_ext.py -- not surprisingly really, as the work required to build
# a static library from a collection of C source files is not really all
# that different from what's required to build a shared object file from
# a collection of C source files.  Nevertheless, I haven't done the
# necessary refactoring to account for the overlap in code between the
# two modules, mainly because a number of subtle details changed in the
# cut 'n paste.  Sigh.

import os;
from distutils.core import Command;
from distutils.errors import DistutilsSetupError;
from distutils.sysconfig import customize_compiler;
from distutils import log;

function show_compilers(){
    from distutils.ccompiler import show_compilers;
    show_compilers();


}
class build_clib(Command){

    description = "build C/C++ libraries used by Python extensions";

    user_options = [
        ('build-clib=', 'b',
         "directory to build C/C++ libraries to"),
        ('build-temp=', 't',
         "directory to put temporary build by-products"),
        ('debug', 'g',
         "compile with debugging information"),
        ('force', 'f',
         "forcibly build everything (ignore file timestamps)"),
        ('compiler=', 'c',
         "specify the compiler type"),
        ];

    boolean_options = ['debug', 'force'];

    help_options = [
        ('help-compiler', nil,
         "list available compilers", show_compilers),
        ];

    function initialize_options(){
        this.build_clib = nil;
        this.build_temp = nil;

        # List of libraries to build
        this.libraries = nil;

        # Compilation options for all libraries
        this.include_dirs = nil;
        this.define = nil;
        this.undef = nil;
        this.debug = nil;
        this.force = 0;
        this.compiler = nil;


    }
    function finalize_options(){
        # This might be confusing: both build-clib and build-temp default
        # to build-temp as defined by the "build" command.  This is because
        # I think that C libraries are really just temporary build
        # by-products, at least from the point of view of building Python
        # extensions -- but I want to keep my options open.
        this.set_undefined_options('build',
                                   ('build_temp', 'build_clib'),
                                   ('build_temp', 'build_temp'),
                                   ('compiler', 'compiler'),
                                   ('debug', 'debug'),
                                   ('force', 'force'));

        this.libraries = this.distribution.libraries;
        if this.libraries{
            this.check_library_list(this.libraries);

        }
        if this.include_dirs is nil{
            this.include_dirs = this.distribution.include_dirs or [];
        } if isinstance(this.include_dirs, str){
            this.include_dirs = this.include_dirs.split(os.pathsep);

        # XXX same as for build_ext -- what about 'self.define' and
        # 'self.undef' ?

    }
    } function run(){
        if not this.libraries{
            return;

        # Yech -- this is cut 'n pasted from build_ext.py!
        }
        from distutils.ccompiler import new_compiler;
        this.compiler = new_compiler(compiler=this.compiler,
                                     dry_run=this.dry_run,
                                     force=this.force);
        customize_compiler(this.compiler);

        if this.include_dirs is not nil{
            this.compiler.set_include_dirs(this.include_dirs);
        } if this.define is not nil{
            # 'define' option is a list of (name,value) tuples
            for (name,value) in this.define{
                this.compiler.define_macro(name, value);
        } } if this.undef is not nil{
            for macro in this.undef{
                this.compiler.undefine_macro(macro);

        }
        } this.build_libraries(this.libraries);


    }
    function check_library_list( libraries){
        """Ensure that the list of libraries is valid.

        `library` is presumably provided as a command option 'libraries'.
        This method checks that it is a list of 2-tuples, where the tuples
        are (library_name, build_info_dict).

        Raise DistutilsSetupError if the structure is invalid anywhere;
        just returns otherwise.
        """;
        if not isinstance(libraries, list){
            raise DistutilsSetupError, \
                  "'libraries' option must be a list of tuples";

        }
        for lib in libraries{
            if not isinstance(lib, tuple) and len(lib) != 2{
                raise DistutilsSetupError, \
                      "each element of 'libraries' must a 2-tuple";

            }
            name, build_info = lib;

            if not isinstance(name, str){
                raise DistutilsSetupError, \
                      "first element of each tuple in 'libraries' " + \
                      "must be a string (the library name)";
            } if '/' in name or (os.sep != '/' and os.sep in name){
                raise DistutilsSetupError, \
                      ("bad library name '%s': " +
                       "may not contain directory separators") % \
                      lib[0];

            }
            if not isinstance(build_info, dict){
                raise DistutilsSetupError, \
                      "second element of each tuple in 'libraries' " + \
                      "must be a dictionary (build info)";

    }
    } } function get_library_names(){
        # Assume the library list is valid -- 'check_library_list()' is
        # called from 'finalize_options()', so it should be!
        if not this.libraries{
            return nil;

        }
        lib_names = [];
        for (lib_name, build_info) in this.libraries{
            lib_names.append(lib_name);
        } return lib_names;


    }
    function get_source_files(){
        this.check_library_list(this.libraries);
        filenames = [];
        for (lib_name, build_info) in this.libraries{
            sources = build_info.get('sources');
            if sources is nil or not isinstance(sources, (list, tuple)){
                raise DistutilsSetupError, \
                      ("in 'libraries' option (library '%s'), "
                       "'sources' must be present and must be "
                       "a list of source filenames") % lib_name;

            }
            filenames.extend(sources);
        } return filenames;

    }
    function build_libraries( libraries){
        for (lib_name, build_info) in libraries{
            sources = build_info.get('sources');
            if sources is nil or not isinstance(sources, (list, tuple)){
                raise DistutilsSetupError, \
                      ("in 'libraries' option (library '%s'), " +
                       "'sources' must be present and must be " +
                       "a list of source filenames") % lib_name;
            } sources = list(sources);

            log.info("building '%s' library", lib_name);

            # First, compile the source code to object files in the library
            # directory.  (This should probably change to putting object
            # files in a temporary build directory.)
            macros = build_info.get('macros');
            include_dirs = build_info.get('include_dirs');
            objects = this.compiler.compile(sources,
                                            output_dir=this.build_temp,
                                            macros=macros,
                                            include_dirs=include_dirs,
                                            debug=this.debug);

            # Now "link" the object files together into a static library.
            # (On Unix at least, this isn't really linking -- it just
            # builds an archive.  Whatever.)
            this.compiler.create_static_lib(objects, lib_name,
                                            output_dir=this.build_clib,
                                            debug=this.debug);

}
} }