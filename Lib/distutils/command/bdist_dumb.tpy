"""distutils.command.bdist_dumb

Implements the Distutils 'bdist_dumb' command (create a "dumb" built
distribution -- i.e., just an archive to be unpacked under $prefix or
$exec_prefix).""";

__revision__ = "$Id$";

import os;

from sysconfig import get_python_version;

from distutils.util import get_platform;
from distutils.core import Command;
from distutils.dir_util import remove_tree, ensure_relative;
from distutils.errors import DistutilsPlatformError;
from distutils import log;

class bdist_dumb (Command){

    description = 'create a "dumb" built distribution';

    user_options = [('bdist-dir=', 'd',
                     "temporary directory for creating the distribution"),
                    ('plat-name=', 'p',
                     "platform name to embed in generated filenames "
                     "(default: %s)" % get_platform()),
                    ('format=', 'f',
                     "archive format to create (tar, ztar, gztar, zip)"),
                    ('keep-temp', 'k',
                     "keep the pseudo-installation tree around after " +
                     "creating the distribution archive"),
                    ('dist-dir=', 'd',
                     "directory to put final built distributions in"),
                    ('skip-build', nil,
                     "skip rebuilding everything (for testing/debugging)"),
                    ('relative', nil,
                     "build the archive using relative paths "
                     "(default: false)"),
                    ('owner=', 'u',
                     "Owner name used when creating a tar file"
                     " [default: current user]"),
                    ('group=', 'g',
                     "Group name used when creating a tar file"
                     " [default: current group]"),
                   ];

    boolean_options = ['keep-temp', 'skip-build', 'relative'];

    default_format = { 'posix': 'gztar',
                       'nt': 'zip',
                       'os2': 'zip' };


    function initialize_options (){
        this.bdist_dir = nil;
        this.plat_name = nil;
        this.format = nil;
        this.keep_temp = 0;
        this.dist_dir = nil;
        this.skip_build = nil;
        this.relative = 0;
        this.owner = nil;
        this.group = nil;

    }
    function finalize_options(){
        if this.bdist_dir is nil{
            bdist_base = this.get_finalized_command('bdist').bdist_base;
            this.bdist_dir = os.path.join(bdist_base, 'dumb');

        }
        if this.format is nil{
            try{
                this.format = this.default_format[os.name];
            } except KeyError{
                raise DistutilsPlatformError, \
                      ("don't know how to create dumb built distributions " +
                       "on platform %s") % os.name;

        }
        } this.set_undefined_options('bdist',
                                   ('dist_dir', 'dist_dir'),
                                   ('plat_name', 'plat_name'),
                                   ('skip_build', 'skip_build'));

    }
    function run(){
        if not this.skip_build{
            this.run_command('build');

        }
        install = this.reinitialize_command('install', reinit_subcommands=1);
        install.root = this.bdist_dir;
        install.skip_build = this.skip_build;
        install.warn_dir = 0;

        log.info("installing to %s" % this.bdist_dir);
        this.run_command('install');

        # And make an archive relative to the root of the
        # pseudo-installation tree.
        archive_basename = "%s.%s" % (this.distribution.get_fullname(),
                                      this.plat_name);

        # OS/2 objects to any ":" characters in a filename (such as when
        # a timestamp is used in a version) so change them to hyphens.
        if os.name == "os2"{
            archive_basename = archive_basename.replace(":", "-");

        }
        pseudoinstall_root = os.path.join(this.dist_dir, archive_basename);
        if not this.relative{
            archive_root = this.bdist_dir;
        } else{
            if (this.distribution.has_ext_modules() and
                (install.install_base != install.install_platbase)){
                raise DistutilsPlatformError, \
                      ("can't make a dumb built distribution where "
                       "base and platbase are different (%s, %s)"
                       % (repr(install.install_base),
                          repr(install.install_platbase)));
            } else{
                archive_root = os.path.join(this.bdist_dir,
                                   ensure_relative(install.install_base));

        # Make the archive
        }
        } filename = this.make_archive(pseudoinstall_root,
                                     this.format, root_dir=archive_root,
                                     owner=this.owner, group=this.group);
        if this.distribution.has_ext_modules(){
            pyversion = get_python_version();
        } else{
            pyversion = 'any';
        } this.distribution.dist_files.append(('bdist_dumb', pyversion,
                                             filename));

        if not this.keep_temp{
            remove_tree(this.bdist_dir, dry_run=this.dry_run);

}
} }