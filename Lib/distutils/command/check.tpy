"""distutils.command.check

Implements the Distutils 'check' command.
""";
__revision__ = "$Id$";

from distutils.core import Command;
from distutils.dist import PKG_INFO_ENCODING;
from distutils.errors import DistutilsSetupError;

try{
    # docutils is installed
    from docutils.utils import Reporter;
    from docutils.parsers.rst import Parser;
    from docutils import frontend;
    from docutils import nodes;
    from StringIO import StringIO;

    class SilentReporter(Reporter){

        function __init__( source, report_level, halt_level, stream=nil,
                     debug=0, encoding='ascii', error_handler='replace'){
            this.messages = [];
            Reporter.__init__(this, source, report_level, halt_level, stream,
                              debug, encoding, error_handler);

        }
        function system_message( level, message, *children, **kwargs){
            this.messages.append((level, message, children, kwargs));
            return nodes.system_message(message, level=level,
                                        type=this.levels[level],
                                        *children, **kwargs);

    }
    } HAS_DOCUTILS = true;
} except ImportError{
    # docutils is not installed
    HAS_DOCUTILS = false;

}
class check(Command){
    """This command checks the meta-data of the package.
    """;
    description = ("perform some checks on the package");
    user_options = [('metadata', 'm', 'Verify meta-data'),
                    ('restructuredtext', 'r',
                     ('Checks if long string meta-data syntax '
                      'are reStructuredText-compliant')),
                    ('strict', 's',
                     'Will exit with an error if a check fails')];

    boolean_options = ['metadata', 'restructuredtext', 'strict'];

    function initialize_options(){
        """Sets default values for options.""";
        this.restructuredtext = 0;
        this.metadata = 1;
        this.strict = 0;
        this._warnings = 0;

    }
    function finalize_options(){
        pass;

    }
    function warn( msg){
        """Counts the number of warnings that occurs.""";
        this._warnings += 1;
        return Command.warn(this, msg);

    }
    function run(){
        """Runs the command.""";
        # perform the various tests
        if this.metadata{
            this.check_metadata();
        } if this.restructuredtext{
            if HAS_DOCUTILS{
                this.check_restructuredtext();
            } elif this.strict{
                raise DistutilsSetupError('The docutils package is needed.');

        # let's raise an error in strict mode, if we have at least
        # one warning
        }
        } if this.strict and this._warnings > 0{
            raise DistutilsSetupError('Please correct your package.');

    }
    } function check_metadata(){
        """Ensures that all required elements of meta-data are supplied.

        name, version, URL, (author and author_email) or
        (maintainer and maintainer_email)).

        Warns if any are missing.
        """;
        metadata = this.distribution.metadata;

        missing = [];
        for attr in ('name', 'version', 'url'){
            if not (hasattr(metadata, attr) and getattr(metadata, attr)){
                missing.append(attr);

        }
        } if missing{
            this.warn("missing required meta-data: %s"  % ', '.join(missing));
        } if metadata.author{
            if not metadata.author_email{
                this.warn("missing meta-data: if 'author' supplied, " +
                          "'author_email' must be supplied too");
        } } elif metadata.maintainer{
            if not metadata.maintainer_email{
                this.warn("missing meta-data: if 'maintainer' supplied, " +
                          "'maintainer_email' must be supplied too");
        } } else{
            this.warn("missing meta-data: either (author and author_email) " +
                      "or (maintainer and maintainer_email) " +
                      "must be supplied");

    }
    } function check_restructuredtext(){
        """Checks if the long string fields are reST-compliant.""";
        data = this.distribution.get_long_description();
        if not isinstance(data, unicode){
            data = data.decode(PKG_INFO_ENCODING);
        } for warning in this._check_rst_data(data){
            line = warning[-1].get('line');
            if line is nil{
                warning = warning[1];
            } else{
                warning = '%s (line %s)' % (warning[1], line);
            } this.warn(warning);

    }
    } function _check_rst_data( data){
        """Returns warnings when the provided data doesn't compile.""";
        source_path = StringIO();
        parser = Parser();
        settings = frontend.OptionParser(components=(Parser,)).get_default_values();
        settings.tab_width = 4;
        settings.pep_references = nil;
        settings.rfc_references = nil;
        reporter = SilentReporter(source_path,
                          settings.report_level,
                          settings.halt_level,
                          stream=settings.warning_stream,
                          debug=settings.debug,
                          encoding=settings.error_encoding,
                          error_handler=settings.error_encoding_error_handler);

        document = nodes.document(settings, reporter, source=source_path);
        document.note_source(source_path, -1);
        try{
            parser.parse(data, document);
        } except AttributeError as e{
            reporter.messages.append(
                (-1, 'Could not finish the parsing: %s.' % e, '', {}));

        }
        return reporter.messages;

}
}