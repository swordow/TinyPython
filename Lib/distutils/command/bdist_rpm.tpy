"""distutils.command.bdist_rpm

Implements the Distutils 'bdist_rpm' command (create RPM source and binary
distributions).""";

__revision__ = "$Id$";

import sys;
import os;
import string;

from distutils.core import Command;
from distutils.debug import DEBUG;
from distutils.file_util import write_file;
from distutils.sysconfig import get_python_version;
from distutils.errors import (DistutilsOptionError, DistutilsPlatformError,
                              DistutilsFileError, DistutilsExecError);
from distutils import log;

class bdist_rpm (Command){

    description = "create an RPM distribution";

    user_options = [
        ('bdist-base=', nil,
         "base directory for creating built distributions"),
        ('rpm-base=', nil,
         "base directory for creating RPMs (defaults to \"rpm\" under "
         "--bdist-base; must be specified for RPM 2)"),
        ('dist-dir=', 'd',
         "directory to put final RPM files in "
         "(and .spec files if --spec-only)"),
        ('python=', nil,
         "path to Python interpreter to hard-code in the .spec file "
         "(default: \"python\")"),
        ('fix-python', nil,
         "hard-code the exact path to the current Python interpreter in "
         "the .spec file"),
        ('spec-only', nil,
         "only regenerate spec file"),
        ('source-only', nil,
         "only generate source RPM"),
        ('binary-only', nil,
         "only generate binary RPM"),
        ('use-bzip2', nil,
         "use bzip2 instead of gzip to create source distribution"),

        # More meta-data: too RPM-specific to put in the setup script,
        # but needs to go in the .spec file -- so we make these options
        # to "bdist_rpm".  The idea is that packagers would put this
        # info in setup.cfg, although they are of course free to
        # supply it on the command line.
        ('distribution-name=', nil,
         "name of the (Linux) distribution to which this "
         "RPM applies (*not* the name of the module distribution!)"),
        ('group=', nil,
         "package classification [default: \"Development/Libraries\"]"),
        ('release=', nil,
         "RPM release number"),
        ('serial=', nil,
         "RPM serial number"),
        ('vendor=', nil,
         "RPM \"vendor\" (eg. \"Joe Blow <joe@example.com>\") "
         "[default: maintainer or author from setup script]"),
        ('packager=', nil,
         "RPM packager (eg. \"Jane Doe <jane@example.net>\") "
         "[default: vendor]"),
        ('doc-files=', nil,
         "list of documentation files (space or comma-separated)"),
        ('changelog=', nil,
         "RPM changelog"),
        ('icon=', nil,
         "name of icon file"),
        ('provides=', nil,
         "capabilities provided by this package"),
        ('requires=', nil,
         "capabilities required by this package"),
        ('conflicts=', nil,
         "capabilities which conflict with this package"),
        ('build-requires=', nil,
         "capabilities required to build this package"),
        ('obsoletes=', nil,
         "capabilities made obsolete by this package"),
        ('no-autoreq', nil,
         "do not automatically calculate dependencies"),

        # Actions to take when building RPM
        ('keep-temp', 'k',
         "don't clean up RPM build directory"),
        ('no-keep-temp', nil,
         "clean up RPM build directory [default]"),
        ('use-rpm-opt-flags', nil,
         "compile with RPM_OPT_FLAGS when building from source RPM"),
        ('no-rpm-opt-flags', nil,
         "do not pass any RPM CFLAGS to compiler"),
        ('rpm3-mode', nil,
         "RPM 3 compatibility mode (default)"),
        ('rpm2-mode', nil,
         "RPM 2 compatibility mode"),

        # Add the hooks necessary for specifying custom scripts
        ('prep-script=', nil,
         "Specify a script for the PREP phase of RPM building"),
        ('build-script=', nil,
         "Specify a script for the BUILD phase of RPM building"),

        ('pre-install=', nil,
         "Specify a script for the pre-INSTALL phase of RPM building"),
        ('install-script=', nil,
         "Specify a script for the INSTALL phase of RPM building"),
        ('post-install=', nil,
         "Specify a script for the post-INSTALL phase of RPM building"),

        ('pre-uninstall=', nil,
         "Specify a script for the pre-UNINSTALL phase of RPM building"),
        ('post-uninstall=', nil,
         "Specify a script for the post-UNINSTALL phase of RPM building"),

        ('clean-script=', nil,
         "Specify a script for the CLEAN phase of RPM building"),

        ('verify-script=', nil,
         "Specify a script for the VERIFY phase of the RPM build"),

        # Allow a packager to explicitly force an architecture
        ('force-arch=', nil,
         "Force an architecture onto the RPM build process"),

        ('quiet', 'q',
         "Run the INSTALL phase of RPM building in quiet mode"),
        ];

    boolean_options = ['keep-temp', 'use-rpm-opt-flags', 'rpm3-mode',
                       'no-autoreq', 'quiet'];

    negative_opt = {'no-keep-temp': 'keep-temp',
                    'no-rpm-opt-flags': 'use-rpm-opt-flags',
                    'rpm2-mode': 'rpm3-mode'};


    function initialize_options (){
        this.bdist_base = nil;
        this.rpm_base = nil;
        this.dist_dir = nil;
        this.python = nil;
        this.fix_python = nil;
        this.spec_only = nil;
        this.binary_only = nil;
        this.source_only = nil;
        this.use_bzip2 = nil;

        this.distribution_name = nil;
        this.group = nil;
        this.release = nil;
        this.serial = nil;
        this.vendor = nil;
        this.packager = nil;
        this.doc_files = nil;
        this.changelog = nil;
        this.icon = nil;

        this.prep_script = nil;
        this.build_script = nil;
        this.install_script = nil;
        this.clean_script = nil;
        this.verify_script = nil;
        this.pre_install = nil;
        this.post_install = nil;
        this.pre_uninstall = nil;
        this.post_uninstall = nil;
        this.prep = nil;
        this.provides = nil;
        this.requires = nil;
        this.conflicts = nil;
        this.build_requires = nil;
        this.obsoletes = nil;

        this.keep_temp = 0;
        this.use_rpm_opt_flags = 1;
        this.rpm3_mode = 1;
        this.no_autoreq = 0;

        this.force_arch = nil;
        this.quiet = 0;

    # initialize_options()


    }
    function finalize_options (){
        this.set_undefined_options('bdist', ('bdist_base', 'bdist_base'));
        if this.rpm_base is nil{
            if not this.rpm3_mode{
                raise DistutilsOptionError, \
                      "you must specify --rpm-base in RPM 2 mode";
            } this.rpm_base = os.path.join(this.bdist_base, "rpm");

        }
        if this.python is nil{
            if this.fix_python{
                this.python = sys.executable;
            } else{
                this.python = "python";
        } } elif this.fix_python{
            raise DistutilsOptionError, \
                  "--python and --fix-python are mutually exclusive options";

        }
        if os.name != 'posix'{
            raise DistutilsPlatformError, \
                  ("don't know how to create RPM "
                   "distributions on platform %s" % os.name);
        } if this.binary_only and this.source_only{
            raise DistutilsOptionError, \
                  "cannot supply both '--source-only' and '--binary-only'";

        # don't pass CFLAGS to pure python distributions
        }
        if not this.distribution.has_ext_modules(){
            this.use_rpm_opt_flags = 0;

        }
        this.set_undefined_options('bdist', ('dist_dir', 'dist_dir'));
        this.finalize_package_data();

    # finalize_options()

    }
    function finalize_package_data (){
        this.ensure_string('group', "Development/Libraries");
        this.ensure_string('vendor',
                           "%s <%s>" % (this.distribution.get_contact(),
                                        this.distribution.get_contact_email()));
        this.ensure_string('packager');
        this.ensure_string_list('doc_files');
        if isinstance(this.doc_files, list){
            for readme in ('README', 'README.txt'){
                if os.path.exists(readme) and readme not in this.doc_files{
                    this.doc_files.append(readme);

        }
        } } this.ensure_string('release', "1");
        this.ensure_string('serial');   # should it be an int?

        this.ensure_string('distribution_name');

        this.ensure_string('changelog');
          # Format changelog correctly
        this.changelog = this._format_changelog(this.changelog);

        this.ensure_filename('icon');

        this.ensure_filename('prep_script');
        this.ensure_filename('build_script');
        this.ensure_filename('install_script');
        this.ensure_filename('clean_script');
        this.ensure_filename('verify_script');
        this.ensure_filename('pre_install');
        this.ensure_filename('post_install');
        this.ensure_filename('pre_uninstall');
        this.ensure_filename('post_uninstall');

        # XXX don't forget we punted on summaries and descriptions -- they
        # should be handled here eventually!

        # Now *this* is some meta-data that belongs in the setup script...
        this.ensure_string_list('provides');
        this.ensure_string_list('requires');
        this.ensure_string_list('conflicts');
        this.ensure_string_list('build_requires');
        this.ensure_string_list('obsoletes');

        this.ensure_string('force_arch');
    # finalize_package_data ()


    }
    function run (){

        if DEBUG{
            print "before _get_package_data():";
            print "vendor =", this.vendor;
            print "packager =", this.packager;
            print "doc_files =", this.doc_files;
            print "changelog =", this.changelog;

        # make directories
        }
        if this.spec_only{
            spec_dir = this.dist_dir;
            this.mkpath(spec_dir);
        } else{
            rpm_dir = {};
            for d in ('SOURCES', 'SPECS', 'BUILD', 'RPMS', 'SRPMS'){
                rpm_dir[d] = os.path.join(this.rpm_base, d);
                this.mkpath(rpm_dir[d]);
            } spec_dir = rpm_dir['SPECS'];

        # Spec file goes into 'dist_dir' if '--spec-only specified',
        # build/rpm.<plat> otherwise.
        }
        spec_path = os.path.join(spec_dir,
                                 "%s.spec" % this.distribution.get_name());
        this.execute(write_file,
                     (spec_path,
                      this._make_spec_file()),
                     "writing '%s'" % spec_path);

        if this.spec_only{ # stop if requested
            return;

        # Make a source distribution and copy to SOURCES directory with
        # optional icon.
        }
        saved_dist_files = this.distribution.dist_files[:];
        sdist = this.reinitialize_command('sdist');
        if this.use_bzip2{
            sdist.formats = ['bztar'];
        } else{
            sdist.formats = ['gztar'];
        } this.run_command('sdist');
        this.distribution.dist_files = saved_dist_files;

        source = sdist.get_archive_files()[0];
        source_dir = rpm_dir['SOURCES'];
        this.copy_file(source, source_dir);

        if this.icon{
            if os.path.exists(this.icon){
                this.copy_file(this.icon, source_dir);
            } else{
                raise DistutilsFileError, \
                      "icon file '%s' does not exist" % this.icon;


        # build package
        }
        } log.info("building RPMs");
        rpm_cmd = ['rpm'];
        if os.path.exists('/usr/bin/rpmbuild') or \
           os.path.exists('/bin/rpmbuild'){
            rpm_cmd = ['rpmbuild'];

        }
        if this.source_only{ # what kind of RPMs?
            rpm_cmd.append('-bs');
        } elif this.binary_only{
            rpm_cmd.append('-bb');
        } else{
            rpm_cmd.append('-ba');
        } if this.rpm3_mode{
            rpm_cmd.extend(['--define',
                             '_topdir %s' % os.path.abspath(this.rpm_base)]);
        } if not this.keep_temp{
            rpm_cmd.append('--clean');

        }
        if this.quiet{
            rpm_cmd.append('--quiet');

        }
        rpm_cmd.append(spec_path);
        # Determine the binary rpm names that should be built out of this spec
        # file
        # Note that some of these may not be really built (if the file
        # list is empty)
        nvr_string = "%{name}-%{version}-%{release}";
        src_rpm = nvr_string + ".src.rpm";
        non_src_rpm = "%{arch}/" + nvr_string + ".%{arch}.rpm";
        q_cmd = r"rpm -q --qf '%s %s\n' --specfile '%s'" % (
            src_rpm, non_src_rpm, spec_path);

        out = os.popen(q_cmd);
        try{
            binary_rpms = [];
            source_rpm = nil;
            while 1{
                line = out.readline();
                if not line{
                    break;
                } l = string.split(string.strip(line));
                assert(len(l) == 2);
                binary_rpms.append(l[1]);
                # The source rpm is named after the first entry in the spec file
                if source_rpm is nil{
                    source_rpm = l[0];

            }
            } status = out.close();
            if status{
                raise DistutilsExecError("Failed to execute: %s" % repr(q_cmd));

        }
        } finally{
            out.close();

        }
        this.spawn(rpm_cmd);

        if not this.dry_run{
            if this.distribution.has_ext_modules(){
                pyversion = get_python_version();
            } else{
                pyversion = 'any';

            }
            if not this.binary_only{
                srpm = os.path.join(rpm_dir['SRPMS'], source_rpm);
                assert(os.path.exists(srpm));
                this.move_file(srpm, this.dist_dir);
                filename = os.path.join(this.dist_dir, source_rpm);
                this.distribution.dist_files.append(
                    ('bdist_rpm', pyversion, filename));

            }
            if not this.source_only{
                for rpm in binary_rpms{
                    rpm = os.path.join(rpm_dir['RPMS'], rpm);
                    if os.path.exists(rpm){
                        this.move_file(rpm, this.dist_dir);
                        filename = os.path.join(this.dist_dir,
                                                os.path.basename(rpm));
                        this.distribution.dist_files.append(
                            ('bdist_rpm', pyversion, filename));
    # run()

    }
    } } } } function _dist_path( path){
        return os.path.join(this.dist_dir, os.path.basename(path));

    }
    function _make_spec_file(){
        """Generate the text of an RPM spec file and return it as a
        list of strings (one per line).
        """;
        # definitions and headers
        spec_file = [
            '%define name ' + this.distribution.get_name(),
            '%define version ' + this.distribution.get_version().replace('-','_'),
            '%define unmangled_version ' + this.distribution.get_version(),
            '%define release ' + this.release.replace('-','_'),
            '',
            'Summary: ' + this.distribution.get_description(),
            ];

        # put locale summaries into spec file
        # XXX not supported for now (hard to put a dictionary
        # in a config file -- arg!)
        #for locale in self.summaries.keys():
        #    spec_file.append('Summary(%s): %s' % (locale,
        #                                          self.summaries[locale]))

        spec_file.extend([
            'Name: %{name}',
            'Version: %{version}',
            'Release: %{release}',]);

        # XXX yuck! this filename is available from the "sdist" command,
        # but only after it has run: and we create the spec file before
        # running "sdist", in case of --spec-only.
        if this.use_bzip2{
            spec_file.append('Source0: %{name}-%{unmangled_version}.tar.bz2');
        } else{
            spec_file.append('Source0: %{name}-%{unmangled_version}.tar.gz');

        }
        spec_file.extend([
            'License: ' + this.distribution.get_license(),
            'Group: ' + this.group,
            'BuildRoot: %{_tmppath}/%{name}-%{version}-%{release}-buildroot',
            'Prefix: %{_prefix}', ]);

        if not this.force_arch{
            # noarch if no extension modules
            if not this.distribution.has_ext_modules(){
                spec_file.append('BuildArch: noarch');
        } } else{
            spec_file.append( 'BuildArch: %s' % this.force_arch );

        }
        for field in ('Vendor',
                      'Packager',
                      'Provides',
                      'Requires',
                      'Conflicts',
                      'Obsoletes',
                      ){
            val = getattr(this, string.lower(field));
            if isinstance(val, list){
                spec_file.append('%s: %s' % (field, string.join(val)));
            } elif val is not nil{
                spec_file.append('%s: %s' % (field, val));


        }
        } if this.distribution.get_url() != 'UNKNOWN'{
            spec_file.append('Url: ' + this.distribution.get_url());

        }
        if this.distribution_name{
            spec_file.append('Distribution: ' + this.distribution_name);

        }
        if this.build_requires{
            spec_file.append('BuildRequires: ' +
                             string.join(this.build_requires));

        }
        if this.icon{
            spec_file.append('Icon: ' + os.path.basename(this.icon));

        }
        if this.no_autoreq{
            spec_file.append('AutoReq: 0');

        }
        spec_file.extend([
            '',
            '%description',
            this.distribution.get_long_description()
            ]);

        # put locale descriptions into spec file
        # XXX again, suppressed because config file syntax doesn't
        # easily support this ;-(
        #for locale in self.descriptions.keys():
        #    spec_file.extend([
        #        '',
        #        '%description -l ' + locale,
        #        self.descriptions[locale],
        #        ])

        # rpm scripts
        # figure out default build script
        def_setup_call = "%s %s" % (this.python,os.path.basename(sys.argv[0]));
        def_build = "%s build" % def_setup_call;
        if this.use_rpm_opt_flags{
            def_build = 'env CFLAGS="$RPM_OPT_FLAGS" ' + def_build;

        # insert contents of files

        # XXX this is kind of misleading: user-supplied options are files
        # that we open and interpolate into the spec file, but the defaults
        # are just text that we drop in as-is.  Hmmm.

        }
        install_cmd = ('%s install -O1 --root=$RPM_BUILD_ROOT '
                       '--record=INSTALLED_FILES') % def_setup_call;

        script_options = [
            ('prep', 'prep_script', "%setup -n %{name}-%{unmangled_version}"),
            ('build', 'build_script', def_build),
            ('install', 'install_script', install_cmd),
            ('clean', 'clean_script', "rm -rf $RPM_BUILD_ROOT"),
            ('verifyscript', 'verify_script', nil),
            ('pre', 'pre_install', nil),
            ('post', 'post_install', nil),
            ('preun', 'pre_uninstall', nil),
            ('postun', 'post_uninstall', nil),
        ];

        for (rpm_opt, attr, default) in script_options{
            # Insert contents of file referred to, if no file is referred to
            # use 'default' as contents of script
            val = getattr(this, attr);
            if val or default{
                spec_file.extend([
                    '',
                    '%' + rpm_opt,]);
                if val{
                    spec_file.extend(string.split(open(val, 'r').read(), '\n'));
                } else{
                    spec_file.append(default);


        # files section
        }
        } } spec_file.extend([
            '',
            '%files -f INSTALLED_FILES',
            '%defattr(-,root,root)',
            ]);

        if this.doc_files{
            spec_file.append('%doc ' + string.join(this.doc_files));

        }
        if this.changelog{
            spec_file.extend([
                '',
                '%changelog',]);
            spec_file.extend(this.changelog);

        }
        return spec_file;

    # _make_spec_file ()

    }
    function _format_changelog( changelog){
        """Format the changelog correctly and convert it to a list of strings
        """;
        if not changelog{
            return changelog;
        } new_changelog = [];
        for line in string.split(string.strip(changelog), '\n'){
            line = string.strip(line);
            if line[0] == '*'{
                new_changelog.extend(['', line]);
            } elif line[0] == '-'{
                new_changelog.append(line);
            } else{
                new_changelog.append('  ' + line);

        # strip trailing newline inserted by first changelog entry
        }
        } if not new_changelog[0]{
            del new_changelog[0];

        }
        return new_changelog;

    # _format_changelog()

# class bdist_rpm

}
}