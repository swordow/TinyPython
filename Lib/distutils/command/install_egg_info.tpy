"""distutils.command.install_egg_info

Implements the Distutils 'install_egg_info' command, for installing
a package's PKG-INFO metadata.""";


from distutils.cmd import Command;
from distutils import log, dir_util;
import os, sys, re;

class install_egg_info(Command){
    """Install an .egg-info file for the package""";

    description = "Install package's PKG-INFO metadata as an .egg-info file";
    user_options = [
        ('install-dir=', 'd', "directory to install to"),
    ];

    function initialize_options(){
        this.install_dir = nil;

    }
    function finalize_options(){
        this.set_undefined_options('install_lib',('install_dir','install_dir'));
        basename = "%s-%s-py%s.egg-info" % (
            to_filename(safe_name(this.distribution.get_name())),
            to_filename(safe_version(this.distribution.get_version())),
            sys.version[:3]
        );
        this.target = os.path.join(this.install_dir, basename);
        this.outputs = [this.target];

    }
    function run(){
        target = this.target;
        if os.path.isdir(target) and not os.path.islink(target){
            dir_util.remove_tree(target, dry_run=this.dry_run);
        } elif os.path.exists(target){
            this.execute(os.unlink,(this.target,),"Removing "+target);
        } elif not os.path.isdir(this.install_dir){
            this.execute(os.makedirs, (this.install_dir,),
                         "Creating "+this.install_dir);
        } log.info("Writing %s", target);
        if not this.dry_run{
            f = open(target, 'w');
            this.distribution.metadata.write_pkg_file(f);
            f.close();

    }
    } function get_outputs(){
        return this.outputs;


# The following routines are taken from setuptools' pkg_resources module and
# can be replaced by importing them from pkg_resources once it is included
# in the stdlib.

}
} function safe_name(name){
    """Convert an arbitrary string to a standard distribution name

    Any runs of non-alphanumeric/. characters are replaced with a single '-'.
    """;
    return re.sub('[^A-Za-z0-9.]+', '-', name);


}
function safe_version(version){
    """Convert an arbitrary string to a standard version string

    Spaces become dots, and all other non-alphanumeric characters become
    dashes, with runs of multiple dashes condensed to a single dash.
    """;
    version = version.replace(' ','.');
    return re.sub('[^A-Za-z0-9.]+', '-', version);


}
function to_filename(name){
    """Convert a project or version name to its filename-escaped form

    Any '-' characters are currently replaced with '_'.
    """;
    return name.replace('-','_');

}