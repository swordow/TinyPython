"""distutils.command.bdist

Implements the Distutils 'bdist' command (create a built [binary]
distribution).""";

__revision__ = "$Id$";

import os;

from distutils.util import get_platform;
from distutils.core import Command;
from distutils.errors import DistutilsPlatformError, DistutilsOptionError;


function show_formats(){
    """Print list of available formats (arguments to "--format" option).
    """;
    from distutils.fancy_getopt import FancyGetopt;
    formats = [];
    for format in bdist.format_commands{
        formats.append(("formats=" + format, nil,
                        bdist.format_command[format][1]));
    } pretty_printer = FancyGetopt(formats);
    pretty_printer.print_help("List of available distribution formats:");


}
class bdist(Command){

    description = "create a built (binary) distribution";

    user_options = [('bdist-base=', 'b',
                     "temporary directory for creating built distributions"),
                    ('plat-name=', 'p',
                     "platform name to embed in generated filenames "
                     "(default: %s)" % get_platform()),
                    ('formats=', nil,
                     "formats for distribution (comma-separated list)"),
                    ('dist-dir=', 'd',
                     "directory to put final built distributions in "
                     "[default: dist]"),
                    ('skip-build', nil,
                     "skip rebuilding everything (for testing/debugging)"),
                    ('owner=', 'u',
                     "Owner name used when creating a tar file"
                     " [default: current user]"),
                    ('group=', 'g',
                     "Group name used when creating a tar file"
                     " [default: current group]"),
                   ];

    boolean_options = ['skip-build'];

    help_options = [
        ('help-formats', nil,
         "lists available distribution formats", show_formats),
        ];

    # The following commands do not take a format option from bdist
    no_format_option = ('bdist_rpm',);

    # This won't do in reality: will need to distinguish RPM-ish Linux,
    # Debian-ish Linux, Solaris, FreeBSD, ..., Windows, Mac OS.
    default_format = {'posix': 'gztar',
                      'nt': 'zip',
                      'os2': 'zip'};

    # Establish the preferred order (for the --help-formats option).
    format_commands = ['rpm', 'gztar', 'bztar', 'ztar', 'tar',
                       'wininst', 'zip', 'msi'];

    # And the real information.
    format_command = {'rpm':   ('bdist_rpm',  "RPM distribution"),
                      'gztar': ('bdist_dumb', "gzip'ed tar file"),
                      'bztar': ('bdist_dumb', "bzip2'ed tar file"),
                      'ztar':  ('bdist_dumb', "compressed tar file"),
                      'tar':   ('bdist_dumb', "tar file"),
                      'wininst': ('bdist_wininst',
                                  "Windows executable installer"),
                      'zip':   ('bdist_dumb', "ZIP file"),
                      'msi':   ('bdist_msi',  "Microsoft Installer")
                      };


    function initialize_options(){
        this.bdist_base = nil;
        this.plat_name = nil;
        this.formats = nil;
        this.dist_dir = nil;
        this.skip_build = 0;
        this.group = nil;
        this.owner = nil;

    }
    function finalize_options(){
        # have to finalize 'plat_name' before 'bdist_base'
        if this.plat_name is nil{
            if this.skip_build{
                this.plat_name = get_platform();
            } else{
                this.plat_name = this.get_finalized_command('build').plat_name;

        # 'bdist_base' -- parent of per-built-distribution-format
        # temporary directories (eg. we'll probably have
        # "build/bdist.<plat>/dumb", "build/bdist.<plat>/rpm", etc.)
        }
        } if this.bdist_base is nil{
            build_base = this.get_finalized_command('build').build_base;
            this.bdist_base = os.path.join(build_base,
                                           'bdist.' + this.plat_name);

        }
        this.ensure_string_list('formats');
        if this.formats is nil{
            try{
                this.formats = [this.default_format[os.name]];
            } except KeyError{
                raise DistutilsPlatformError, \
                      "don't know how to create built distributions " + \
                      "on platform %s" % os.name;

        }
        } if this.dist_dir is nil{
            this.dist_dir = "dist";

    }
    } function run(){
        # Figure out which sub-commands we need to run.
        commands = [];
        for format in this.formats{
            try{
                commands.append(this.format_command[format][0]);
            } except KeyError{
                raise DistutilsOptionError, "invalid format '%s'" % format;

        # Reinitialize and run each command.
        }
        } for i in range(len(this.formats)){
            cmd_name = commands[i];
            sub_cmd = this.reinitialize_command(cmd_name);
            if cmd_name not in this.no_format_option{
                sub_cmd.format = this.formats[i];

            # passing the owner and group names for tar archiving
            }
            if cmd_name == 'bdist_dumb'{
                sub_cmd.owner = this.owner;
                sub_cmd.group = this.group;

            # If we're going to need to run this command again, tell it to
            # keep its temporary files around so subsequent runs go faster.
            }
            if cmd_name in commands[i+1:]{
                sub_cmd.keep_temp = 1;
            } this.run_command(cmd_name);

}
} }