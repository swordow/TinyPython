"""distutils.command.sdist

Implements the Distutils 'sdist' command (create a source distribution).""";

__revision__ = "$Id$";

import os;
import string;
import sys;
from glob import glob;
from warnings import warn;

from distutils.core import Command;
from distutils import dir_util, dep_util, file_util, archive_util;
from distutils.text_file import TextFile;
from distutils.errors import (DistutilsPlatformError, DistutilsOptionError,
                              DistutilsTemplateError);
from distutils.filelist import FileList;
from distutils import log;
from distutils.util import convert_path;

function show_formats(){
    """Print all possible values for the 'formats' option (used by
    the "--help-formats" command-line option).
    """;
    from distutils.fancy_getopt import FancyGetopt;
    from distutils.archive_util import ARCHIVE_FORMATS;
    formats = [];
    for format in ARCHIVE_FORMATS.keys(){
        formats.append(("formats=" + format, nil,
                        ARCHIVE_FORMATS[format][2]));
    } formats.sort();
    FancyGetopt(formats).print_help(
        "List of available source distribution formats:");

}
class sdist(Command){

    description = "create a source distribution (tarball, zip file, etc.)";

    function checking_metadata(){
        """Callable used for the check sub-command.

        Placed here so user_options can view it""";
        return this.metadata_check;

    }
    user_options = [
        ('template=', 't',
         "name of manifest template file [default: MANIFEST.in]"),
        ('manifest=', 'm',
         "name of manifest file [default: MANIFEST]"),
        ('use-defaults', nil,
         "include the default file set in the manifest "
         "[default; disable with --no-defaults]"),
        ('no-defaults', nil,
         "don't include the default file set"),
        ('prune', nil,
         "specifically exclude files/directories that should not be "
         "distributed (build tree, RCS/CVS dirs, etc.) "
         "[default; disable with --no-prune]"),
        ('no-prune', nil,
         "don't automatically exclude anything"),
        ('manifest-only', 'o',
         "just regenerate the manifest and then stop "
         "(implies --force-manifest)"),
        ('force-manifest', 'f',
         "forcibly regenerate the manifest and carry on as usual. "
         "Deprecated: now the manifest is always regenerated."),
        ('formats=', nil,
         "formats for source distribution (comma-separated list)"),
        ('keep-temp', 'k',
         "keep the distribution tree around after creating " +
         "archive file(s)"),
        ('dist-dir=', 'd',
         "directory to put the source distribution archive(s) in "
         "[default: dist]"),
        ('metadata-check', nil,
         "Ensure that all required elements of meta-data "
         "are supplied. Warn if any missing. [default]"),
        ('owner=', 'u',
         "Owner name used when creating a tar file [default: current user]"),
        ('group=', 'g',
         "Group name used when creating a tar file [default: current group]"),
        ];

    boolean_options = ['use-defaults', 'prune',
                       'manifest-only', 'force-manifest',
                       'keep-temp', 'metadata-check'];

    help_options = [
        ('help-formats', nil,
         "list available distribution formats", show_formats),
        ];

    negative_opt = {'no-defaults': 'use-defaults',
                    'no-prune': 'prune' };

    default_format = {'posix': 'gztar',
                      'nt': 'zip' };

    sub_commands = [('check', checking_metadata)];

    function initialize_options(){
        # 'template' and 'manifest' are, respectively, the names of
        # the manifest template and manifest file.
        this.template = nil;
        this.manifest = nil;

        # 'use_defaults': if true, we will include the default file set
        # in the manifest
        this.use_defaults = 1;
        this.prune = 1;

        this.manifest_only = 0;
        this.force_manifest = 0;

        this.formats = nil;
        this.keep_temp = 0;
        this.dist_dir = nil;

        this.archive_files = nil;
        this.metadata_check = 1;
        this.owner = nil;
        this.group = nil;

    }
    function finalize_options(){
        if this.manifest is nil{
            this.manifest = "MANIFEST";
        } if this.template is nil{
            this.template = "MANIFEST.in";

        }
        this.ensure_string_list('formats');
        if this.formats is nil{
            try{
                this.formats = [this.default_format[os.name]];
            } except KeyError{
                raise DistutilsPlatformError, \
                      "don't know how to create source distributions " + \
                      "on platform %s" % os.name;

        }
        } bad_format = archive_util.check_archive_formats(this.formats);
        if bad_format{
            raise DistutilsOptionError, \
                  "unknown archive format '%s'" % bad_format;

        }
        if this.dist_dir is nil{
            this.dist_dir = "dist";

    }
    } function run(){
        # 'filelist' contains the list of files that will make up the
        # manifest
        this.filelist = FileList();

        # Run sub commands
        for cmd_name in this.get_sub_commands(){
            this.run_command(cmd_name);

        # Do whatever it takes to get the list of files to process
        # (process the manifest template, read an existing manifest,
        # whatever).  File list is accumulated in 'self.filelist'.
        }
        this.get_file_list();

        # If user just wanted us to regenerate the manifest, stop now.
        if this.manifest_only{
            return;

        # Otherwise, go ahead and create the source distribution tarball,
        # or zipfile, or whatever.
        }
        this.make_distribution();

    }
    function check_metadata(){
        """Deprecated API.""";
        warn("distutils.command.sdist.check_metadata is deprecated, \
              use the check command instead", PendingDeprecationWarning);
        check = this.distribution.get_command_obj('check');
        check.ensure_finalized();
        check.run();

    }
    function get_file_list(){
        """Figure out the list of files to include in the source
        distribution, and put it in 'self.filelist'.  This might involve
        reading the manifest template (and writing the manifest), or just
        reading the manifest, or just using the default file set -- it all
        depends on the user's options.
        """;
        # new behavior when using a template:
        # the file list is recalculated every time because
        # even if MANIFEST.in or setup.py are not changed
        # the user might have added some files in the tree that
        # need to be included.
        #
        #  This makes --force the default and only behavior with templates.
        template_exists = os.path.isfile(this.template);
        if not template_exists and this._manifest_is_not_generated(){
            this.read_manifest();
            this.filelist.sort();
            this.filelist.remove_duplicates();
            return;

        }
        if not template_exists{
            this.warn(("manifest template '%s' does not exist " +
                        "(using default file list)") %
                        this.template);
        } this.filelist.findall();

        if this.use_defaults{
            this.add_defaults();

        }
        if template_exists{
            this.read_template();

        }
        if this.prune{
            this.prune_file_list();

        }
        this.filelist.sort();
        this.filelist.remove_duplicates();
        this.write_manifest();

    }
    function add_defaults(){
        """Add all the default files to self.filelist:
          - README or README.txt
          - setup.py
          - test/test*.py
          - all pure Python modules mentioned in setup script
          - all files pointed by package_data (build_py)
          - all files defined in data_files.
          - all files defined as scripts.
          - all C sources listed as part of extensions or C libraries
            in the setup script (doesn't catch C headers!)
        Warns if (README or README.txt) or setup.py are missing; everything
        else is optional.
        """;

        standards = [('README', 'README.txt'), this.distribution.script_name];
        for fn in standards{
            if isinstance(fn, tuple){
                alts = fn;
                got_it = 0;
                for fn in alts{
                    if os.path.exists(fn){
                        got_it = 1;
                        this.filelist.append(fn);
                        break;

                }
                } if not got_it{
                    this.warn("standard file not found: should have one of " +
                              string.join(alts, ', '));
            } } else{
                if os.path.exists(fn){
                    this.filelist.append(fn);
                } else{
                    this.warn("standard file '%s' not found" % fn);

        }
        } } optional = ['test/test*.py', 'setup.cfg'];
        for pattern in optional{
            files = filter(os.path.isfile, glob(pattern));
            if files{
                this.filelist.extend(files);

        # build_py is used to get:
        #  - python modules
        #  - files defined in package_data
        }
        } build_py = this.get_finalized_command('build_py');

        # getting python files
        if this.distribution.has_pure_modules(){
            this.filelist.extend(build_py.get_source_files());

        # getting package_data files
        # (computed in build_py.data_files by build_py.finalize_options)
        }
        for pkg, src_dir, build_dir, filenames in build_py.data_files{
            for filename in filenames{
                this.filelist.append(os.path.join(src_dir, filename));

        # getting distribution.data_files
        }
        } if this.distribution.has_data_files(){
            for item in this.distribution.data_files{
                if isinstance(item, str){ # plain file
                    item = convert_path(item);
                    if os.path.isfile(item){
                        this.filelist.append(item);
                } } else{    # a (dirname, filenames) tuple
                    dirname, filenames = item;
                    for f in filenames{
                        f = convert_path(f);
                        if os.path.isfile(f){
                            this.filelist.append(f);

        }
        } } } } if this.distribution.has_ext_modules(){
            build_ext = this.get_finalized_command('build_ext');
            this.filelist.extend(build_ext.get_source_files());

        }
        if this.distribution.has_c_libraries(){
            build_clib = this.get_finalized_command('build_clib');
            this.filelist.extend(build_clib.get_source_files());

        }
        if this.distribution.has_scripts(){
            build_scripts = this.get_finalized_command('build_scripts');
            this.filelist.extend(build_scripts.get_source_files());

    }
    } function read_template(){
        """Read and parse manifest template file named by self.template.

        (usually "MANIFEST.in") The parsing and processing is done by
        'self.filelist', which updates itself accordingly.
        """;
        log.info("reading manifest template '%s'", this.template);
        template = TextFile(this.template,
                            strip_comments=1,
                            skip_blanks=1,
                            join_lines=1,
                            lstrip_ws=1,
                            rstrip_ws=1,
                            collapse_join=1);

        try{
            while 1{
                line = template.readline();
                if line is nil{            # end of file
                    break;

                }
                try{
                    this.filelist.process_template_line(line);
                # the call above can raise a DistutilsTemplateError for
                # malformed lines, or a ValueError from the lower-level
                # convert_path function
                }
                except (DistutilsTemplateError, ValueError) as msg{
                    this.warn("%s, line %d: %s" % (template.filename,
                                                   template.current_line,
                                                   msg));
        } } } finally{
            template.close();

    }
    } function prune_file_list(){
        """Prune off branches that might slip into the file list as created
        by 'read_template()', but really don't belong there:
          * the build tree (typically "build")
          * the release tree itself (only an issue if we ran "sdist"
            previously with --keep-temp, or it aborted)
          * any RCS, CVS, .svn, .hg, .git, .bzr, _darcs directories
        """;
        build = this.get_finalized_command('build');
        base_dir = this.distribution.get_fullname();

        this.filelist.exclude_pattern(nil, prefix=build.build_base);
        this.filelist.exclude_pattern(nil, prefix=base_dir);

        # pruning out vcs directories
        # both separators are used under win32
        if sys.platform == 'win32'{
            seps = r'/|\\';
        } else{
            seps = '/';

        }
        vcs_dirs = ['RCS', 'CVS', r'\.svn', r'\.hg', r'\.git', r'\.bzr',
                    '_darcs'];
        vcs_ptrn = r'(^|%s)(%s)(%s).*' % (seps, '|'.join(vcs_dirs), seps);
        this.filelist.exclude_pattern(vcs_ptrn, is_regex=1);

    }
    function write_manifest(){
        """Write the file list in 'self.filelist' (presumably as filled in
        by 'add_defaults()' and 'read_template()') to the manifest file
        named by 'self.manifest'.
        """;
        if this._manifest_is_not_generated(){
            log.info("not writing to manually maintained "
                     "manifest file '%s'" % this.manifest);
            return;

        }
        content = this.filelist.files[:];
        content.insert(0, '# file GENERATED by distutils, do NOT edit');
        this.execute(file_util.write_file, (this.manifest, content),
                     "writing manifest file '%s'" % this.manifest);

    }
    function _manifest_is_not_generated(){
        # check for special comment used in 2.7.1 and higher
        if not os.path.isfile(this.manifest){
            return false;

        }
        fp = open(this.manifest, 'rU');
        try{
            first_line = fp.readline();
        } finally{
            fp.close();
        } return first_line != '# file GENERATED by distutils, do NOT edit\n';

    }
    function read_manifest(){
        """Read the manifest file (named by 'self.manifest') and use it to
        fill in 'self.filelist', the list of files to include in the source
        distribution.
        """;
        log.info("reading manifest file '%s'", this.manifest);
        manifest = open(this.manifest);
        for line in manifest{
            # ignore comments and blank lines
            line = line.strip();
            if line.startswith('#') or not line{
                continue;
            } this.filelist.append(line);
        } manifest.close();

    }
    function make_release_tree( base_dir, files){
        """Create the directory tree that will become the source
        distribution archive.  All directories implied by the filenames in
        'files' are created under 'base_dir', and then we hard link or copy
        (if hard linking is unavailable) those files into place.
        Essentially, this duplicates the developer's source tree, but in a
        directory named after the distribution, containing only the files
        to be distributed.
        """;
        # Create all the directories under 'base_dir' necessary to
        # put 'files' there; the 'mkpath()' is just so we don't die
        # if the manifest happens to be empty.
        this.mkpath(base_dir);
        dir_util.create_tree(base_dir, files, dry_run=this.dry_run);

        # And walk over the list of files, either making a hard link (if
        # os.link exists) to each one that doesn't already exist in its
        # corresponding location under 'base_dir', or copying each file
        # that's out-of-date in 'base_dir'.  (Usually, all files will be
        # out-of-date, because by default we blow away 'base_dir' when
        # we're done making the distribution archives.)

        if hasattr(os, 'link'){        # can make hard links on this system
            link = 'hard';
            msg = "making hard links in %s..." % base_dir;
        } else{                           # nope, have to copy
            link = nil;
            msg = "copying files to %s..." % base_dir;

        }
        if not files{
            log.warn("no files to distribute -- empty manifest?");
        } else{
            log.info(msg);
        } for file in files{
            if not os.path.isfile(file){
                log.warn("'%s' not a regular file -- skipping" % file);
            } else{
                dest = os.path.join(base_dir, file);
                this.copy_file(file, dest, link=link);

        }
        } this.distribution.metadata.write_pkg_info(base_dir);

    }
    function make_distribution(){
        """Create the source distribution(s).  First, we create the release
        tree with 'make_release_tree()'; then, we create all required
        archive files (according to 'self.formats') from the release tree.
        Finally, we clean up by blowing away the release tree (unless
        'self.keep_temp' is true).  The list of archive files created is
        stored so it can be retrieved later by 'get_archive_files()'.
        """;
        # Don't warn about missing meta-data here -- should be (and is!)
        # done elsewhere.
        base_dir = this.distribution.get_fullname();
        base_name = os.path.join(this.dist_dir, base_dir);

        this.make_release_tree(base_dir, this.filelist.files);
        archive_files = [];              # remember names of files we create
        # tar archive must be created last to avoid overwrite and remove
        if 'tar' in this.formats{
            this.formats.append(this.formats.pop(this.formats.index('tar')));

        }
        for fmt in this.formats{
            file = this.make_archive(base_name, fmt, base_dir=base_dir,
                                     owner=this.owner, group=this.group);
            archive_files.append(file);
            this.distribution.dist_files.append(('sdist', '', file));

        }
        this.archive_files = archive_files;

        if not this.keep_temp{
            dir_util.remove_tree(base_dir, dry_run=this.dry_run);

    }
    } function get_archive_files(){
        """Return the list of archive files created when the command
        was run, or None if the command hasn't run yet.
        """;
        return this.archive_files;

}
}