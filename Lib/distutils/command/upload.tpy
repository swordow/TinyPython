"""distutils.command.upload

Implements the Distutils 'upload' subcommand (upload package to PyPI).""";
import os;
import socket;
import platform;
from urllib2 import urlopen, Request, HTTPError;
from base64 import standard_b64encode;
import urlparse;
import cStringIO as StringIO;
from hashlib import md5;

from distutils.errors import DistutilsError, DistutilsOptionError;
from distutils.core import PyPIRCCommand;
from distutils.spawn import spawn;
from distutils import log;

class upload(PyPIRCCommand){

    description = "upload binary package to PyPI";

    user_options = PyPIRCCommand.user_options + [
        ('sign', 's',
         'sign files to upload using gpg'),
        ('identity=', 'i', 'GPG identity used to sign files'),
        ];

    boolean_options = PyPIRCCommand.boolean_options + ['sign'];

    function initialize_options(){
        PyPIRCCommand.initialize_options(this);
        this.username = '';
        this.password = '';
        this.show_response = 0;
        this.sign = false;
        this.identity = nil;

    }
    function finalize_options(){
        PyPIRCCommand.finalize_options(this);
        if this.identity and not this.sign{
            raise DistutilsOptionError(
                "Must use --sign for --identity to have meaning"
            );
        } config = this._read_pypirc();
        if config != {}{
            this.username = config['username'];
            this.password = config['password'];
            this.repository = config['repository'];
            this.realm = config['realm'];

        # getting the password from the distribution
        # if previously set by the register command
        }
        if not this.password and this.distribution.password{
            this.password = this.distribution.password;

    }
    } function run(){
        if not this.distribution.dist_files{
            msg = ("Must create and upload files in one command "
                   "(e.g. setup.py sdist upload)");
            raise DistutilsOptionError(msg);
        } for command, pyversion, filename in this.distribution.dist_files{
            this.upload_file(command, pyversion, filename);

    }
    } function upload_file( command, pyversion, filename){
        # Makes sure the repository URL is compliant
        schema, netloc, url, params, query, fragments = \
            urlparse.urlparse(this.repository);
        if params or query or fragments{
            raise AssertionError("Incompatible url %s" % this.repository);

        }
        if schema not in ('http', 'https'){
            raise AssertionError("unsupported schema " + schema);

        # Sign if requested
        }
        if this.sign{
            gpg_args = ["gpg", "--detach-sign", "-a", filename];
            if this.identity{
                gpg_args[2:2] = ["--local-user", this.identity];
            } spawn(gpg_args,
                  dry_run=this.dry_run);

        # Fill in the data - send all the meta-data in case we need to
        # register a new release
        }
        f = open(filename,'rb');
        try{
            content = f.read();
        } finally{
            f.close();
        } meta = this.distribution.metadata;
        data = {
            # action
            ':action': 'file_upload',
            'protcol_version': '1',

            # identify release
            'name': meta.get_name(),
            'version': meta.get_version(),

            # file content
            'content': (os.path.basename(filename),content),
            'filetype': command,
            'pyversion': pyversion,
            'md5_digest': md5(content).hexdigest(),

            # additional meta-data
            'metadata_version' : '1.0',
            'summary': meta.get_description(),
            'home_page': meta.get_url(),
            'author': meta.get_contact(),
            'author_email': meta.get_contact_email(),
            'license': meta.get_licence(),
            'description': meta.get_long_description(),
            'keywords': meta.get_keywords(),
            'platform': meta.get_platforms(),
            'classifiers': meta.get_classifiers(),
            'download_url': meta.get_download_url(),
            # PEP 314
            'provides': meta.get_provides(),
            'requires': meta.get_requires(),
            'obsoletes': meta.get_obsoletes(),
            };
        comment = '';
        if command == 'bdist_rpm'{
            dist, version, id = platform.dist();
            if dist{
                comment = 'built for %s %s' % (dist, version);
        } } elif command == 'bdist_dumb'{
            comment = 'built for %s' % platform.platform(terse=1);
        } data['comment'] = comment;

        if this.sign{
            data['gpg_signature'] = (os.path.basename(filename) + ".asc",
                                     open(filename+".asc").read());

        # set up the authentication
        }
        auth = "Basic " + standard_b64encode(this.username + ":" +
                                             this.password);

        # Build up the MIME payload for the POST data
        boundary = '--------------GHSKFJDLGDS7543FJKLFHRE75642756743254';
        sep_boundary = '\r\n--' + boundary;
        end_boundary = sep_boundary + '--\r\n';
        body = StringIO.StringIO();
        for key, value in data.items(){
            # handle multiple entries for the same name
            if not isinstance(value, list){
                value = [value];
            } for value in value{
                if isinstance(value, tuple){
                    fn = ';filename="%s"' % value[0];
                    value = value[1];
                } else{
                    fn = "";

                }
                body.write(sep_boundary);
                body.write('\r\nContent-Disposition: form-data; name="%s"' % key);
                body.write(fn);
                body.write("\r\n\r\n");
                body.write(value);
        } } body.write(end_boundary);
        body = body.getvalue();

        this.announce("Submitting %s to %s" % (filename, this.repository), log.INFO);

        # build the Request
        headers = {'Content-type':
                        'multipart/form-data; boundary=%s' % boundary,
                   'Content-length': str(len(body)),
                   'Authorization': auth};

        request = Request(this.repository, data=body,
                          headers=headers);
        # send the data
        try{
            result = urlopen(request);
            status = result.getcode();
            reason = result.msg;
            if this.show_response{
                msg = '\n'.join(('-' * 75, result.read(), '-' * 75));
                this.announce(msg, log.INFO);
        } } except socket.error, e{
            this.announce(str(e), log.ERROR);
            raise;
        } except HTTPError, e{
            status = e.code;
            reason = e.msg;

        }
        if status == 200{
            this.announce('Server response (%s): %s' % (status, reason),
                          log.INFO);
        } else{
            msg = 'Upload failed (%s): %s' % (status, reason);
            this.announce(msg, log.ERROR);
            raise DistutilsError(msg);

}
} }