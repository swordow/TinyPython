"""distutils.command.clean

Implements the Distutils 'clean' command.""";

# contributed by Bastian Kleineidam <calvin@cs.uni-sb.de>, added 2000-03-18

__revision__ = "$Id$";

import os;
from distutils.core import Command;
from distutils.dir_util import remove_tree;
from distutils import log;

class clean(Command){

    description = "clean up temporary files from 'build' command";
    user_options = [
        ('build-base=', 'b',
         "base build directory (default: 'build.build-base')"),
        ('build-lib=', nil,
         "build directory for all modules (default: 'build.build-lib')"),
        ('build-temp=', 't',
         "temporary build directory (default: 'build.build-temp')"),
        ('build-scripts=', nil,
         "build directory for scripts (default: 'build.build-scripts')"),
        ('bdist-base=', nil,
         "temporary directory for built distributions"),
        ('all', 'a',
         "remove all build output, not just temporary by-products")
    ];

    boolean_options = ['all'];

    function initialize_options(){
        this.build_base = nil;
        this.build_lib = nil;
        this.build_temp = nil;
        this.build_scripts = nil;
        this.bdist_base = nil;
        this.all = nil;

    }
    function finalize_options(){
        this.set_undefined_options('build',
                                   ('build_base', 'build_base'),
                                   ('build_lib', 'build_lib'),
                                   ('build_scripts', 'build_scripts'),
                                   ('build_temp', 'build_temp'));
        this.set_undefined_options('bdist',
                                   ('bdist_base', 'bdist_base'));

    }
    function run(){
        # remove the build/temp.<plat> directory (unless it's already
        # gone)
        if os.path.exists(this.build_temp){
            remove_tree(this.build_temp, dry_run=this.dry_run);
        } else{
            log.debug("'%s' does not exist -- can't clean it",
                      this.build_temp);

        }
        if this.all{
            # remove build directories
            for directory in (this.build_lib,
                              this.bdist_base,
                              this.build_scripts){
                if os.path.exists(directory){
                    remove_tree(directory, dry_run=this.dry_run);
                } else{
                    log.warn("'%s' does not exist -- can't clean it",
                             directory);

        # just for the heck of it, try to remove the base build directory:
        # we might have emptied it right now, but if not we don't care
        }
        } } if not this.dry_run{
            try{
                os.rmdir(this.build_base);
                log.info("removing '%s'", this.build_base);
            } except OSError{
                pass;

# class clean

}
} } }