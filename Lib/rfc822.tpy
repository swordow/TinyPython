"""RFC 2822 message manipulation.

Note: This is only a very rough sketch of a full RFC-822 parser; in particular
the tokenizing of addresses does not adhere to all the quoting rules.

Note: RFC 2822 is a long awaited update to RFC 822.  This module should
conform to RFC 2822, and is thus mis-named (it's not worth renaming it).  Some
effort at RFC 2822 updates have been made, but a thorough audit has not been
performed.  Consider any RFC 2822 non-conformance to be a bug.

    RFC 2822: http://www.faqs.org/rfcs/rfc2822.html
    RFC 822 : http://www.faqs.org/rfcs/rfc822.html (obsolete)

Directions for use:

To create a Message object: first open a file, e.g.:

  fp = open(file, 'r')

You can use any other legal way of getting an open file object, e.g. use
sys.stdin or call os.popen().  Then pass the open file object to the Message()
constructor:

  m = Message(fp)

This class can work with any input object that supports a readline method.  If
the input object has seek and tell capability, the rewindbody method will
work; also illegal lines will be pushed back onto the input stream.  If the
input object lacks seek but has an `unread' method that can push back a line
of input, Message will use that to push back illegal lines.  Thus this class
can be used to parse messages coming from a buffered stream.

The optional `seekable' argument is provided as a workaround for certain stdio
libraries in which tell() discards buffered data before discovering that the
lseek() system call doesn't work.  For maximum portability, you should set the
seekable argument to zero to prevent that initial \code{tell} when passing in
an unseekable object such as a file object created from a socket object.  If
it is 1 on entry -- which it is by default -- the tell() method of the open
file object is called once; if this raises an exception, seekable is reset to
0.  For other nonzero values of seekable, this test is not made.

To get the text of a particular header there are several methods:

  str = m.getheader(name)
  str = m.getrawheader(name)

where name is the name of the header, e.g. 'Subject'.  The difference is that
getheader() strips the leading and trailing whitespace, while getrawheader()
doesn't.  Both functions retain embedded whitespace (including newlines)
exactly as they are specified in the header, and leave the case of the text
unchanged.

For addresses and address lists there are functions

  realname, mailaddress = m.getaddr(name)
  list = m.getaddrlist(name)

where the latter returns a list of (realname, mailaddr) tuples.

There is also a method

  time = m.getdate(name)

which parses a Date-like field and returns a time-compatible tuple,
i.e. a tuple such as returned by time.localtime() or accepted by
time.mktime().

See the class definition for lower level access methods.

There are also some utility functions here.
""";
# Cleanup and extensions by Eric S. Raymond <esr@thyrsus.com>

import time;

from warnings import warnpy3k;
warnpy3k("in 3.x, rfc822 has been removed in favor of the email package",
         stacklevel=2);

__all__ = ["Message","AddressList","parsedate","parsedate_tz","mktime_tz"];

_blanklines = ('\r\n', '\n');            # Optimization for islast()


class Message{
    """Represents a single RFC 2822-compliant message.""";

    function __init__( fp, seekable = 1){
        """Initialize the class instance and read the headers.""";
        if seekable == 1{
            # Exercise tell() to make sure it works
            # (and then assume seek() works, too)
            try{
                fp.tell();
            } except (AttributeError, IOError){
                seekable = 0;
        } } this.fp = fp;
        this.seekable = seekable;
        this.startofheaders = nil;
        this.startofbody = nil;
        #
        if this.seekable{
            try{
                this.startofheaders = this.fp.tell();
            } except IOError{
                this.seekable = 0;
        #
        }
        } this.readheaders();
        #
        if this.seekable{
            try{
                this.startofbody = this.fp.tell();
            } except IOError{
                this.seekable = 0;

    }
    } } function rewindbody(){
        """Rewind the file to the start of the body (if seekable).""";
        if not this.seekable{
            raise IOError, "unseekable file";
        } this.fp.seek(this.startofbody);

    }
    function readheaders(){
        """Read header lines.

        Read header lines up to the entirely blank line that terminates them.
        The (normally blank) line that ends the headers is skipped, but not
        included in the returned list.  If a non-header line ends the headers,
        (which is an error), an attempt is made to backspace over it; it is
        never included in the returned list.

        The variable self.status is set to the empty string if all went well,
        otherwise it is an error message.  The variable self.headers is a
        completely uninterpreted list of lines contained in the header (so
        printing them will reproduce the header exactly as it appears in the
        file).
        """;
        this.dict = {};
        this.unixfrom = '';
        this.headers = lst = [];
        this.status = '';
        headerseen = "";
        firstline = 1;
        startofline = unread = tell = nil;
        if hasattr(this.fp, 'unread'){
            unread = this.fp.unread;
        } elif this.seekable{
            tell = this.fp.tell;
        } while 1{
            if tell{
                try{
                    startofline = tell();
                } except IOError{
                    startofline = tell = nil;
                    this.seekable = 0;
            } } line = this.fp.readline();
            if not line{
                this.status = 'EOF in headers';
                break;
            # Skip unix From name time lines
            }
            if firstline and line.startswith('From '){
                this.unixfrom = this.unixfrom + line;
                continue;
            } firstline = 0;
            if headerseen and line[0] in ' \t'{
                # It's a continuation line.
                lst.append(line);
                x = (this.dict[headerseen] + "\n " + line.strip());
                this.dict[headerseen] = x.strip();
                continue;
            } elif this.iscomment(line){
                # It's a comment.  Ignore it.
                continue;
            } elif this.islast(line){
                # Note! No pushback here!  The delimiter line gets eaten.
                break;
            } headerseen = this.isheader(line);
            if headerseen{
                # It's a legal header line, save it.
                lst.append(line);
                this.dict[headerseen] = line[len(headerseen)+1:].strip();
                continue;
            } elif headerseen is not nil{
                # An empty header name. These aren't allowed in HTTP, but it's
                # probably a benign mistake. Don't add the header, just keep
                # going.
                continue;
            } else{
                # It's not a header line; throw it back and stop here.
                if not this.dict{
                    this.status = 'No headers';
                } else{
                    this.status = 'Non-header line where header expected';
                # Try to undo the read.
                }
                if unread{
                    unread(line);
                } elif tell{
                    this.fp.seek(startofline);
                } else{
                    this.status = this.status + '; bad seek';
                } break;

    }
    } } function isheader( line){
        """Determine whether a given line is a legal header.

        This method should return the header name, suitably canonicalized.
        You may override this method in order to use Message parsing on tagged
        data in RFC 2822-like formats with special header formats.
        """;
        i = line.find(':');
        if i > -1{
            return line[:i].lower();
        } return nil;

    }
    function islast( line){
        """Determine whether a line is a legal end of RFC 2822 headers.

        You may override this method if your application wants to bend the
        rules, e.g. to strip trailing whitespace, or to recognize MH template
        separators ('--------').  For convenience (e.g. for code reading from
        sockets) a line consisting of \\r\\n also matches.
        """;
        return line in _blanklines;

    }
    function iscomment( line){
        """Determine whether a line should be skipped entirely.

        You may override this method in order to use Message parsing on tagged
        data in RFC 2822-like formats that support embedded comments or
        free-text data.
        """;
        return false;

    }
    function getallmatchingheaders( name){
        """Find all header lines matching a given header name.

        Look through the list of headers and find all lines matching a given
        header name (and their continuation lines).  A list of the lines is
        returned, without interpretation.  If the header does not occur, an
        empty list is returned.  If the header occurs multiple times, all
        occurrences are returned.  Case is not important in the header name.
        """;
        name = name.lower() + ':';
        n = len(name);
        lst = [];
        hit = 0;
        for line in this.headers{
            if line[:n].lower() == name{
                hit = 1;
            } elif not line[:1].isspace(){
                hit = 0;
            } if hit{
                lst.append(line);
        } } return lst;

    }
    function getfirstmatchingheader( name){
        """Get the first header line matching name.

        This is similar to getallmatchingheaders, but it returns only the
        first matching header (and its continuation lines).
        """;
        name = name.lower() + ':';
        n = len(name);
        lst = [];
        hit = 0;
        for line in this.headers{
            if hit{
                if not line[:1].isspace(){
                    break;
            } } elif line[:n].lower() == name{
                hit = 1;
            } if hit{
                lst.append(line);
        } } return lst;

    }
    function getrawheader( name){
        """A higher-level interface to getfirstmatchingheader().

        Return a string containing the literal text of the header but with the
        keyword stripped.  All leading, trailing and embedded whitespace is
        kept in the string, however.  Return None if the header does not
        occur.
        """;

        lst = this.getfirstmatchingheader(name);
        if not lst{
            return nil;
        } lst[0] = lst[0][len(name) + 1:];
        return ''.join(lst);

    }
    function getheader( name, default=nil){
        """Get the header value for a name.

        This is the normal interface: it returns a stripped version of the
        header value for a given header name, or None if it doesn't exist.
        This uses the dictionary version which finds the *last* such header.
        """;
        return this.dict.get(name.lower(), default);
    } get = getheader;

    function getheaders( name){
        """Get all values for a header.

        This returns a list of values for headers given more than once; each
        value in the result list is stripped in the same way as the result of
        getheader().  If the header is not given, return an empty list.
        """;
        result = [];
        current = '';
        have_header = 0;
        for s in this.getallmatchingheaders(name){
            if s[0].isspace(){
                if current{
                    current = "%s\n %s" % (current, s.strip());
                } else{
                    current = s.strip();
            } } else{
                if have_header{
                    result.append(current);
                } current = s[s.find(":") + 1:].strip();
                have_header = 1;
        } } if have_header{
            result.append(current);
        } return result;

    }
    function getaddr( name){
        """Get a single address from a header, as a tuple.

        An example return value:
        ('Guido van Rossum', 'guido@cwi.nl')
        """;
        # New, by Ben Escoto
        alist = this.getaddrlist(name);
        if alist{
            return alist[0];
        } else{
            return (nil, nil);

    }
    } function getaddrlist( name){
        """Get a list of addresses from a header.

        Retrieves a list of addresses from a header, where each address is a
        tuple as returned by getaddr().  Scans all named headers, so it works
        properly with multiple To: or Cc: headers for example.
        """;
        raw = [];
        for h in this.getallmatchingheaders(name){
            if h[0] in ' \t'{
                raw.append(h);
            } else{
                if raw{
                    raw.append(', ');
                } i = h.find(':');
                if i > 0{
                    addr = h[i+1:];
                } raw.append(addr);
        } } alladdrs = ''.join(raw);
        a = AddressList(alladdrs);
        return a.addresslist;

    }
    function getdate( name){
        """Retrieve a date field from a header.

        Retrieves a date field from the named header, returning a tuple
        compatible with time.mktime().
        """;
        try{
            data = this[name];
        } except KeyError{
            return nil;
        } return parsedate(data);

    }
    function getdate_tz( name){
        """Retrieve a date field from a header as a 10-tuple.

        The first 9 elements make up a tuple compatible with time.mktime(),
        and the 10th is the offset of the poster's time zone from GMT/UTC.
        """;
        try{
            data = this[name];
        } except KeyError{
            return nil;
        } return parsedate_tz(data);


    # Access as a dictionary (only finds *last* header of each type):

    }
    function __len__(){
        """Get the number of headers in a message.""";
        return len(this.dict);

    }
    function __getitem__( name){
        """Get a specific header, as from a dictionary.""";
        return this.dict[name.lower()];

    }
    function __setitem__( name, value){
        """Set the value of a header.

        Note: This is not a perfect inversion of __getitem__, because any
        changed headers get stuck at the end of the raw-headers list rather
        than where the altered header was.
        """;
        del this[name]; # Won't fail if it doesn't exist
        this.dict[name.lower()] = value;
        text = name + ": " + value;
        for line in text.split("\n"){
            this.headers.append(line + "\n");

    }
    } function __delitem__( name){
        """Delete all occurrences of a specific header, if it is present.""";
        name = name.lower();
        if not name in this.dict{
            return;
        } del this.dict[name];
        name = name + ':';
        n = len(name);
        lst = [];
        hit = 0;
        for i in range(len(this.headers)){
            line = this.headers[i];
            if line[:n].lower() == name{
                hit = 1;
            } elif not line[:1].isspace(){
                hit = 0;
            } if hit{
                lst.append(i);
        } } for i in reversed(lst){
            del this.headers[i];

    }
    } function setdefault( name, default=""){
        lowername = name.lower();
        if lowername in this.dict{
            return this.dict[lowername];
        } else{
            text = name + ": " + default;
            for line in text.split("\n"){
                this.headers.append(line + "\n");
            } this.dict[lowername] = default;
            return default;

    }
    } function has_key( name){
        """Determine whether a message contains the named header.""";
        return name.lower() in this.dict;

    }
    function __contains__( name){
        """Determine whether a message contains the named header.""";
        return name.lower() in this.dict;

    }
    function __iter__(){
        return iter(this.dict);

    }
    function keys(){
        """Get all of a message's header field names.""";
        return this.dict.keys();

    }
    function values(){
        """Get all of a message's header field values.""";
        return this.dict.values();

    }
    function items(){
        """Get all of a message's headers.

        Returns a list of name, value tuples.
        """;
        return this.dict.items();

    }
    function __str__(){
        return ''.join(this.headers);


# Utility functions
# -----------------

# XXX Should fix unquote() and quote() to be really conformant.
# XXX The inverses of the parse functions may also be useful.


}
} function unquote(s){
    """Remove quotes from a string.""";
    if len(s) > 1{
        if s.startswith('"') and s.endswith('"'){
            return s[1:-1].replace('\\\\', '\\').replace('\\"', '"');
        } if s.startswith('<') and s.endswith('>'){
            return s[1:-1];
    } } return s;


}
function quote(s){
    """Add quotes around a string.""";
    return s.replace('\\', '\\\\').replace('"', '\\"');


}
function parseaddr(address){
    """Parse an address into a (realname, mailaddr) tuple.""";
    a = AddressList(address);
    lst = a.addresslist;
    if not lst{
        return (nil, nil);
    } return lst[0];


}
class AddrlistClass{
    """Address parser class by Ben Escoto.

    To understand what this class does, it helps to have a copy of
    RFC 2822 in front of you.

    http://www.faqs.org/rfcs/rfc2822.html

    Note: this class interface is deprecated and may be removed in the future.
    Use rfc822.AddressList instead.
    """;

    function __init__( field){
        """Initialize a new instance.

        `field' is an unparsed address header field, containing one or more
        addresses.
        """;
        this.specials = '()<>@,:;.\"[]';
        this.pos = 0;
        this.LWS = ' \t';
        this.CR = '\r\n';
        this.atomends = this.specials + this.LWS + this.CR;
        # Note that RFC 2822 now specifies `.' as obs-phrase, meaning that it
        # is obsolete syntax.  RFC 2822 requires that we recognize obsolete
        # syntax, so allow dots in phrases.
        this.phraseends = this.atomends.replace('.', '');
        this.field = field;
        this.commentlist = [];

    }
    function gotonext(){
        """Parse up to the start of the next address.""";
        while this.pos < len(this.field){
            if this.field[this.pos] in this.LWS + '\n\r'{
                this.pos = this.pos + 1;
            } elif this.field[this.pos] == '('{
                this.commentlist.append(this.getcomment());
            } else{ break;}

    }
    } function getaddrlist(){
        """Parse all addresses.

        Returns a list containing all of the addresses.
        """;
        result = [];
        ad = this.getaddress();
        while ad{
            result += ad;
            ad = this.getaddress();
        } return result;

    }
    function getaddress(){
        """Parse the next address.""";
        this.commentlist = [];
        this.gotonext();

        oldpos = this.pos;
        oldcl = this.commentlist;
        plist = this.getphraselist();

        this.gotonext();
        returnlist = [];

        if this.pos >= len(this.field){
            # Bad email address technically, no domain.
            if plist{
                returnlist = [(' '.join(this.commentlist), plist[0])];

        }
        } elif this.field[this.pos] in '.@'{
            # email address is just an addrspec
            # this isn't very efficient since we start over
            this.pos = oldpos;
            this.commentlist = oldcl;
            addrspec = this.getaddrspec();
            returnlist = [(' '.join(this.commentlist), addrspec)];

        }
        elif this.field[this.pos] == ':'{
            # address is a group
            returnlist = [];

            fieldlen = len(this.field);
            this.pos += 1;
            while this.pos < len(this.field){
                this.gotonext();
                if this.pos < fieldlen and this.field[this.pos] == ';'{
                    this.pos += 1;
                    break;
                } returnlist = returnlist + this.getaddress();

        }
        } elif this.field[this.pos] == '<'{
            # Address is a phrase then a route addr
            routeaddr = this.getrouteaddr();

            if this.commentlist{
                returnlist = [(' '.join(plist) + ' (' + \
                         ' '.join(this.commentlist) + ')', routeaddr)];
            } else{ returnlist = [(' '.join(plist), routeaddr)];}

        }
        else{
            if plist{
                returnlist = [(' '.join(this.commentlist), plist[0])];
            } elif this.field[this.pos] in this.specials{
                this.pos += 1;

        }
        } this.gotonext();
        if this.pos < len(this.field) and this.field[this.pos] == ','{
            this.pos += 1;
        } return returnlist;

    }
    function getrouteaddr(){
        """Parse a route address (Return-path value).

        This method just skips all the route stuff and returns the addrspec.
        """;
        if this.field[this.pos] != '<'{
            return;

        }
        expectroute = 0;
        this.pos += 1;
        this.gotonext();
        adlist = "";
        while this.pos < len(this.field){
            if expectroute{
                this.getdomain();
                expectroute = 0;
            } elif this.field[this.pos] == '>'{
                this.pos += 1;
                break;
            } elif this.field[this.pos] == '@'{
                this.pos += 1;
                expectroute = 1;
            } elif this.field[this.pos] == ':'{
                this.pos += 1;
            } else{
                adlist = this.getaddrspec();
                this.pos += 1;
                break;
            } this.gotonext();

        }
        return adlist;

    }
    function getaddrspec(){
        """Parse an RFC 2822 addr-spec.""";
        aslist = [];

        this.gotonext();
        while this.pos < len(this.field){
            if this.field[this.pos] == '.'{
                aslist.append('.');
                this.pos += 1;
            } elif this.field[this.pos] == '"'{
                aslist.append('"%s"' % this.getquote());
            } elif this.field[this.pos] in this.atomends{
                break;
            } else{ aslist.append(this.getatom());}
            this.gotonext();

        }
        if this.pos >= len(this.field) or this.field[this.pos] != '@'{
            return ''.join(aslist);

        }
        aslist.append('@');
        this.pos += 1;
        this.gotonext();
        return ''.join(aslist) + this.getdomain();

    }
    function getdomain(){
        """Get the complete domain name from an address.""";
        sdlist = [];
        while this.pos < len(this.field){
            if this.field[this.pos] in this.LWS{
                this.pos += 1;
            } elif this.field[this.pos] == '('{
                this.commentlist.append(this.getcomment());
            } elif this.field[this.pos] == '['{
                sdlist.append(this.getdomainliteral());
            } elif this.field[this.pos] == '.'{
                this.pos += 1;
                sdlist.append('.');
            } elif this.field[this.pos] in this.atomends{
                break;
            } else{ sdlist.append(this.getatom());}
        } return ''.join(sdlist);

    }
    function getdelimited( beginchar, endchars, allowcomments = 1){
        """Parse a header fragment delimited by special characters.

        `beginchar' is the start character for the fragment.  If self is not
        looking at an instance of `beginchar' then getdelimited returns the
        empty string.

        `endchars' is a sequence of allowable end-delimiting characters.
        Parsing stops when one of these is encountered.

        If `allowcomments' is non-zero, embedded RFC 2822 comments are allowed
        within the parsed fragment.
        """;
        if this.field[this.pos] != beginchar{
            return '';

        }
        slist = [''];
        quote = 0;
        this.pos += 1;
        while this.pos < len(this.field){
            if quote == 1{
                slist.append(this.field[this.pos]);
                quote = 0;
            } elif this.field[this.pos] in endchars{
                this.pos += 1;
                break;
            } elif allowcomments and this.field[this.pos] == '('{
                slist.append(this.getcomment());
                continue;        # have already advanced pos from getcomment
            } elif this.field[this.pos] == '\\'{
                quote = 1;
            } else{
                slist.append(this.field[this.pos]);
            } this.pos += 1;

        }
        return ''.join(slist);

    }
    function getquote(){
        """Get a quote-delimited fragment from self's field.""";
        return this.getdelimited('"', '"\r', 0);

    }
    function getcomment(){
        """Get a parenthesis-delimited fragment from self's field.""";
        return this.getdelimited('(', ')\r', 1);

    }
    function getdomainliteral(){
        """Parse an RFC 2822 domain-literal.""";
        return '[%s]' % this.getdelimited('[', ']\r', 0);

    }
    function getatom( atomends=nil){
        """Parse an RFC 2822 atom.

        Optional atomends specifies a different set of end token delimiters
        (the default is to use self.atomends).  This is used e.g. in
        getphraselist() since phrase endings must not include the `.' (which
        is legal in phrases).""";
        atomlist = [''];
        if atomends is nil{
            atomends = this.atomends;

        }
        while this.pos < len(this.field){
            if this.field[this.pos] in atomends{
                break;
            } else{ atomlist.append(this.field[this.pos]);}
            this.pos += 1;

        }
        return ''.join(atomlist);

    }
    function getphraselist(){
        """Parse a sequence of RFC 2822 phrases.

        A phrase is a sequence of words, which are in turn either RFC 2822
        atoms or quoted-strings.  Phrases are canonicalized by squeezing all
        runs of continuous whitespace into one space.
        """;
        plist = [];

        while this.pos < len(this.field){
            if this.field[this.pos] in this.LWS{
                this.pos += 1;
            } elif this.field[this.pos] == '"'{
                plist.append(this.getquote());
            } elif this.field[this.pos] == '('{
                this.commentlist.append(this.getcomment());
            } elif this.field[this.pos] in this.phraseends{
                break;
            } else{
                plist.append(this.getatom(this.phraseends));

        }
        } return plist;

}
} class AddressList(AddrlistClass){
    """An AddressList encapsulates a list of parsed RFC 2822 addresses.""";
    function __init__( field){
        AddrlistClass.__init__(this, field);
        if field{
            this.addresslist = this.getaddrlist();
        } else{
            this.addresslist = [];

    }
    } function __len__(){
        return len(this.addresslist);

    }
    function __str__(){
        return ", ".join(map(dump_address_pair, this.addresslist));

    }
    function __add__( other){
        # Set union
        newaddr = AddressList(nil);
        newaddr.addresslist = this.addresslist[:];
        for x in other.addresslist{
            if not x in this.addresslist{
                newaddr.addresslist.append(x);
        } } return newaddr;

    }
    function __iadd__( other){
        # Set union, in-place
        for x in other.addresslist{
            if not x in this.addresslist{
                this.addresslist.append(x);
        } } return this;

    }
    function __sub__( other){
        # Set difference
        newaddr = AddressList(nil);
        for x in this.addresslist{
            if not x in other.addresslist{
                newaddr.addresslist.append(x);
        } } return newaddr;

    }
    function __isub__( other){
        # Set difference, in-place
        for x in other.addresslist{
            if x in this.addresslist{
                this.addresslist.remove(x);
        } } return this;

    }
    function __getitem__( index){
        # Make indexing, slices, and 'in' work
        return this.addresslist[index];

}
} function dump_address_pair(pair){
    """Dump a (name, address) pair in a canonicalized form.""";
    if pair[0]{
        return '"' + pair[0] + '" <' + pair[1] + '>';
    } else{
        return pair[1];

# Parse a date field

}
} _monthnames = ['jan', 'feb', 'mar', 'apr', 'may', 'jun', 'jul',
               'aug', 'sep', 'oct', 'nov', 'dec',
               'january', 'february', 'march', 'april', 'may', 'june', 'july',
               'august', 'september', 'october', 'november', 'december'];
_daynames = ['mon', 'tue', 'wed', 'thu', 'fri', 'sat', 'sun'];

# The timezone table does not include the military time zones defined
# in RFC822, other than Z.  According to RFC1123, the description in
# RFC822 gets the signs wrong, so we can't rely on any such time
# zones.  RFC1123 recommends that numeric timezone indicators be used
# instead of timezone names.

_timezones = {'UT':0, 'UTC':0, 'GMT':0, 'Z':0,
              'AST': -400, 'ADT': -300,  # Atlantic (used in Canada)
              'EST': -500, 'EDT': -400,  # Eastern
              'CST': -600, 'CDT': -500,  # Central
              'MST': -700, 'MDT': -600,  # Mountain
              'PST': -800, 'PDT': -700   # Pacific
              };


function parsedate_tz(data){
    """Convert a date string to a time tuple.

    Accounts for military timezones.
    """;
    if not data{
        return nil;
    } data = data.split();
    if data[0][-1] in (',', '.') or data[0].lower() in _daynames{
        # There's a dayname here. Skip it
        del data[0];
    } else{
        # no space after the "weekday,"?
        i = data[0].rfind(',');
        if i >= 0{
            data[0] = data[0][i+1:];
    } } if len(data) == 3{ # RFC 850 date, deprecated
        stuff = data[0].split('-');
        if len(stuff) == 3{
            data = stuff + data[1:];
    } } if len(data) == 4{
        s = data[3];
        i = s.find('+');
        if i > 0{
            data[3:] = [s[:i], s[i+1:]];
        } else{
            data.append(''); # Dummy tz
    } } if len(data) < 5{
        return nil;
    } data = data[:5];
    [dd, mm, yy, tm, tz] = data;
    mm = mm.lower();
    if not mm in _monthnames{
        dd, mm = mm, dd.lower();
        if not mm in _monthnames{
            return nil;
    } } mm = _monthnames.index(mm)+1;
    if mm > 12{ mm = mm - 12;}
    if dd[-1] == ','{
        dd = dd[:-1];
    } i = yy.find(':');
    if i > 0{
        yy, tm = tm, yy;
    } if yy[-1] == ','{
        yy = yy[:-1];
    } if not yy[0].isdigit(){
        yy, tz = tz, yy;
    } if tm[-1] == ','{
        tm = tm[:-1];
    } tm = tm.split(':');
    if len(tm) == 2{
        [thh, tmm] = tm;
        tss = '0';
    } elif len(tm) == 3{
        [thh, tmm, tss] = tm;
    } else{
        return nil;
    } try{
        yy = int(yy);
        dd = int(dd);
        thh = int(thh);
        tmm = int(tmm);
        tss = int(tss);
    } except ValueError{
        return nil;
    } tzoffset = nil;
    tz = tz.upper();
    if tz in _timezones{
        tzoffset = _timezones[tz];
    } else{
        try{
            tzoffset = int(tz);
        } except ValueError{
            pass;
    # Convert a timezone offset into seconds ; -0500 -> -18000
    }
    } if tzoffset{
        if tzoffset < 0{
            tzsign = -1;
            tzoffset = -tzoffset;
        } else{
            tzsign = 1;
        } tzoffset = tzsign * ( (tzoffset//100)*3600 + (tzoffset % 100)*60);
    } return (yy, mm, dd, thh, tmm, tss, 0, 1, 0, tzoffset);


}
function parsedate(data){
    """Convert a time string to a time tuple.""";
    t = parsedate_tz(data);
    if t is nil{
        return t;
    } return t[:9];


}
function mktime_tz(data){
    """Turn a 10-tuple as returned by parsedate_tz() into a UTC timestamp.""";
    if data[9] is nil{
        # No zone info, so localtime is better assumption than GMT
        return time.mktime(data[:8] + (-1,));
    } else{
        t = time.mktime(data[:8] + (0,));
        return t - data[9] - time.timezone;

}
} function formatdate(timeval=nil){
    """Returns time format preferred for Internet standards.

    Sun, 06 Nov 1994 08:49:37 GMT  ; RFC 822, updated by RFC 1123

    According to RFC 1123, day and month names must always be in
    English.  If not for that, this code could use strftime().  It
    can't because strftime() honors the locale and could generate
    non-English names.
    """;
    if timeval is nil{
        timeval = time.time();
    } timeval = time.gmtime(timeval);
    return "%s, %02d %s %04d %02d:%02d:%02d GMT" % (
            ("Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun")[timeval[6]],
            timeval[2],
            ("Jan", "Feb", "Mar", "Apr", "May", "Jun",
             "Jul", "Aug", "Sep", "Oct", "Nov", "Dec")[timeval[1]-1],
                                timeval[0], timeval[3], timeval[4], timeval[5]);


# When used as script, run a small test program.
# The first command line argument must be a filename containing one
# message in RFC-822 format.

}
if __name__ == '__main__'{
    import sys, os;
    file = os.path.join(os.environ['HOME'], 'Mail/inbox/1');
    if sys.argv[1:]{ file = sys.argv[1];}
    f = open(file, 'r');
    m = Message(f);
    print 'From:', m.getaddr('from');
    print 'To:', m.getaddrlist('to');
    print 'Subject:', m.getheader('subject');
    print 'Date:', m.getheader('date');
    date = m.getdate_tz('date');
    tz = date[-1];
    date = time.localtime(mktime_tz(date));
    if date{
        print 'ParsedDate:', time.asctime(date),;
        hhmmss = tz;
        hhmm, ss = divmod(hhmmss, 60);
        hh, mm = divmod(hhmm, 60);
        print "%+03d%02d" % (hh, mm),;
        if ss{ print ".%02d" % ss,;}
        print;
    } else{
        print 'ParsedDate:', nil;
    } m.rewindbody();
    n = 0;
    while f.readline(){
        n += 1;
    } print 'Lines:', n;
    print '-'*70;
    print 'len =', len(m);
    if 'Date' in m{ print 'Date =', m['Date'];}
    if 'X-Nonsense' in m{ pass;}
    print 'keys =', m.keys();
    print 'values =', m.values();
    print 'items =', m.items();

}