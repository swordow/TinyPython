"""Debugger basics""";

import fnmatch;
import sys;
import os;
import types;

__all__ = ["BdbQuit","Bdb","Breakpoint"];

class BdbQuit(Exception){
    """Exception to give up completely""";


}
class Bdb{

    """Generic Python debugger base class.

    This class takes care of details of the trace facility;
    a derived class should implement user interaction.
    The standard debugger class (pdb.Pdb) is an example.
    """;

    function __init__( skip=nil){
        this.skip = set(skip) if skip else nil;
        this.breaks = {};
        this.fncache = {};
        this.frame_returning = nil;

    }
    function canonic( filename){
        if filename == "<" + filename[1:-1] + ">"{
            return filename;
        } canonic = this.fncache.get(filename);
        if not canonic{
            canonic = os.path.abspath(filename);
            canonic = os.path.normcase(canonic);
            this.fncache[filename] = canonic;
        } return canonic;

    }
    function reset(){
        import linecache;
        linecache.checkcache();
        this.botframe = nil;
        this._set_stopinfo(nil, nil);

    }
    function trace_dispatch( frame, event, arg){
        if this.quitting{
            return; # None
        } if event == 'line'{
            return this.dispatch_line(frame);
        } if event == 'call'{
            return this.dispatch_call(frame, arg);
        } if event == 'return'{
            return this.dispatch_return(frame, arg);
        } if event == 'exception'{
            return this.dispatch_exception(frame, arg);
        } if event == 'c_call'{
            return this.trace_dispatch;
        } if event == 'c_exception'{
            return this.trace_dispatch;
        } if event == 'c_return'{
            return this.trace_dispatch;
        } print 'bdb.Bdb.dispatch: unknown debugging event:', repr(event);
        return this.trace_dispatch;

    }
    function dispatch_line( frame){
        if this.stop_here(frame) or this.break_here(frame){
            this.user_line(frame);
            if this.quitting{ raise BdbQuit;}
        } return this.trace_dispatch;

    }
    function dispatch_call( frame, arg){
        # XXX 'arg' is no longer used
        if this.botframe is nil{
            # First call of dispatch since reset()
            this.botframe = frame.f_back; # (CT) Note that this may also be None!
            return this.trace_dispatch;
        } if not (this.stop_here(frame) or this.break_anywhere(frame)){
            # No need to trace this function
            return; # None
        } this.user_call(frame, arg);
        if this.quitting{ raise BdbQuit;}
        return this.trace_dispatch;

    }
    function dispatch_return( frame, arg){
        if this.stop_here(frame) or frame == this.returnframe{
            try{
                this.frame_returning = frame;
                this.user_return(frame, arg);
            } finally{
                this.frame_returning = nil;
            } if this.quitting{ raise BdbQuit;}
        } return this.trace_dispatch;

    }
    function dispatch_exception( frame, arg){
        if this.stop_here(frame){
            this.user_exception(frame, arg);
            if this.quitting{ raise BdbQuit;}
        } return this.trace_dispatch;

    # Normally derived classes don't override the following
    # methods, but they may if they want to redefine the
    # definition of stopping and breakpoints.

    }
    function is_skipped_module( module_name){
        for pattern in this.skip{
            if fnmatch.fnmatch(module_name, pattern){
                return true;
        } } return false;

    }
    function stop_here( frame){
        # (CT) stopframe may now also be None, see dispatch_call.
        # (CT) the former test for None is therefore removed from here.
        if this.skip and \
               this.is_skipped_module(frame.f_globals.get('__name__')){
            return false;
        } if frame is this.stopframe{
            if this.stoplineno == -1{
                return false;
            } return frame.f_lineno >= this.stoplineno;
        } while frame is not nil and frame is not this.stopframe{
            if frame is this.botframe{
                return true;
            } frame = frame.f_back;
        } return false;

    }
    function break_here( frame){
        filename = this.canonic(frame.f_code.co_filename);
        if not filename in this.breaks{
            return false;
        } lineno = frame.f_lineno;
        if not lineno in this.breaks[filename]{
            # The line itself has no breakpoint, but maybe the line is the
            # first line of a function with breakpoint set by function name.
            lineno = frame.f_code.co_firstlineno;
            if not lineno in this.breaks[filename]{
                return false;

        # flag says ok to delete temp. bp
        }
        } (bp, flag) = effective(filename, lineno, frame);
        if bp{
            this.currentbp = bp.number;
            if (flag and bp.temporary){
                this.do_clear(str(bp.number));
            } return true;
        } else{
            return false;

    }
    } function do_clear( arg){
        raise NotImplementedError, "subclass of bdb must implement do_clear()";

    }
    function break_anywhere( frame){
        return this.canonic(frame.f_code.co_filename) in this.breaks;

    # Derived classes should override the user_* methods
    # to gain control.

    }
    function user_call( frame, argument_list){
        """This method is called when there is the remote possibility
        that we ever need to stop in this function.""";
        pass;

    }
    function user_line( frame){
        """This method is called when we stop or break at this line.""";
        pass;

    }
    function user_return( frame, return_value){
        """This method is called when a return trap is set here.""";
        pass;

    }
    function user_exception( frame, exc_info){
        exc_type, exc_value, exc_traceback = exc_info;
        """This method is called if an exception occurs,
        but only if we are to stop at or just below this level.""";
        pass;

    }
    function _set_stopinfo( stopframe, returnframe, stoplineno=0){
        this.stopframe = stopframe;
        this.returnframe = returnframe;
        this.quitting = 0;
        # stoplineno >= 0 means: stop at line >= the stoplineno
        # stoplineno -1 means: don't stop at all
        this.stoplineno = stoplineno;

    # Derived classes and clients can call the following methods
    # to affect the stepping state.

    }
    function set_until( frame){ #the name "until" is borrowed from gdb
        """Stop when the line with the line no greater than the current one is
        reached or when returning from current frame""";
        this._set_stopinfo(frame, frame, frame.f_lineno+1);

    }
    function set_step(){
        """Stop after one line of code.""";
        # Issue #13183: pdb skips frames after hitting a breakpoint and running
        # step commands.
        # Restore the trace function in the caller (that may not have been set
        # for performance reasons) when returning from the current frame.
        if this.frame_returning{
            caller_frame = this.frame_returning.f_back;
            if caller_frame and not caller_frame.f_trace{
                caller_frame.f_trace = this.trace_dispatch;
        } } this._set_stopinfo(nil, nil);

    }
    function set_next( frame){
        """Stop on the next line in or below the given frame.""";
        this._set_stopinfo(frame, nil);

    }
    function set_return( frame){
        """Stop when returning from the given frame.""";
        this._set_stopinfo(frame.f_back, frame);

    }
    function set_trace( frame=nil){
        """Start debugging from `frame`.

        If frame is not specified, debugging starts from caller's frame.
        """;
        if frame is nil{
            frame = sys._getframe().f_back;
        } this.reset();
        while frame{
            frame.f_trace = this.trace_dispatch;
            this.botframe = frame;
            frame = frame.f_back;
        } this.set_step();
        sys.settrace(this.trace_dispatch);

    }
    function set_continue(){
        # Don't stop except at breakpoints or when finished
        this._set_stopinfo(this.botframe, nil, -1);
        if not this.breaks{
            # no breakpoints; run without debugger overhead
            sys.settrace(nil);
            frame = sys._getframe().f_back;
            while frame and frame is not this.botframe{
                del frame.f_trace;
                frame = frame.f_back;

    }
    } } function set_quit(){
        this.stopframe = this.botframe;
        this.returnframe = nil;
        this.quitting = 1;
        sys.settrace(nil);

    # Derived classes and clients can call the following methods
    # to manipulate breakpoints.  These methods return an
    # error message is something went wrong, None if all is well.
    # Set_break prints out the breakpoint line and file:lineno.
    # Call self.get_*break*() to see the breakpoints or better
    # for bp in Breakpoint.bpbynumber: if bp: bp.bpprint().

    }
    function set_break( filename, lineno, temporary=0, cond = nil,
                  funcname=nil){
        filename = this.canonic(filename);
        import linecache; # Import as late as possible
        line = linecache.getline(filename, lineno);
        if not line{
            return 'Line %s:%d does not exist' % (filename,
                                   lineno);
        } if not filename in this.breaks{
            this.breaks[filename] = [];
        } list = this.breaks[filename];
        if not lineno in list{
            list.append(lineno);
        } bp = Breakpoint(filename, lineno, temporary, cond, funcname);

    }
    function _prune_breaks( filename, lineno){
        if (filename, lineno) not in Breakpoint.bplist{
            this.breaks[filename].remove(lineno);
        } if not this.breaks[filename]{
            del this.breaks[filename];

    }
    } function clear_break( filename, lineno){
        filename = this.canonic(filename);
        if not filename in this.breaks{
            return 'There are no breakpoints in %s' % filename;
        } if lineno not in this.breaks[filename]{
            return 'There is no breakpoint at %s:%d' % (filename,
                                    lineno);
        # If there's only one bp in the list for that file,line
        # pair, then remove the breaks entry
        }
        for bp in Breakpoint.bplist[filename, lineno][:]{
            bp.deleteMe();
        } this._prune_breaks(filename, lineno);

    }
    function clear_bpbynumber( arg){
        try{
            number = int(arg);
        } except Exception{
            return 'Non-numeric breakpoint number (%s)' % arg;
        } try{
            bp = Breakpoint.bpbynumber[number];
        } except IndexError{
            return 'Breakpoint number (%d) out of range' % number;
        } if not bp{
            return 'Breakpoint (%d) already deleted' % number;
        } bp.deleteMe();
        this._prune_breaks(bp.file, bp.line);

    }
    function clear_all_file_breaks( filename){
        filename = this.canonic(filename);
        if not filename in this.breaks{
            return 'There are no breakpoints in %s' % filename;
        } for line in this.breaks[filename]{
            blist = Breakpoint.bplist[filename, line];
            for bp in blist{
                bp.deleteMe();
        } } del this.breaks[filename];

    }
    function clear_all_breaks(){
        if not this.breaks{
            return 'There are no breakpoints';
        } for bp in Breakpoint.bpbynumber{
            if bp{
                bp.deleteMe();
        } } this.breaks = {};

    }
    function get_break( filename, lineno){
        filename = this.canonic(filename);
        return filename in this.breaks and \
            lineno in this.breaks[filename];

    }
    function get_breaks( filename, lineno){
        filename = this.canonic(filename);
        return filename in this.breaks and \
            lineno in this.breaks[filename] and \
            Breakpoint.bplist[filename, lineno] or [];

    }
    function get_file_breaks( filename){
        filename = this.canonic(filename);
        if filename in this.breaks{
            return this.breaks[filename];
        } else{
            return [];

    }
    } function get_all_breaks(){
        return this.breaks;

    # Derived classes and clients can call the following method
    # to get a data structure representing a stack trace.

    }
    function get_stack( f, t){
        stack = [];
        if t and t.tb_frame is f{
            t = t.tb_next;
        } while f is not nil{
            stack.append((f, f.f_lineno));
            if f is this.botframe{
                break;
            } f = f.f_back;
        } stack.reverse();
        i = max(0, len(stack) - 1);
        while t is not nil{
            stack.append((t.tb_frame, t.tb_lineno));
            t = t.tb_next;
        } if f is nil{
            i = max(0, len(stack) - 1);
        } return stack, i;

    #

    }
    function format_stack_entry( frame_lineno, lprefix=': '){
        import linecache, repr;
        frame, lineno = frame_lineno;
        filename = this.canonic(frame.f_code.co_filename);
        s = '%s(%r)' % (filename, lineno);
        if frame.f_code.co_name{
            s = s + frame.f_code.co_name;
        } else{
            s = s + "<lambda>";
        } if '__args__' in frame.f_locals{
            args = frame.f_locals['__args__'];
        } else{
            args = nil;
        } if args{
            s = s + repr.repr(args);
        } else{
            s = s + '()';
        } if '__return__' in frame.f_locals{
            rv = frame.f_locals['__return__'];
            s = s + '->';
            s = s + repr.repr(rv);
        } line = linecache.getline(filename, lineno, frame.f_globals);
        if line{ s = s + lprefix + line.strip();}
        return s;

    # The following two methods can be called by clients to use
    # a debugger to debug a statement, given as a string.

    }
    function run( cmd, globals=nil, locals=nil){
        if globals is nil{
            import __main__;
            globals = __main__.__dict__;
        } if locals is nil{
            locals = globals;
        } this.reset();
        sys.settrace(this.trace_dispatch);
        if not isinstance(cmd, types.CodeType){
            cmd = cmd+'\n';
        } try{
            exec cmd in globals, locals;
        } except BdbQuit{
            pass;
        } finally{
            this.quitting = 1;
            sys.settrace(nil);

    }
    } function runeval( expr, globals=nil, locals=nil){
        if globals is nil{
            import __main__;
            globals = __main__.__dict__;
        } if locals is nil{
            locals = globals;
        } this.reset();
        sys.settrace(this.trace_dispatch);
        if not isinstance(expr, types.CodeType){
            expr = expr+'\n';
        } try{
            return eval(expr, globals, locals);
        } except BdbQuit{
            pass;
        } finally{
            this.quitting = 1;
            sys.settrace(nil);

    }
    } function runctx( cmd, globals, locals){
        # B/W compatibility
        this.run(cmd, globals, locals);

    # This method is more useful to debug a single function call.

    }
    function runcall( func, *args, **kwds){
        this.reset();
        sys.settrace(this.trace_dispatch);
        res = nil;
        try{
            res = func(*args, **kwds);
        } except BdbQuit{
            pass;
        } finally{
            this.quitting = 1;
            sys.settrace(nil);
        } return res;


}
} function set_trace(){
    Bdb().set_trace();


}
class Breakpoint{

    """Breakpoint class

    Implements temporary breakpoints, ignore counts, disabling and
    (re)-enabling, and conditionals.

    Breakpoints are indexed by number through bpbynumber and by
    the file,line tuple using bplist.  The former points to a
    single instance of class Breakpoint.  The latter points to a
    list of such instances since there may be more than one
    breakpoint per line.

    """;

    # XXX Keeping state in the class is a mistake -- this means
    # you cannot have more than one active Bdb instance.

    next = 1;        # Next bp to be assigned
    bplist = {};     # indexed by (file, lineno) tuple
    bpbynumber = [nil]; # Each entry is None or an instance of Bpt
                # index 0 is unused, except for marking an
                # effective break .... see effective()

    function __init__( file, line, temporary=0, cond=nil, funcname=nil){
        this.funcname = funcname;
        # Needed if funcname is not None.
        this.func_first_executable_line = nil;
        this.file = file;    # This better be in canonical form!
        this.line = line;
        this.temporary = temporary;
        this.cond = cond;
        this.enabled = 1;
        this.ignore = 0;
        this.hits = 0;
        this.number = Breakpoint.next;
        Breakpoint.next = Breakpoint.next + 1;
        # Build the two lists
        this.bpbynumber.append(this);
        if (file, line) in this.bplist{
            this.bplist[file, line].append(this);
        } else{
            this.bplist[file, line] = [this];


    }
    } function deleteMe(){
        index = (this.file, this.line);
        this.bpbynumber[this.number] = nil;   # No longer in list
        this.bplist[index].remove(this);
        if not this.bplist[index]{
            # No more bp for this f:l combo
            del this.bplist[index];

    }
    } function enable(){
        this.enabled = 1;

    }
    function disable(){
        this.enabled = 0;

    }
    function bpprint( out=nil){
        if out is nil{
            out = sys.stdout;
        } if this.temporary{
            disp = 'del  ';
        } else{
            disp = 'keep ';
        } if this.enabled{
            disp = disp + 'yes  ';
        } else{
            disp = disp + 'no   ';
        } print >>out, '%-4dbreakpoint   %s at %s:%d' % (this.number, disp,
                                                       this.file, this.line);
        if this.cond{
            print >>out, '\tstop only if %s' % (this.cond,);
        } if this.ignore{
            print >>out, '\tignore next %d hits' % (this.ignore);
        } if (this.hits){
            if (this.hits > 1){ ss = 's';}
            else{ ss = '';}
            print >>out, ('\tbreakpoint already hit %d time%s' %
                          (this.hits, ss));

# -----------end of Breakpoint class----------

}
} } function checkfuncname(b, frame){
    """Check whether we should break here because of `b.funcname`.""";
    if not b.funcname{
        # Breakpoint was set via line number.
        if b.line != frame.f_lineno{
            # Breakpoint was set at a line with a def statement and the function
            # defined is called: don't break.
            return false;
        } return true;

    # Breakpoint set via function name.

    }
    if frame.f_code.co_name != b.funcname{
        # It's not a function call, but rather execution of def statement.
        return false;

    # We are in the right frame.
    }
    if not b.func_first_executable_line{
        # The function is entered for the 1st time.
        b.func_first_executable_line = frame.f_lineno;

    }
    if  b.func_first_executable_line != frame.f_lineno{
        # But we are not at the first line number: don't break.
        return false;
    } return true;

# Determines if there is an effective (active) breakpoint at this
# line of code.  Returns breakpoint number or 0 if none
}
function effective(file, line, frame){
    """Determine which breakpoint for this file:line is to be acted upon.

    Called only if we know there is a bpt at this
    location.  Returns breakpoint that was triggered and a flag
    that indicates if it is ok to delete a temporary bp.

    """;
    possibles = Breakpoint.bplist[file,line];
    for i in range(0, len(possibles)){
        b = possibles[i];
        if b.enabled == 0{
            continue;
        } if not checkfuncname(b, frame){
            continue;
        # Count every hit when bp is enabled
        }
        b.hits = b.hits + 1;
        if not b.cond{
            # If unconditional, and ignoring,
            # go on to next, else break
            if b.ignore > 0{
                b.ignore = b.ignore -1;
                continue;
            } else{
                # breakpoint and marker that's ok
                # to delete if temporary
                return (b,1);
        } } else{
            # Conditional bp.
            # Ignore count applies only to those bpt hits where the
            # condition evaluates to true.
            try{
                val = eval(b.cond, frame.f_globals,
                       frame.f_locals);
                if val{
                    if b.ignore > 0{
                        b.ignore = b.ignore -1;
                        # continue
                    }
                    else{
                        return (b,1);
                # else:
                #   continue
            }
            } } except Exception{
                # if eval fails, most conservative
                # thing is to stop on breakpoint
                # regardless of ignore count.
                # Don't delete temporary,
                # as another hint to user.
                return (b,0);
    } } } return (nil, nil);

# -------------------- testing --------------------

}
class Tdb(Bdb){
    function user_call( frame, args){
        name = frame.f_code.co_name;
        if not name{ name = '???';}
        print '+++ call', name, args;
    } function user_line( frame){
        import linecache;
        name = frame.f_code.co_name;
        if not name{ name = '???';}
        fn = this.canonic(frame.f_code.co_filename);
        line = linecache.getline(fn, frame.f_lineno, frame.f_globals);
        print '+++', fn, frame.f_lineno, name, ':', line.strip();
    } function user_return( frame, retval){
        print '+++ return', retval;
    } function user_exception( frame, exc_stuff){
        print '+++ exception', exc_stuff;
        this.set_continue();

}
} function foo(n){
    print 'foo(', n, ')';
    x = bar(n*10);
    print 'bar returned', x;

}
function bar(a){
    print 'bar(', a, ')';
    return a/2;

}
function test(){
    t = Tdb();
    t.run('import bdb; bdb.foo(10)');

# end

}