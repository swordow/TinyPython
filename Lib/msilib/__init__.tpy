# -*- coding: iso-8859-1 -*-
# Copyright (C) 2005 Martin v. Löwis
# Licensed to PSF under a Contributor Agreement.
from _msi import *;
import glob;
import os;
import re;
import string;
import sys;

AMD64 = "AMD64" in sys.version;
Itanium = "Itanium" in sys.version;
Win64 = AMD64 or Itanium;

# Partially taken from Wine
datasizemask=      0x00ff;
type_valid=        0x0100;
type_localizable=  0x0200;

typemask=          0x0c00;
type_long=         0x0000;
type_short=        0x0400;
type_string=       0x0c00;
type_binary=       0x0800;

type_nullable=     0x1000;
type_key=          0x2000;
# XXX temporary, localizable?
knownbits = datasizemask | type_valid | type_localizable | \
            typemask | type_nullable | type_key;

class Table{
    function __init__( name){
        this.name = name;
        this.fields = [];

    }
    function add_field( index, name, type){
        this.fields.append((index,name,type));

    }
    function sql(){
        fields = [];
        keys = [];
        this.fields.sort();
        fields = [nil]*len(this.fields);
        for index, name, type in this.fields{
            index -= 1;
            unk = type & ~knownbits;
            if unk{
                print "%s.%s unknown bits %x" % (this.name, name, unk);
            } size = type & datasizemask;
            dtype = type & typemask;
            if dtype == type_string{
                if size{
                    tname="CHAR(%d)" % size;
                } else{
                    tname="CHAR";
            } } elif dtype == type_short{
                assert size==2;
                tname = "SHORT";
            } elif dtype == type_long{
                assert size==4;
                tname="LONG";
            } elif dtype == type_binary{
                assert size==0;
                tname="OBJECT";
            } else{
                tname="unknown";
                print "%s.%sunknown integer type %d" % (this.name, name, size);
            } if type & type_nullable{
                flags = "";
            } else{
                flags = " NOT NULL";
            } if type & type_localizable{
                flags += " LOCALIZABLE";
            } fields[index] = "`%s` %s%s" % (name, tname, flags);
            if type & type_key{
                keys.append("`%s`" % name);
        } } fields = ", ".join(fields);
        keys = ", ".join(keys);
        return "CREATE TABLE %s (%s PRIMARY KEY %s)" % (this.name, fields, keys);

    }
    function create( db){
        v = db.OpenView(this.sql());
        v.Execute(nil);
        v.Close();

}
} class _Unspecified{pass;}
function change_sequence(seq, action, seqno=_Unspecified, cond = _Unspecified){
    "Change the sequence number of an action in a sequence list";
    for i in range(len(seq)){
        if seq[i][0] == action{
            if cond is _Unspecified{
                cond = seq[i][1];
            } if seqno is _Unspecified{
                seqno = seq[i][2];
            } seq[i] = (action, cond, seqno);
            return;
    } } raise ValueError, "Action not found in sequence";

}
function add_data(db, table, values){
    v = db.OpenView("SELECT * FROM `%s`" % table);
    count = v.GetColumnInfo(MSICOLINFO_NAMES).GetFieldCount();
    r = CreateRecord(count);
    for value in values{
        assert len(value) == count, value;
        for i in range(count){
            field = value[i];
            if isinstance(field, (int, long)){
                r.SetInteger(i+1,field);
            } elif isinstance(field, basestring){
                r.SetString(i+1,field);
            } elif field is nil{
                pass;
            } elif isinstance(field, Binary){
                r.SetStream(i+1, field.name);
            } else{
                raise TypeError, "Unsupported type %s" % field.__class__.__name__;
        } } try{
            v.Modify(MSIMODIFY_INSERT, r);
        } except Exception, e{
            raise MSIError("Could not insert "+repr(values)+" into "+table);

        }
        r.ClearData();
    } v.Close();


}
function add_stream(db, name, path){
    v = db.OpenView("INSERT INTO _Streams (Name, Data) VALUES ('%s', ?)" % name);
    r = CreateRecord(1);
    r.SetStream(1, path);
    v.Execute(r);
    v.Close();

}
function init_database(name, schema,
                  ProductName, ProductCode, ProductVersion,
                  Manufacturer){
    try{
        os.unlink(name);
    } except OSError{
        pass;
    } ProductCode = ProductCode.upper();
    # Create the database
    db = OpenDatabase(name, MSIDBOPEN_CREATE);
    # Create the tables
    for t in schema.tables{
        t.create(db);
    # Fill the validation table
    }
    add_data(db, "_Validation", schema._Validation_records);
    # Initialize the summary information, allowing atmost 20 properties
    si = db.GetSummaryInformation(20);
    si.SetProperty(PID_TITLE, "Installation Database");
    si.SetProperty(PID_SUBJECT, ProductName);
    si.SetProperty(PID_AUTHOR, Manufacturer);
    if Itanium{
        si.SetProperty(PID_TEMPLATE, "Intel64;1033");
    } elif AMD64{
        si.SetProperty(PID_TEMPLATE, "x64;1033");
    } else{
        si.SetProperty(PID_TEMPLATE, "Intel;1033");
    } si.SetProperty(PID_REVNUMBER, gen_uuid());
    si.SetProperty(PID_WORDCOUNT, 2); # long file names, compressed, original media
    si.SetProperty(PID_PAGECOUNT, 200);
    si.SetProperty(PID_APPNAME, "Python MSI Library");
    # XXX more properties
    si.Persist();
    add_data(db, "Property", [
        ("ProductName", ProductName),
        ("ProductCode", ProductCode),
        ("ProductVersion", ProductVersion),
        ("Manufacturer", Manufacturer),
        ("ProductLanguage", "1033")]);
    db.Commit();
    return db;

}
function add_tables(db, module){
    for table in module.tables{
        add_data(db, table, getattr(module, table));

}
} function make_id(str){
    identifier_chars = string.ascii_letters + string.digits + "._";
    str = "".join([c if c in identifier_chars else "_" for c in str]);
    if str[0] in (string.digits + "."){
        str = "_" + str;
    } assert re.match("^[A-Za-z_][A-Za-z0-9_.]*$", str), "FILE"+str;
    return str;

}
function gen_uuid(){
    return "{"+UuidCreate().upper()+"}";

}
class CAB{
    function __init__( name){
        this.name = name;
        this.files = [];
        this.filenames = set();
        this.index = 0;

    }
    function gen_id( file){
        logical = _logical = make_id(file);
        pos = 1;
        while logical in this.filenames{
            logical = "%s.%d" % (_logical, pos);
            pos += 1;
        } this.filenames.add(logical);
        return logical;

    }
    function append( full, file, logical){
        if os.path.isdir(full){
            return;
        } if not logical{
            logical = this.gen_id(file);
        } this.index += 1;
        this.files.append((full, logical));
        return this.index, logical;

    }
    function commit( db){
        from tempfile import mktemp;
        filename = mktemp();
        FCICreate(filename, this.files);
        add_data(db, "Media",
                [(1, this.index, nil, "#"+this.name, nil, nil)]);
        add_stream(db, this.name, filename);
        os.unlink(filename);
        db.Commit();

}
} _directories = set();
class Directory{
    function __init__( db, cab, basedir, physical, _logical, default, componentflags=nil){
        """Create a new directory in the Directory table. There is a current component
        at each point in time for the directory, which is either explicitly created
        through start_component, or implicitly when files are added for the first
        time. Files are added into the current component, and into the cab file.
        To create a directory, a base directory object needs to be specified (can be
        None), the path to the physical directory, and a logical directory name.
        Default specifies the DefaultDir slot in the directory table. componentflags
        specifies the default flags that new components get.""";
        index = 1;
        _logical = make_id(_logical);
        logical = _logical;
        while logical in _directories{
            logical = "%s%d" % (_logical, index);
            index += 1;
        } _directories.add(logical);
        this.db = db;
        this.cab = cab;
        this.basedir = basedir;
        this.physical = physical;
        this.logical = logical;
        this.component = nil;
        this.short_names = set();
        this.ids = set();
        this.keyfiles = {};
        this.componentflags = componentflags;
        if basedir{
            this.absolute = os.path.join(basedir.absolute, physical);
            blogical = basedir.logical;
        } else{
            this.absolute = physical;
            blogical = nil;
        } add_data(db, "Directory", [(logical, blogical, default)]);

    }
    function start_component( component = nil, feature = nil, flags = nil, keyfile = nil, uuid=nil){
        """Add an entry to the Component table, and make this component the current for this
        directory. If no component name is given, the directory name is used. If no feature
        is given, the current feature is used. If no flags are given, the directory's default
        flags are used. If no keyfile is given, the KeyPath is left null in the Component
        table.""";
        if flags is nil{
            flags = this.componentflags;
        } if uuid is nil{
            uuid = gen_uuid();
        } else{
            uuid = uuid.upper();
        } if component is nil{
            component = this.logical;
        } this.component = component;
        if Win64{
            flags |= 256;
        } if keyfile{
            keyid = this.cab.gen_id(this.absolute, keyfile);
            this.keyfiles[keyfile] = keyid;
        } else{
            keyid = nil;
        } add_data(this.db, "Component",
                        [(component, uuid, this.logical, flags, nil, keyid)]);
        if feature is nil{
            feature = current_feature;
        } add_data(this.db, "FeatureComponents",
                        [(feature.id, component)]);

    }
    function make_short( file){
        oldfile = file;
        file = file.replace('+', '_');
        file = ''.join(c for c in file if not c in ' "/\[]:;=,');
        parts = file.split(".");
        if len(parts) > 1{
            prefix = "".join(parts[:-1]).upper();
            suffix = parts[-1].upper();
            if not prefix{
                prefix = suffix;
                suffix = nil;
        } } else{
            prefix = file.upper();
            suffix = nil;
        } if len(parts) < 3 and len(prefix) <= 8 and file == oldfile and (
                                                not suffix or len(suffix) <= 3){
            if suffix{
                file = prefix+"."+suffix;
            } else{
                file = prefix;
        } } else{
            file = nil;
        } if file is nil or file in this.short_names{
            prefix = prefix[:6];
            if suffix{
                suffix = suffix[:3];
            } pos = 1;
            while 1{
                if suffix{
                    file = "%s~%d.%s" % (prefix, pos, suffix);
                } else{
                    file = "%s~%d" % (prefix, pos);
                } if file not in this.short_names{ break;}
                pos += 1;
                assert pos < 10000;
                if pos in (10, 100, 1000){
                    prefix = prefix[:-1];
        } } } this.short_names.add(file);
        assert not re.search(r'[\?|><:/*"+,;=\[\]]', file); # restrictions on short names
        return file;

    }
    function add_file( file, src=nil, version=nil, language=nil){
        """Add a file to the current component of the directory, starting a new one
        if there is no current component. By default, the file name in the source
        and the file table will be identical. If the src file is specified, it is
        interpreted relative to the current directory. Optionally, a version and a
        language can be specified for the entry in the File table.""";
        if not this.component{
            this.start_component(this.logical, current_feature, 0);
        } if not src{
            # Allow relative paths for file if src is not specified
            src = file;
            file = os.path.basename(file);
        } absolute = os.path.join(this.absolute, src);
        assert not re.search(r'[\?|><:/*]"', file); # restrictions on long names
        if file in this.keyfiles{
            logical = this.keyfiles[file];
        } else{
            logical = nil;
        } sequence, logical = this.cab.append(absolute, file, logical);
        assert logical not in this.ids;
        this.ids.add(logical);
        short = this.make_short(file);
        full = "%s|%s" % (short, file);
        filesize = os.stat(absolute).st_size;
        # constants.msidbFileAttributesVital
        # Compressed omitted, since it is the database default
        # could add r/o, system, hidden
        attributes = 512;
        add_data(this.db, "File",
                        [(logical, this.component, full, filesize, version,
                         language, attributes, sequence)]);
        #if not version:
        #    # Add hash if the file is not versioned
        #    filehash = FileHash(absolute, 0)
        #    add_data(self.db, "MsiFileHash",
        #             [(logical, 0, filehash.IntegerData(1),
        #               filehash.IntegerData(2), filehash.IntegerData(3),
        #               filehash.IntegerData(4))])
        # Automatically remove .pyc/.pyo files on uninstall (2)
        # XXX: adding so many RemoveFile entries makes installer unbelievably
        # slow. So instead, we have to use wildcard remove entries
        if file.endswith(".py"){
            add_data(this.db, "RemoveFile",
                      [(logical+"c", this.component, "%sC|%sc" % (short, file),
                        this.logical, 2),
                       (logical+"o", this.component, "%sO|%so" % (short, file),
                        this.logical, 2)]);
        } return logical;

    }
    function glob( pattern, exclude = nil){
        """Add a list of files to the current component as specified in the
        glob pattern. Individual files can be excluded in the exclude list.""";
        files = glob.glob1(this.absolute, pattern);
        for f in files{
            if exclude and f in exclude{ continue;}
            this.add_file(f);
        } return files;

    }
    function remove_pyc(){
        "Remove .pyc/.pyo files on uninstall";
        add_data(this.db, "RemoveFile",
                 [(this.component+"c", this.component, "*.pyc", this.logical, 2),
                  (this.component+"o", this.component, "*.pyo", this.logical, 2)]);

}
} class Binary{
    function __init__( fname){
        this.name = fname;
    } function __repr__(){
        return 'msilib.Binary(os.path.join(dirname,"%s"))' % this.name;

}
} class Feature{
    function __init__( db, id, title, desc, display, level = 1,
                 parent=nil, directory = nil, attributes=0){
        this.id = id;
        if parent{
            parent = parent.id;
        } add_data(db, "Feature",
                        [(id, parent, title, desc, display,
                          level, directory, attributes)]);
    } function set_current(){
        global current_feature;
        current_feature = this;

}
} class Control{
    function __init__( dlg, name){
        this.dlg = dlg;
        this.name = name;

    }
    function event( event, argument, condition = "1", ordering = nil){
        add_data(this.dlg.db, "ControlEvent",
                 [(this.dlg.name, this.name, event, argument,
                   condition, ordering)]);

    }
    function mapping( event, attribute){
        add_data(this.dlg.db, "EventMapping",
                 [(this.dlg.name, this.name, event, attribute)]);

    }
    function condition( action, condition){
        add_data(this.dlg.db, "ControlCondition",
                 [(this.dlg.name, this.name, action, condition)]);

}
} class RadioButtonGroup(Control){
    function __init__( dlg, name, property){
        this.dlg = dlg;
        this.name = name;
        this.property = property;
        this.index = 1;

    }
    function add( name, x, y, w, h, text, value = nil){
        if value is nil{
            value = name;
        } add_data(this.dlg.db, "RadioButton",
                 [(this.property, this.index, value,
                   x, y, w, h, text, nil)]);
        this.index += 1;

}
} class Dialog{
    function __init__( db, name, x, y, w, h, attr, title, first, default, cancel){
        this.db = db;
        this.name = name;
        this.x, this.y, this.w, this.h = x,y,w,h;
        add_data(db, "Dialog", [(name, x,y,w,h,attr,title,first,default,cancel)]);

    }
    function control( name, type, x, y, w, h, attr, prop, text, next, help){
        add_data(this.db, "Control",
                 [(this.name, name, type, x, y, w, h, attr, prop, text, next, help)]);
        return Control(this, name);

    }
    function text( name, x, y, w, h, attr, text){
        return this.control(name, "Text", x, y, w, h, attr, nil,
                     text, nil, nil);

    }
    function bitmap( name, x, y, w, h, text){
        return this.control(name, "Bitmap", x, y, w, h, 1, nil, text, nil, nil);

    }
    function line( name, x, y, w, h){
        return this.control(name, "Line", x, y, w, h, 1, nil, nil, nil, nil);

    }
    function pushbutton( name, x, y, w, h, attr, text, next){
        return this.control(name, "PushButton", x, y, w, h, attr, nil, text, next, nil);

    }
    function radiogroup( name, x, y, w, h, attr, prop, text, next){
        add_data(this.db, "Control",
                 [(this.name, name, "RadioButtonGroup",
                   x, y, w, h, attr, prop, text, next, nil)]);
        return RadioButtonGroup(this, name, prop);

    }
    function checkbox( name, x, y, w, h, attr, prop, text, next){
        return this.control(name, "CheckBox", x, y, w, h, attr, prop, text, next, nil);

}
}