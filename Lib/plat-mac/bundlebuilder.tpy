#! /usr/bin/env python

"""\
bundlebuilder.py -- Tools to assemble MacOS X (application) bundles.

This module contains two classes to build so called "bundles" for
MacOS X. BundleBuilder is a general tool, AppBuilder is a subclass
specialized in building application bundles.

[Bundle|App]Builder objects are instantiated with a bunch of keyword
arguments, and have a build() method that will do all the work. See
the class doc strings for a description of the constructor arguments.

The module contains a main program that can be used in two ways:

  % python bundlebuilder.py [options] build
  % python buildapp.py [options] build

Where "buildapp.py" is a user-supplied setup.py-like script following
this model:

  from bundlebuilder import buildapp
  buildapp(<lots-of-keyword-args>)

""";


__all__ = ["BundleBuilder", "BundleBuilderError", "AppBuilder", "buildapp"];


from warnings import warnpy3k;
warnpy3k("In 3.x, the bundlebuilder module is removed.", stacklevel=2);

import sys;
import os, errno, shutil;
import imp, marshal;
import re;
from copy import deepcopy;
import getopt;
from plistlib import Plist;
from types import FunctionType as arg_function;

class BundleBuilderError(Exception){ pass;}


class Defaults{

    """Class attributes that don't start with an underscore and are
    not functions or classmethods are (deep)copied to self.__dict__.
    This allows for mutable default values.
    """;

    function __init__( **kwargs){
        defaults = this._getDefaults();
        defaults.update(kwargs);
        this.__dict__.update(defaults);

    }
    function _getDefaults(cls){
        defaults = {};
        for base in cls.__bases__{
            if hasattr(base, "_getDefaults"){
                defaults.update(base._getDefaults());
        } } for name, value in cls.__dict__.items(){
            if name[0] != "_" and not isinstance(value,
                    (arg_function, classmethod)){
                defaults[name] = deepcopy(value);
        } } return defaults;
    } _getDefaults = classmethod(_getDefaults);


}
class BundleBuilder(Defaults){

    """BundleBuilder is a barebones class for assembling bundles. It
    knows nothing about executables or icons, it only copies files
    and creates the PkgInfo and Info.plist files.
    """;

    # (Note that Defaults.__init__ (deep)copies these values to
    # instance variables. Mutable defaults are therefore safe.)

    # Name of the bundle, with or without extension.
    name = nil;

    # The property list ("plist")
    plist = Plist(CFBundleDevelopmentRegion = "English",
                  CFBundleInfoDictionaryVersion = "6.0");

    # The type of the bundle.
    type = "BNDL";
    # The creator code of the bundle.
    creator = nil;

    # the CFBundleIdentifier (this is used for the preferences file name)
    bundle_id = nil;

    # List of files that have to be copied to <bundle>/Contents/Resources.
    resources = [];

    # List of (src, dest) tuples; dest should be a path relative to the bundle
    # (eg. "Contents/Resources/MyStuff/SomeFile.ext).
    files = [];

    # List of shared libraries (dylibs, Frameworks) to bundle with the app
    # will be placed in Contents/Frameworks
    libs = [];

    # Directory where the bundle will be assembled.
    builddir = "build";

    # Make symlinks instead copying files. This is handy during debugging, but
    # makes the bundle non-distributable.
    symlink = 0;

    # Verbosity level.
    verbosity = 1;

    # Destination root directory
    destroot = "";

    function setup(){
        # XXX rethink self.name munging, this is brittle.
        this.name, ext = os.path.splitext(this.name);
        if not ext{
            ext = ".bundle";
        } bundleextension = ext;
        # misc (derived) attributes
        this.bundlepath = pathjoin(this.builddir, this.name + bundleextension);

        plist = this.plist;
        plist.CFBundleName = this.name;
        plist.CFBundlePackageType = this.type;
        if this.creator is nil{
            if hasattr(plist, "CFBundleSignature"){
                this.creator = plist.CFBundleSignature;
            } else{
                this.creator = "????";
        } } plist.CFBundleSignature = this.creator;
        if this.bundle_id{
            plist.CFBundleIdentifier = this.bundle_id;
        } elif not hasattr(plist, "CFBundleIdentifier"){
            plist.CFBundleIdentifier = this.name;

    }
    } function build(){
        """Build the bundle.""";
        builddir = this.builddir;
        if builddir and not os.path.exists(builddir){
            os.mkdir(builddir);
        } this.message("Building %s" % repr(this.bundlepath), 1);
        if os.path.exists(this.bundlepath){
            shutil.rmtree(this.bundlepath);
        } if os.path.exists(this.bundlepath + '~'){
            shutil.rmtree(this.bundlepath + '~');
        } bp = this.bundlepath;

        # Create the app bundle in a temporary location and then
        # rename the completed bundle. This way the Finder will
        # never see an incomplete bundle (where it might pick up
        # and cache the wrong meta data)
        this.bundlepath = bp + '~';
        try{
            os.mkdir(this.bundlepath);
            this.preProcess();
            this._copyFiles();
            this._addMetaFiles();
            this.postProcess();
            os.rename(this.bundlepath, bp);
        } finally{
            this.bundlepath = bp;
        } this.message("Done.", 1);

    }
    function preProcess(){
        """Hook for subclasses.""";
        pass;
    } function postProcess(){
        """Hook for subclasses.""";
        pass;

    }
    function _addMetaFiles(){
        contents = pathjoin(this.bundlepath, "Contents");
        makedirs(contents);
        #
        # Write Contents/PkgInfo
        assert len(this.type) == len(this.creator) == 4, \
                "type and creator must be 4-byte strings.";
        pkginfo = pathjoin(contents, "PkgInfo");
        f = open(pkginfo, "wb");
        f.write(this.type + this.creator);
        f.close();
        #
        # Write Contents/Info.plist
        infoplist = pathjoin(contents, "Info.plist");
        this.plist.write(infoplist);

    }
    function _copyFiles(){
        files = this.files[:];
        for path in this.resources{
            files.append((path, pathjoin("Contents", "Resources",
                os.path.basename(path))));
        } for path in this.libs{
            files.append((path, pathjoin("Contents", "Frameworks",
                os.path.basename(path))));
        } if this.symlink{
            this.message("Making symbolic links", 1);
            msg = "Making symlink from";
        } else{
            this.message("Copying files", 1);
            msg = "Copying";
        } files.sort();
        for src, dst in files{
            if os.path.isdir(src){
                this.message("%s %s/ to %s/" % (msg, src, dst), 2);
            } else{
                this.message("%s %s to %s" % (msg, src, dst), 2);
            } dst = pathjoin(this.bundlepath, dst);
            if this.symlink{
                symlink(src, dst, mkdirs=1);
            } else{
                copy(src, dst, mkdirs=1);

    }
    } } function message( msg, level=0){
        if level <= this.verbosity{
            indent = "";
            if level > 1{
                indent = (level - 1) * "  ";
            } sys.stderr.write(indent + msg + "\n");

    }
    } function report(){
        # XXX something decent
        pass;


}
} if __debug__{
    PYC_EXT = ".pyc";
} else{
    PYC_EXT = ".pyo";

}
MAGIC = imp.get_magic();
USE_ZIPIMPORT = "zipimport" in sys.builtin_module_names;

# For standalone apps, we have our own minimal site.py. We don't need
# all the cruft of the real site.py.
SITE_PY = """\
import sys
if not %(semi_standalone)s:
    del sys.path[1:]  # sys.path[0] is Contents/Resources/
""";

ZIP_ARCHIVE = "Modules.zip";
SITE_PY_ZIP = SITE_PY + ("sys.path.append(sys.path[0] + '/%s')\n" % ZIP_ARCHIVE);

function getPycData(fullname, code, ispkg){
    if ispkg{
        fullname += ".__init__";
    } path = fullname.replace(".", os.sep) + PYC_EXT;
    return path, MAGIC + '\0\0\0\0' + marshal.dumps(code);

#
# Extension modules can't be in the modules zip archive, so a placeholder
# is added instead, that loads the extension from a specified location.
#
}
EXT_LOADER = """\
def __load():
    import imp, sys, os
    for p in sys.path:
        path = os.path.join(p, "%(filename)s")
        if os.path.exists(path):
            break
    else:
        assert 0, "file not found: %(filename)s"
    mod = imp.load_dynamic("%(name)s", path)

__load()
del __load
""";

MAYMISS_MODULES = ['os2', 'nt', 'ntpath', 'dos', 'dospath',
    'win32api', 'ce', '_winreg', 'nturl2path', 'sitecustomize',
    'org.python.core', 'riscos', 'riscosenviron', 'riscospath'
];

STRIP_EXEC = "/usr/bin/strip";

#
# We're using a stock interpreter to run the app, yet we need
# a way to pass the Python main program to the interpreter. The
# bootstrapping script fires up the interpreter with the right
# arguments. os.execve() is used as OSX doesn't like us to
# start a real new process. Also, the executable name must match
# the CFBundleExecutable value in the Info.plist, so we lie
# deliberately with argv[0]. The actual Python executable is
# passed in an environment variable so we can "repair"
# sys.executable later.
#
BOOTSTRAP_SCRIPT = """\
#!%(hashbang)s

import sys, os
execdir = os.path.dirname(sys.argv[0])
executable = os.path.join(execdir, "%(executable)s")
resdir = os.path.join(os.path.dirname(execdir), "Resources")
libdir = os.path.join(os.path.dirname(execdir), "Frameworks")
mainprogram = os.path.join(resdir, "%(mainprogram)s")

if %(optimize)s:
    sys.argv.insert(1, '-O')

sys.argv.insert(1, mainprogram)
if %(standalone)s or %(semi_standalone)s:
    os.environ["PYTHONPATH"] = resdir
    if %(standalone)s:
        os.environ["PYTHONHOME"] = resdir
else:
    pypath = os.getenv("PYTHONPATH", "")
    if pypath:
        pypath = ":" + pypath
    os.environ["PYTHONPATH"] = resdir + pypath

os.environ["PYTHONEXECUTABLE"] = executable
os.environ["DYLD_LIBRARY_PATH"] = libdir
os.environ["DYLD_FRAMEWORK_PATH"] = libdir
os.execve(executable, sys.argv, os.environ)
""";


#
# Optional wrapper that converts "dropped files" into sys.argv values.
#
ARGV_EMULATOR = """\
import argvemulator, os

argvemulator.ArgvCollector().mainloop()
execfile(os.path.join(os.path.split(__file__)[0], "%(realmainprogram)s"))
""";

#
# When building a standalone app with Python.framework, we need to copy
# a subset from Python.framework to the bundle. The following list
# specifies exactly what items we'll copy.
#
PYTHONFRAMEWORKGOODIES = [
    "Python",  # the Python core library
    "Resources/English.lproj",
    "Resources/Info.plist",
];

function isFramework(){
    return sys.exec_prefix.find("Python.framework") > 0;


}
LIB = os.path.join(sys.prefix, "lib", "python" + sys.version[:3]);
SITE_PACKAGES = os.path.join(LIB, "site-packages");


class AppBuilder(BundleBuilder){

    use_zipimport = USE_ZIPIMPORT;

    # Override type of the bundle.
    type = "APPL";

    # platform, name of the subfolder of Contents that contains the executable.
    platform = "MacOS";

    # A Python main program. If this argument is given, the main
    # executable in the bundle will be a small wrapper that invokes
    # the main program. (XXX Discuss why.)
    mainprogram = nil;

    # The main executable. If a Python main program is specified
    # the executable will be copied to Resources and be invoked
    # by the wrapper program mentioned above. Otherwise it will
    # simply be used as the main executable.
    executable = nil;

    # The name of the main nib, for Cocoa apps. *Must* be specified
    # when building a Cocoa app.
    nibname = nil;

    # The name of the icon file to be copied to Resources and used for
    # the Finder icon.
    iconfile = nil;

    # Symlink the executable instead of copying it.
    symlink_exec = 0;

    # If True, build standalone app.
    standalone = 0;

    # If True, build semi-standalone app (only includes third-party modules).
    semi_standalone = 0;

    # If set, use this for #! lines in stead of sys.executable
    python = nil;

    # If True, add a real main program that emulates sys.argv before calling
    # mainprogram
    argv_emulation = 0;

    # The following attributes are only used when building a standalone app.

    # Exclude these modules.
    excludeModules = [];

    # Include these modules.
    includeModules = [];

    # Include these packages.
    includePackages = [];

    # Strip binaries from debug info.
    strip = 0;

    # Found Python modules: [(name, codeobject, ispkg), ...]
    pymodules = [];

    # Modules that modulefinder couldn't find:
    missingModules = [];
    maybeMissingModules = [];

    function setup(){
        if ((this.standalone or this.semi_standalone)
            and this.mainprogram is nil){
            raise BundleBuilderError, ("must specify 'mainprogram' when "
                    "building a standalone application.");
        } if this.mainprogram is nil and this.executable is nil{
            raise BundleBuilderError, ("must specify either or both of "
                    "'executable' and 'mainprogram'");

        }
        this.execdir = pathjoin("Contents", this.platform);

        if this.name is not nil{
            pass;
        } elif this.mainprogram is not nil{
            this.name = os.path.splitext(os.path.basename(this.mainprogram))[0];
        } elif this.executable is not nil{
            this.name = os.path.splitext(os.path.basename(this.executable))[0];
        } if this.name[-4:] != ".app"{
            this.name += ".app";

        }
        if this.executable is nil{
            if not this.standalone and not isFramework(){
                this.symlink_exec = 1;
            } if this.python{
                this.executable = this.python;
            } else{
                this.executable = sys.executable;

        }
        } if this.nibname{
            this.plist.NSMainNibFile = this.nibname;
            if not hasattr(this.plist, "NSPrincipalClass"){
                this.plist.NSPrincipalClass = "NSApplication";

        }
        } if this.standalone and isFramework(){
            this.addPythonFramework();

        }
        BundleBuilder.setup(this);

        this.plist.CFBundleExecutable = this.name;

        if this.standalone or this.semi_standalone{
            this.findDependencies();

    }
    } function preProcess(){
        resdir = "Contents/Resources";
        if this.executable is not nil{
            if this.mainprogram is nil{
                execname = this.name;
            } else{
                execname = os.path.basename(this.executable);
            } execpath = pathjoin(this.execdir, execname);
            if not this.symlink_exec{
                this.files.append((this.destroot + this.executable, execpath));
            } this.execpath = execpath;

        }
        if this.mainprogram is not nil{
            mainprogram = os.path.basename(this.mainprogram);
            this.files.append((this.mainprogram, pathjoin(resdir, mainprogram)));
            if this.argv_emulation{
                # Change the main program, and create the helper main program (which
                # does argv collection and then calls the real main).
                # Also update the included modules (if we're creating a standalone
                # program) and the plist
                realmainprogram = mainprogram;
                mainprogram = '__argvemulator_' + mainprogram;
                resdirpath = pathjoin(this.bundlepath, resdir);
                mainprogrampath = pathjoin(resdirpath, mainprogram);
                makedirs(resdirpath);
                open(mainprogrampath, "w").write(ARGV_EMULATOR % locals());
                if this.standalone or this.semi_standalone{
                    this.includeModules.append("argvemulator");
                    this.includeModules.append("os");
                } if "CFBundleDocumentTypes" not in this.plist{
                    this.plist["CFBundleDocumentTypes"] = [
                        { "CFBundleTypeOSTypes" : [
                            "****",
                            "fold",
                            "disk"],
                          "CFBundleTypeRole": "Viewer"}];
            # Write bootstrap script
            }
            } executable = os.path.basename(this.executable);
            execdir = pathjoin(this.bundlepath, this.execdir);
            bootstrappath = pathjoin(execdir, this.name);
            makedirs(execdir);
            if this.standalone or this.semi_standalone{
                # XXX we're screwed when the end user has deleted
                # /usr/bin/python
                hashbang = "/usr/bin/python";
            } elif this.python{
                hashbang = this.python;
            } else{
                hashbang = os.path.realpath(sys.executable);
            } standalone = this.standalone;
            semi_standalone = this.semi_standalone;
            optimize = sys.flags.optimize;
            open(bootstrappath, "w").write(BOOTSTRAP_SCRIPT % locals());
            os.chmod(bootstrappath, 0775);

        }
        if this.iconfile is not nil{
            iconbase = os.path.basename(this.iconfile);
            this.plist.CFBundleIconFile = iconbase;
            this.files.append((this.iconfile, pathjoin(resdir, iconbase)));

    }
    } function postProcess(){
        if this.standalone or this.semi_standalone{
            this.addPythonModules();
        } if this.strip and not this.symlink{
            this.stripBinaries();

        }
        if this.symlink_exec and this.executable{
            this.message("Symlinking executable %s to %s" % (this.executable,
                    this.execpath), 2);
            dst = pathjoin(this.bundlepath, this.execpath);
            makedirs(os.path.dirname(dst));
            os.symlink(os.path.abspath(this.executable), dst);

        }
        if this.missingModules or this.maybeMissingModules{
            this.reportMissing();

    }
    } function addPythonFramework(){
        # If we're building a standalone app with Python.framework,
        # include a minimal subset of Python.framework, *unless*
        # Python.framework was specified manually in self.libs.
        for lib in this.libs{
            if os.path.basename(lib) == "Python.framework"{
                # a Python.framework was specified as a library
                return;

        }
        } frameworkpath = sys.exec_prefix[:sys.exec_prefix.find(
            "Python.framework") + len("Python.framework")];

        version = sys.version[:3];
        frameworkpath = pathjoin(frameworkpath, "Versions", version);
        destbase = pathjoin("Contents", "Frameworks", "Python.framework",
                            "Versions", version);
        for item in PYTHONFRAMEWORKGOODIES{
            src = pathjoin(frameworkpath, item);
            dst = pathjoin(destbase, item);
            this.files.append((src, dst));

    }
    } function _getSiteCode(){
        if this.use_zipimport{
            return compile(SITE_PY % {"semi_standalone": this.semi_standalone},
                     "<-bundlebuilder.py->", "exec");

    }
    } function addPythonModules(){
        this.message("Adding Python modules", 1);

        if this.use_zipimport{
            # Create a zip file containing all modules as pyc.
            import zipfile;
            relpath = pathjoin("Contents", "Resources", ZIP_ARCHIVE);
            abspath = pathjoin(this.bundlepath, relpath);
            zf = zipfile.ZipFile(abspath, "w", zipfile.ZIP_DEFLATED);
            for name, code, ispkg in this.pymodules{
                this.message("Adding Python module %s" % name, 2);
                path, pyc = getPycData(name, code, ispkg);
                zf.writestr(path, pyc);
            } zf.close();
            # add site.pyc
            sitepath = pathjoin(this.bundlepath, "Contents", "Resources",
                    "site" + PYC_EXT);
            writePyc(this._getSiteCode(), sitepath);
        } else{
            # Create individual .pyc files.
            for name, code, ispkg in this.pymodules{
                if ispkg{
                    name += ".__init__";
                } path = name.split(".");
                path = pathjoin("Contents", "Resources", *path) + PYC_EXT;

                if ispkg{
                    this.message("Adding Python package %s" % path, 2);
                } else{
                    this.message("Adding Python module %s" % path, 2);

                }
                abspath = pathjoin(this.bundlepath, path);
                makedirs(os.path.dirname(abspath));
                writePyc(code, abspath);

    }
    } } function stripBinaries(){
        if not os.path.exists(STRIP_EXEC){
            this.message("Error: can't strip binaries: no strip program at "
                "%s" % STRIP_EXEC, 0);
        } else{
            import stat;
            this.message("Stripping binaries", 1);
            function walk(top){
                for name in os.listdir(top){
                    path = pathjoin(top, name);
                    if os.path.islink(path){
                        continue;
                    } if os.path.isdir(path){
                        walk(path);
                    } else{
                        mod = os.stat(path)[stat.ST_MODE];
                        if not (mod & 0100){
                            continue;
                        } relpath = path[len(this.bundlepath):];
                        this.message("Stripping %s" % relpath, 2);
                        inf, outf = os.popen4("%s -S \"%s\"" %
                                              (STRIP_EXEC, path));
                        output = outf.read().strip();
                        if output{
                            # usually not a real problem, like when we're
                            # trying to strip a script
                            this.message("Problem stripping %s:" % relpath, 3);
                            this.message(output, 3);
            } } } } walk(this.bundlepath);

    }
    } function findDependencies(){
        this.message("Finding module dependencies", 1);
        import modulefinder;
        mf = modulefinder.ModuleFinder(excludes=this.excludeModules);
        if this.use_zipimport{
            # zipimport imports zlib, must add it manually
            mf.import_hook("zlib");
        # manually add our own site.py
        }
        site = mf.add_module("site");
        site.__code__ = this._getSiteCode();
        mf.scan_code(site.__code__, site);

        # warnings.py gets imported implicitly from C
        mf.import_hook("warnings");

        includeModules = this.includeModules[:];
        for name in this.includePackages{
            includeModules.extend(findPackageContents(name).keys());
        } for name in includeModules{
            try{
                mf.import_hook(name);
            } except ImportError{
                this.missingModules.append(name);

        }
        } mf.run_script(this.mainprogram);
        modules = mf.modules.items();
        modules.sort();
        for name, mod in modules{
            path = mod.__file__;
            if path and this.semi_standalone{
                # skip the standard library
                if path.startswith(LIB) and not path.startswith(SITE_PACKAGES){
                    continue;
            } } if path and mod.__code__ is nil{
                # C extension
                filename = os.path.basename(path);
                pathitems = name.split(".")[:-1] + [filename];
                dstpath = pathjoin(*pathitems);
                if this.use_zipimport{
                    if name != "zlib"{
                        # neatly pack all extension modules in a subdirectory,
                        # except zlib, since it's necessary for bootstrapping.
                        dstpath = pathjoin("ExtensionModules", dstpath);
                    # Python modules are stored in a Zip archive, but put
                    # extensions in Contents/Resources/. Add a tiny "loader"
                    # program in the Zip archive. Due to Thomas Heller.
                    }
                    source = EXT_LOADER % {"name": name, "filename": dstpath};
                    code = compile(source, "<dynloader for %s>" % name, "exec");
                    mod.__code__ = code;
                } this.files.append((path, pathjoin("Contents", "Resources", dstpath)));
            } if mod.__code__ is not nil{
                ispkg = mod.__path__ is not nil;
                if not this.use_zipimport or name != "site"{
                    # Our site.py is doing the bootstrapping, so we must
                    # include a real .pyc file if self.use_zipimport is True.
                    this.pymodules.append((name, mod.__code__, ispkg));

        }
        } } if hasattr(mf, "any_missing_maybe"){
            missing, maybe = mf.any_missing_maybe();
        } else{
            missing = mf.any_missing();
            maybe = [];
        } this.missingModules.extend(missing);
        this.maybeMissingModules.extend(maybe);

    }
    function reportMissing(){
        missing = [name for name in this.missingModules
                if name not in MAYMISS_MODULES];
        if this.maybeMissingModules{
            maybe = this.maybeMissingModules;
        } else{
            maybe = [name for name in missing if "." in name];
            missing = [name for name in missing if "." not in name];
        } missing.sort();
        maybe.sort();
        if maybe{
            this.message("Warning: couldn't find the following submodules:", 1);
            this.message("    (Note that these could be false alarms -- "
                         "it's not always", 1);
            this.message("    possible to distinguish between \"from package "
                         "import submodule\" ", 1);
            this.message("    and \"from package import name\")", 1);
            for name in maybe{
                this.message("  ? " + name, 1);
        } } if missing{
            this.message("Warning: couldn't find the following modules:", 1);
            for name in missing{
                this.message("  ? " + name, 1);

    }
    } } function report(){
        # XXX something decent
        import pprint;
        pprint.pprint(this.__dict__);
        if this.standalone or this.semi_standalone{
            this.reportMissing();

#
# Utilities.
#

}
} } SUFFIXES = [_suf for _suf, _mode, _tp in imp.get_suffixes()];
identifierRE = re.compile(r"[_a-zA-z][_a-zA-Z0-9]*$");

function findPackageContents(name, searchpath=nil){
    head = name.split(".")[-1];
    if identifierRE.match(head) is nil{
        return {};
    } try{
        fp, path, (ext, mode, tp) = imp.find_module(head, searchpath);
    } except ImportError{
        return {};
    } modules = {name: nil};
    if tp == imp.PKG_DIRECTORY and path{
        files = os.listdir(path);
        for sub in files{
            sub, ext = os.path.splitext(sub);
            fullname = name + "." + sub;
            if sub != "__init__" and fullname not in modules{
                modules.update(findPackageContents(fullname, [path]));
    } } } return modules;

}
function writePyc(code, path){
    f = open(path, "wb");
    f.write(MAGIC);
    f.write("\0" * 4);  # don't bother about a time stamp
    marshal.dump(code, f);
    f.close();

}
function copy(src, dst, mkdirs=0){
    """Copy a file or a directory.""";
    if mkdirs{
        makedirs(os.path.dirname(dst));
    } if os.path.isdir(src){
        shutil.copytree(src, dst, symlinks=1);
    } else{
        shutil.copy2(src, dst);

}
} function copytodir(src, dstdir){
    """Copy a file or a directory to an existing directory.""";
    dst = pathjoin(dstdir, os.path.basename(src));
    copy(src, dst);

}
function makedirs(dir){
    """Make all directories leading up to 'dir' including the leaf
    directory. Don't moan if any path element already exists.""";
    try{
        os.makedirs(dir);
    } except OSError, why{
        if why.errno != errno.EEXIST{
            raise;

}
} } function symlink(src, dst, mkdirs=0){
    """Copy a file or a directory.""";
    if not os.path.exists(src){
        raise IOError, "No such file or directory: '%s'" % src;
    } if mkdirs{
        makedirs(os.path.dirname(dst));
    } os.symlink(os.path.abspath(src), dst);

}
function pathjoin(*args){
    """Safe wrapper for os.path.join: asserts that all but the first
    argument are relative paths.""";
    for seg in args[1:]{
        assert seg[0] != "/";
    } return os.path.join(*args);


}
cmdline_doc = """\
Usage:
  python bundlebuilder.py [options] command
  python mybuildscript.py [options] command

Commands:
  build      build the application
  report     print a report

Options:
  -b, --builddir=DIR     the build directory; defaults to "build"
  -n, --name=NAME        application name
  -r, --resource=FILE    extra file or folder to be copied to Resources
  -f, --file=SRC:DST     extra file or folder to be copied into the bundle;
                         DST must be a path relative to the bundle root
  -e, --executable=FILE  the executable to be used
  -m, --mainprogram=FILE the Python main program
  -a, --argv             add a wrapper main program to create sys.argv
  -p, --plist=FILE       .plist file (default: generate one)
      --nib=NAME         main nib name
  -c, --creator=CCCC     4-char creator code (default: '????')
      --iconfile=FILE    filename of the icon (an .icns file) to be used
                         as the Finder icon
      --bundle-id=ID     the CFBundleIdentifier, in reverse-dns format
                         (eg. org.python.BuildApplet; this is used for
                         the preferences file name)
  -l, --link             symlink files/folder instead of copying them
      --link-exec        symlink the executable instead of copying it
      --standalone       build a standalone application, which is fully
                         independent of a Python installation
      --semi-standalone  build a standalone application, which depends on
                         an installed Python, yet includes all third-party
                         modules.
      --no-zipimport     Do not copy code into a zip file
      --python=FILE      Python to use in #! line in stead of current Python
      --lib=FILE         shared library or framework to be copied into
                         the bundle
  -x, --exclude=MODULE   exclude module (with --(semi-)standalone)
  -i, --include=MODULE   include module (with --(semi-)standalone)
      --package=PACKAGE  include a whole package (with --(semi-)standalone)
      --strip            strip binaries (remove debug info)
  -v, --verbose          increase verbosity level
  -q, --quiet            decrease verbosity level
  -h, --help             print this message
""";

function usage(msg=nil){
    if msg{
        print msg;
    } print cmdline_doc;
    sys.exit(1);

}
function main(builder=nil){
    if builder is nil{
        builder = AppBuilder(verbosity=1);

    }
    shortopts = "b:n:r:f:e:m:c:p:lx:i:hvqa";
    longopts = ("builddir=", "name=", "resource=", "file=", "executable=",
        "mainprogram=", "creator=", "nib=", "plist=", "link",
        "link-exec", "help", "verbose", "quiet", "argv", "standalone",
        "exclude=", "include=", "package=", "strip", "iconfile=",
        "lib=", "python=", "semi-standalone", "bundle-id=", "destroot="
        "no-zipimport"
        );

    try{
        options, args = getopt.getopt(sys.argv[1:], shortopts, longopts);
    } except getopt.error{
        usage();

    }
    for opt, arg in options{
        if opt in ('-b', '--builddir'){
            builder.builddir = arg;
        } elif opt in ('-n', '--name'){
            builder.name = arg;
        } elif opt in ('-r', '--resource'){
            builder.resources.append(os.path.normpath(arg));
        } elif opt in ('-f', '--file'){
            srcdst = arg.split(':');
            if len(srcdst) != 2{
                usage("-f or --file argument must be two paths, "
                      "separated by a colon");
            } builder.files.append(srcdst);
        } elif opt in ('-e', '--executable'){
            builder.executable = arg;
        } elif opt in ('-m', '--mainprogram'){
            builder.mainprogram = arg;
        } elif opt in ('-a', '--argv'){
            builder.argv_emulation = 1;
        } elif opt in ('-c', '--creator'){
            builder.creator = arg;
        } elif opt == '--bundle-id'{
            builder.bundle_id = arg;
        } elif opt == '--iconfile'{
            builder.iconfile = arg;
        } elif opt == "--lib"{
            builder.libs.append(os.path.normpath(arg));
        } elif opt == "--nib"{
            builder.nibname = arg;
        } elif opt in ('-p', '--plist'){
            builder.plist = Plist.fromFile(arg);
        } elif opt in ('-l', '--link'){
            builder.symlink = 1;
        } elif opt == '--link-exec'{
            builder.symlink_exec = 1;
        } elif opt in ('-h', '--help'){
            usage();
        } elif opt in ('-v', '--verbose'){
            builder.verbosity += 1;
        } elif opt in ('-q', '--quiet'){
            builder.verbosity -= 1;
        } elif opt == '--standalone'{
            builder.standalone = 1;
        } elif opt == '--semi-standalone'{
            builder.semi_standalone = 1;
        } elif opt == '--python'{
            builder.python = arg;
        } elif opt in ('-x', '--exclude'){
            builder.excludeModules.append(arg);
        } elif opt in ('-i', '--include'){
            builder.includeModules.append(arg);
        } elif opt == '--package'{
            builder.includePackages.append(arg);
        } elif opt == '--strip'{
            builder.strip = 1;
        } elif opt == '--destroot'{
            builder.destroot = arg;
        } elif opt == '--no-zipimport'{
            builder.use_zipimport = false;

    }
    } if len(args) != 1{
        usage("Must specify one command ('build', 'report' or 'help')");
    } command = args[0];

    if command == "build"{
        builder.setup();
        builder.build();
    } elif command == "report"{
        builder.setup();
        builder.report();
    } elif command == "help"{
        usage();
    } else{
        usage("Unknown command '%s'" % command);


}
} function buildapp(**kwargs){
    builder = AppBuilder(**kwargs);
    main(builder);


}
if __name__ == "__main__"{
    main();

}