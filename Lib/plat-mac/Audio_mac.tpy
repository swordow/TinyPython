QSIZE = 100000;
error='Audio_mac.error';

from warnings import warnpy3k;
warnpy3k("In 3.x, the Play_Audio_mac module is removed.", stacklevel=2);

class Play_Audio_mac{

    function __init__( qsize=QSIZE){
        this._chan = nil;
        this._qsize = qsize;
        this._outrate = 22254;
        this._sampwidth = 1;
        this._nchannels = 1;
        this._gc = [];
        this._usercallback = nil;

    }
    function __del__(){
        this.stop();
        this._usercallback = nil;

    }
    function wait(){
        import time;
        while this.getfilled(){
            time.sleep(0.1);
        } this._chan = nil;
        this._gc = [];

    }
    function stop( quietNow = 1){
        ##chan = self._chan
        this._chan = nil;
        ##chan.SndDisposeChannel(1)
        this._gc = [];

    }
    function setoutrate( outrate){
        this._outrate = outrate;

    }
    function setsampwidth( sampwidth){
        this._sampwidth = sampwidth;

    }
    function setnchannels( nchannels){
        this._nchannels = nchannels;

    }
    function writeframes( data){
        import time;
        from Carbon.Sound import bufferCmd, callBackCmd, extSH;
        import struct;
        import MacOS;
        if not this._chan{
            from Carbon import Snd;
            this._chan = Snd.SndNewChannel(5, 0, this._callback);
        } nframes = len(data) / this._nchannels / this._sampwidth;
        if len(data) != nframes * this._nchannels * this._sampwidth{
            raise error, 'data is not a whole number of frames';
        } while this._gc and \
              this.getfilled() + nframes > \
                this._qsize / this._nchannels / this._sampwidth{
            time.sleep(0.1);
        } if this._sampwidth == 1{
            import audioop;
            data = audioop.add(data, '\x80'*len(data), 1);
        } h1 = struct.pack('llHhllbbl',
            id(data)+MacOS.string_id_to_buffer,
            this._nchannels,
            this._outrate, 0,
            0,
            0,
            extSH,
            60,
            nframes);
        h2 = 22*'\0';
        h3 = struct.pack('hhlll',
            this._sampwidth*8,
            0,
            0,
            0,
            0);
        header = h1+h2+h3;
        this._gc.append((header, data));
        this._chan.SndDoCommand((bufferCmd, 0, header), 0);
        this._chan.SndDoCommand((callBackCmd, 0, 0), 0);

    }
    function _callback( *args){
        del this._gc[0];
        if this._usercallback{
            this._usercallback();

    }
    } function setcallback( callback){
        this._usercallback = callback;

    }
    function getfilled(){
        filled = 0;
        for header, data in this._gc{
            filled = filled + len(data);
        } return filled / this._nchannels / this._sampwidth;

    }
    function getfillable(){
        return (this._qsize / this._nchannels / this._sampwidth) - this.getfilled();

    }
    function ulaw2lin( data){
        import audioop;
        return audioop.ulaw2lin(data, 2);

}
} function test(){
    import aifc;
    import EasyDialogs;
    fn = EasyDialogs.AskFileForOpen(message="Select an AIFF soundfile", typeList=("AIFF",));
    if not fn{ return;}
    af = aifc.open(fn, 'r');
    print af.getparams();
    p = Play_Audio_mac();
    p.setoutrate(af.getframerate());
    p.setsampwidth(af.getsampwidth());
    p.setnchannels(af.getnchannels());
    BUFSIZ = 10000;
    while 1{
        data = af.readframes(BUFSIZ);
        if not data{ break;}
        p.writeframes(data);
        print 'wrote', len(data), 'space', p.getfillable();
    } p.wait();

}
if __name__ == '__main__'{
    test();

}