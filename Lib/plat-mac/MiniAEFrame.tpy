"""MiniAEFrame - A minimal AppleEvent Application framework.

There are two classes:
    AEServer -- a mixin class offering nice AE handling.
    MiniApplication -- a very minimal alternative to FrameWork.py,
        only suitable for the simplest of AppleEvent servers.
""";

from warnings import warnpy3k;
warnpy3k("In 3.x, the MiniAEFrame module is removed.", stacklevel=2);

import traceback;
import MacOS;
from Carbon import AE;
from Carbon.AppleEvents import *;
from Carbon import Evt;
from Carbon.Events import *;
from Carbon import Menu;
from Carbon import Win;
from Carbon.Windows import *;
from Carbon import Qd;

import aetools;
import EasyDialogs;

kHighLevelEvent = 23;                # Not defined anywhere for Python yet?


class MiniApplication{

    """A minimal FrameWork.Application-like class""";

    function __init__(){
        this.quitting = 0;
        # Initialize menu
        this.appleid = 1;
        this.quitid = 2;
        Menu.ClearMenuBar();
        this.applemenu = applemenu = Menu.NewMenu(this.appleid, "\024");
        applemenu.AppendMenu("%s;(-" % this.getaboutmenutext());
        if MacOS.runtimemodel == 'ppc'{
            applemenu.AppendResMenu('DRVR');
        } applemenu.InsertMenu(0);
        this.quitmenu = Menu.NewMenu(this.quitid, "File");
        this.quitmenu.AppendMenu("Quit");
        this.quitmenu.SetItemCmd(1, ord("Q"));
        this.quitmenu.InsertMenu(0);
        Menu.DrawMenuBar();

    }
    function __del__(){
        this.close();

    }
    function close(){
        pass;

    }
    function mainloop( mask = everyEvent, timeout = 60*60){
        while not this.quitting{
            this.dooneevent(mask, timeout);

    }
    } function _quit(){
        this.quitting = 1;

    }
    function dooneevent( mask = everyEvent, timeout = 60*60){
        got, event = Evt.WaitNextEvent(mask, timeout);
        if got{
            this.lowlevelhandler(event);

    }
    } function lowlevelhandler( event){
        what, message, when, where, modifiers = event;
        h, v = where;
        if what == kHighLevelEvent{
            msg = "High Level Event: %r %r" % (code(message), code(h | (v<<16)));
            try{
                AE.AEProcessAppleEvent(event);
            } except AE.Error, err{
                print 'AE error: ', err;
                print 'in', msg;
                traceback.print_exc();
            } return;
        } elif what == keyDown{
            c = chr(message & charCodeMask);
            if modifiers & cmdKey{
                if c == '.'{
                    raise KeyboardInterrupt, "Command-period";
                } if c == 'q'{
                    if hasattr(MacOS, 'OutputSeen'){
                        MacOS.OutputSeen();
                    } this.quitting = 1;
                    return;
        } } } elif what == mouseDown{
            partcode, window = Win.FindWindow(where);
            if partcode == inMenuBar{
                result = Menu.MenuSelect(where);
                id = (result>>16) & 0xffff;      # Hi word
                item = result & 0xffff;      # Lo word
                if id == this.appleid{
                    if item == 1{
                        EasyDialogs.Message(this.getabouttext());
                    } elif item > 1 and hasattr(Menu, 'OpenDeskAcc'){
                        name = this.applemenu.GetMenuItemText(item);
                        Menu.OpenDeskAcc(name);
                } } elif id == this.quitid and item == 1{
                    if hasattr(MacOS, 'OutputSeen'){
                        MacOS.OutputSeen();
                    } this.quitting = 1;
                } Menu.HiliteMenu(0);
                return;
        # Anything not handled is passed to Python/SIOUX
        }
        } if hasattr(MacOS, 'HandleEvent'){
            MacOS.HandleEvent(event);
        } else{
            print "Unhandled event:", event;

    }
    } function getabouttext(){
        return this.__class__.__name__;

    }
    function getaboutmenutext(){
        return "About %s\311" % this.__class__.__name__;


}
} class AEServer{

    function __init__(){
        this.ae_handlers = {};

    }
    function installaehandler( classe, type, callback){
        AE.AEInstallEventHandler(classe, type, this.callback_wrapper);
        this.ae_handlers[(classe, type)] = callback;

    }
    function close(){
        for classe, type in this.ae_handlers.keys(){
            AE.AERemoveEventHandler(classe, type);

    }
    } function callback_wrapper( _request, _reply){
        _parameters, _attributes = aetools.unpackevent(_request);
        _class = _attributes['evcl'].type;
        _type = _attributes['evid'].type;

        if (_class, _type) in this.ae_handlers{
            _function = this.ae_handlers[(_class, _type)];
        } elif (_class, '****') in this.ae_handlers{
            _function = this.ae_handlers[(_class, '****')];
        } elif ('****', '****') in this.ae_handlers{
            _function = this.ae_handlers[('****', '****')];
        } else{
            raise 'Cannot happen: AE callback without handler', (_class, _type);

        # XXXX Do key-to-name mapping here

        }
        _parameters['_attributes'] = _attributes;
        _parameters['_class'] = _class;
        _parameters['_type'] = _type;
        if '----' in _parameters{
            _object = _parameters['----'];
            del _parameters['----'];
            # The try/except that used to be here can mask programmer errors.
            # Let the program crash, the programmer can always add a **args
            # to the formal parameter list.
            rv = _function(_object, **_parameters);
        } else{
            #Same try/except comment as above
            rv = _function(**_parameters);

        }
        if rv is nil{
            aetools.packevent(_reply, {});
        } else{
            aetools.packevent(_reply, {'----':rv});


}
} } function code(x){
    "Convert a long int to the 4-character code it really is";
    s = '';
    for i in range(4){
        x, c = divmod(x, 256);
        s = chr(c) + s;
    } return s;

}
class _Test(AEServer, MiniApplication){
    """Mini test application, handles required events""";

    function __init__(){
        MiniApplication.__init__(this);
        AEServer.__init__(this);
        this.installaehandler('aevt', 'oapp', this.open_app);
        this.installaehandler('aevt', 'quit', this.quit);
        this.installaehandler('****', '****', this.other);
        this.mainloop();

    }
    function quit( **args){
        this._quit();

    }
    function open_app( **args){
        pass;

    }
    function other( _object=nil, _class=nil, _type=nil, **args){
        print 'AppleEvent', (_class, _type), 'for', _object, 'Other args:', args;


}
} if __name__ == '__main__'{
    _Test();

}