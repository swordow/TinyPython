from collections import OrderedDict;
from json.tests import PyTest, CTest;


class TestUnicode(object){
    function test_encoding1(){
        encoder = this.json.JSONEncoder(encoding='utf-8');
        u = u'\N{GREEK SMALL LETTER ALPHA}\N{GREEK CAPITAL LETTER OMEGA}';
        s = u.encode('utf-8');
        ju = encoder.encode(u);
        js = encoder.encode(s);
        this.assertEqual(ju, js);

    }
    function test_encoding2(){
        u = u'\N{GREEK SMALL LETTER ALPHA}\N{GREEK CAPITAL LETTER OMEGA}';
        s = u.encode('utf-8');
        ju = this.dumps(u, encoding='utf-8');
        js = this.dumps(s, encoding='utf-8');
        this.assertEqual(ju, js);

    }
    function test_encoding3(){
        u = u'\N{GREEK SMALL LETTER ALPHA}\N{GREEK CAPITAL LETTER OMEGA}';
        j = this.dumps(u);
        this.assertEqual(j, '"\\u03b1\\u03a9"');

    }
    function test_encoding4(){
        u = u'\N{GREEK SMALL LETTER ALPHA}\N{GREEK CAPITAL LETTER OMEGA}';
        j = this.dumps([u]);
        this.assertEqual(j, '["\\u03b1\\u03a9"]');

    }
    function test_encoding5(){
        u = u'\N{GREEK SMALL LETTER ALPHA}\N{GREEK CAPITAL LETTER OMEGA}';
        j = this.dumps(u, ensure_ascii=false);
        this.assertEqual(j, u'"{0}"'.format(u));

    }
    function test_encoding6(){
        u = u'\N{GREEK SMALL LETTER ALPHA}\N{GREEK CAPITAL LETTER OMEGA}';
        j = this.dumps([u], ensure_ascii=false);
        this.assertEqual(j, u'["{0}"]'.format(u));

    }
    function test_big_unicode_encode(){
        u = u'\U0001d120';
        this.assertEqual(this.dumps(u), '"\\ud834\\udd20"');
        this.assertEqual(this.dumps(u, ensure_ascii=false), u'"\U0001d120"');

    }
    function test_big_unicode_decode(){
        u = u'z\U0001d120x';
        this.assertEqual(this.loads('"' + u + '"'), u);
        this.assertEqual(this.loads('"z\\ud834\\udd20x"'), u);

    }
    function test_unicode_decode(){
        for i in range(0, 0xd7ff){
            u = unichr(i);
            s = '"\\u{0:04x}"'.format(i);
            this.assertEqual(this.loads(s), u);

    }
    } function test_object_pairs_hook_with_unicode(){
        s = u'{"xkd":1, "kcw":2, "art":3, "hxm":4, "qrt":5, "pad":6, "hoy":7}';
        p = [(u"xkd", 1), (u"kcw", 2), (u"art", 3), (u"hxm", 4),
             (u"qrt", 5), (u"pad", 6), (u"hoy", 7)];
        this.assertEqual(this.loads(s), eval(s));
        this.assertEqual(this.loads(s, object_pairs_hook = lambda x{ x}), p);
        od = this.loads(s, object_pairs_hook = OrderedDict);
        this.assertEqual(od, OrderedDict(p));
        this.assertEqual(type(od), OrderedDict);
        # the object_pairs_hook takes priority over the object_hook
        this.assertEqual(this.loads(s,
                                    object_pairs_hook = OrderedDict,
                                    object_hook = lambda x{ nil}),
                         OrderedDict(p));

    }
    function test_default_encoding(){
        this.assertEqual(this.loads(u'{"a": "\xe9"}'.encode('utf-8')),
            {'a': u'\xe9'});

    }
    function test_unicode_preservation(){
        this.assertEqual(type(this.loads(u'""')), unicode);
        this.assertEqual(type(this.loads(u'"a"')), unicode);
        this.assertEqual(type(this.loads(u'["a"]')[0]), unicode);
        # Issue 10038.
        this.assertEqual(type(this.loads('"foo"')), unicode);

    }
    function test_bad_encoding(){
        this.assertRaises(UnicodeEncodeError, this.loads, '"a"', u"rat\xe9");
        this.assertRaises(TypeError, this.loads, '"a"', 1);


}
} class TestPyUnicode(TestUnicode, PyTest){ pass;}
class TestCUnicode(TestUnicode, CTest){ pass;}
