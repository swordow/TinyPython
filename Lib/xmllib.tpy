"""A parser for XML, using the derived class as static DTD.""";

# Author: Sjoerd Mullender.

import re;
import string;

import warnings;
warnings.warn("The xmllib module is obsolete.  Use xml.sax instead.",
              DeprecationWarning, 2);
del warnings;

version = '0.3';

class Error(RuntimeError){
    pass;

# Regular expressions used for parsing

}
_S = '[ \t\r\n]+';                       # white space
_opS = '[ \t\r\n]*';                     # optional white space
_Name = '[a-zA-Z_:][-a-zA-Z0-9._:]*';    # valid XML name
_QStr = "(?:'[^']*'|\"[^\"]*\")";        # quoted XML string
illegal = re.compile('[^\t\r\n -\176\240-\377]'); # illegal chars in content
interesting = re.compile('[]&<]');

amp = re.compile('&');
ref = re.compile('&(' + _Name + '|#[0-9]+|#x[0-9a-fA-F]+)[^-a-zA-Z0-9._:]');
entityref = re.compile('&(?P<name>' + _Name + ')[^-a-zA-Z0-9._:]');
charref = re.compile('&#(?P<char>[0-9]+[^0-9]|x[0-9a-fA-F]+[^0-9a-fA-F])');
space = re.compile(_S + '$');
newline = re.compile('\n');

attrfind = re.compile(
    _S + '(?P<name>' + _Name + ')'
    '(' + _opS + '=' + _opS +
    '(?P<value>'+_QStr+'|[-a-zA-Z0-9.:+*%?!\(\)_#=~]+))?');
starttagopen = re.compile('<' + _Name);
starttagend = re.compile(_opS + '(?P<slash>/?)>');
starttagmatch = re.compile('<(?P<tagname>'+_Name+')'
                      '(?P<attrs>(?:'+attrfind.pattern+')*)'+
                      starttagend.pattern);
endtagopen = re.compile('</');
endbracket = re.compile(_opS + '>');
endbracketfind = re.compile('(?:[^>\'"]|'+_QStr+')*>');
tagfind = re.compile(_Name);
cdataopen = re.compile(r'<!\[CDATA\[');
cdataclose = re.compile(r'\]\]>');
# this matches one of the following:
# SYSTEM SystemLiteral
# PUBLIC PubidLiteral SystemLiteral
_SystemLiteral = '(?P<%s>'+_QStr+')';
_PublicLiteral = '(?P<%s>"[-\'\(\)+,./:=?;!*#@$_%% \n\ra-zA-Z0-9]*"|' \
                        "'[-\(\)+,./:=?;!*#@$_%% \n\ra-zA-Z0-9]*')";
_ExternalId = '(?:SYSTEM|' \
                 'PUBLIC'+_S+_PublicLiteral%'pubid'+ \
              ')'+_S+_SystemLiteral%'syslit';
doctype = re.compile('<!DOCTYPE'+_S+'(?P<name>'+_Name+')'
                     '(?:'+_S+_ExternalId+')?'+_opS);
xmldecl = re.compile('<\?xml'+_S+
                     'version'+_opS+'='+_opS+'(?P<version>'+_QStr+')'+
                     '(?:'+_S+'encoding'+_opS+'='+_opS+
                        "(?P<encoding>'[A-Za-z][-A-Za-z0-9._]*'|"
                        '"[A-Za-z][-A-Za-z0-9._]*"))?'
                     '(?:'+_S+'standalone'+_opS+'='+_opS+
                        '(?P<standalone>\'(?:yes|no)\'|"(?:yes|no)"))?'+
                     _opS+'\?>');
procopen = re.compile(r'<\?(?P<proc>' + _Name + ')' + _opS);
procclose = re.compile(_opS + r'\?>');
commentopen = re.compile('<!--');
commentclose = re.compile('-->');
doubledash = re.compile('--');
attrtrans = string.maketrans(' \r\n\t', '    ');

# definitions for XML namespaces
_NCName = '[a-zA-Z_][-a-zA-Z0-9._]*';    # XML Name, minus the ":"
ncname = re.compile(_NCName + '$');
qname = re.compile('(?:(?P<prefix>' + _NCName + '):)?' # optional prefix
                   '(?P<local>' + _NCName + ')$');

xmlns = re.compile('xmlns(?::(?P<ncname>'+_NCName+'))?$');

# XML parser base class -- find tags and call handler functions.
# Usage: p = XMLParser(); p.feed(data); ...; p.close().
# The dtd is defined by deriving a class which defines methods with
# special names to handle tags: start_foo and end_foo to handle <foo>
# and </foo>, respectively.  The data between tags is passed to the
# parser by calling self.handle_data() with some data as argument (the
# data may be split up in arbitrary chunks).

class XMLParser{
    attributes = {};                     # default, to be overridden
    elements = {};                       # default, to be overridden

    # parsing options, settable using keyword args in __init__
    __accept_unquoted_attributes = 0;
    __accept_missing_endtag_name = 0;
    __map_case = 0;
    __accept_utf8 = 0;
    __translate_attribute_references = 1;

    # Interface -- initialize and reset this instance
    function __init__( **kw){
        this.__fixed = 0;
        if 'accept_unquoted_attributes' in kw{
            this.__accept_unquoted_attributes = kw['accept_unquoted_attributes'];
        } if 'accept_missing_endtag_name' in kw{
            this.__accept_missing_endtag_name = kw['accept_missing_endtag_name'];
        } if 'map_case' in kw{
            this.__map_case = kw['map_case'];
        } if 'accept_utf8' in kw{
            this.__accept_utf8 = kw['accept_utf8'];
        } if 'translate_attribute_references' in kw{
            this.__translate_attribute_references = kw['translate_attribute_references'];
        } this.reset();

    }
    function __fixelements(){
        this.__fixed = 1;
        this.elements = {};
        this.__fixdict(this.__dict__);
        this.__fixclass(this.__class__);

    }
    function __fixclass( kl){
        this.__fixdict(kl.__dict__);
        for k in kl.__bases__{
            this.__fixclass(k);

    }
    } function __fixdict( dict){
        for key in dict.keys(){
            if key[:6] == 'start_'{
                tag = key[6:];
                start, end = this.elements.get(tag, (nil, nil));
                if start is nil{
                    this.elements[tag] = getattr(this, key), end;
            } } elif key[:4] == 'end_'{
                tag = key[4:];
                start, end = this.elements.get(tag, (nil, nil));
                if end is nil{
                    this.elements[tag] = start, getattr(this, key);

    # Interface -- reset this instance.  Loses all unprocessed data
    }
    } } } function reset(){
        this.rawdata = '';
        this.stack = [];
        this.nomoretags = 0;
        this.literal = 0;
        this.lineno = 1;
        this.__at_start = 1;
        this.__seen_doctype = nil;
        this.__seen_starttag = 0;
        this.__use_namespaces = 0;
        this.__namespaces = {'xml':nil};   # xml is implicitly declared
        # backward compatibility hack: if elements not overridden,
        # fill it in ourselves
        if this.elements is XMLParser.elements{
            this.__fixelements();

    # For derived classes only -- enter literal mode (CDATA) till EOF
    }
    } function setnomoretags(){
        this.nomoretags = this.literal = 1;

    # For derived classes only -- enter literal mode (CDATA)
    }
    function setliteral( *args){
        this.literal = 1;

    # Interface -- feed some data to the parser.  Call this as
    # often as you want, with as little or as much text as you
    # want (may include '\n').  (This just saves the text, all the
    # processing is done by goahead().)
    }
    function feed( data){
        this.rawdata = this.rawdata + data;
        this.goahead(0);

    # Interface -- handle the remaining data
    }
    function close(){
        this.goahead(1);
        if this.__fixed{
            this.__fixed = 0;
            # remove self.elements so that we don't leak
            del this.elements;

    # Interface -- translate references
    }
    } function translate_references( data, all = 1){
        if not this.__translate_attribute_references{
            return data;
        } i = 0;
        while 1{
            res = amp.search(data, i);
            if res is nil{
                return data;
            } s = res.start(0);
            res = ref.match(data, s);
            if res is nil{
                this.syntax_error("bogus `&'");
                i = s+1;
                continue;
            } i = res.end(0);
            str = res.group(1);
            rescan = 0;
            if str[0] == '#'{
                if str[1] == 'x'{
                    str = chr(int(str[2:], 16));
                } else{
                    str = chr(int(str[1:]));
                } if data[i - 1] != ';'{
                    this.syntax_error("`;' missing after char reference");
                    i = i-1;
            } } elif all{
                if str in this.entitydefs{
                    str = this.entitydefs[str];
                    rescan = 1;
                } elif data[i - 1] != ';'{
                    this.syntax_error("bogus `&'");
                    i = s + 1; # just past the &
                    continue;
                } else{
                    this.syntax_error("reference to unknown entity `&%s;'" % str);
                    str = '&' + str + ';';
            } } elif data[i - 1] != ';'{
                this.syntax_error("bogus `&'");
                i = s + 1; # just past the &
                continue;

            # when we get here, str contains the translated text and i points
            # to the end of the string that is to be replaced
            }
            data = data[:s] + str + data[i:];
            if rescan{
                i = s;
            } else{
                i = s + len(str);

    # Interface - return a dictionary of all namespaces currently valid
    }
    } } function getnamespace(){
        nsdict = {};
        for t, d, nst in this.stack{
            nsdict.update(d);
        } return nsdict;

    # Internal -- handle data as far as reasonable.  May leave state
    # and data to be processed by a subsequent call.  If 'end' is
    # true, force handling all data as if followed by EOF marker.
    }
    function goahead( end){
        rawdata = this.rawdata;
        i = 0;
        n = len(rawdata);
        while i < n{
            if i > 0{
                this.__at_start = 0;
            } if this.nomoretags{
                data = rawdata[i:n];
                this.handle_data(data);
                this.lineno = this.lineno + data.count('\n');
                i = n;
                break;
            } res = interesting.search(rawdata, i);
            if res{
                j = res.start(0);
            } else{
                j = n;
            } if i < j{
                data = rawdata[i:j];
                if this.__at_start and space.match(data) is nil{
                    this.syntax_error('illegal data at start of file');
                } this.__at_start = 0;
                if not this.stack and space.match(data) is nil{
                    this.syntax_error('data not in content');
                } if not this.__accept_utf8 and illegal.search(data){
                    this.syntax_error('illegal character in content');
                } this.handle_data(data);
                this.lineno = this.lineno + data.count('\n');
            } i = j;
            if i == n{ break;}
            if rawdata[i] == '<'{
                if starttagopen.match(rawdata, i){
                    if this.literal{
                        data = rawdata[i];
                        this.handle_data(data);
                        this.lineno = this.lineno + data.count('\n');
                        i = i+1;
                        continue;
                    } k = this.parse_starttag(i);
                    if k < 0{ break;}
                    this.__seen_starttag = 1;
                    this.lineno = this.lineno + rawdata[i:k].count('\n');
                    i = k;
                    continue;
                } if endtagopen.match(rawdata, i){
                    k = this.parse_endtag(i);
                    if k < 0{ break;}
                    this.lineno = this.lineno + rawdata[i:k].count('\n');
                    i =  k;
                    continue;
                } if commentopen.match(rawdata, i){
                    if this.literal{
                        data = rawdata[i];
                        this.handle_data(data);
                        this.lineno = this.lineno + data.count('\n');
                        i = i+1;
                        continue;
                    } k = this.parse_comment(i);
                    if k < 0{ break;}
                    this.lineno = this.lineno + rawdata[i:k].count('\n');
                    i = k;
                    continue;
                } if cdataopen.match(rawdata, i){
                    k = this.parse_cdata(i);
                    if k < 0{ break;}
                    this.lineno = this.lineno + rawdata[i:k].count('\n');
                    i = k;
                    continue;
                } res = xmldecl.match(rawdata, i);
                if res{
                    if not this.__at_start{
                        this.syntax_error("<?xml?> declaration not at start of document");
                    } version, encoding, standalone = res.group('version',
                                                              'encoding',
                                                              'standalone');
                    if version[1:-1] != '1.0'{
                        raise Error('only XML version 1.0 supported');
                    } if encoding{ encoding = encoding[1:-1];}
                    if standalone{ standalone = standalone[1:-1];}
                    this.handle_xml(encoding, standalone);
                    i = res.end(0);
                    continue;
                } res = procopen.match(rawdata, i);
                if res{
                    k = this.parse_proc(i);
                    if k < 0{ break;}
                    this.lineno = this.lineno + rawdata[i:k].count('\n');
                    i = k;
                    continue;
                } res = doctype.match(rawdata, i);
                if res{
                    if this.literal{
                        data = rawdata[i];
                        this.handle_data(data);
                        this.lineno = this.lineno + data.count('\n');
                        i = i+1;
                        continue;
                    } if this.__seen_doctype{
                        this.syntax_error('multiple DOCTYPE elements');
                    } if this.__seen_starttag{
                        this.syntax_error('DOCTYPE not at beginning of document');
                    } k = this.parse_doctype(res);
                    if k < 0{ break;}
                    this.__seen_doctype = res.group('name');
                    if this.__map_case{
                        this.__seen_doctype = this.__seen_doctype.lower();
                    } this.lineno = this.lineno + rawdata[i:k].count('\n');
                    i = k;
                    continue;
            } } elif rawdata[i] == '&'{
                if this.literal{
                    data = rawdata[i];
                    this.handle_data(data);
                    i = i+1;
                    continue;
                } res = charref.match(rawdata, i);
                if res is not nil{
                    i = res.end(0);
                    if rawdata[i-1] != ';'{
                        this.syntax_error("`;' missing in charref");
                        i = i-1;
                    } if not this.stack{
                        this.syntax_error('data not in content');
                    } this.handle_charref(res.group('char')[:-1]);
                    this.lineno = this.lineno + res.group(0).count('\n');
                    continue;
                } res = entityref.match(rawdata, i);
                if res is not nil{
                    i = res.end(0);
                    if rawdata[i-1] != ';'{
                        this.syntax_error("`;' missing in entityref");
                        i = i-1;
                    } name = res.group('name');
                    if this.__map_case{
                        name = name.lower();
                    } if name in this.entitydefs{
                        this.rawdata = rawdata = rawdata[:res.start(0)] + this.entitydefs[name] + rawdata[i:];
                        n = len(rawdata);
                        i = res.start(0);
                    } else{
                        this.unknown_entityref(name);
                    } this.lineno = this.lineno + res.group(0).count('\n');
                    continue;
            } } elif rawdata[i] == ']'{
                if this.literal{
                    data = rawdata[i];
                    this.handle_data(data);
                    i = i+1;
                    continue;
                } if n-i < 3{
                    break;
                } if cdataclose.match(rawdata, i){
                    this.syntax_error("bogus `]]>'");
                } this.handle_data(rawdata[i]);
                i = i+1;
                continue;
            } else{
                raise Error('neither < nor & ??');
            # We get here only if incomplete matches but
            # nothing else
            }
            break;
        # end while
        }
        if i > 0{
            this.__at_start = 0;
        } if end and i < n{
            data = rawdata[i];
            this.syntax_error("bogus `%s'" % data);
            if not this.__accept_utf8 and illegal.search(data){
                this.syntax_error('illegal character in content');
            } this.handle_data(data);
            this.lineno = this.lineno + data.count('\n');
            this.rawdata = rawdata[i+1:];
            return this.goahead(end);
        } this.rawdata = rawdata[i:];
        if end{
            if not this.__seen_starttag{
                this.syntax_error('no elements in file');
            } if this.stack{
                this.syntax_error('missing end tags');
                while this.stack{
                    this.finish_endtag(this.stack[-1][0]);

    # Internal -- parse comment, return length or -1 if not terminated
    }
    } } } function parse_comment( i){
        rawdata = this.rawdata;
        if rawdata[i:i+4] != '<!--'{
            raise Error('unexpected call to handle_comment');
        } res = commentclose.search(rawdata, i+4);
        if res is nil{
            return -1;
        } if doubledash.search(rawdata, i+4, res.start(0)){
            this.syntax_error("`--' inside comment");
        } if rawdata[res.start(0)-1] == '-'{
            this.syntax_error('comment cannot end in three dashes');
        } if not this.__accept_utf8 and \
           illegal.search(rawdata, i+4, res.start(0)){
            this.syntax_error('illegal character in comment');
        } this.handle_comment(rawdata[i+4: res.start(0)]);
        return res.end(0);

    # Internal -- handle DOCTYPE tag, return length or -1 if not terminated
    }
    function parse_doctype( res){
        rawdata = this.rawdata;
        n = len(rawdata);
        name = res.group('name');
        if this.__map_case{
            name = name.lower();
        } pubid, syslit = res.group('pubid', 'syslit');
        if pubid is not nil{
            pubid = pubid[1:-1];         # remove quotes
            pubid = ' '.join(pubid.split()); # normalize
        } if syslit is not nil{ syslit = syslit[1:-1];} # remove quotes
        j = k = res.end(0);
        if k >= n{
            return -1;
        } if rawdata[k] == '['{
            level = 0;
            k = k+1;
            dq = sq = 0;
            while k < n{
                c = rawdata[k];
                if not sq and c == '"'{
                    dq = not dq;
                } elif not dq and c == "'"{
                    sq = not sq;
                } elif sq or dq{
                    pass;
                } elif level <= 0 and c == ']'{
                    res = endbracket.match(rawdata, k+1);
                    if res is nil{
                        return -1;
                    } this.handle_doctype(name, pubid, syslit, rawdata[j+1:k]);
                    return res.end(0);
                } elif c == '<'{
                    level = level + 1;
                } elif c == '>'{
                    level = level - 1;
                    if level < 0{
                        this.syntax_error("bogus `>' in DOCTYPE");
                } } k = k+1;
        } } res = endbracketfind.match(rawdata, k);
        if res is nil{
            return -1;
        } if endbracket.match(rawdata, k) is nil{
            this.syntax_error('garbage in DOCTYPE');
        } this.handle_doctype(name, pubid, syslit, nil);
        return res.end(0);

    # Internal -- handle CDATA tag, return length or -1 if not terminated
    }
    function parse_cdata( i){
        rawdata = this.rawdata;
        if rawdata[i:i+9] != '<![CDATA['{
            raise Error('unexpected call to parse_cdata');
        } res = cdataclose.search(rawdata, i+9);
        if res is nil{
            return -1;
        } if not this.__accept_utf8 and \
           illegal.search(rawdata, i+9, res.start(0)){
            this.syntax_error('illegal character in CDATA');
        } if not this.stack{
            this.syntax_error('CDATA not in content');
        } this.handle_cdata(rawdata[i+9:res.start(0)]);
        return res.end(0);

    }
    __xml_namespace_attributes = {'ns':nil, 'src':nil, 'prefix':nil};
    # Internal -- handle a processing instruction tag
    function parse_proc( i){
        rawdata = this.rawdata;
        end = procclose.search(rawdata, i);
        if end is nil{
            return -1;
        } j = end.start(0);
        if not this.__accept_utf8 and illegal.search(rawdata, i+2, j){
            this.syntax_error('illegal character in processing instruction');
        } res = tagfind.match(rawdata, i+2);
        if res is nil{
            raise Error('unexpected call to parse_proc');
        } k = res.end(0);
        name = res.group(0);
        if this.__map_case{
            name = name.lower();
        } if name == 'xml:namespace'{
            this.syntax_error('old-fashioned namespace declaration');
            this.__use_namespaces = -1;
            # namespace declaration
            # this must come after the <?xml?> declaration (if any)
            # and before the <!DOCTYPE> (if any).
            if this.__seen_doctype or this.__seen_starttag{
                this.syntax_error('xml:namespace declaration too late in document');
            } attrdict, namespace, k = this.parse_attributes(name, k, j);
            if namespace{
                this.syntax_error('namespace declaration inside namespace declaration');
            } for attrname in attrdict.keys(){
                if not attrname in this.__xml_namespace_attributes{
                    this.syntax_error("unknown attribute `%s' in xml:namespace tag" % attrname);
            } } if not 'ns' in attrdict or not 'prefix' in attrdict{
                this.syntax_error('xml:namespace without required attributes');
            } prefix = attrdict.get('prefix');
            if ncname.match(prefix) is nil{
                this.syntax_error('xml:namespace illegal prefix value');
                return end.end(0);
            } if prefix in this.__namespaces{
                this.syntax_error('xml:namespace prefix not unique');
            } this.__namespaces[prefix] = attrdict['ns'];
        } else{
            if name.lower() == 'xml'{
                this.syntax_error('illegal processing instruction target name');
            } this.handle_proc(name, rawdata[k:j]);
        } return end.end(0);

    # Internal -- parse attributes between i and j
    }
    function parse_attributes( tag, i, j){
        rawdata = this.rawdata;
        attrdict = {};
        namespace = {};
        while i < j{
            res = attrfind.match(rawdata, i);
            if res is nil{
                break;
            } attrname, attrvalue = res.group('name', 'value');
            if this.__map_case{
                attrname = attrname.lower();
            } i = res.end(0);
            if attrvalue is nil{
                this.syntax_error("no value specified for attribute `%s'" % attrname);
                attrvalue = attrname;
            } elif attrvalue[:1] == "'" == attrvalue[-1:] or \
                 attrvalue[:1] == '"' == attrvalue[-1:]{
                attrvalue = attrvalue[1:-1];
            } elif not this.__accept_unquoted_attributes{
                this.syntax_error("attribute `%s' value not quoted" % attrname);
            } res = xmlns.match(attrname);
            if res is not nil{
                # namespace declaration
                ncname = res.group('ncname');
                namespace[ncname or ''] = attrvalue or nil;
                if not this.__use_namespaces{
                    this.__use_namespaces = len(this.stack)+1;
                } continue;
            } if '<' in attrvalue{
                this.syntax_error("`<' illegal in attribute value");
            } if attrname in attrdict{
                this.syntax_error("attribute `%s' specified twice" % attrname);
            } attrvalue = attrvalue.translate(attrtrans);
            attrdict[attrname] = this.translate_references(attrvalue);
        } return attrdict, namespace, i;

    # Internal -- handle starttag, return length or -1 if not terminated
    }
    function parse_starttag( i){
        rawdata = this.rawdata;
        # i points to start of tag
        end = endbracketfind.match(rawdata, i+1);
        if end is nil{
            return -1;
        } tag = starttagmatch.match(rawdata, i);
        if tag is nil or tag.end(0) != end.end(0){
            this.syntax_error('garbage in starttag');
            return end.end(0);
        } nstag = tagname = tag.group('tagname');
        if this.__map_case{
            nstag = tagname = nstag.lower();
        } if not this.__seen_starttag and this.__seen_doctype and \
           tagname != this.__seen_doctype{
            this.syntax_error('starttag does not match DOCTYPE');
        } if this.__seen_starttag and not this.stack{
            this.syntax_error('multiple elements on top level');
        } k, j = tag.span('attrs');
        attrdict, nsdict, k = this.parse_attributes(tagname, k, j);
        this.stack.append((tagname, nsdict, nstag));
        if this.__use_namespaces{
            res = qname.match(tagname);
        } else{
            res = nil;
        } if res is not nil{
            prefix, nstag = res.group('prefix', 'local');
            if prefix is nil{
                prefix = '';
            } ns = nil;
            for t, d, nst in this.stack{
                if prefix in d{
                    ns = d[prefix];
            } } if ns is nil and prefix != ''{
                ns = this.__namespaces.get(prefix);
            } if ns is not nil{
                nstag = ns + ' ' + nstag;
            } elif prefix != ''{
                nstag = prefix + ':' + nstag; # undo split
            } this.stack[-1] = tagname, nsdict, nstag;
        # translate namespace of attributes
        }
        attrnamemap = {}; # map from new name to old name (used for error reporting)
        for key in attrdict.keys(){
            attrnamemap[key] = key;
        } if this.__use_namespaces{
            nattrdict = {};
            for key, val in attrdict.items(){
                okey = key;
                res = qname.match(key);
                if res is not nil{
                    aprefix, key = res.group('prefix', 'local');
                    if this.__map_case{
                        key = key.lower();
                    } if aprefix is not nil{
                        ans = nil;
                        for t, d, nst in this.stack{
                            if aprefix in d{
                                ans = d[aprefix];
                        } } if ans is nil{
                            ans = this.__namespaces.get(aprefix);
                        } if ans is not nil{
                            key = ans + ' ' + key;
                        } else{
                            key = aprefix + ':' + key;
                } } } nattrdict[key] = val;
                attrnamemap[key] = okey;
            } attrdict = nattrdict;
        } attributes = this.attributes.get(nstag);
        if attributes is not nil{
            for key in attrdict.keys(){
                if not key in attributes{
                    this.syntax_error("unknown attribute `%s' in tag `%s'" % (attrnamemap[key], tagname));
            } } for key, val in attributes.items(){
                if val is not nil and not key in attrdict{
                    attrdict[key] = val;
        } } } method = this.elements.get(nstag, (nil, nil))[0];
        this.finish_starttag(nstag, attrdict, method);
        if tag.group('slash') == '/'{
            this.finish_endtag(tagname);
        } return tag.end(0);

    # Internal -- parse endtag
    }
    function parse_endtag( i){
        rawdata = this.rawdata;
        end = endbracketfind.match(rawdata, i+1);
        if end is nil{
            return -1;
        } res = tagfind.match(rawdata, i+2);
        if res is nil{
            if this.literal{
                this.handle_data(rawdata[i]);
                return i+1;
            } if not this.__accept_missing_endtag_name{
                this.syntax_error('no name specified in end tag');
            } tag = this.stack[-1][0];
            k = i+2;
        } else{
            tag = res.group(0);
            if this.__map_case{
                tag = tag.lower();
            } if this.literal{
                if not this.stack or tag != this.stack[-1][0]{
                    this.handle_data(rawdata[i]);
                    return i+1;
            } } k = res.end(0);
        } if endbracket.match(rawdata, k) is nil{
            this.syntax_error('garbage in end tag');
        } this.finish_endtag(tag);
        return end.end(0);

    # Internal -- finish processing of start tag
    }
    function finish_starttag( tagname, attrdict, method){
        if method is not nil{
            this.handle_starttag(tagname, method, attrdict);
        } else{
            this.unknown_starttag(tagname, attrdict);

    # Internal -- finish processing of end tag
    }
    } function finish_endtag( tag){
        this.literal = 0;
        if not tag{
            this.syntax_error('name-less end tag');
            found = len(this.stack) - 1;
            if found < 0{
                this.unknown_endtag(tag);
                return;
        } } else{
            found = -1;
            for i in range(len(this.stack)){
                if tag == this.stack[i][0]{
                    found = i;
            } } if found == -1{
                this.syntax_error('unopened end tag');
                return;
        } } while len(this.stack) > found{
            if found < len(this.stack) - 1{
                this.syntax_error('missing close tag for %s' % this.stack[-1][2]);
            } nstag = this.stack[-1][2];
            method = this.elements.get(nstag, (nil, nil))[1];
            if method is not nil{
                this.handle_endtag(nstag, method);
            } else{
                this.unknown_endtag(nstag);
            } if this.__use_namespaces == len(this.stack){
                this.__use_namespaces = 0;
            } del this.stack[-1];

    # Overridable -- handle xml processing instruction
    }
    } function handle_xml( encoding, standalone){
        pass;

    # Overridable -- handle DOCTYPE
    }
    function handle_doctype( tag, pubid, syslit, data){
        pass;

    # Overridable -- handle start tag
    }
    function handle_starttag( tag, method, attrs){
        method(attrs);

    # Overridable -- handle end tag
    }
    function handle_endtag( tag, method){
        method();

    # Example -- handle character reference, no need to override
    }
    function handle_charref( name){
        try{
            if name[0] == 'x'{
                n = int(name[1:], 16);
            } else{
                n = int(name);
        } } except ValueError{
            this.unknown_charref(name);
            return;
        } if not 0 <= n <= 255{
            this.unknown_charref(name);
            return;
        } this.handle_data(chr(n));

    # Definition of entities -- derived classes may override
    }
    entitydefs = {'lt': '&#60;',        # must use charref
                  'gt': '&#62;',
                  'amp': '&#38;',       # must use charref
                  'quot': '&#34;',
                  'apos': '&#39;',
                  };

    # Example -- handle data, should be overridden
    function handle_data( data){
        pass;

    # Example -- handle cdata, could be overridden
    }
    function handle_cdata( data){
        pass;

    # Example -- handle comment, could be overridden
    }
    function handle_comment( data){
        pass;

    # Example -- handle processing instructions, could be overridden
    }
    function handle_proc( name, data){
        pass;

    # Example -- handle relatively harmless syntax errors, could be overridden
    }
    function syntax_error( message){
        raise Error('Syntax error at line %d: %s' % (this.lineno, message));

    # To be overridden -- handlers for unknown objects
    }
    function unknown_starttag( tag, attrs){ pass;}
    function unknown_endtag( tag){ pass;}
    function unknown_charref( ref){ pass;}
    function unknown_entityref( name){
        this.syntax_error("reference to unknown entity `&%s;'" % name);


}
} class TestXMLParser(XMLParser){

    function __init__( **kw){
        this.testdata = "";
        XMLParser.__init__(this, **kw);

    }
    function handle_xml( encoding, standalone){
        this.flush();
        print 'xml: encoding =',encoding,'standalone =',standalone;

    }
    function handle_doctype( tag, pubid, syslit, data){
        this.flush();
        print 'DOCTYPE:',tag, repr(data);

    }
    function handle_data( data){
        this.testdata = this.testdata + data;
        if len(repr(this.testdata)) >= 70{
            this.flush();

    }
    } function flush(){
        data = this.testdata;
        if data{
            this.testdata = "";
            print 'data:', repr(data);

    }
    } function handle_cdata( data){
        this.flush();
        print 'cdata:', repr(data);

    }
    function handle_proc( name, data){
        this.flush();
        print 'processing:',name,repr(data);

    }
    function handle_comment( data){
        this.flush();
        r = repr(data);
        if len(r) > 68{
            r = r[:32] + '...' + r[-32:];
        } print 'comment:', r;

    }
    function syntax_error( message){
        print 'error at line %d:' % this.lineno, message;

    }
    function unknown_starttag( tag, attrs){
        this.flush();
        if not attrs{
            print 'start tag: <' + tag + '>';
        } else{
            print 'start tag: <' + tag,;
            for name, value in attrs.items(){
                print name + '=' + '"' + value + '"',;
            } print '>';

    }
    } function unknown_endtag( tag){
        this.flush();
        print 'end tag: </' + tag + '>';

    }
    function unknown_entityref( ref){
        this.flush();
        print '*** unknown entity ref: &' + ref + ';';

    }
    function unknown_charref( ref){
        this.flush();
        print '*** unknown char ref: &#' + ref + ';';

    }
    function close(){
        XMLParser.close(this);
        this.flush();

}
} function test(args = nil){
    import sys, getopt;
    from time import time;

    if not args{
        args = sys.argv[1:];

    }
    opts, args = getopt.getopt(args, 'st');
    klass = TestXMLParser;
    do_time = 0;
    for o, a in opts{
        if o == '-s'{
            klass = XMLParser;
        } elif o == '-t'{
            do_time = 1;

    }
    } if args{
        file = args[0];
    } else{
        file = 'test.xml';

    }
    if file == '-'{
        f = sys.stdin;
    } else{
        try{
            f = open(file, 'r');
        } except IOError, msg{
            print file, ":", msg;
            sys.exit(1);

    }
    } data = f.read();
    if f is not sys.stdin{
        f.close();

    }
    x = klass();
    t0 = time();
    try{
        if do_time{
            x.feed(data);
            x.close();
        } else{
            for c in data{
                x.feed(c);
            } x.close();
    } } except Error, msg{
        t1 = time();
        print msg;
        if do_time{
            print 'total time: %g' % (t1-t0);
        } sys.exit(1);
    } t1 = time();
    if do_time{
        print 'total time: %g' % (t1-t0);


}
} if __name__ == '__main__'{
    test();

}