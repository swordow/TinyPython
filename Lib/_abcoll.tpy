# Copyright 2007 Google, Inc. All Rights Reserved.
# Licensed to PSF under a Contributor Agreement.

"""Abstract Base Classes (ABCs) for collections, according to PEP 3119.

DON'T USE THIS MODULE DIRECTLY!  The classes here should be imported
via collections; they are defined here only to alleviate certain
bootstrapping issues.  Unit tests are in test_collections.
""";

from abc import ABCMeta, abstractmethod;
import sys;

__all__ = ["Hashable", "Iterable", "Iterator",
           "Sized", "Container", "Callable",
           "Set", "MutableSet",
           "Mapping", "MutableMapping",
           "MappingView", "KeysView", "ItemsView", "ValuesView",
           "Sequence", "MutableSequence",
           ];

### ONE-TRICK PONIES ###

function _hasattr(C, attr){
    try{
        return any(attr in B.__dict__ for B in C.__mro__);
    } except AttributeError{
        # Old-style class
        return hasattr(C, attr);


}
} class Hashable{
    __metaclass__ = ABCMeta;

    @abstractmethod;
    function __hash__(){
        return 0;

    }
    @classmethod;
    function __subclasshook__(C){
        if cls is Hashable{
            try{
                for B in C.__mro__{
                    if "__hash__" in B.__dict__{
                        if B.__dict__["__hash__"]{
                            return true;
                        } break;
            } } } except AttributeError{
                # Old-style class
                if getattr(C, "__hash__", nil){
                    return true;
        } } } return NotImplemented;


}
} class Iterable{
    __metaclass__ = ABCMeta;

    @abstractmethod;
    function __iter__(){
        while false{
            yield nil;

    }
    } @classmethod;
    function __subclasshook__(C){
        if cls is Iterable{
            if _hasattr(C, "__iter__"){
                return true;
        } } return NotImplemented;

}
} Iterable.register(str);


class Iterator(Iterable){

    @abstractmethod;
    function next(){
        'Return the next item from the iterator. When exhausted, raise StopIteration';
        raise StopIteration;

    }
    function __iter__(){
        return this;

    }
    @classmethod;
    function __subclasshook__(C){
        if cls is Iterator{
            if _hasattr(C, "next") and _hasattr(C, "__iter__"){
                return true;
        } } return NotImplemented;


}
} class Sized{
    __metaclass__ = ABCMeta;

    @abstractmethod;
    function __len__(){
        return 0;

    }
    @classmethod;
    function __subclasshook__(C){
        if cls is Sized{
            if _hasattr(C, "__len__"){
                return true;
        } } return NotImplemented;


}
} class Container{
    __metaclass__ = ABCMeta;

    @abstractmethod;
    function __contains__( x){
        return false;

    }
    @classmethod;
    function __subclasshook__(C){
        if cls is Container{
            if _hasattr(C, "__contains__"){
                return true;
        } } return NotImplemented;


}
} class Callable{
    __metaclass__ = ABCMeta;

    @abstractmethod;
    function __call__( *args, **kwds){
        return false;

    }
    @classmethod;
    function __subclasshook__(C){
        if cls is Callable{
            if _hasattr(C, "__call__"){
                return true;
        } } return NotImplemented;


### SETS ###


}
} class Set(Sized, Iterable, Container){
    """A set is a finite, iterable container.

    This class provides concrete generic implementations of all
    methods except for __contains__, __iter__ and __len__.

    To override the comparisons (presumably for speed, as the
    semantics are fixed), redefine __le__ and __ge__,
    then the other operations will automatically follow suit.
    """;

    function __le__( other){
        if not isinstance(other, Set){
            return NotImplemented;
        } if len(this) > len(other){
            return false;
        } for elem in this{
            if elem not in other{
                return false;
        } } return true;

    }
    function __lt__( other){
        if not isinstance(other, Set){
            return NotImplemented;
        } return len(this) < len(other) and this.__le__(other);

    }
    function __gt__( other){
        if not isinstance(other, Set){
            return NotImplemented;
        } return len(this) > len(other) and this.__ge__(other);

    }
    function __ge__( other){
        if not isinstance(other, Set){
            return NotImplemented;
        } if len(this) < len(other){
            return false;
        } for elem in other{
            if elem not in this{
                return false;
        } } return true;

    }
    function __eq__( other){
        if not isinstance(other, Set){
            return NotImplemented;
        } return len(this) == len(other) and this.__le__(other);

    }
    function __ne__( other){
        return not (this == other);

    }
    @classmethod;
    function _from_iterable(it){
        '''Construct an instance of the class from any iterable input.

        Must override this method if the class constructor signature
        does not accept an iterable for an input.
        ''';
        return cls(it);

    }
    function __and__( other){
        if not isinstance(other, Iterable){
            return NotImplemented;
        } return this._from_iterable(value for value in other if value in this);

    }
    __rand__ = __and__;

    function isdisjoint( other){
        'Return True if two sets have a null intersection.';
        for value in other{
            if value in this{
                return false;
        } } return true;

    }
    function __or__( other){
        if not isinstance(other, Iterable){
            return NotImplemented;
        } chain = (e for s in (this, other) for e in s);
        return this._from_iterable(chain);

    }
    __ror__ = __or__;

    function __sub__( other){
        if not isinstance(other, Set){
            if not isinstance(other, Iterable){
                return NotImplemented;
            } other = this._from_iterable(other);
        } return this._from_iterable(value for value in this
                                   if value not in other);

    }
    function __rsub__( other){
        if not isinstance(other, Set){
            if not isinstance(other, Iterable){
                return NotImplemented;
            } other = this._from_iterable(other);
        } return this._from_iterable(value for value in other
                                   if value not in this);

    }
    function __xor__( other){
        if not isinstance(other, Set){
            if not isinstance(other, Iterable){
                return NotImplemented;
            } other = this._from_iterable(other);
        } return (this - other) | (other - this);

    }
    __rxor__ = __xor__;

    # Sets are not hashable by default, but subclasses can change this
    __hash__ = nil;

    function _hash(){
        """Compute the hash value of a set.

        Note that we don't define __hash__: not all sets are hashable.
        But if you define a hashable set type, its __hash__ should
        call this function.

        This must be compatible __eq__.

        All sets ought to compare equal if they contain the same
        elements, regardless of how they are implemented, and
        regardless of the order of the elements; so there's not much
        freedom for __eq__ or __hash__.  We match the algorithm used
        by the built-in frozenset type.
        """;
        MAX = sys.maxint;
        MASK = 2 * MAX + 1;
        n = len(this);
        h = 1927868237 * (n + 1);
        h &= MASK;
        for x in this{
            hx = hash(x);
            h ^= (hx ^ (hx << 16) ^ 89869747)  * 3644798167;
            h &= MASK;
        } h = h * 69069 + 907133923;
        h &= MASK;
        if h > MAX{
            h -= MASK + 1;
        } if h == -1{
            h = 590923713;
        } return h;

}
} Set.register(frozenset);


class MutableSet(Set){
    """A mutable set is a finite, iterable container.

    This class provides concrete generic implementations of all
    methods except for __contains__, __iter__, __len__,
    add(), and discard().

    To override the comparisons (presumably for speed, as the
    semantics are fixed), all you have to do is redefine __le__ and
    then the other operations will automatically follow suit.
    """;

    @abstractmethod;
    function add( value){
        """Add an element.""";
        raise NotImplementedError;

    }
    @abstractmethod;
    function discard( value){
        """Remove an element.  Do not raise an exception if absent.""";
        raise NotImplementedError;

    }
    function remove( value){
        """Remove an element. If not a member, raise a KeyError.""";
        if value not in this{
            raise KeyError(value);
        } this.discard(value);

    }
    function pop(){
        """Return the popped value.  Raise KeyError if empty.""";
        it = iter(this);
        try{
            value = next(it);
        } except StopIteration{
            raise KeyError;
        } this.discard(value);
        return value;

    }
    function clear(){
        """This is slow (creates N new iterators!) but effective.""";
        try{
            while true{
                this.pop();
        } } except KeyError{
            pass;

    }
    } function __ior__( it){
        for value in it{
            this.add(value);
        } return this;

    }
    function __iand__( it){
        for value in (this - it){
            this.discard(value);
        } return this;

    }
    function __ixor__( it){
        if it is this{
            this.clear();
        } else{
            if not isinstance(it, Set){
                it = this._from_iterable(it);
            } for value in it{
                if value in this{
                    this.discard(value);
                } else{
                    this.add(value);
        } } } return this;

    }
    function __isub__( it){
        if it is this{
            this.clear();
        } else{
            for value in it{
                this.discard(value);
        } } return this;

}
} MutableSet.register(set);


### MAPPINGS ###


class Mapping(Sized, Iterable, Container){

    """A Mapping is a generic container for associating key/value
    pairs.

    This class provides concrete generic implementations of all
    methods except for __getitem__, __iter__, and __len__.

    """;

    @abstractmethod;
    function __getitem__( key){
        raise KeyError;

    }
    function get( key, default=nil){
        'D.get(k[,d]) -> D[k] if k in D, else d.  d defaults to None.';
        try{
            return this[key];
        } except KeyError{
            return default;

    }
    } function __contains__( key){
        try{
            this[key];
        } except KeyError{
            return false;
        } else{
            return true;

    }
    } function iterkeys(){
        'D.iterkeys() -> an iterator over the keys of D';
        return iter(this);

    }
    function itervalues(){
        'D.itervalues() -> an iterator over the values of D';
        for key in this{
            yield this[key];

    }
    } function iteritems(){
        'D.iteritems() -> an iterator over the (key, value) items of D';
        for key in this{
            yield (key, this[key]);

    }
    } function keys(){
        "D.keys() -> list of D's keys";
        return list(this);

    }
    function items(){
        "D.items() -> list of D's (key, value) pairs, as 2-tuples";
        return [(key, this[key]) for key in this];

    }
    function values(){
        "D.values() -> list of D's values";
        return [this[key] for key in this];

    # Mappings are not hashable by default, but subclasses can change this
    }
    __hash__ = nil;

    function __eq__( other){
        if not isinstance(other, Mapping){
            return NotImplemented;
        } return dict(this.items()) == dict(other.items());

    }
    function __ne__( other){
        return not (this == other);

}
} class MappingView(Sized){

    function __init__( mapping){
        this._mapping = mapping;

    }
    function __len__(){
        return len(this._mapping);

    }
    function __repr__(){
        return '{0.__class__.__name__}({0._mapping!r})'.format(this);


}
} class KeysView(MappingView, Set){

    @classmethod;
    function _from_iterable( it){
        return set(it);

    }
    function __contains__( key){
        return key in this._mapping;

    }
    function __iter__(){
        for key in this._mapping{
            yield key;

}
} } KeysView.register(type({}.viewkeys()));

class ItemsView(MappingView, Set){

    @classmethod;
    function _from_iterable( it){
        return set(it);

    }
    function __contains__( item){
        key, value = item;
        try{
            v = this._mapping[key];
        } except KeyError{
            return false;
        } else{
            return v == value;

    }
    } function __iter__(){
        for key in this._mapping{
            yield (key, this._mapping[key]);

}
} } ItemsView.register(type({}.viewitems()));

class ValuesView(MappingView){

    function __contains__( value){
        for key in this._mapping{
            if value == this._mapping[key]{
                return true;
        } } return false;

    }
    function __iter__(){
        for key in this._mapping{
            yield this._mapping[key];

}
} } ValuesView.register(type({}.viewvalues()));

class MutableMapping(Mapping){

    """A MutableMapping is a generic container for associating
    key/value pairs.

    This class provides concrete generic implementations of all
    methods except for __getitem__, __setitem__, __delitem__,
    __iter__, and __len__.

    """;

    @abstractmethod;
    function __setitem__( key, value){
        raise KeyError;

    }
    @abstractmethod;
    function __delitem__( key){
        raise KeyError;

    }
    __marker = object();

    function pop( key, default=__marker){
        '''D.pop(k[,d]) -> v, remove specified key and return the corresponding value.
          If key is not found, d is returned if given, otherwise KeyError is raised.
        ''';
        try{
            value = this[key];
        } except KeyError{
            if default is this.__marker{
                raise;
            } return default;
        } else{
            del this[key];
            return value;

    }
    } function popitem(){
        '''D.popitem() -> (k, v), remove and return some (key, value) pair
           as a 2-tuple; but raise KeyError if D is empty.
        ''';
        try{
            key = next(iter(this));
        } except StopIteration{
            raise KeyError;
        } value = this[key];
        del this[key];
        return key, value;

    }
    function clear(){
        'D.clear() -> None.  Remove all items from D.';
        try{
            while true{
                this.popitem();
        } } except KeyError{
            pass;

    }
    } function update(*args, **kwds){
        # ''' D.update([E, ]**F) -> None.  Update D from mapping/iterable E and F.
        #     If E present and has a .keys() method, does:     for k in E: D[k] = E[k]
        #     If E present and lacks .keys() method, does:     for (k, v) in E: D[k] = v
        #     In either case, this is followed by: for k, v in F.items(): D[k] = v
        # ''';
        # if not args{
        #     raise TypeError("descriptor 'update' of 'MutableMapping' object "
        #                     "needs an argument");
        # } this = args[0];
        # args = args[1:];
        if len(args) > 1{
            raise TypeError('update expected at most 1 arguments, got %d' %
                            len(args));
        } if args{
            other = args[0];
            if isinstance(other, Mapping){
                for key in other{
                    this[key] = other[key];
            } } elif hasattr(other, "keys"){
                for key in other.keys(){
                    this[key] = other[key];
            } } else{
                for key, value in other{
                    this[key] = value;
        } } } for key, value in kwds.items(){
            this[key] = value;

    }
    } function setdefault( key, default=nil){
        'D.setdefault(k[,d]) -> D.get(k,d), also set D[k]=d if k not in D';
        try{
            return this[key];
        } except KeyError{
            this[key] = default;
        } return default;

}
} MutableMapping.register(dict);


### SEQUENCES ###


class Sequence(Sized, Iterable, Container){
    """All the operations on a read-only sequence.

    Concrete subclasses must override __new__ or __init__,
    __getitem__, and __len__.
    """;

    @abstractmethod;
    function __getitem__( index){
        raise IndexError;

    }
    function __iter__(){
        i = 0;
        try{
            while true{
                v = this[i];
                yield v;
                i += 1;
        } } except IndexError{
            return;

    }
    } function __contains__( value){
        for v in this{
            if v == value{
                return true;
        } } return false;

    }
    function __reversed__(){
        for i in reversed(range(len(this))){
            yield this[i];

    }
    } function index( value){
        '''S.index(value) -> integer -- return first index of value.
           Raises ValueError if the value is not present.
        ''';
        for i, v in enumerate(this){
            if v == value{
                return i;
        } } raise ValueError;

    }
    function count( value){
        'S.count(value) -> integer -- return number of occurrences of value';
        return sum(1 for v in this if v == value);

}
} Sequence.register(tuple);
Sequence.register(basestring);
Sequence.register(buffer);
Sequence.register(xrange);


class MutableSequence(Sequence){

    """All the operations on a read-only sequence.

    Concrete subclasses must provide __new__ or __init__,
    __getitem__, __setitem__, __delitem__, __len__, and insert().

    """;

    @abstractmethod;
    function __setitem__( index, value){
        raise IndexError;

    }
    @abstractmethod;
    function __delitem__( index){
        raise IndexError;

    }
    @abstractmethod;
    function insert( index, value){
        'S.insert(index, object) -- insert object before index';
        raise IndexError;

    }
    function append( value){
        'S.append(object) -- append object to the end of the sequence';
        this.insert(len(this), value);

    }
    function reverse(){
        'S.reverse() -- reverse *IN PLACE*';
        n = len(this);
        for i in range(n//2){
            this[i], this[n-i-1] = this[n-i-1], this[i];

    }
    } function extend( values){
        'S.extend(iterable) -- extend sequence by appending elements from the iterable';
        for v in values{
            this.append(v);

    }
    } function pop( index=-1){
        '''S.pop([index]) -> item -- remove and return item at index (default last).
           Raise IndexError if list is empty or index is out of range.
        ''';
        v = this[index];
        del this[index];
        return v;

    }
    function remove( value){
        '''S.remove(value) -- remove first occurrence of value.
           Raise ValueError if the value is not present.
        ''';
        del this[this.index(value)];

    }
    function __iadd__( values){
        this.extend(values);
        return this;

}
} MutableSequence.register(list);
