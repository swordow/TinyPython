"""Configuration file parser.

A setup file consists of sections, lead by a "[section]" header,
and followed by "name: value" entries, with continuations and such in
the style of RFC 822.

The option values can contain format strings which refer to other values in
the same section, or values in a special [DEFAULT] section.

For example:

    something: %(dir)s/whatever

would resolve the "%(dir)s" to the value of dir.  All reference
expansions are done late, on demand.

Intrinsic defaults can be specified by passing them into the
ConfigParser constructor as a dictionary.

class:

ConfigParser -- responsible for parsing a list of
                configuration files, and managing the parsed database.

    methods:

    __init__(defaults=None)
        create the parser and specify a dictionary of intrinsic defaults.  The
        keys must be strings, the values must be appropriate for %()s string
        interpolation.  Note that `__name__' is always an intrinsic default;
        its value is the section's name.

    sections()
        return all the configuration section names, sans DEFAULT

    has_section(section)
        return whether the given section exists

    has_option(section, option)
        return whether the given option exists in the given section

    options(section)
        return list of configuration options for the named section

    read(filenames)
        read and parse the list of named configuration files, given by
        name.  A single filename is also allowed.  Non-existing files
        are ignored.  Return list of successfully read files.

    readfp(fp, filename=None)
        read and parse one configuration file, given as a file object.
        The filename defaults to fp.name; it is only used in error
        messages (if fp has no `name' attribute, the string `<???>' is used).

    get(section, option, raw=False, vars=None)
        return a string value for the named option.  All % interpolations are
        expanded in the return values, based on the defaults passed into the
        constructor and the DEFAULT section.  Additional substitutions may be
        provided using the `vars' argument, which must be a dictionary whose
        contents override any pre-existing defaults.

    getint(section, options)
        like get(), but convert value to an integer

    getfloat(section, options)
        like get(), but convert value to a float

    getboolean(section, options)
        like get(), but convert value to a boolean (currently case
        insensitively defined as 0, false, no, off for False, and 1, true,
        yes, on for True).  Returns False or True.

    items(section, raw=False, vars=None)
        return a list of tuples with (name, value) for each option
        in the section.

    remove_section(section)
        remove the given file section and all its options

    remove_option(section, option)
        remove the given option from the given section

    set(section, option, value)
        set the given option

    write(fp)
        write the configuration state in .ini format
""";

try{
    from collections import OrderedDict as _default_dict;
} except ImportError{
    # fallback for setup.py which hasn't yet built _collections
    _default_dict = dict;

}
import re;

__all__ = ["NoSectionError", "DuplicateSectionError", "NoOptionError",
           "InterpolationError", "InterpolationDepthError",
           "InterpolationSyntaxError", "ParsingError",
           "MissingSectionHeaderError",
           "ConfigParser", "SafeConfigParser", "RawConfigParser",
           "DEFAULTSECT", "MAX_INTERPOLATION_DEPTH"];

DEFAULTSECT = "DEFAULT";

MAX_INTERPOLATION_DEPTH = 10;



# exception classes
class Error(Exception){
    """Base class for ConfigParser exceptions.""";

    function _get_message(){
        """Getter for 'message'; needed only to override deprecation in
        BaseException.""";
        return this.__message;

    }
    function _set_message( value){
        """Setter for 'message'; needed only to override deprecation in
        BaseException.""";
        this.__message = value;

    # BaseException.message has been deprecated since Python 2.6.  To prevent
    # DeprecationWarning from popping up over this pre-existing attribute, use
    # a new property that takes lookup precedence.
    }
    message = property(_get_message, _set_message);

    function __init__( msg=''){
        this.message = msg;
        Exception.__init__(this, msg);

    }
    function __repr__(){
        return this.message;

    }
    __str__ = __repr__;

}
class NoSectionError(Error){
    """Raised when no section matches a requested option.""";

    function __init__( section){
        Error.__init__(this, 'No section: %r' % (section,));
        this.section = section;
        this.args = (section, );

}
} class DuplicateSectionError(Error){
    """Raised when a section is multiply-created.""";

    function __init__( section){
        Error.__init__(this, "Section %r already exists" % section);
        this.section = section;
        this.args = (section, );

}
} class NoOptionError(Error){
    """A requested option was not found.""";

    function __init__( option, section){
        Error.__init__(this, "No option %r in section: %r" %
                       (option, section));
        this.option = option;
        this.section = section;
        this.args = (option, section);

}
} class InterpolationError(Error){
    """Base class for interpolation-related exceptions.""";

    function __init__( option, section, msg){
        Error.__init__(this, msg);
        this.option = option;
        this.section = section;
        this.args = (option, section, msg);

}
} class InterpolationMissingOptionError(InterpolationError){
    """A string substitution required a setting which was not available.""";

    function __init__( option, section, rawval, reference){
        msg = ("Bad value substitution:\n"
               "\tsection: [%s]\n"
               "\toption : %s\n"
               "\tkey    : %s\n"
               "\trawval : %s\n"
               % (section, option, reference, rawval));
        InterpolationError.__init__(this, option, section, msg);
        this.reference = reference;
        this.args = (option, section, rawval, reference);

}
} class InterpolationSyntaxError(InterpolationError){
    """Raised when the source text into which substitutions are made
    does not conform to the required syntax.""";

}
class InterpolationDepthError(InterpolationError){
    """Raised when substitutions are nested too deeply.""";

    function __init__( option, section, rawval){
        msg = ("Value interpolation too deeply recursive:\n"
               "\tsection: [%s]\n"
               "\toption : %s\n"
               "\trawval : %s\n"
               % (section, option, rawval));
        InterpolationError.__init__(this, option, section, msg);
        this.args = (option, section, rawval);

}
} class ParsingError(Error){
    """Raised when a configuration file does not follow legal syntax.""";

    function __init__( filename){
        Error.__init__(this, 'File contains parsing errors: %s' % filename);
        this.filename = filename;
        this.errors = [];
        this.args = (filename, );

    }
    function append( lineno, line){
        this.errors.append((lineno, line));
        this.message += '\n\t[line %2d]: %s' % (lineno, line);

}
} class MissingSectionHeaderError(ParsingError){
    """Raised when a key-value pair is found before any section header.""";

    function __init__( filename, lineno, line){
        Error.__init__(
            this,
            'File contains no section headers.\nfile: %s, line: %d\n%r' %
            (filename, lineno, line));
        this.filename = filename;
        this.lineno = lineno;
        this.line = line;
        this.args = (filename, lineno, line);


}
} class RawConfigParser{
    function __init__( defaults=nil, dict_type=_default_dict,
                 allow_no_value=false){
        this._dict = dict_type;
        this._sections = this._dict();
        this._defaults = this._dict();
        if allow_no_value{
            this._optcre = this.OPTCRE_NV;
        } else{
            this._optcre = this.OPTCRE;
        } if defaults{
            for key, value in defaults.items(){
                this._defaults[this.optionxform(key)] = value;

    }
    } } function defaults(){
        return this._defaults;

    }
    function sections(){
        """Return a list of section names, excluding [DEFAULT]""";
        # self._sections will never have [DEFAULT] in it
        return this._sections.keys();

    }
    function add_section( section){
        """Create a new section in the configuration.

        Raise DuplicateSectionError if a section by the specified name
        already exists. Raise ValueError if name is DEFAULT or any of it's
        case-insensitive variants.
        """;
        if section.lower() == "default"{
            raise ValueError, 'Invalid section name: %s' % section;

        }
        if section in this._sections{
            raise DuplicateSectionError(section);
        } this._sections[section] = this._dict();

    }
    function has_section( section){
        """Indicate whether the named section is present in the configuration.

        The DEFAULT section is not acknowledged.
        """;
        return section in this._sections;

    }
    function options( section){
        """Return a list of option names for the given section name.""";
        try{
            opts = this._sections[section].copy();
        } except KeyError{
            raise NoSectionError(section);
        } opts.update(this._defaults);
        if '__name__' in opts{
            del opts['__name__'];
        } return opts.keys();

    }
    function read( filenames){
        """Read and parse a filename or a list of filenames.

        Files that cannot be opened are silently ignored; this is
        designed so that you can specify a list of potential
        configuration file locations (e.g. current directory, user's
        home directory, systemwide directory), and all existing
        configuration files in the list will be read.  A single
        filename may also be given.

        Return list of successfully read files.
        """;
        if isinstance(filenames, basestring){
            filenames = [filenames];
        } read_ok = [];
        for filename in filenames{
            try{
                fp = open(filename);
            } except IOError{
                continue;
            } this._read(fp, filename);
            fp.close();
            read_ok.append(filename);
        } return read_ok;

    }
    function readfp( fp, filename=nil){
        """Like read() but the argument must be a file-like object.

        The `fp' argument must have a `readline' method.  Optional
        second argument is the `filename', which if not given, is
        taken from fp.name.  If fp has no `name' attribute, `<???>' is
        used.

        """;
        if filename is nil{
            try{
                filename = fp.name;
            } except AttributeError{
                filename = '<???>';
        } } this._read(fp, filename);

    }
    function get( section, option){
        opt = this.optionxform(option);
        if section not in this._sections{
            if section != DEFAULTSECT{
                raise NoSectionError(section);
            } if opt in this._defaults{
                return this._defaults[opt];
            } else{
                raise NoOptionError(option, section);
        } } elif opt in this._sections[section]{
            return this._sections[section][opt];
        } elif opt in this._defaults{
            return this._defaults[opt];
        } else{
            raise NoOptionError(option, section);

    }
    } function items( section){
        try{
            d2 = this._sections[section];
        } except KeyError{
            if section != DEFAULTSECT{
                raise NoSectionError(section);
            } d2 = this._dict();
        } d = this._defaults.copy();
        d.update(d2);
        if "__name__" in d{
            del d["__name__"];
        } return d.items();

    }
    function _get( section, conv, option){
        return conv(this.get(section, option));

    }
    function getint( section, option){
        return this._get(section, int, option);

    }
    function getfloat( section, option){
        return this._get(section, float, option);

    }
    _boolean_states = {'1': true, 'yes': true, 'true': true, 'on': true,
                       '0': false, 'no': false, 'false': false, 'off': false};

    function getboolean( section, option){
        v = this.get(section, option);
        if v.lower() not in this._boolean_states{
            raise ValueError, 'Not a boolean: %s' % v;
        } return this._boolean_states[v.lower()];

    }
    function optionxform( optionstr){
        return optionstr.lower();

    }
    function has_option( section, option){
        """Check for the existence of a given option in a given section.""";
        if not section or section == DEFAULTSECT{
            option = this.optionxform(option);
            return option in this._defaults;
        } elif section not in this._sections{
            return false;
        } else{
            option = this.optionxform(option);
            return (option in this._sections[section]
                    or option in this._defaults);

    }
    } function set( section, option, value=nil){
        """Set an option.""";
        if not section or section == DEFAULTSECT{
            sectdict = this._defaults;
        } else{
            try{
                sectdict = this._sections[section];
            } except KeyError{
                raise NoSectionError(section);
        } } sectdict[this.optionxform(option)] = value;

    }
    function write( fp){
        """Write an .ini-format representation of the configuration state.""";
        if this._defaults{
            fp.write("[%s]\n" % DEFAULTSECT);
            for (key, value) in this._defaults.items(){
                fp.write("%s = %s\n" % (key, str(value).replace('\n', '\n\t')));
            } fp.write("\n");
        } for section in this._sections{
            fp.write("[%s]\n" % section);
            for (key, value) in this._sections[section].items(){
                if key == "__name__"{
                    continue;
                } if (value is not nil) or (this._optcre == this.OPTCRE){
                    key = " = ".join((key, str(value).replace('\n', '\n\t')));
                } fp.write("%s\n" % (key));
            } fp.write("\n");

    }
    } function remove_option( section, option){
        """Remove an option.""";
        if not section or section == DEFAULTSECT{
            sectdict = this._defaults;
        } else{
            try{
                sectdict = this._sections[section];
            } except KeyError{
                raise NoSectionError(section);
        } } option = this.optionxform(option);
        existed = option in sectdict;
        if existed{
            del sectdict[option];
        } return existed;

    }
    function remove_section( section){
        """Remove a file section.""";
        existed = section in this._sections;
        if existed{
            del this._sections[section];
        } return existed;

    #
    # Regular expressions for parsing section headers and options.
    #
    }
    SECTCRE = re.compile(
        r'\['                                 # [
        r'(?P<header>[^]]+)'                  # very permissive!
        r'\]'                                 # ]
        );
    OPTCRE = re.compile(
        r'(?P<option>[^:=\s][^:=]*)'          # very permissive!
        r'\s*(?P<vi>[:=])\s*'                 # any number of space/tab,
                                              # followed by separator
                                              # (either : or =), followed
                                              # by any # space/tab
        r'(?P<value>.*)$'                     # everything up to eol
        );
    OPTCRE_NV = re.compile(
        r'(?P<option>[^:=\s][^:=]*)'          # very permissive!
        r'\s*(?:'                             # any number of space/tab,
        r'(?P<vi>[:=])\s*'                    # optionally followed by
                                              # separator (either : or
                                              # =), followed by any #
                                              # space/tab
        r'(?P<value>.*))?$'                   # everything up to eol
        );

    function _read( fp, fpname){
        """Parse a sectioned setup file.

        The sections in setup file contains a title line at the top,
        indicated by a name in square brackets (`[]'), plus key/value
        options lines, indicated by `name: value' format lines.
        Continuations are represented by an embedded newline then
        leading whitespace.  Blank lines, lines beginning with a '#',
        and just about everything else are ignored.
        """;
        cursect = nil;                        # None, or a dictionary
        optname = nil;
        lineno = 0;
        e = nil;                              # None, or an exception
        while true{
            line = fp.readline();
            if not line{
                break;
            } lineno = lineno + 1;
            # comment or blank line?
            if line.strip() == '' or line[0] in '#;'{
                continue;
            } if line.split(nil, 1)[0].lower() == 'rem' and line[0] in "rR"{
                # no leading whitespace
                continue;
            # continuation line?
            }
            if line[0].isspace() and cursect is not nil and optname{
                value = line.strip();
                if value{
                    cursect[optname].append(value);
            # a section header or option header?
            }
            } else{
                # is it a section header?
                mo = this.SECTCRE.match(line);
                if mo{
                    sectname = mo.group('header');
                    if sectname in this._sections{
                        cursect = this._sections[sectname];
                    } elif sectname == DEFAULTSECT{
                        cursect = this._defaults;
                    } else{
                        cursect = this._dict();
                        cursect['__name__'] = sectname;
                        this._sections[sectname] = cursect;
                    # So sections can't start with a continuation line
                    }
                    optname = nil;
                # no section header in the file?
                }
                elif cursect is nil{
                    raise MissingSectionHeaderError(fpname, lineno, line);
                # an option line?
                }
                else{
                    mo = this._optcre.match(line);
                    if mo{
                        optname, vi, optval = mo.group('option', 'vi', 'value');
                        optname = this.optionxform(optname.rstrip());
                        # This check is fine because the OPTCRE cannot
                        # match if it would set optval to None
                        if optval is not nil{
                            if vi in ('=', ':') and ';' in optval{
                                # ';' is a comment delimiter only if it follows
                                # a spacing character
                                pos = optval.find(';');
                                if pos != -1 and optval[pos-1].isspace(){
                                    optval = optval[:pos];
                            } } optval = optval.strip();
                            # allow empty values
                            if optval == '""'{
                                optval = '';
                            } cursect[optname] = [optval];
                        } else{
                            # valueless option handling
                            cursect[optname] = optval;
                    } } else{
                        # a non-fatal parsing error occurred.  set up the
                        # exception but keep going. the exception will be
                        # raised at the end of the file and will contain a
                        # list of all bogus lines
                        if not e{
                            e = ParsingError(fpname);
                        } e.append(lineno, repr(line));
        # if any parsing errors occurred, raise an exception
        }
        } } } if e{
            raise e;

        # join the multi-line values collected while reading
        }
        all_sections = [this._defaults];
        all_sections.extend(this._sections.values());
        for options in all_sections{
            for name, val in options.items(){
                if isinstance(val, list){
                    options[name] = '\n'.join(val);

}
} } } } import UserDict as _UserDict;

class _Chainmap(_UserDict.DictMixin){
    """Combine multiple mappings for successive lookups.

    For example, to emulate Python's normal lookup sequence:

        import __builtin__
        pylookup = _Chainmap(locals(), globals(), vars(__builtin__))
    """;

    function __init__( *maps){
        this._maps = maps;

    }
    function __getitem__( key){
        for mapping in this._maps{
            try{
                return mapping[key];
            } except KeyError{
                pass;
        } } raise KeyError(key);

    }
    function keys(){
        result = [];
        seen = set();
        for mapping in this._maps{
            for key in mapping{
                if key not in seen{
                    result.append(key);
                    seen.add(key);
        } } } return result;

}
} class ConfigParser(RawConfigParser){

    function get( section, option, raw=false, vars=nil){
        """Get an option value for a given section.

        If `vars' is provided, it must be a dictionary. The option is looked up
        in `vars' (if provided), `section', and in `defaults' in that order.

        All % interpolations are expanded in the return values, unless the
        optional argument `raw' is true. Values for interpolation keys are
        looked up in the same manner as the option.

        The section DEFAULT is special.
        """;
        sectiondict = {};
        try{
            sectiondict = this._sections[section];
        } except KeyError{
            if section != DEFAULTSECT{
                raise NoSectionError(section);
        # Update with the entry specific variables
        }
        } vardict = {};
        if vars{
            for key, value in vars.items(){
                vardict[this.optionxform(key)] = value;
        } } d = _Chainmap(vardict, sectiondict, this._defaults);
        option = this.optionxform(option);
        try{
            value = d[option];
        } except KeyError{
            raise NoOptionError(option, section);

        }
        if raw or value is nil{
            return value;
        } else{
            return this._interpolate(section, option, value, d);

    }
    } function items( section, raw=false, vars=nil){
        """Return a list of tuples with (name, value) for each option
        in the section.

        All % interpolations are expanded in the return values, based on the
        defaults passed into the constructor, unless the optional argument
        `raw' is true.  Additional substitutions may be provided using the
        `vars' argument, which must be a dictionary whose contents overrides
        any pre-existing defaults.

        The section DEFAULT is special.
        """;
        d = this._defaults.copy();
        try{
            d.update(this._sections[section]);
        } except KeyError{
            if section != DEFAULTSECT{
                raise NoSectionError(section);
        # Update with the entry specific variables
        }
        } if vars{
            for key, value in vars.items(){
                d[this.optionxform(key)] = value;
        } } options = d.keys();
        if "__name__" in options{
            options.remove("__name__");
        } if raw{
            return [(option, d[option])
                    for option in options];
        } else{
            return [(option, this._interpolate(section, option, d[option], d))
                    for option in options];

    }
    } function _interpolate( section, option, rawval, vars){
        # do the string interpolation
        value = rawval;
        depth = MAX_INTERPOLATION_DEPTH;
        while depth{                    # Loop through this until it's done
            depth -= 1;
            if value and "%(" in value{
                value = this._KEYCRE.sub(this._interpolation_replace, value);
                try{
                    value = value % vars;
                } except KeyError, e{
                    raise InterpolationMissingOptionError(
                        option, section, rawval, e.args[0]);
            } } else{
                break;
        } } if value and "%(" in value{
            raise InterpolationDepthError(option, section, rawval);
        } return value;

    }
    _KEYCRE = re.compile(r"%\(([^)]*)\)s|.");

    function _interpolation_replace( match){
        s = match.group(1);
        if s is nil{
            return match.group();
        } else{
            return "%%(%s)s" % this.optionxform(s);


}
} } class SafeConfigParser(ConfigParser){

    function _interpolate( section, option, rawval, vars){
        # do the string interpolation
        L = [];
        this._interpolate_some(option, L, rawval, section, vars, 1);
        return ''.join(L);

    }
    _interpvar_re = re.compile(r"%\(([^)]+)\)s");

    function _interpolate_some( option, accum, rest, section, map, depth){
        if depth > MAX_INTERPOLATION_DEPTH{
            raise InterpolationDepthError(option, section, rest);
        } while rest{
            p = rest.find("%");
            if p < 0{
                accum.append(rest);
                return;
            } if p > 0{
                accum.append(rest[:p]);
                rest = rest[p:];
            # p is no longer used
            }
            c = rest[1:2];
            if c == "%"{
                accum.append("%");
                rest = rest[2:];
            } elif c == "("{
                m = this._interpvar_re.match(rest);
                if m is nil{
                    raise InterpolationSyntaxError(option, section,
                        "bad interpolation variable reference %r" % rest);
                } var = this.optionxform(m.group(1));
                rest = rest[m.end():];
                try{
                    v = map[var];
                } except KeyError{
                    raise InterpolationMissingOptionError(
                        option, section, rest, var);
                } if "%" in v{
                    this._interpolate_some(option, accum, v,
                                           section, map, depth + 1);
                } else{
                    accum.append(v);
            } } else{
                raise InterpolationSyntaxError(
                    option, section,
                    "'%%' must be followed by '%%' or '(', found: %r" % (rest,));

    }
    } } function set( section, option, value=nil){
        """Set an option.  Extend ConfigParser.set: check for string values.""";
        # The only legal non-string value if we allow valueless
        # options is None, so we need to check if the value is a
        # string if:
        # - we do not allow valueless options, or
        # - we allow valueless options but the value is not None
        if this._optcre is this.OPTCRE or value{
            if not isinstance(value, basestring){
                raise TypeError("option values must be strings");
        } } if value is not nil{
            # check for bad percent signs:
            # first, replace all "good" interpolations
            tmp_value = value.replace('%%', '');
            tmp_value = this._interpvar_re.sub('', tmp_value);
            # then, check if there's a lone percent sign left
            if '%' in tmp_value{
                raise ValueError("invalid interpolation syntax in %r at "
                                "position %d" % (value, tmp_value.find('%')));
        } } ConfigParser.set(this, section, option, value);

}
}