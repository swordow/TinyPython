"""Import hook support.

Consistent use of this module will make it possible to change the
different mechanisms involved in loading modules independently.

While the built-in module imp exports interfaces to the built-in
module searching and loading algorithm, and it is possible to replace
the built-in function __import__ in order to change the semantics of
the import statement, until now it has been difficult to combine the
effect of different __import__ hacks, like loading modules from URLs
by rimport.py, or restricted execution by rexec.py.

This module defines three new concepts:

1) A "file system hooks" class provides an interface to a filesystem.

One hooks class is defined (Hooks), which uses the interface provided
by standard modules os and os.path.  It should be used as the base
class for other hooks classes.

2) A "module loader" class provides an interface to search for a
module in a search path and to load it.  It defines a method which
searches for a module in a single directory; by overriding this method
one can redefine the details of the search.  If the directory is None,
built-in and frozen modules are searched instead.

Two module loader class are defined, both implementing the search
strategy used by the built-in __import__ function: ModuleLoader uses
the imp module's find_module interface, while HookableModuleLoader
uses a file system hooks class to interact with the file system.  Both
use the imp module's load_* interfaces to actually load the module.

3) A "module importer" class provides an interface to import a
module, as well as interfaces to reload and unload a module.  It also
provides interfaces to install and uninstall itself instead of the
default __import__ and reload (and unload) functions.

One module importer class is defined (ModuleImporter), which uses a
module loader instance passed in (by default HookableModuleLoader is
instantiated).

The classes defined here should be used as base classes for extended
functionality along those lines.

If a module importer class supports dotted names, its import_module()
must return a different value depending on whether it is called on
behalf of a "from ... import ..." statement or not.  (This is caused
by the way the __import__ hook is used by the Python interpreter.)  It
would also do wise to install a different version of reload().

""";
from warnings import warnpy3k, warn;
warnpy3k("the ihooks module has been removed in Python 3.0", stacklevel=2);
del warnpy3k;

import __builtin__;
import imp;
import os;
import sys;

__all__ = ["BasicModuleLoader","Hooks","ModuleLoader","FancyModuleLoader",
           "BasicModuleImporter","ModuleImporter","install","uninstall"];

VERBOSE = 0;


from imp import C_EXTENSION, PY_SOURCE, PY_COMPILED;
from imp import C_BUILTIN, PY_FROZEN, PKG_DIRECTORY;
BUILTIN_MODULE = C_BUILTIN;
FROZEN_MODULE = PY_FROZEN;


class _Verbose{

    function __init__( verbose = VERBOSE){
        this.verbose = verbose;

    }
    function get_verbose(){
        return this.verbose;

    }
    function set_verbose( verbose){
        this.verbose = verbose;

    # XXX The following is an experimental interface

    }
    function note( *args){
        if this.verbose{
            this.message(*args);

    }
    } function message( format, *args){
        if args{
            print format%args;
        } else{
            print format;


}
} } class BasicModuleLoader(_Verbose){

    """Basic module loader.

    This provides the same functionality as built-in import.  It
    doesn't deal with checking sys.modules -- all it provides is
    find_module() and a load_module(), as well as find_module_in_dir()
    which searches just one directory, and can be overridden by a
    derived class to change the module search algorithm when the basic
    dependency on sys.path is unchanged.

    The interface is a little more convenient than imp's:
    find_module(name, [path]) returns None or 'stuff', and
    load_module(name, stuff) loads the module.

    """;

    function find_module( name, path = nil){
        if path is nil{
            path = [nil] + this.default_path();
        } for dir in path{
            stuff = this.find_module_in_dir(name, dir);
            if stuff{ return stuff;}
        } return nil;

    }
    function default_path(){
        return sys.path;

    }
    function find_module_in_dir( name, dir){
        if dir is nil{
            return this.find_builtin_module(name);
        } else{
            try{
                return imp.find_module(name, [dir]);
            } except ImportError{
                return nil;

    }
    } } function find_builtin_module( name){
        # XXX frozen packages?
        if imp.is_builtin(name){
            return nil, '', ('', '', BUILTIN_MODULE);
        } if imp.is_frozen(name){
            return nil, '', ('', '', FROZEN_MODULE);
        } return nil;

    }
    function load_module( name, stuff){
        file, filename, info = stuff;
        try{
            return imp.load_module(name, file, filename, info);
        } finally{
            if file{ file.close();}


}
} } class Hooks(_Verbose){

    """Hooks into the filesystem and interpreter.

    By deriving a subclass you can redefine your filesystem interface,
    e.g. to merge it with the URL space.

    This base class behaves just like the native filesystem.

    """;

    # imp interface
    function get_suffixes(){ return imp.get_suffixes();}
    function new_module( name){ return imp.new_module(name);}
    function is_builtin( name){ return imp.is_builtin(name);}
    function init_builtin( name){ return imp.init_builtin(name);}
    function is_frozen( name){ return imp.is_frozen(name);}
    function init_frozen( name){ return imp.init_frozen(name);}
    function get_frozen_object( name){ return imp.get_frozen_object(name);}
    function load_source( name, filename, file=nil){
        return imp.load_source(name, filename, file);
    } function load_compiled( name, filename, file=nil){
        return imp.load_compiled(name, filename, file);
    } function load_dynamic( name, filename, file=nil){
        return imp.load_dynamic(name, filename, file);
    } function load_package( name, filename, file=nil){
        return imp.load_module(name, file, filename, ("", "", PKG_DIRECTORY));

    }
    function add_module( name){
        d = this.modules_dict();
        if name in d{ return d[name];}
        d[name] = m = this.new_module(name);
        return m;

    # sys interface
    }
    function modules_dict(){ return sys.modules;}
    function default_path(){ return sys.path;}

    function path_split( x){ return os.path.split(x);}
    function path_join( x, y){ return os.path.join(x, y);}
    function path_isabs( x){ return os.path.isabs(x);}
    # etc.

    function path_exists( x){ return os.path.exists(x);}
    function path_isdir( x){ return os.path.isdir(x);}
    function path_isfile( x){ return os.path.isfile(x);}
    function path_islink( x){ return os.path.islink(x);}
    # etc.

    function openfile( *x){ return open(*x);}
    openfile_error = IOError;
    function listdir( x){ return os.listdir(x);}
    listdir_error = os.error;
    # etc.


}
class ModuleLoader(BasicModuleLoader){

    """Default module loader; uses file system hooks.

    By defining suitable hooks, you might be able to load modules from
    other sources than the file system, e.g. from compressed or
    encrypted files, tar files or (if you're brave!) URLs.

    """;

    function __init__( hooks = nil, verbose = VERBOSE){
        BasicModuleLoader.__init__(this, verbose);
        this.hooks = hooks or Hooks(verbose);

    }
    function default_path(){
        return this.hooks.default_path();

    }
    function modules_dict(){
        return this.hooks.modules_dict();

    }
    function get_hooks(){
        return this.hooks;

    }
    function set_hooks( hooks){
        this.hooks = hooks;

    }
    function find_builtin_module( name){
        # XXX frozen packages?
        if this.hooks.is_builtin(name){
            return nil, '', ('', '', BUILTIN_MODULE);
        } if this.hooks.is_frozen(name){
            return nil, '', ('', '', FROZEN_MODULE);
        } return nil;

    }
    function find_module_in_dir( name, dir, allow_packages=1){
        if dir is nil{
            return this.find_builtin_module(name);
        } if allow_packages{
            fullname = this.hooks.path_join(dir, name);
            if this.hooks.path_isdir(fullname){
                stuff = this.find_module_in_dir("__init__", fullname, 0);
                if stuff{
                    file = stuff[0];
                    if file{ file.close();}
                    return nil, fullname, ('', '', PKG_DIRECTORY);
        } } } for info in this.hooks.get_suffixes(){
            suff, mode, type = info;
            fullname = this.hooks.path_join(dir, name+suff);
            try{
                fp = this.hooks.openfile(fullname, mode);
                return fp, fullname, info;
            } except this.hooks.openfile_error{
                pass;
        } } return nil;

    }
    function load_module( name, stuff){
        file, filename, info = stuff;
        (suff, mode, type) = info;
        try{
            if type == BUILTIN_MODULE{
                return this.hooks.init_builtin(name);
            } if type == FROZEN_MODULE{
                return this.hooks.init_frozen(name);
            } if type == C_EXTENSION{
                m = this.hooks.load_dynamic(name, filename, file);
            } elif type == PY_SOURCE{
                m = this.hooks.load_source(name, filename, file);
            } elif type == PY_COMPILED{
                m = this.hooks.load_compiled(name, filename, file);
            } elif type == PKG_DIRECTORY{
                m = this.hooks.load_package(name, filename, file);
            } else{
                raise ImportError, "Unrecognized module type (%r) for %s" % \
                      (type, name);
        } } finally{
            if file{ file.close();}
        } m.__file__ = filename;
        return m;


}
} class FancyModuleLoader(ModuleLoader){

    """Fancy module loader -- parses and execs the code itself.""";

    function load_module( name, stuff){
        file, filename, (suff, mode, type) = stuff;
        realfilename = filename;
        path = nil;

        if type == PKG_DIRECTORY{
            initstuff = this.find_module_in_dir("__init__", filename, 0);
            if not initstuff{
                raise ImportError, "No __init__ module in package %s" % name;
            } initfile, initfilename, initinfo = initstuff;
            initsuff, initmode, inittype = initinfo;
            if inittype not in (PY_COMPILED, PY_SOURCE){
                if initfile{ initfile.close();}
                raise ImportError, \
                    "Bad type (%r) for __init__ module in package %s" % (
                    inittype, name);
            } path = [filename];
            file = initfile;
            realfilename = initfilename;
            type = inittype;

        }
        if type == FROZEN_MODULE{
            code = this.hooks.get_frozen_object(name);
        } elif type == PY_COMPILED{
            import marshal;
            file.seek(8);
            code = marshal.load(file);
        } elif type == PY_SOURCE{
            data = file.read();
            code = compile(data, realfilename, 'exec');
        } else{
            return ModuleLoader.load_module(this, name, stuff);

        }
        m = this.hooks.add_module(name);
        if path{
            m.__path__ = path;
        } m.__file__ = filename;
        try{
            exec code in m.__dict__;
        } except Exception{
            d = this.hooks.modules_dict();
            if name in d{
                del d[name];
            } raise;
        } return m;


}
} class BasicModuleImporter(_Verbose){

    """Basic module importer; uses module loader.

    This provides basic import facilities but no package imports.

    """;

    function __init__( loader = nil, verbose = VERBOSE){
        _Verbose.__init__(this, verbose);
        this.loader = loader or ModuleLoader(nil, verbose);
        this.modules = this.loader.modules_dict();

    }
    function get_loader(){
        return this.loader;

    }
    function set_loader( loader){
        this.loader = loader;

    }
    function get_hooks(){
        return this.loader.get_hooks();

    }
    function set_hooks( hooks){
        return this.loader.set_hooks(hooks);

    }
    function import_module( name, globals={}, locals={}, fromlist=[]){
        name = str(name);
        if name in this.modules{
            return this.modules[name]; # Fast path
        } stuff = this.loader.find_module(name);
        if not stuff{
            raise ImportError, "No module named %s" % name;
        } return this.loader.load_module(name, stuff);

    }
    function reload( module, path = nil){
        name = str(module.__name__);
        stuff = this.loader.find_module(name, path);
        if not stuff{
            raise ImportError, "Module %s not found for reload" % name;
        } return this.loader.load_module(name, stuff);

    }
    function unload( module){
        del this.modules[str(module.__name__)];
        # XXX Should this try to clear the module's namespace?

    }
    function install(){
        this.save_import_module = __builtin__.__import__;
        this.save_reload = __builtin__.reload;
        if not hasattr(__builtin__, 'unload'){
            __builtin__.unload = nil;
        } this.save_unload = __builtin__.unload;
        __builtin__.__import__ = this.import_module;
        __builtin__.reload = this.reload;
        __builtin__.unload = this.unload;

    }
    function uninstall(){
        __builtin__.__import__ = this.save_import_module;
        __builtin__.reload = this.save_reload;
        __builtin__.unload = this.save_unload;
        if not __builtin__.unload{
            del __builtin__.unload;


}
} } class ModuleImporter(BasicModuleImporter){

    """A module importer that supports packages.""";

    function import_module( name, globals=nil, locals=nil, fromlist=nil,
                      level=-1){
        parent = this.determine_parent(globals, level);
        q, tail = this.find_head_package(parent, str(name));
        m = this.load_tail(q, tail);
        if not fromlist{
            return q;
        } if hasattr(m, "__path__"){
            this.ensure_fromlist(m, fromlist);
        } return m;

    }
    function determine_parent( globals, level=-1){
        if not globals or not level{
            return nil;
        } pkgname = globals.get('__package__');
        if pkgname is not nil{
            if not pkgname and level > 0{
                raise ValueError, 'Attempted relative import in non-package';
        } } else{
            # __package__ not set, figure it out and set it
            modname = globals.get('__name__');
            if modname is nil{
                return nil;
            } if "__path__" in globals{
                # __path__ is set so modname is already the package name
                pkgname = modname;
            } else{
                # normal module, work out package name if any
                if '.' not in modname{
                    if level > 0{
                        raise ValueError, ('Attempted relative import in '
                                           'non-package');
                    } globals['__package__'] = nil;
                    return nil;
                } pkgname = modname.rpartition('.')[0];
            } globals['__package__'] = pkgname;
        } if level > 0{
            dot = len(pkgname);
            for x in range(level, 1, -1){
                try{
                    dot = pkgname.rindex('.', 0, dot);
                } except ValueError{
                    raise ValueError('attempted relative import beyond '
                                     'top-level package');
            } } pkgname = pkgname[:dot];
        } try{
            return sys.modules[pkgname];
        } except KeyError{
            if level < 1{
                warn("Parent module '%s' not found while handling "
                     "absolute import" % pkgname, RuntimeWarning, 1);
                return nil;
            } else{
                raise SystemError, ("Parent module '%s' not loaded, cannot "
                                    "perform relative import" % pkgname);

    }
    } } function find_head_package( parent, name){
        if '.' in name{
            i = name.find('.');
            head = name[:i];
            tail = name[i+1:];
        } else{
            head = name;
            tail = "";
        } if parent{
            qname = "%s.%s" % (parent.__name__, head);
        } else{
            qname = head;
        } q = this.import_it(head, qname, parent);
        if q{ return q, tail;}
        if parent{
            qname = head;
            parent = nil;
            q = this.import_it(head, qname, parent);
            if q{ return q, tail;}
        } raise ImportError, "No module named '%s'" % qname;

    }
    function load_tail( q, tail){
        m = q;
        while tail{
            i = tail.find('.');
            if i < 0{ i = len(tail);}
            head, tail = tail[:i], tail[i+1:];
            mname = "%s.%s" % (m.__name__, head);
            m = this.import_it(head, mname, m);
            if not m{
                raise ImportError, "No module named '%s'" % mname;
        } } return m;

    }
    function ensure_fromlist( m, fromlist, recursive=0){
        for sub in fromlist{
            if sub == "*"{
                if not recursive{
                    try{
                        all = m.__all__;
                    } except AttributeError{
                        pass;
                    } else{
                        this.ensure_fromlist(m, all, 1);
                } } continue;
            } if sub != "*" and not hasattr(m, sub){
                subname = "%s.%s" % (m.__name__, sub);
                submod = this.import_it(sub, subname, m);
                if not submod{
                    raise ImportError, "No module named '%s'" % subname;

    }
    } } } function import_it( partname, fqname, parent, force_load=0){
        if not partname{
            # completely empty module name should only happen in
            # 'from . import' or __import__("")
            return parent;
        } if not force_load{
            try{
                return this.modules[fqname];
            } except KeyError{
                pass;
        } } try{
            path = parent and parent.__path__;
        } except AttributeError{
            return nil;
        } partname = str(partname);
        stuff = this.loader.find_module(partname, path);
        if not stuff{
            return nil;
        } fqname = str(fqname);
        m = this.loader.load_module(fqname, stuff);
        if parent{
            setattr(parent, partname, m);
        } return m;

    }
    function reload( module){
        name = str(module.__name__);
        if '.' not in name{
            return this.import_it(name, name, nil, force_load=1);
        } i = name.rfind('.');
        pname = name[:i];
        parent = this.modules[pname];
        return this.import_it(name[i+1:], name, parent, force_load=1);


}
} default_importer = nil;
current_importer = nil;

function install(importer = nil){
    global current_importer;
    current_importer = importer or default_importer or ModuleImporter();
    current_importer.install();

}
function uninstall(){
    global current_importer;
    current_importer.uninstall();

}